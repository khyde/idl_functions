; $ID:	PROJECT_MAKE_COMPOSITE.PRO,	2023-09-21-13,	USER-KJWH	$
  PRO PROJECT_MAKE_COMPOSITE, VERSTR, PRODS=PRODS, TYPES=TYPES, MAPP=MAPP, $
           YEARS=YEARS, MONTHS=MONTHS, WEEKS=WEEKS, DAYS=DAYS, YEAR_COMBO=YEAR_COMBO, DATERANGE=DATERANGE, CLIMATOLOGY=CLIMATOLOGY,$
           BUFFER=BUFFER, CURRENT=CURRENT, DIR_OUT=DIR_OUT, $
           SPACE=SPACE, LEFT=LEFT, RIGHT=RIGHT, TOP=TOP, BOTTOM=BOTTOM, NCOLS=NCOLS, NROWS=NROWS, XDIM=XDIM, YDIM=YDIM, $
           RESIZE=RESIZE, _REF_EXTRA=EXTRA

;+
; NAME:
;   PROJECT_MAKE_COMPOSITE
;
; PURPOSE:
;   $PURPOSE$
;
; CATEGORY:
;   PROJECT_FUNCTIONS
;
; CALLING SEQUENCE:
;   Result = PROJECT_MAKE_COMPOSITE($Parameter1$, $Parameter2$, $Keyword=Keyword$, ...)
;
; REQUIRED INPUTS:
;   Parm1.......... Describe the positional input parameters here. 
;
; OPTIONAL INPUTS:
;   Parm2.......... Describe optional inputs here. If none, delete this section.
;
; KEYWORD PARAMETERS:
;   KEY1........... Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
; OUTPUTS:
;   OUTPUT.......... Describe the output of this program or function
;
; OPTIONAL OUTPUTS:
;   None
;
; COMMON BLOCKS: 
;   None
;
; SIDE EFFECTS:  
;   None
;
; RESTRICTIONS:  
;   None
;
; EXAMPLE:
; 
;
; NOTES:
;   $Citations or any other useful notes$
;   
; COPYRIGHT: 
; Copyright (C) 2023, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; AUTHOR:
;   This program was written on July 31, 2023 by Kimberly J. W. Hyde, Northeast Fisheries Science Center | NOAA Fisheries | U.S. Department of Commerce, 28 Tarzwell Dr, Narragansett, RI 02882
;    
; MODIFICATION HISTORY:
;   Jul 31, 2023 - KJWH: Initial code written
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'PROJECT_MAKE_COMPOSITE'
  COMPILE_OPT IDL2
  SL = PATH_SEP()
  
  IF ~N_ELEMENTS(DIR_OUT) THEN DIROUT=VERSTR.DIRS.DIR_COMPOSITES ELSE DIROUT = DIR_OUT 
  DIR_TEST, DIROUT

  IF ~N_ELEMENTS(MAPP) THEN MPS = VERSTR.INFO.MAP_OUT ELSE MPS = MAPP
  IF ~N_ELEMENTS(CLIMATOLOGY) THEN CLIM = 'DEFAULT' ELSE CLIM = []
  
  FOR M=0, N_ELEMENTS(MPS)-1 DO BEGIN
    MP = MPS[M]
    IF N_ELEMENTS(MPS) GT 1 THEN ODIR = DIROUT + MP + SL ELSE ODIR =DIROUT & DIR_TEST, ODIR
    MR = MAPS_READ(MP)
    MR_DIMS  = FLOAT(STRSPLIT(MR.IMG_DIMS,';',/EXTRACT))
    XX = MR_DIMS[0]/MR.PX & YY = MR_DIMS[1]/MR.PY
    IF ~N_ELEMENTS(RESIZE) THEN RESZ = 0.85 ELSE RESZ = RESIZE
   
    IF ~N_ELEMENTS(DATERANGE) THEN DTR = GET_DATERANGE(VERSTR.INFO.DATERANGE) ELSE DTR = GET_DATERANGE(DATERANGE)
    YRS = YEAR_RANGE(DTR[0],DTR[1],/STRING)
    YRS = YRS[UNIQ(YRS)]
    IF N_ELEMENTS(YEARS) GT 0 THEN YRS = YEARS
          
    IF ~N_ELEMENTS(PRODS) THEN PRDS = VERSTR.INFO.PNG_PRODS ELSE PRDS = PRODS
    IF ~N_ELEMENTS(TYPES) THEN TYPS = ['STACKED_STATS','STACKED_ANOMS']     ELSE TYPS = TYPES
    NFILES = N_ELEMENTS(PRDS)*N_ELEMENTS(TYPS)
      
    PERS = []
    CASE 1 OF
      KEYWORD_SET(WEEKS): BEGIN
        PERCODE = 'W'
        IF N_ELEMENTS(WEEKS) EQ 1 AND WEEKS[0] EQ 1 THEN WKS = ADD_STR_ZERO(INDGEN(52)+1) ELSE WKS = WEEKS
        IF KEYWORD_SET(YEAR_COMBO) THEN PERS = [PERS,'WW_'+YRS[0] +WKS + '_' + YRS[-1] + WKS] ELSE FOR Y=0, N_ELEMENTS(YRS)-1 DO PERS = [PERS,'W_' + YRS[Y] + WKS]
        PERDATES = WKS
      END
      KEYWORD_SET(DAYS): BEGIN
        PERCODE = 'D'
        IF N_ELEMENTS(DAYS) EQ 1 AND DAYS[0] EQ 1 THEN DYS = CREATE_DATE(DTR[0],DTR[1]) ELSE DYS = DAYS
        PERS = [PERS,'D_' + STRMID(DYS,0,8)]
        PERDATES = DYS
      END
      KEYWORD_SET(MONTHS): BEGIN
        PERCODE = 'M'
        IF N_ELEMENTS(MONTHS) EQ 1 AND MONTHS[0] EQ 1 THEN MTHS = MONTH_RANGE(DATE_2MONTH(DTR[0]),DATE_2MONTH(DTR[1]),/STRING) ELSE MTHS = MONTHS
        FOR Y=0, N_ELEMENTS(YRS)-1 DO PERS = [PERS,'M_' + YRS[Y] + MTHS]
        PERDATES = MTHS
      END
    ENDCASE
;    PERS = DATE_SELECT(PERS,DTR)
  
    FOR K=0, N_ELEMENTS(PERS)-1 DO BEGIN
      COUNTER = 0
      APER = PERS[K]
      UPDATE_PERIOD:
      PER = PERIOD_2STRUCT(APER)
      IF DATE_2JD(PER.DATE_START) GT DATE_NOW(/JD) THEN CONTINUE
      
      IF DATE_2JD(PER.DATE_END) GT JD_ADD(DATE_NOW(/JD),5,/DAY) AND KEYWORD_SET(YEAR_COMBO) THEN BEGIN
        COUNTER = COUNTER + 1
        IF COUNTER GT N_ELEMENTS(YEARS) THEN MESSAGE, 'ERROR: Double check periods and input years'
        APER = REPLACE(APER,'_'+PER.YEAR_END,'_'+NUM2STR(PER.YEAR_END-1))
        IF APER NE PERS[K] THEN GOTO, UPDATE_PERIOD ELSE MESSAGE, 'ERROR: Check the new period name'
      ENDIF
  
      DR = [PER.DATE_START,PER.DATE_END]
      PYRS = YEAR_RANGE(DR[0],DR[1],/STRING)
      TPS = TYPS
      CASE PER.PERIOD_CODE OF
        'M': TXT = MONTH_NAMES(PER.MONTH_START)
        'W': TXT = 'Week ' + STRMID(PER.PERIOD,6,2) + ': ' + STRMID(PER.DATE_START,0,8) + ' - ' + STRMID(PER.DATE_END,0,8)
        'WW': TXT = 'Week ' + STRMID(PER.PERIOD,7,2) + ': ' + MONTH_NAMES(STRMID(PER.DATE_START,4,2)) + ' ' + STRMID(PER.DATE_START,6,2) + ' - ' + $
                                                              MONTH_NAMES(STRMID(PER.DATE_END,4,2)) + ' ' + STRMID(PER.DATE_END,6,2) + $
                                                              '!C ' + STRMID(PER.DATE_START,0,4) + ' - ' + STRMID(PER.DATE_END,0,4)
        'D': BEGIN & TXT = (DATE_PARSE(PER.DATE_START)).DASH_DATE & TPS = 'STACKED_SAVE' & END
      ENDCASE 
      
      IF KEYWORD_SET(YEAR_COMBO) AND N_ELEMENTS(PRDS) EQ 1 THEN PLOTPRDS = REPLICATE(PRDS, N_ELEMENTS(PYRS)) ELSE PLOTPRDS = PRDS
    
      ; ===> SET UP PLOT SPACING
      IF ~N_ELEMENTS(BUFFER) THEN BUFFER = 1 ; Do plotting in background
      IF ~N_ELEMENTS(SPACE)  THEN SPACE  = 1
      IF ~N_ELEMENTS(LEFT)   THEN LEFT   = 1
      IF ~N_ELEMENTS(RIGHT)  THEN RIGHT  = 1
      IF ~N_ELEMENTS(TOP)    THEN TOP    = 10
      IF ~N_ELEMENTS(BOTTOM) THEN IF ~KEYWORD_SET(NO_COLORBAR) THEN BOTTOM = 8 ELSE BOTTOM = SPACE * 3
      IF ~N_ELEMENTS(NCOLS)  THEN IF N_ELEMENTS(PLOTPRDS) EQ 1 THEN NCOL=2 ELSE NCOL  = N_ELEMENTS(PLOTPRDS) ELSE NCOL = NCOLS
      IF ~N_ELEMENTS(NROWS)  THEN IF N_ELEMENTS(PLOTPRDS) EQ 1 THEN NROW=1 ELSE NROW  = N_ELEMENTS(TPS)      ELSE NROW = NROWS
      IF ~N_ELEMENTS(XDIM)   THEN XDIM   = MR.PX/NFILES ;& IF XDIM LT 300 THEN XDIM = XDIM*2
      IF ~N_ELEMENTS(YDIM)   THEN YDIM   = MR.PY/NFILES ;& IF YDIM LT 300 THEN YDIM = YDIM*2
  
      XNSPACE = NCOL-1 & YNSPACE = NROW-1
      WIDTH   = LEFT   + NCOL*XDIM + XNSPACE*SPACE + RIGHT
      HEIGHT  = BOTTOM + NROW*YDIM + YNSPACE*SPACE + TOP
  
      FILES = [] & TFILES = []
      FOR N=0, N_ELEMENTS(PRDS)-1 DO BEGIN
        PR = PRODS_READ(PRDS[N])
        PSTR = VERSTR.PROD_INFO.(WHERE(TAG_NAMES(VERSTR.PROD_INFO) EQ PR.PROD))
        DSET = PSTR.DATASET
        FOR T=0, N_ELEMENTS(TPS)-1 DO BEGIN
          ATYPE = TPS[T]
          FILE = GET_FILES(DSET,PRODS=PSTR.PROD,PERIOD=PER.PERIOD_CODE,FILE_TYPE=ATYPE, DATERANGE=DR, CLIMATOLOGY=CLIM)
          IF FILE EQ [] THEN FILE = GET_FILES(PSTR.TEMP_DATASET,PRODS=PSTR.TEMP_PROD,PERIOD=PER.PERIOD_CODE,FILE_TYPE=ATYPE, DATERANGE=DR)
          IF FILE EQ [] THEN FILE = ''
          IF WHERE_MATCH(FILES,FILE,COUNT) EQ [] THEN FILES = [FILES,FILE]
        ENDFOR ; PRODS
      ENDFOR ; TYPES
      FILES = FILES[UNIQ(FILES)]
  
      PNGFILE = ODIR + PER.PERIOD + '-' + MP + '-' + STRJOIN(PRDS[UNIQ(PRDS)],'_') + '-' + STRJOIN(TPS,'_') + '-COMPOSITE' +'.PNG'
      PNGFILE = REPLACE(PNGFILE,'STACKED_','')
      IF ~FILE_MAKE(FILES,PNGFILE,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE) THEN CONTINUE
      OK = WHERE(FILES NE '', COUNT_FILES)
      IF COUNT_FILES EQ 0 THEN CONTINUE
    
      COUNTER = 0
      FOR N=0, N_ELEMENTS(TPS)-1 DO BEGIN
        ATYPE = TPS[N]
        FOR T=0, N_ELEMENTS(PRDS)-1 DO BEGIN
          PR = PRODS_READ(PRDS[T])
          PSTR = VERSTR.PROD_INFO.(WHERE(TAG_NAMES(VERSTR.PROD_INFO) EQ PR.PROD))
          DSET = PSTR.DATASET
          IF STRUCT_HAS(PSTR,'TEMP_DATASET') THEN TSET = PSTR.TEMP_DATASET ELSE TSET = []

          IF PR.IN_PROD NE PR.PROD THEN PROD_SCALE = PR.IN_PROD ELSE PROD_SCALE = [];PSTR.PROD_SCALE
          ;     IF ATYPE EQ 'ANOMS' THEN PROD_SCALE = PSTR.ANOM_SCALE
  
          
          FOR Y=0, N_ELEMENTS(PYRS)-1 DO BEGIN
            AYEAR = PYRS[Y]
            IF KEYWORD_SET(YEAR_COMBO) THEN YPER = PERCODE + '_' + AYEAR + PERDATES[K] ELSE YPER = APER
            YDP = PERIOD_2STRUCT(YPER)
            YDR = [YDP.DATE_START,YDP.DATE_END]
           
            DR = [PER.DATE_START,PER.DATE_END]   
            IF NROW EQ 1 THEN BEGIN ; For a 2x1 composite
              C = COUNTER MOD NCOL           ; Number of columns is associated with the number of months so C represents the column number
              XPOS = LEFT + C*XDIM + C*SPACE  ; Determine the left side of the image
              IF T EQ 0 THEN YPOS = HEIGHT - TOP  
              IPOS = [XPOS,YPOS-YDIM,XPOS+XDIM,YPOS]
              COUNTER = COUNTER + 1
            ENDIF ELSE BEGIN
              C = COUNTER MOD NCOL           ; Number of columns is associated with the number of months so C represents the column number
              XPOS = LEFT + C*XDIM + C*SPACE  ; Determine the left side of the image
              IF C EQ 0 THEN R = COUNTER/NCOL ELSE R = N ; When C = 0, start a new row
              IF T EQ 0 THEN YPOS = HEIGHT - TOP - R*YDIM - R*SPACE ELSE YPOS = YPOS ; Determine the top position of the image
              IPOS = [XPOS,YPOS-YDIM,XPOS+XDIM,YPOS]
              COUNTER = COUNTER + 1
            ENDELSE
            
            FILE = []
            FILE = GET_FILES(DSET,PRODS=PSTR.PROD,PERIOD=PER.PERIOD_CODE,FILE_TYPE=ATYPE, DATERANGE=AYEAR)
            IF N_ELEMENTS(FILE) GT 1 THEN MESSAGE,'ERROR: More that one file found for ' + PSTR.PROD + ' - ' + ATYPE
    
            IMG = []
            IF FILE NE [] THEN IMG = PROJECT_MAKE_IMAGE(VERSTR, FILE=FILE, DATERANGE=YDR,PERIOD=YPER, BUFFER=BUFFER, RESIZE=RESZ, MAPP=MP, PROD_SCALE=PROD_SCALE, _EXTRA=EXTRA) 
            IF IDLTYPE(IMG) NE 'OBJREF' THEN BEGIN
              ; If no image was created, create the image from the temp file (if present)
              IF ~STRUCT_HAS(PSTR,'TEMP_PROD') THEN TEMP_PROD = PSTR.PROD ELSE TEMP_PROD = PSTR.TEMP_PROD
              IF TSET NE [] THEN FILE = GET_FILES(TSET,PRODS=TEMP_PROD,PERIOD=PER.PERIOD_CODE,FILE_TYPE=ATYPE, DATERANGE=AYEAR)
              IF FILE EQ [] THEN stop;CONTINUE
              IF N_ELEMENTS(FILE) GT 1 THEN MESSAGE,'ERROR: More that one file found for ' + PSTR.PROD + ' - ' + ATYPE
              IMG = PROJECT_MAKE_IMAGE(VERSTR, FILE=FILE, DATERANGE=YDR,PERIOD=YPER, BUFFER=BUFFER, RESIZE=RESZ, MAPP=MP, PROD_SCALE=PROD_SCALE, _EXTRA=EXTRA)
              ;IMG = PROJECT_MAKE_IMAGE(VERSTR, FILE=FILE, DATERANGE=YDR,PERIOD=YPER, BUFFER=BUFFER, RESIZE=RESZ, MAPP=MP, PROD_SCALE=PROD_SCALE, _EXTRA=EXTRA)
              ;IMG = PROJECT_MAKE_IMAGE(VERSTR, FILE=FILE, DATERANGE=YDR,PERIOD=YPER,BUFFER=BUFFER, RESIZE=RESZ, MAPP=MP, PROD_SCALE=PROD_SCALE, _EXTRA=EXTRA)  ; If the main file doesn't exist, but the temp file does, use the temp file
            ENDIF
            
            FP = PARSE_IT(FILE,/ALL)
            DIR_PNG = VERSTR.DIRS.DIR_PNGS + PR.PROD + SL + ATYPE + SL & DIR_TEST, DIR_PNG
            IPNG = DIR_PNG + REPLACE(FP.NAME +'.PNG',[FP.PERIOD,FP.MAP],[YPER,MP])
            
            IF IDLTYPE(IMG) EQ 'OBJREF' THEN BEGIN
              CPIM = IMG.COPYWINDOW()
              TX = TEXT(0.5,0.95,TXT,ALIGNMENT=0.50,FONT_SIZE=14)
              IF FILE_MAKE(FILE,IPNG,OVERWRITE=OVERWRITE) THEN IMG.SAVE, IPNG, RESOLUTION=RESOLUTION
              IMG.CLOSE
            ENDIF
                
            IF W EQ [] THEN BEGIN
              W = WINDOW(DIMENSIONS=[WIDTH,HEIGHT],BUFFER=BUFFER,TITLE='')
              TX = TEXT(WIDTH/2, HEIGHT-TOP, TXT, /DEVICE, FONT_STYLE='BOLD', FONT_SIZE=10, ALIGNMENT=0.5, VERTICAL_ALIGNMENT=1.0,TARGET=W)
            ENDIF
            W.WINDOW.SETCURRENT
            IF IDLTYPE(IMG) EQ 'OBJREF' THEN IMG = IMAGE(CPIM, /CURRENT, POSITION=IPOS, /DEVICE)
          ENDFOR ; PRODS
        ENDFOR ; TYPES
      ENDFOR ; YEARS    
    
      IF IDLTYPE(W) NE 'OBJREF' THEN CONTINUE
      IF W EQ !NULL THEN CONTINUE
      PFILE, PNGFILE
      W.SAVE, PNGFILE, RESOLUTION=RESOLUTION
      W.CLOSE
  
    ENDFOR ; PERIODS
  ENDFOR ; MAPS  


END ; ***************** End of PROJECT_MAKE_COMPOSITE *****************
