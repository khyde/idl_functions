; $ID:	PROJECT_MAKE_IMAGE.PRO,	2024-01-30-21,	USER-KJWH	$
  FUNCTION PROJECT_MAKE_IMAGE, VERSTR, FILE=FILE, PAL=PAL, DATERANGE=DATERANGE, PERIOD=PERIOD, MAPP=MAPP, BUFFER=BUFFER, CURRENT=CURRENT, $
  ADD_BATHY=ADD_BATHY, BATHY_DEPTH=BATHY_DEPTH, $; BATHY_COLOR=BATHY_COLOR, BATHY_THICK=BATHY_THICK, $
  ADD_POINTS=ADD_POINTS, PLONS=PLONS, PLATS=PLATS, PSYM=PSYM, PCOLOR=PCOLOR, PSIZE=PSIZE, $
  ADD_LINE=ADD_LINE, LLONS=LLONS, LLATS=LLATS, LSYM=LSYM, LCOLOR=LCOLOR, LSIZE=LSIZE, LTHICK=LTHICK, LTRANSPARENT=LTRANSPARENT, $
  OUTLINE=OUTLINE, OUT_COLOR=OUT_COLOR, OUT_THICK=OUT_THICK, $
  ADD_LONLAT=ADD_LONLAT, LONS=LONS, LATS=LATS, LL_COLOR=LL_COLOR, LL_THICK=LL_THICK, $
  ADD_CONTOURS=ADD_CONTOURS, CONTOURS=CONTOURS, ADD_TITLE=ADD_TITLE, TITLE_TEXT=TITLE_TEXT, TITLE_POS=TITLE_POS,$
  RESIZE=RESIZE, ADD_BORDER=ADD_BORDER, BORDER_THICK=BORDER_THICK, BORDER_COLOR=BORDER_COLOR,$
  ADD_COLORBAR=ADD_COLORBAR, ADDDATE=ADDDATE, ADD_DATEBAR=ADD_DATEBAR, $
  PROD_SCALE=PROD_SCALE, CBTITLE=CBTITLE, SCLR=SCLR, _EXTRA=EXTRA


;+
; NAME:
;   PROJECT_MAKE_IMAGE
;
; PURPOSE:
;   Create an IMAGE that can be saved or inserted into a composite image
;
; CATEGORY:
;   PROJECT_FUNCTIONS
;
; CALLING SEQUENCE:
;   Result = PROJECT_MAKE_IMAGE($Parameter1$, $Parameter2$, $Keyword=Keyword$, ...)
;
; REQUIRED INPUTS:
;   Parm1.......... Describe the positional input parameters here. 
;
; OPTIONAL INPUTS:
;   Parm2.......... Describe optional inputs here. If none, delete this section.
;
; KEYWORD PARAMETERS:
;   KEY1........... Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
; OUTPUTS:
;   OUTPUT.......... Describe the output of this program or function
;
; OPTIONAL OUTPUTS:
;   None
;
; COMMON BLOCKS: 
;   None
;
; SIDE EFFECTS:  
;   None
;
; RESTRICTIONS:  
;   None
;
; EXAMPLE:
; 
;
; NOTES:
;   $Citations or any other useful notes$
;   
; COPYRIGHT: 
; Copyright (C) 2023, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; AUTHOR:
;   This program was written on July 31, 2023 by Kimberly J. W. Hyde, Northeast Fisheries Science Center | NOAA Fisheries | U.S. Department of Commerce, 28 Tarzwell Dr, Narragansett, RI 02882
;    
; MODIFICATION HISTORY:
;   Jul 31, 2023 - KJWH: Initial code written
;   Sep 27, 2023 - KJWH: Changed name from PROJECT_MAKE_PNG to PROJECT_MAKE_IMAGE
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'PROJECT_MAKE_IMAGE'
  COMPILE_OPT IDL2
  SL = PATH_SEP()
  
  IF VERSTR EQ [] THEN VERSTR = PROJECT_VERSION_DEFAULT(DIR_PROJECT='TEMP')
  
  FP = PARSE_IT(FILE,/ALL)
  IF HAS(FP.L2SUB,'STACKED') THEN STACKED = 1 ELSE STACKED = 0
  PROD = FP.PROD
  PSTR = VERSTR.PROD_INFO.(WHERE(TAG_NAMES(VERSTR.PROD_INFO) EQ PROD))

  TYPE = REPLACE(FP.MATH,'STACKED_','')
  IF ~N_ELEMENTS(PERIOD) THEN PER = PERIOD_2STRUCT(FP.PERIOD) ELSE PER = PERIOD_2STRUCT(PERIOD)
  
  IF ~N_ELEMENTS(BATHY)  THEN BATHY = 200
  IF ~N_ELEMENTS(OUT_COLOR) THEN OCOLOR = 250
  IF ~N_ELEMENTS(OUT_THICK) THEN OTHICK = 3
  IF ~N_ELEMENTS(BORDER_THICK) THEN BORDER_THICK = 5
  IF ~N_ELEMENTS(BORDER_COLOR) THEN BORDER_COLOR = 'BLACK'
  IF ~N_ELEMENTS(MAPP)   THEN MP = VERSTR.INFO.MAP_OUT ELSE MP = MAPP
  IF ~N_ELEMENTS(TITLE_POS) THEN TITLE_POS = [0.5,0.96]
  IF ~N_ELEMENTS(RESIZE) THEN RESZ = 0.85 ELSE RESZ = RESIZE
  IF ~N_ELEMENTS(PAL) THEN SPAL = [] ELSE SPAL=PAL

  MR = MAPS_READ(MP)
  MR_DIMS = FLOAT(STRSPLIT(MR.IMG_DIMS,';',/EXTRACT))
  XX = MR_DIMS[0]/MR.PX & YY = MR_DIMS[1]/MR.PY

  IF KEYWORD_SET(ADD_LONLAT) THEN BEGIN
    IF ~N_ELEMENTS(LONS) THEN BEGIN
      CASE MP OF
        'MAB': LONS = [-76,-73,-70]
        'NJ_COAST': LONS = [-76,-75,-74,-73]
        ELSE: LONS = [-76,-72,-68,-64]
      ENDCASE
    ENDIF
    IF ~N_ELEMENTS(LATS) THEN BEGIN
      CASE MP OF
        'MAB': LATS = [36,38,40]
        'NJ_COAST': LATS = [39,40]
        ELSE: LATS = [ 36, 40, 44]
      ENDCASE
    ENDIF
    LONNAMES = REPLICATE('',N_ELEMENTS(LONS))
    LATNAMES = REPLICATE('',N_ELEMENTS(LATS))
    IF ~N_ELEMENTS(C_COLOR) THEN LL_COLOR = 254
    IF ~N_ELEMENTS(C_THICK) THEN LL_THICK = 3
    MLL = MAPS_2LONLAT(MP)
  ENDIF

  IF KEYWORD_SET(ADD_CONTOURS) OR N_ELEMENTS(CONTOURS) GT 0 THEN BEGIN
    IF ~N_ELEMENTS(CONTOURS) THEN BEGIN
      CASE PROD OF
        'SST': C_LEVELS = [4,8,12,16,20,24,28,32]
        'CHLOR_A': C_LEVELS = [0.01,0.1,1,10]
      ENDCASE
    ENDIF ELSE C_LEVELS = CONTOURS
    IF ~N_ELEMENTS(C_COLOR) THEN C_COLOR = 249
    IF ~N_ELEMENTS(C_THICK) THEN C_THICK = 4
    IF ~N_ELEMENTS(C_ANNOTATION) THEN C_ANNOTATION = REPLICATE(' ',N_ELEMENTS(C_LEVELS))
  ENDIF ELSE C_LEVELS = []

  PSCL = PSTR.PROD_SCALE
  CBTITLE = UNITS(PROD)
  PRODPAL = PSTR.PAL

  CASE PROD OF
    'CHLOR_A': BEGIN
      CASE TYPE OF
        'ANOM': BEGIN & SCLR='NAVY'   & PSCL=PSTR.ANOM_SCALE & PRODPAL=PSTR.ANOM_PAL & CBTITLE=PSTR.ANOM_TITLE & END
        'STATS': BEGIN & SCLR='TOMATO' & END
        ELSE:   BEGIN & SCLR='TOMATO' & END
      ENDCASE
    END
    'SST': BEGIN
      IF STRUCT_HAS(PSTR,'MONTH_SCALE') THEN PSCL = PSTR.MONTH_SCALE.(WHERE(TAG_NAMES(PSTR.MONTH_SCALE) EQ 'M'+PER.MONTH_START)) ELSE PSCL=PSTR.PROD_SCALE  
      CASE TYPE OF
        'ANOM': BEGIN & SCLR = 'NAVY'   & PSCL = PSTR.ANOM_SCALE & PRODPAL=PSTR.ANOM_PAL & CBTITLE=PSTR.ANOM_TITLE & END
        'STATS': BEGIN & SCLR = 'YELLOW' & END
        ELSE:   BEGIN & SCLR = 'YELLOW' & END
      ENDCASE
    END 
    'GRAD_CHL': SCLR='NAVY'
    'GRAD_SST': SCLR='TOMATO'
  ENDCASE
  
  IF N_ELEMENTS(PROD_SCALE) EQ 1 THEN PSCL=PROD_SCALE
  IF SPAL NE [] THEN USEPAL=SPAL ELSE USEPAL=PRODPAL

  IF KEYWORD_SET(STACKED) THEN BEGIN
    STACKED_2PNGS, FILE, OUTIMG=IMG, MAP_OUT=MP, PAL=USEPAL, SPROD=PSCL, ADD_BATHY=BATHY, OUTLINE=OUTLINE, OUT_COLOR=OUT_COLOR, OUT_THICK=OUT_THICK,$
      C_LEVELS=C_LEVELS,C_COLOR=C_COLOR,C_THICK=C_THICK,CB_TICKVALUES=CB_TICKVALUES,C_ANNOTATION=C_ANNOTATION, $
      ADD_DATE=ADDDATE, ADD_LONLAT=ADD_LONLAT,LL_COLOR=LL_COLOR,LL_THICK=LL_THICK,LONS=LONS,LATS=LATS,LONNAMES=LONNAMES,LATNAMES=LATNAMES,$
      BUFFER=BUFFER, /NO_SAVE, CURRENT=CURRENT, DATERANGE=DATERANGE, _EXTRA=EXTRA
  ENDIF ELSE PRODS_2PNG, FILE, OBJ=IMG, MAPP=MP, PAL=USEPAL, SPROD=PSCL, ADD_BATHY=BATHY, OUTLINE=OUTLINE, OUT_COLOR=OUT_COLOR, OUT_THICK=OUT_THICK, $
    C_LEVELS=C_LEVELS,C_COLOR=C_COLOR,C_THICK=C_THICK,CB_TICKVALUES=CB_TICKVALUES,C_ANNOTATION=C_ANNOTATION, $
    ADD_DATE=ADDDATE,ADD_LONLAT=ADD_LONLAT,LL_COLOR=LL_COLOR,LL_THICK=LL_THICK,LONS=LONS,LATS=LATS,LONNAMES=LONNAMES,LATNAMES=LATNAMES,$
    BUFFER=BUFFER, /NO_SAVE, CURRENT=CURRENT, _EXTRA=EXTRA
    
  IF IMG EQ [] THEN GOTO, DONE  

  IF KEYWORD_SET(ADD_POINTS) THEN BEGIN
    IF IDLTYPE(ADD_POINTS) EQ 'STRUCT' THEN BEGIN
      FOR SY=0, N_TAGS(ADD_POINTS)-1 DO BEGIN
        STR = ADD_POINTS.(SY)
        MAPS_SET, MP
        LL = MAP_DEG2IMAGE(MAPS_BLANK(MP),STR.LONS,STR.LATS,X=PX,Y=PY)
        ZWIN
        PSY = SYMBOL(PX*XX,PY*XX,SYMBOL=STR.SYMBOL,/DEVICE, SYM_FILLED=STR.SYM_FILLED, SYM_COLOR=STR.SYM_COLOR, SYM_FILL_COLOR=STR.SYM_FILL_COLOR, SYM_SIZE=STR.SYM_SIZE, SYM_THICK=0.05, SYM_TRANSPARENCY=STR.SYM_TRANPARENCY, TARGET=IMG)
        IF KEYWORD_SET(RESIZE) THEN PSY.SCALE,RESZ, RESZ
      ENDFOR
    ENDIF ELSE BEGIN
      MAPS_SET, MP
      LL = MAP_DEG2IMAGE(MAPS_BLANK(MP),PLONS,PLATS,X=PX,Y=PY)
      PX = PX[WHERE(PX NE -1 AND PY NE -1)]
      PY = PY[WHERE(PX NE -1 AND PY NE -1)]
      ZWIN
      PSY = SYMBOL(PX*XX,PY*XX,SYMBOL=PSYM,/DEVICE, /SYM_FILLED, SYM_COLOR=PCOLOR, SYM_SIZE=PSIZE, TARGET=IMG)
    ENDELSE
  ENDIF
  
  IF KEYWORD_SET(ADD_LINE) THEN BEGIN
    IF IDLTYPE(ADD_LINE) EQ 'STRUCT' THEN BEGIN
      stop ; need to figure out steps for adding a line when the input is a structure
      FOR SY=0, N_TAGS(ADD_POINTS)-1 DO BEGIN
        STR = ADD_POINTS.(SY)
        MAPS_SET, MP
        LL = MAP_DEG2IMAGE(MAPS_BLANK(MP),STR.LONS,STR.LATS,X=PX,Y=PY)
        ZWIN
        PSY = SYMBOL(PX*XX,PY*XX,SYMBOL=STR.SYMBOL,/DEVICE, SYM_FILLED=STR.SYM_FILLED, SYM_COLOR=STR.SYM_COLOR, SYM_FILL_COLOR=STR.SYM_FILL_COLOR, SYM_SIZE=STR.SYM_SIZE, SYM_THICK=0.05, SYM_TRANSPARENCY=STR.SYM_TRANPARENCY, TARGET=IMG)
        IF KEYWORD_SET(RESIZE) THEN PSY.SCALE,RESZ, RESZ
      ENDFOR
    ENDIF ELSE BEGIN
      MAPS_SET, MP
      LL = MAP_DEG2IMAGE(MAPS_BLANK(MP),LLONS,LLATS,X=PX,Y=PY)
      PX = PX[WHERE(PX NE -1 AND PY NE -1)]
      PY = PY[WHERE(PX NE -1 AND PY NE -1)]
      ZWIN
      LSY = PLOT(PX*XX,PY*XX,LINESTYLE=LSTYLE,/DEVICE, COLOR=LCOLOR, THICK=LTHICK, TRANSPARENCY=LTRANSPARENT, SYMBOL='NONE', /OVERPLOT)
    ENDELSE
  ENDIF
  
  
  IF IMG EQ [] THEN GOTO, DONE
  IF KEYWORD_SET(RESZ) THEN IMG.SCALE,RESZ,RESZ
  POS = IMG.POSITION
  

  PIXBL = IMG.CONVERTCOORD((1-RESZ)/2.0,(1-RESZ)/2.0,/TO_DEVICE) ; Get the coordinates of the bottom left pixel
  BX = [POS[0],POS[2],POS[2],POS[0],POS[0]]
  BY = [POS[1],POS[1],POS[3],POS[3],POS[1]]
  IF KEYWORD_SET(ADD_BORDER) THEN BOXI = POLYLINE(BX,BY,THICK=BORDER_THICK,COLOR=BORDER_COLOR,TARGET=IMG)

  CASE MP OF
    'MAB': BEGIN & DB_BKG = 'WHITE' & DB_POS=[0.075,0.93,0.925,0.975] & CB_POS=[POS[0]+0.03,POS[3]-.06,0.5,POS[3]-0.04] & TITLE_POS=[0.5,0.97] & TITLE_SIZE=14 & END
    'MAB_GS': BEGIN 
      DB_BKG = 'WHITE'
      DB_POS=[0,0.95,1,1] 
      CASE RESZ OF
        0.85: BEGIN & CB_POS = [0.09, 0.85, 0.48, 0.875] & TITLE_POS=[0.5,0.96] & TITLE_SIZE=11 & END
        ELSE: BEGIN & CB_POS = [0.08, 0.91, 0.47, 0.94] & TITLE_POS=[0.5,0.06] & TITLE_SIZE=8 & END
      ENDCASE
    END
    ELSE:  BEGIN & DB_BKG = [] & DB_POS=[POS[0],POS[3],POS[2],0.99] & CB_POS=[POS[0]+0.035,POS[3]-.065,0.5,POS[3]-0.045] & TITLE_POS=[0.5,0.97] & SIZE=15 & END
  ENDCASE

  IF MR.CB_SIZE EQ '' THEN MR.CB_SIZE = 12

  IF EXTRA NE [] THEN OK = WHERE(STRPOS(TAG_NAMES(EXTRA),'CB_') GE 0,COUNT) ELSE COUNT = 0
  IF COUNT GT 0 THEN CB_EXTRA = STRUCT_COPY(EXTRA,OK) ELSE CB_EXTRA = []
  IF KEYWORD_SET(ADD_COLORBAR) THEN CBAR, PSCL, IMG=IMG, FONT_SIZE=MR.CB_SIZE, CB_TYPE=FIX(MR.CB_TYPE), CB_POS=CB_POS, CB_TITLE=CBTITLE, PAL=USEPAL,_EXTRA=CB_EXTRA,RELATIVE=CB_RELATIVE, CB_OBJ=CB_IMG
  IF KEYWORD_SET(ADD_DATEBAR) THEN DB = DATE_BAR(DATERANGE[0],DB_FONT_SIZE=18,DB_COLOR=DB_COLOR,DB_THICK=5,DB_POS=DB_POS,DB_BKG=DB_BKG, PAL=USEPAL)
    
  IF KEYWORD_SET(ADD_LONLAT) THEN BEGIN
    LONNAMES = NUM2STR(LONS)
    LATNAMES = NUM2STR(LATS)
    LLFONT_SIZE = 14
    CASE MP OF
      'NES': BEGIN
        LAT = FLOAT(WHERE_NEAREST(MLL.LATS[0,*],FLOAT(LATS),NEAR=0.05))*XX+[34,0,-34] & LATX = REPLICATE(PIXBL[1],N_ELEMENTS(LAT))
        LON = FLOAT(WHERE_NEAREST(MLL.LONS[*,0],FLOAT(LONS),NEAR=0.05))*YY+[39,13,-12,-38] & LONY = REPLICATE(PIXBL[0],N_ELEMENTS(LON))
        LATPOS = 'L' & LONPOS = 'B'
      END
      'GOM': BEGIN
        LAT = FLOAT(WHERE_NEAREST(MLL.LATS[0,*],FLOAT(LATS),NEAR=0.05))*XX+[26,-1,-27] & LATX = REPLICATE(PIXBL[1],N_ELEMENTS(LAT))
        LON = FLOAT(WHERE_NEAREST(MLL.LONS[*,0],FLOAT(LONS),NEAR=0.05))*YY+[37,1,-30] & LONY = REPLICATE(PIXBL[0],N_ELEMENTS(LON))
        LATPOS = 'L' & LONPOS = 'B'
      END
      'MAB': BEGIN
        LAT = FLOAT(WHERE_NEAREST(MLL.LATS[0,*],FLOAT(LATS),NEAR=0.05))*XX+[35,2,-33] & LATX = REPLICATE(PIXBL[1]-10,N_ELEMENTS(LAT))
        LON = FLOAT(WHERE_NEAREST(MLL.LONS[*,0],FLOAT(LONS),NEAR=0.05))*YY+[37,-4,-45] & LONY = REPLICATE(PIXBL[0]+10,N_ELEMENTS(LON))
        LATPOS = 'L' & LONPOS = 'B'
      END  
      'MAB_GS': BEGIN
        CASE RESZ OF
          0.85: BEGIN
            LAT = FLOAT(WHERE_NEAREST(MLL.LATS[0,*],FLOAT(LATS),NEAR=0.05))*XX+[29,8,-12,-30] & LATX = REPLICATE(PIXBL[1]+12,N_ELEMENTS(LAT))
            LON = FLOAT(WHERE_NEAREST(MLL.LONS[*,0],FLOAT(LONS),NEAR=0.05))*YY+[42,6,-30] & LONY = REPLICATE(PIXBL[0]-12,N_ELEMENTS(LON))
            LATPOS = 'L' & LONPOS = 'B'
          END
          ELSE: BEGIN
            LAT = FLOAT(WHERE_NEAREST(MLL.LATS[0,*],FLOAT(LATS),NEAR=0.05))*XX & LATX = REPLICATE(0,N_ELEMENTS(LAT))
            LON = FLOAT(WHERE_NEAREST(MLL.LONS[*,0],FLOAT(LONS),NEAR=0.05))*YY & LONY = REPLICATE(0,N_ELEMENTS(LON))
            LATPOS = 'R' & LONPOS = 'T'
          END    
        ENDCASE
      END
      'NJ_COAST': BEGIN
        LLFONT_SIZE = 10
        LAT = FLOAT(WHERE_NEAREST(MLL.LATS[0,*],FLOAT(LATS),NEAR=0.05))*XX+[24,-8]     & LATX = REPLICATE(PIXBL[1]+0,N_ELEMENTS(LAT))
        LON = FLOAT(WHERE_NEAREST(MLL.LONS[*,0],FLOAT(LONS),NEAR=0.05))*YY+[22.5,-4,-30] & LONY = REPLICATE(PIXBL[0]+0,N_ELEMENTS(LON))
        LATPOS = 'L' & LONPOS = 'B'    
      END  
      ELSE: BEGIN
        LAT = FLOAT(WHERE_NEAREST(MLL.LATS[0,*],FLOAT(LATS),NEAR=0.05))*XX & LATX = REPLICATE(0,N_ELEMENTS(LAT))
        LON = FLOAT(WHERE_NEAREST(MLL.LONS[*,0],FLOAT(LONS),NEAR=0.05))*YY & LONY = REPLICATE(0,N_ELEMENTS(LON))
        LATPOS = 'R' & LONPOS = 'T'
      END
    ENDCASE

    ; TODO Figure out the adjustment for the lon/lat tick labels for when the image is resized.  Currently the values are hard coded.
    LLAT = SYMBOL(LATX,LAT,'HLINE',/DEVICE,SYM_SIZE=2,SYM_COLOR='BLACK',SYM_THICK=2,/SYM_FILLED,/CURRENT,LABEL_STRING=LATNAMES,LABEL_FONT_SIZE=LLFONT_SIZE,LABEL_POSITION=LATPOS,CLIP=0)
    LLON = SYMBOL(LON,LONY,'VLINE',/DEVICE,SYM_SIZE=2,SYM_COLOR='BLACK',SYM_THICK=2,/SYM_FILLED,/CURRENT,LABEL_STRING=LONNAMES,LABEL_FONT_SIZE=LLFONT_SIZE,LABEL_POSITION=LONPOS,CLIP=0)
  ENDIF ; ADD_LONLAT

  IF KEYWORD_SET(ADD_TITLE) THEN TXT = TEXT(TITLE_POS[0],TITLE_POS[1],TITLE_TEXT,ALIGNMENT=0.50,FONT_SIZE=TITLE_SIZE)
    
  RETURN, IMG
  DONE:


END ; ***************** End of PROJECT_MAKE_PNG *****************
