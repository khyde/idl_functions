; $ID:	WHERE_MATCH.PRO,	2014-11-13	$
;###################################################################################
FUNCTION  WHERE_MATCH, ARRAY, VALUES, COUNT, VALID=VALID,$
                       NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT,NINVALID=NINVALID,INVALID=INVALID;+
;	THIS FUNCTION FINDS THE INDICES IN ARRAY WHICH EXACTLY MATCH THE VALUES ARRAY
;
;
; NOTES:
;  THE ORIGINAL ORDER OF ELEMENTS IN ARRAY AND VALUES IS NOT CHANGED BY THIS PROGRAM
;	 IDL'S VALUE_LOCATE REQUIRES AT LEAST 2 ELEMENTS IN ARRAY (VECTOR)
;	 IF ARRAY HAS ONLY ONE ELEMENT THEN THIS PROGRAM DUPLICATES _ARRAY TO GET THROUGH VALUE_LOCATE

; HISTORY:
;	 JUNE 19, 2003	WRITTEN BY:	J.E. O'REILLY, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;	 JAN  26, 2010  K. HYDE - CHANGED RETURN, -1 TO RETURN, [] (!NULL) IN ORDER TO BE COMPATIBLE WITH IDL 8.1, WHICH NOW ACCEPTS -1 SUBSCRIPTS.
;	 NOV 13, 2014,JOR FORMATTING
;######################################################################################
;-
;*************************
ROUTINE_NAME='WHERE_MATCH'
;*************************

  COUNT = 0L
; ===> DETERMINE SIZE,AND IDLTYPES OF ARRAY AND VALUES
  SZ_ARRAY 	= SIZE(ARRAY,/STRUCT)
  SZ_VALUES = SIZE(VALUES,/STRUCT)

; ===> ENSURE THAT BOTH ARRAY AND VALUES ARE NOT EMPTY
  IF SZ_ARRAY.N_ELEMENTS  EQ 0 OR SZ_VALUES.N_ELEMENTS  EQ 0 THEN RETURN, []    ; REMOVED RETURN, -1 TO BE COMPATIBLE WITH IDL 8.1 - MAY NOT BE COMPATIBLE WITH EALIER VERSIONS OF IDL

; ===> COPY ARRAY INTO _ARRAY (_ARRAY MUST HAVE AT LEAST 2 ELEMENTS TO GET THROUGH VALUE_LOCATE)
  IF SZ_ARRAY.N_ELEMENTS EQ 1 THEN _ARRAY = [ARRAY,ARRAY] ELSE _ARRAY = ARRAY

; ===> SORT _ARRAY
  INDEX 		= LINDGEN(SZ_ARRAY.N_ELEMENTS)
  SRT 			= SORT(_ARRAY)
  _ARRAY 		= _ARRAY[SRT]
  INDEX_ARRAY	= INDEX[SRT]

;	===> GET SUBSCRIPTS OF THE ARRAY ELEMENTS WHICH ARE NEAREST TO EACH ELEMENT IN THE VALUES ARRAY
 	SUBS_ARR  	= VALUE_LOCATE(_ARRAY, VALUES)

; ===> EXCHANGE _ARRAY SUBS_NEAREST SUBSCRIPTS FOR ARRAY SUBSCRIPTS
  SUBS_NEAREST = INDEX_ARRAY[SUBS_ARR]

; ===> DETERMINE WHICH ELEMENTS IN ARRAY(SUBS_NEAREST) MATCH VALUES ARRAY
 	VALID = WHERE(ARRAY[SUBS_NEAREST] EQ VALUES, N_VALID, NCOMPLEMENT=NINVALID, COMPLEMENT=INVALID)

  COUNT = N_VALID
; ===> IF NONE OF VALUES MATCH _ARRAY
	IF N_VALID EQ 0 THEN BEGIN
		NCOMPLEMENT = SZ_ARRAY.N_ELEMENTS
		COMPLEMENT = LINDGEN(SZ_ARRAY.N_ELEMENTS)
		RETURN,[]                                     ; REMOVED RETURN, -1 TO BE COMPATIBLE WITH IDL 8.1 - MAY NOT BE COMPATIBLE WITH EALIER VERSIONS OF IDL
    SUBS= REPLICATE(-1L,SZ_VALUES.N_ELEMENTS)
  ENDIF ELSE BEGIN
;		===> CHECK IF ORIGINAL ARRAY HAD ONLY 1 ELEMENT
    IF  SZ_ARRAY.N_ELEMENTS EQ 1 THEN BEGIN
    	COUNT = 1
			NCOMPLEMENT = 0L
			COMPLEMENT = -1L
			RETURN,0L
		ENDIF ELSE BEGIN ; ORIGINAL ARRAY HAD MORE THAN 1 ELEMENT
  	  SUBS =  SUBS_NEAREST(VALID)
			IN=WHERE_IN(LINDGEN(SZ_ARRAY.N_ELEMENTS), SUBS, NCOMPLEMENT=NCOMPLEMENT, COMPLEMENT=COMPLEMENT)
		ENDELSE ; IF  SZ_ARRAY.N_ELEMENTS EQ 1 THEN BEGIN
  ENDELSE ; IF N_VALID EQ 0 THEN BEGIN
  RETURN, SUBS


END; #####################  END OF ROUTINE ################################
