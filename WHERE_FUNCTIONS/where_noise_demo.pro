; $ID:	WHERE_NOISE_DEMO.PRO,	2020-07-01-12,	USER-KJWH	$
;+
; ######################################################################### 
  PRO WHERE_NOISE_DEMO

;  PURPOSE:  WHERE_NOISE_DEMO 

; CATEGORY: DEMO FOR WHERE_NOISE FUNCTION
  
; KEYWORDS:
;          
; 

; MODIFICATION HISTORY:
;     MAR 16,2015 WRITTEN BY: J.E. O'REILLY
;     MAR 19,2015,JOR ADDED STEP DO_NOISE_MED
;     MAR 21,2015 ADDED STEP DO_COMPARE
;     JUN 30,2016 ADDED STEP DO_NOISE_BOXES

;-
; #########################################################################

;********************************
ROUTINE_NAME  = 'WHERE_NOISE_DEMO'
;********************************

;===> #############   SWITCHES   ############################
  DO_NOISE_LOOP				=	''; S
  DO_NOISE_MED        = 'VO';
  DO_NOISE_BOXES      = ''
  DO_COMPARE          = ''
  DO_SYNTHETIC        = ''
  DO_FIX_NOISE        = ''
  DO_FREQ_NOISE       = ''
  DO_PLT_NOISE_VS_NUM = ''
  DO_RANDOM_RATIOS    = ''
 ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


;***************************
IF KEY(DO_NOISE_LOOP) THEN BEGIN
  ;***************************
  , 'DO_NOISE_LOOP'
  SWITCHES,DO_NOISE_LOOP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE, REVERSE_FILES=REVERSE_FILES, REVERSE_DATASETS=REVERSE_DATASETS
  METHOD = 'LOOP' & WIDTH = 3 & NOISE = 5
  DIR = !S.DATASETS + 'OC-SEAWIFS-MLAC\NEC\STATS\CHLOR_A-OC4\'
  FILES = FLS(DIR + 'D_*.SAVE')
  DATE_START = '20040424'&  DATE_END='20040501'
  FILES = DATE_SELECT(FILES, DATE_START, DATE_END)

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES(_FILE)
    PFILE,FILE,/U  & POF,_FILE,FILES
 
    ;===> MAKE A PNG OF ALL THE DATA
    PRODS_2PNG,FILE,/BUFFER,/OVERWRITE,DIR_OUT = !S.IDL_TEMP
    DATA = STRUCT_READ(FILE)
    IF STOPP THEN STOP
    OK = WHERE_NOISE(DATA,METHOD=METHOD,WIDTH=WIDTH,NOISE=NOISE,RATIO=RATIO,MED=MED,VERBOSE=VERBOSE,COUNT) 
     P,COUNT
     STOP
     GOTO,DONE
    IF COUNT GE 1 THEN BEGIN
      ;===> REPLACE DATA WITH MEDIAN WHERE NOISE WAS DETECTED
      DATA[OK] = MED[OK]
      ;===> MAKE A PNG OF CLEAN DATA
      FA = FILE_ALL(FILE) & NAME = FA.NAME & PROD = FA.PROD & MAP = FA.MAP
      PNGFILE = !S.IDL_TEMP + (FILE_ALL(FILE)).NAME + '-CLEAN.PNG
      IMGR,DATA,PROD=PROD,TAG=TAG,MAP=MAP,PNGFILE =PNGFILE
    ENDIF;IF COUNT EQ 1 THEN BEGIN

  ENDFOR;FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  IF STOPP THEN STOP
  IF VERBOSE THEN , 'DO_NOISE_LOOP'
ENDIF ; IF DO_NOISE_LOOP GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||
;

;***************************
IF KEY(DO_NOISE_MED) THEN BEGIN
;***************************
  , 'DO_NOISE_MED'
  SWITCHES,DO_NOISE_MED,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE
  IF STOPP THEN STOP
  METHOD = 'IMASK' & WIDTH = 3 & NOISE = 5
  DIR = !S.DATASETS + 'OC-SEAWIFS-MLAC\NEC\STATS\CHLOR_A-OC4\'
  FILES = FLS(DIR + 'D_*.SAVE')
  DATE_START = '20040424'&  DATE_END='20040501'
  FILES = DATE_SELECT(FILES, [DATE_START, DATE_END])
  FA = FILE_ALL(FILES[0]) & NAME = FA.NAME & PROD = FA.PROD & MAP = FA.MAP

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES(_FILE)
    PFILE,FILE,/U  & POF,_FILE,FILES

    ;===> MAKE A PNG OF ALL THE DATA
    DATA = STRUCT_READ(FILE)
    PNGFILE = !S.IDL_TEMP + (FILE_ALL(FILE)).NAME + '-ORIG.PNG
    IMGR,DATA,PROD=PROD,TAG=TAG,MAP=MAP,PNG =PNGFILE
    IF STOPP THEN STOP
    
    OK = WHERE_NOISE(DATA,METHOD=METHOD,WIDTH=WIDTH,NOISE=NOISE,RATIO=RATIO,MED=MED,VERBOSE=VERBOSE,COUNT)
    P,COUNT
;    STOP
;    GOTO,DONE
    IF COUNT GE 1 THEN BEGIN
      ;===> REPLACE DATA WITH MEDIAN WHERE NOISE WAS DETECTED
      DATA[OK] = MED[OK]
      ;===> MAKE A PNG OF CLEAN DATA
      FA = FILE_ALL(FILE) & NAME = FA.NAME & PROD = FA.PROD & MAP = FA.MAP
      PNGFILE = !S.IDL_TEMP + (FILE_ALL(FILE)).NAME + '-CLEAN.PNG
      IMGR,DATA,PROD=PROD,TAG=TAG,MAP=MAP,PNG =PNGFILE
    ENDIF;IF COUNT EQ 1 THEN BEGIN

  ENDFOR;FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  IF STOPP THEN STOP
  IF VERBOSE THEN , 'DO_NOISE_MED'
ENDIF ; IF DO_NOISE_MED GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||
;
;***************************
IF KEY(DO_NOISE_BOXES) THEN BEGIN
  ;***************************
  , 'DO_NOISE_BOXES'
  SWITCHES,DO_NOISE_BOXES,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE
  METHOD = 'IMASK' & WIDTH = 3 & NOISE = 5
  DIR = !S.DATASETS + 'OC-SEAWIFS-MLAC\NEC\STATS\CHLOR_A-OC4\'
  FILES = FLS(DIR + 'D_*.SAVE')
  DATE_START = '20040424'&  DATE_END='20040501'
  FILES = DATE_SELECT(FILES, [DATE_START, DATE_END])

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES(_FILE)
    PFILE,FILE,/U  & POF,_FILE,FILES

    ;===> MAKE A PNG OF ALL THE DATA
    DATA = STRUCT_READ(FILE)
    IF STOPP THEN STOP 
    FOR WIDTH =3,21 DO BEGIN
       OK = WHERE_NOISE(DATA,METHOD='IMASK',WIDTH=WIDTH,NOISE=NOISE,RATIO=RATIO,MED=MED,VERBOSE=VERBOSE,COUNT) 
       PRINT,'WIDTH:  ',WIDTH,'   COUNT: ',COUNT
    ENDFOR;FOR WIDTH =3,21 DO BEGIN

  ENDFOR;FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  IF STOPP THEN STOP
  IF VERBOSE THEN , 'DO_NOISE_BOXES'
ENDIF ; IF DO_NOISE_BOXES GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||
;
;***************************
IF KEY(DO_COMPARE) THEN BEGIN
  ;***************************
  , 'DO_COMPARE'
  SWITCHES,DO_COMPARE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE, REVERSE_FILES=REVERSE_FILES, REVERSE_DATASETS=REVERSE_DATASETS
  METHOD = 'IMASK' & WIDTH = 3 & NOISE = 5
  DIR = !S.DATASETS + 'OC-SEAWIFS-MLAC\NEC\STATS\CHLOR_A-OC4\'
  FILES = FLS(DIR + 'D_*.SAVE')
  DATE_START = '20040424'&  DATE_END='20040501'
  ;FILES = DATE_SELECT(FILES, DATE_START, DATE_END)

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES(_FILE)
    POF,_FILE,FILES
    NAME = (FILE_PARSE(FILE)).NAME
    DATA = STRUCT_READ(FILE)
    IF STOPP THEN STOP
    
    OK_MED = WHERE_NOISE(DATA,METHOD='IMASK',WIDTH=WIDTH,NOISE=NOISE,RATIO=RATIO,MED=MED,VERBOSE=VERBOSE,COUNT_MED) 
   
    OK_LOOP = WHERE_NOISE(DATA,METHOD='LOOP' ,WIDTH=WIDTH,NOISE=NOISE,RATIO=RATIO,MED=MED,VERBOSE=VERBOSE,COUNT_LOOP)
    IF NOF(OK_MED) LT 2  OR NOF(OK_LOOP) LT 2 OR OK_MED EQ [] OR OK_LOOP EQ [] THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>
    OK_SAME = WHERE_IN(OK_LOOP,OK_MED,NCOMPLEMENT = N_SUBS_DIFF,COMPLEMENT = SUBS_DIFF,N_SUBS_SAME )
    D = CREATE_STRUCT('NAME',NAME,'COUNT_MED',COUNT_MED,'COUNT_LOOP',COUNT_LOOP,'N_SUBS_SAME',N_SUBS_SAME,'N_SUBS_DIFF',N_SUBS_DIFF,'SUBS_DIFF',STRCOMPRESS(STRJOIN(SUBS_DIFF,';')))
    GONE,SUBS_DIFF
    IF NONE(DB) THEN DB = D ELSE DB = [DB,D]
   

  ENDFOR;FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  CSV = !S.IDL_TEMP + ROUTINE_NAME + '-MED-VS-LOOP.CSV'
  CSV_WRITE,CSV,DB & PFILE,CSV
  IF VERBOSE THEN , 'DO_COMPARE'
ENDIF ; IF DO_COMPARE GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||

;******************************
IF KEY(DO_SYNTHETIC) THEN BEGIN
;******************************
  SWITCHES,DO_SYNTHETIC,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE, REVERSE_FILES=REVERSE_FILES, REVERSE_DATASETS=REVERSE_DATASETS
  FOR NTH = 4,4 DO BEGIN
    ;8,9,10,11,12 IS GOOD
    DATA =MAKE_ARRAY([7,7],VALUE= 1.0) & DATA[NTH] = 5.001
    OK_MED = WHERE_NOISE(DATA,METHOD='IMASK',WIDTH=WIDTH,NOISE=NOISE,RATIO=RATIO,MED=MED,VERBOSE=VERBOSE,COUNT_MED) 
    OK_LOOP = WHERE_NOISE(DATA,METHOD='LOOP' ,WIDTH=WIDTH,NOISE=NOISE,RATIO=RATIO,MED=MED,VERBOSE=VERBOSE,COUNT_LOOP)
    PRINT,OK_MED,OK_LOOP
    P,COUNT_MED,COUNT_LOOP 
    IF STOPP THEN STOP
  ENDFOR;FOR NTH = 0,48 DO BEGIN

ENDIF;IF KEY(DO_SYNTHETIC) THEN BEGIN
;||||||||||||||||||||||||||||||||||||

;******************************
IF KEY(DO_FIX_NOISE) THEN BEGIN
;******************************
  SWITCHES,DO_FIX_NOISE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE, REVERSE_FILES=REVERSE_FILES, REVERSE_DATASETS=REVERSE_DATASETS
   DIR = !S.DATASETS + 'OC-SEAWIFS-MLAC\NEC\STATS\CHLOR_A-OC4\'
   FILES = FLS(DIR + 'D_*.SAVE')
   OK = WHERE_STRING(FILES,'D_20041127',COUNT)
   IF COUNT EQ 1 THEN FILES = FILES[OK]
   DIR_OUT = !S.IDL_TEMP+ 'NOISE' + PATH_SEP() 
   DIR_TEST,DIR_OUT
   ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
   FOR NTH = 0,NOF(FILES)-1 DO BEGIN
    POF,NTH,FILES
     FILE=FILES[NTH]
     PRODS_2PNG,FILE,/BUFFER,DIR_OUT=DIR_OUT
     DATA =STRUCT_READ(FILE)
     DATA = FIX_NOISE(DATA)
     PNGFILE= DIR_OUT + (FILE_PARSE(FILE)).NAME + '-EDIT.PNG'
     IMGR,DATA,PROD='CHLOR_A',TAG=TAG,MAP='NEC',EDIT=EDIT,VSTAG=0,PNGFILE=PNGFILE,/BUFFER
    IF STOPP THEN STOP
    ENDFOR;FOR NTH = 0,NOF(FILES)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDIF;IF KEY(DO_FIX_NOISE) THEN BEGIN
;||||||||||||||||||||||||||||||||||||


;******************************
IF KEY(DO_FREQ_NOISE) THEN BEGIN
  ;******************************
  DIR = !S.DATASETS + 'NEC_S\'
  DIR_OUT = !S.IDL_TEMP+ 'NOISE' + PATH_SEP()
  DIR_TEST,DIR_OUT
  FILES = FLS(DIR + 'S_*.SAVE')
  FILES = GET(FILES,NUM=50)
  METHODS = ['IMASK','LOOP']
FOR M = 0,1 DO BEGIN
   METHOD = METHODS(M)
 
;  OK = WHERE_STRING(FILES,'D_20041127',COUNT)
;  IF COUNT EQ 1 THEN FILES = FILES[OK]
  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(FILES)-1 DO BEGIN
    POF,NTH,FILES
    FILE=FILES[NTH]
    NAME = (FILE_PARSE(FILE)).NAME
  
    DATA =STRUCT_READ(FILE)
    S = STATS_NAN(DATA)
    D = CREATE_STRUCT('NAME',NAME,'METHOD',METHOD,'NOISE',ROUNDS[0],'NUM',ROUNDS[0],'N_GOOD',S.N_GOOD,'MIN',S.MIN,'MAX',S.MAX)
    IF NONE(DB) THEN DB = D ELSE DB = [DB,D]

    NOISES = INTERVAL([1,10],1)
    
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR _NOISE = 0,NOF(NOISES)-1 DO BEGIN
      POF,_NOISE,NOISES
      NOISE = NOISES(_NOISE) 
      DAT = FIX_NOISE(DATA,METHOD = METHOD,NOISE=NOISE,VERBOSE=VERBOSE,SUBS=SUBS,COUNT)
      S = STATS_NAN(DAT)
      D = CREATE_STRUCT('NAME',NAME,'METHOD',METHOD,'NOISE',ROUNDS(NOISE),'NUM',ROUNDS(COUNT),'N_GOOD',S.N_GOOD,'MIN',S.MIN,'MAX',S.MAX)
      DB = [DB,D]    
      ;IF STOPP THEN STOP
    ENDFOR;FOR _NOISE = 0,NOF(NOISES)-1 DO BEGIN
;SPREAD,DB
;STOP
  ENDFOR;FOR NTH = 0,NOF(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDFOR;FOR M = 0,1 DO BEGIN
CSV = DIR_OUT + 'DO_FREQ_NOISE-NEC_S' + '.CSV'
CSV_WRITE,CSV,DB
,'DO_FREQ_NOISE'
ENDIF;IF KEY(DO_FREQ_NOISE) THEN BEGIN
;||||||||||||||||||||||||||||||||||||

;*************************************
IF KEY(DO_PLT_NOISE_VS_NUM) THEN BEGIN
;*************************************
SWITCHES,DO_PLT_NOISE_VS_NUM,STOPP=STOPP,OVERWRITE=OVERWRITE, REVERSE_FILES=REVERSE_FILES, REVERSE_DATASETS=REVERSE_DATASETS
IF STOPP THEN STOP
DIR_OUT = !S.IDL_TEMP+ 'NOISE' + PATH_SEP()
DB = CSV_READ(DIR_OUT + 'DO_FREQ_NOISE-NEC_S.CSV')

METHODS = ['IMASK','LOOP']
;FFFFFFFFFFFFFFFFFFF
FOR M = 0,1 DO BEGIN
  METHOD = METHODS(M)

;DB = CSV_READ(DIR_OUT + 'DO_FREQ_NOISE-NEC_S-'+ METHOD + '.CSV')
NOISES = [1,2,3,4,5,6,7,8,9,10]
NUM = []
FOR NTH = 0,NOF(NOISES)-1 DO BEGIN
  NOISE = NOISES[NTH]
  OK = WHERE(DB.NOISE EQ NOISE) 
  NUM = [NUM,TOTAL(FLOAT(DB[OK].NUM))]

ENDFOR;FOR NTH = 0,NOF(NOISE)-1 DO BEGIN
  TITLE = 'METHODS: GREY=IMASK, RED= LOOP'
  IF M EQ 0 THEN P = PLOT(NOISES,NUM,/YLOG,COLOR = 'GREY',THICK = 11,XRANGE = [0,10],$
   XTITLE = 'NOISE',YTITLE = 'CUMULATIVE FREQUENCY IN 50 NEC FILES',TITLE=TITLE)
  IF M EQ 1 THEN P = PLOT(NOISES,NUM,/YLOG,COLOR = 'RED',THICK = 2,XRANGE = [0,10],/CURRENT,/OVERPLOT) 
  PLT_GRIDS,P
 
ENDFOR;FOR M = 0,1 DO BEGIN
 FILE = DIR_OUT + 'DO_PLT_NOISE_VS_NUM.PNG'
P.SAVE,FILE
P.CLOSE
 ,'DO_PLT_NOISE_VS_NUM'
ENDIF;IF KEY(DO_PLT_NOISE_VS_NUM) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||
   

;***********************
IF KEY(DO_RANDOM_RATIOS) THEN BEGIN
  ;***********************
  SWITCHES,DO_RANDOM_RATIOS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  N =RANDOMN(SEED,1000000) + 1
  D=RANDOMN(SEED,1000000)+10
  RATIO = 10*N/D
  ST,STATS(RATIO)
  PLT_FREQ,RATIO,XTITLE = 'RATIO',YTITLE = 'FREQUENCY',MARGIN = [0.2,0.1,0.05,0.1]
  P=PERCENTILE(RATIO)
  
  IF STOPP THEN STOP
ENDIF;IF KEY(DO_RANDOM_RATIOS) THEN BEGIN
;||||||||||||||||||||||||||||



DONE:


END; #####################  END OF ROUTINE ################################
