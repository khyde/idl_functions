; $ID:	MAPS_MAKE.PRO,	2022-03-21-16,	USER-KJWH	$
;+
;#############################################################################################################
	PRO MAPS_MAKE, MP, LONGNAME=LONGNAME, PROJ=PROJ, LATMIN=LATMIN, LATMAX=LATMAX, LONMIN=LONMIN, LONMAX=LONMAX, ROTATION=ROTATION, $
	               P0LAT=P0LAT, P0LON=P0LON, ISOTROPIC=ISOTROPIC, PX=PX, PY=PY, MAPSCALE=MAPSCALE, OVERWRITE=OVERWRITE
	
; NAME: MAPS_MAKE
;                   
; PURPOSE: 1) INTERACTIVELY CREATE A NEW MAP FROM SCRATCH 
;          2) ADDS IT TO THE MAPS MAIN CSV DATABASE
;          3) MAKES A LANDMASK,A BATHY PNG AND AN ITOPO SAV FOR THE NEW MAP
;
; CATEGORY: MAPS FAMILY
;		 
; CALLING SEQUENCE: MAPS_MAKE
;
; INPUTS: PROGRAM PROMPTS FOR MAP CHARACTERISTICS/PARAMETERS
;         
;	
; KEYWORD PARAMETERS: NONE
; 
;         
; OUTPUTS: APPENDS MAP TO MAIN CSV DATABASE
;
;		
; EXAMPLES:
;   MAPS_MAKE, 'NESGRID'
;   MAPS_MAKE, 'NESGRID', PROJ='CYLINDRICAL', LONGNAME='Northeast shelf equal-distance grid',                            LATMIN=34.0, LATMAX=46, LONMIN=-78, LONMAX=-62, ROTATION=0, ISOTROPIC=0, PX=1364, PY=1023, MAPSCALE=''
;   MAPS_MAKE, 'SNEGRID', PROJ='CYLINDRICAL', LONGNAME='Southern New England equal-distance grid', P0LAT=0.0, P0LON=0.0, LATMIN=39.7, LATMAX=42, LONMIN=-72, LONMAX=-69, ROTATION=0, ISOTROPIC=0, PX=297,  PY=228,  MAPSCALE=''
;   MAPS_MAKE, 'ECGRID',  PROJ='CYLINDRICAL', LONGNAME='U.S. East Coast equal-distance grid',      P0LAT=0.0, P0LON=0.0, LATMIN=24.5, LATMAX=46, LONMIN=-84, LONMAX=-55, ROTATION=0, ISOTROPIC=0, PX=1473, PY=1093, MAPSCALE=''
;   MAPS_MAKE, 'ICESECO', LONGNAME='ICES ECOREGIONS', PROJ='LAMBERTCONIC', LATMIN=28, LATMAX=90,LONMIN=-14,LONMAX=40, PX=1200, PY=1200,ROTATION=0,ISOTROPIC=1,MAPSCALE=''
; 
; NOTES:
; 
;   
; MODIFICATION HISTORY:
;     MAR 24, 2014  WRITTEN BY K.J.W. HYDE, 28 TARZWELL DRIVE, NMFS, NOAA 02882 (KIMBERLY.HYDE@NOAA.GOV)J.O'REILLY
;			MAR 27, 2014 - JEOR: MAJOR REVISIONS [MADE INTERACTIVE]
;			APR 02, 2014 - JEOR: NOW STORING PERIOD STAMP IN MAP RECORD
;			APR 05, 2014 - JEOR: REFINED PROMPS
;			APR 16, 2014 - JEOR: ADDED MAPS_LANDMASK [AFTER EXTENSIVE TESTING]
;			OCT 29, 2015 - KJWH: Removed S.MAP_OUT = MAP because there is no MAP_OUT in the structure S
;			                     Removed S.PX_OUT = S.PX and S.PY_OUT = S.PY because PX_OUT and PY_OUT are not in the structure S
;			                     Changed MAPS_LANDMASK, MAP=S.MAP to MAPS_LANDMASK, S.MAP
;			APR 03, 2019 - KJWH: Overhauled program and added map projection keywords to avoid the prompts if desired (useful when tweaking variables, but the prompts still work)
;			                     Added NAME prompt to add the descriptive name to the structure
;			                     Added a call to MAPS_PROJECTIONS to get additional map projection information needed for creating netcdf files     
;			                     Added OVERWRITE option that will remove the MAP from the MAIN if it exists      
;			APR 04, 2019 - KJWH: Added CRS_GRID_MAPPING and NG_MAP to output structure       
;			                     Added P0LAT and P0LON keywords to force the variables  
;			APR 05, 2019 - KJWH: Added LL = MAPS_2LONLAT(MP,/OVERWRITE) to update the LONLAT file                                            
;			                     
;#################################################################################
;-
;****************************
ROUTINE_NAME  = 'MAPS_MAKE'
;****************************
;
;#####    CONSTANTS    #####
  MPMAIN = !S.ILD_MAINFILES + 'MAPS_MAIN.csv'
  DATE = STRTRIM(DATE_NOW(),2)
  PERIOD =  DATE_2PERIOD(DATE)
  PAL_36,R,G,B
  YN = ''
  DATUM = 0.0
  TXT = ''
  INIT = 'MAP_SET'
  PROJECTIONS = ['CYLINDRICAL','LAMBERTCONIC','']
;||||||||||||||||||||||||||||||||||||||||||||||

  COMMON _MAPS_MAKE,S,DONE_BACKUP
  IF NONE(DONE_BACKUP) THEN DONE_BACKUP = 0

  AGAIN_NEW_MAP:
  
  IF NONE(MP) THEN READ, MP, PROMPT = 'ENTER THE NEW MAP NAME [NO QUOTES]:   '
  MP = IDL_VALIDNAME(MP, /CONVERT_ALL); ENSURE MAP NAME IS VALID
  PFILE, MP, /M

  IF VALIDS('MAPS',MP) NE '' THEN BEGIN
    T = MP + ' already exists in maps database. '
    T = [T,'  Overwrite ' + MP +' in MAPS_MAIN.csv?']
    YN =DIALOG_MESSAGE(T,/QUESTION)
    IF STRUPCASE(YN) EQ 'NO' THEN GOTO, DONE;>>>>>>>>>>>>>
    IF STRUPCASE(YN) EQ 'YES' THEN OVERWRITE = 1   
  ENDIF 
  
  IF KEY(OVERWRITE) AND VALIDS('MAPS',MP) NE '' THEN BEGIN
    COPY = REPLACE(MPMAIN,'_MAIN','_MAIN'+'-' + STRMID(DATE_NOW(),0,8))
    IF FILE_TEST(MPMAIN) EQ 1 AND DONE_BACKUP EQ 0 THEN FILE_COPY,MPMAIN,COPY,/VERBOSE,/OVERWRITE
    
    M = MAPS_READ(/INIT)
    M = M[WHERE(M.MAP NE MP, COUNT, NCOMPLEMENT=NCOMP)]
    IF NCOMP GT 1 THEN MESSAGE, 'ERROR: More than one instance of ' + MP + ' found in MAPS_MAIN.'
    STRUCT_2CSV, MPMAIN, M
    DONE_BACKUP = 1 ; ALLOW FILE COPY TO BACKUP MAIN ONLY ONCE DURING AN IDL SESSION
  ENDIF
  
  S = MAPS_STRUCT()
  S.MAP = MP
  S.INIT = INIT
  S.PERIOD = PERIOD
  S.AUTHOR = !S.USER
  
  ;############################################################################  
  ;###> PROMPT FOR MAP PARAMETERS
  ;############################################################################  
  IF NONE(LONGNAME) THEN LONGNAME = '' 
  IF LONGNAME EQ '' THEN READ, LONGNAME, PROMPT = 'ENTER DESCRIPTIVE LONG NAME FOR ' + MP + ':  ' & S.NAME =  STRTRIM(LONGNAME,2)
  
  IF N_ELEMENTS(PROJ) EQ 1 THEN BEGIN
    CASE STRUPCASE(PROJ) OF
      'CYLINDRICAL':  BEGIN & DATUM = 0 & PROJ4 = 'Equal Area Cylindrical' & END
      'LAMBERTCONIC': BEGIN & DATUM = 1 & PROJ4 = 'Lambert Conformal Conic' & END
      ELSE: DATUM = 2
    ENDCASE
  ENDIF ELSE READ,DATUM,PROMPT = 'ENTER MAP PROJECTION NUMBER [0=CYLINDRICAL; 1=LAMBERTCONIC; 2=OTHER]:   '    
  
  S.PROJ = STRTRIM(PROJECTIONS(DATUM),2)
  IF DATUM EQ 2 THEN BEGIN    
    READ,TXT,PROMPT = 'ENTER THE MAP PROJECTION - NO QUOTES   '
    S.PROJ = STRTRIM(TXT,2)
  ENDIF;IF DATUM EQ 2 THEN BEGIN

  IF NONE(LATMIN)    THEN READ, LATMIN,   PROMPT = 'ENTER LOWER LATITUDE [= LATMIN = BOTTOM]:   '     & S.LATMIN = STRTRIM(LATMIN,2)
  IF NONE(LATMAX)    THEN READ, LATMAX,   PROMPT = 'ENTER UPPER LATITUDE [= LATMAX = TOP]:   '        & S.LATMAX = STRTRIM(LATMAX,2)
  IF NONE(LONMIN)    THEN READ, LONMIN,   PROMPT = 'ENTER LEFTMOST LONGITUDE [= LONMIN = LEFT]:   '   & S.LONMIN = STRTRIM(LONMIN,2)
  IF NONE(LONMAX)    THEN READ, LONMAX,   PROMPT = 'ENTER RIGHTMOST LONGITUDE [= LONMAX = RIGHT]:   ' & S.LONMAX = STRTRIM(LONMAX,2)
  IF NONE(ROTATION)  THEN READ, ROTATION, PROMPT = 'ENTER ROTATION [ALMOST ALWAYS 0.0]:   '     & S.ROT = STRTRIM(ROTATION,2)
  IF NONE(ISOTROPIC) THEN READ, ISOTROPIC,PROMPT = 'ENTER ISOTROPIC [USUALLY 1]:   '            & S.ISOTROPIC = STRTRIM(ISOTROPIC,2)
  IF NONE(PX)        THEN READ, PX,       PROMPT = 'ENTER MAP WIDTH (PX) IN PIXELS:   '         & S.PX = STRTRIM(PX,2)
  IF NONE(PY)        THEN READ, PY,       PROMPT = 'ENTER MAP HEIGHT (PY) IN PIXELS:   '        & S.PY = STRTRIM(PY,2)
  IF NONE(MAPSCALE)  THEN READ, YN,       PROMPT = 'WANT TO ENTER A SCALE FOR THE MAP ? [Y OR N]:   '
  IF STRUPCASE(YN) EQ 'Y'  THEN BEGIN
    MSCALE = 0.0
    READ,MSCALE,PROMPT = 'ENTER THE MAP SCALE : [EG 1E6]  '   & S.SCALE = STRTRIM(MSCALE,2)
  ENDIF ELSE S.SCALE = MISSINGS(S.SCALE)   
    
  ;###> P0_LAT & P0_LON WILL ALWAYS BE IN THE CENTER OF THE MAP
  IF NONE(P0LAT) THEN S.P0_LAT = MEAN(FLOAT([S.LATMIN,S.LATMAX])) ELSE S.P0_LAT = P0LAT
  IF NONE(P0LON) THEN S.P0_LON = MEAN(FLOAT([S.LONMIN,S.LONMAX])) ELSE S.P0_LON = P0LON
  
  ;===> IF LAMBERTCONIC THEN SET MINIMUM SCALE DISTORTION
  IF S.PROJ EQ 'LAMBERTCONIC' THEN BEGIN
    DELTA = SPAN([FLOAT(S.LATMIN),FLOAT(S.LATMAX)])
    S.PAR_LOW = STRTRIM(FLOAT(S.LATMIN) + 1/6. * DELTA,2) ; PAR_LOW & PAR_UPP ARE 1/6TH.ABOVE LATMIN AND 1/6TH. BELOW LATMAX
    S.PAR_UPP = STRTRIM(FLOAT(S.LATMAX) - 1/6. * DELTA,2)
  ENDIF;IF S,PROJ EQ 'LAMBERTCONIC' THEN BEGIN
  
  PR = MAPS_PROJECTIONS(S.PROJ)
  IF IDLTYPE(PR) EQ 'STRING' THEN MESSAGE, PR
  IF PR.PROJ NE S.PROJ THEN MESSAGE, 'ERROR: Projection names do not match.'
  S.PROJ4 = PR.PROJ4
  S.PROJ4_CRS = PR.PROJ4_CRS
  S.ELLPS_CRS = PR.ELLPS_CRS 
  S.CRS_GRID_MAPPING = PR.CRS_GRID_MAPPING
  S.NG_MAP = PR.NG_MAP
    

; |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

  SHOW_MAP_AGAIN:

  MAPS_TEST, S

  YN_ADD_MAP =STRUPCASE(DIALOG_MESSAGE('ADD ' + S.MAP +'  TO MAPS MAIN  ENTER Y OR N',TITLE = 'ADD ' + S.MAP +'  TO MAPS MAIN ',/DEFAULT_NO,/QUESTION))

  IF YN_ADD_MAP EQ 'NO' THEN BEGIN
    YN_EDIT =STRUPCASE(DIALOG_MESSAGE('EDIT ' + S.MAP +' ?  ENTER Y OR N',TITLE = 'EDIT ' + S.MAP +' ? ',/DEFAULT_NO,/QUESTION))
    
    IF YN_EDIT EQ 'YES' THEN BEGIN
      NAMES = TAG_NAMES(S)
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
      FOR NTH = 0,N_TAGS(S)-1 DO BEGIN
        NAME = NAMES[NTH]
        VAL = S.(NTH)
        YN_TAG =STRUPCASE(DIALOG_MESSAGE('CHANGE :  ' + NAME +'= '+STRTRIM(VAL,2) + '  ENTER Y OR N',TITLE = 'CHANGE :  ' + NAME +'= '+STRTRIM(VAL,2),/DEFAULT_NO,/QUESTION))
        IF YN_TAG EQ 'YES' THEN BEGIN
          DATUM = VAL
          READ,DATUM,PROMPT = 'ENTER THE NEW '+NAME + '  : '
          S.(NTH) = DATUM
        ENDIF;IF YN_TAG EQ 'YES' THEN BEGIN
      ENDFOR;FOR NTH = 0,N_TAGS(S) DO BEGIN
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
      GOTO,SHOW_MAP_AGAIN;>>>>>>>>>>>>>
  
    ENDIF;IF YN_EDIT EQ 'YES' THEN BEGIN
        
  ENDIF;IF YN_ADD_MAP EQ 'NO' THEN BEGIN
 
;##### ADD MAP TO MAPS MAIN     ##### 
  IF YN_ADD_MAP EQ 'YES' THEN BEGIN
    
    IF DONE_BACKUP EQ 0 THEN BEGIN ; ALLOW FILE COPY TO BACKUP MAIN ONLY ONCE DURING AN IDL SESSION 
      COPY = REPLACE(MPMAIN,'_MAIN','_MAIN'+'-' + STRMID(DATE_NOW(),0,8))
      IF FILE_TEST(MPMAIN) EQ 1 THEN FILE_COPY,MPMAIN,COPY,/VERBOSE,/OVERWRITE
      DONE_BACKUP=1
    ENDIF;IF DONE_BACKUP EQ 0 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||   
    
; ===> APPEND NEW MAP TO MAIN
    PFILE, MPMAIN, /A
    M = MAPS_READ()
    M = STRUCT_CONCAT(M,S)
 ;   M = STRUCT_SORT(M, TAGS='MAP')
    STRUCT_2CSV, MPMAIN, M
    
; ===> UPDATE LONLAT FILE
   LL = MAPS_2LONLAT(MP,/OVERWRITE)     

; ===> MAKE A BATHY,LANDMASK, AND ITOPO SAV
    MAPS_LANDMASK,S.MAP, /OVERWRITE
  
  ENDIF;IF YN_ADD_MAP EQ 'YES' THEN BEGIN


  DONE:

  
END; #####################  END OF ROUTINE ################################
