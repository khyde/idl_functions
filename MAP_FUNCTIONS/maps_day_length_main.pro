; $ID:	MAPS_DAY_LENGTH_MAIN.PRO,	2020-07-08-15,	USER-KJWH	$
;+
; ######################################################################### 
  PRO MAPS_DAY_LENGTH_MAIN


; THIS PROGRAM IS A MAIN ROUTINE FOR MAPS_DAY_LENGTH


; HISTORY:
;     OCT 15, 2004  WRITTEN BY: J.E. O'REILLY
;     OCT 6,2013,JOR REVISED EXTENSIVELY
;-
; #########################################################################

;************************************
ROUTINE_NAME  = 'MAPS_DAY_LENGTH_MAIN'
;************************************

; SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
; SSSSS       S W I T C H E S      CONTROLLING WHICH PROCESSING STEPS TO DO SSSSS
;SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS	
; 0 (DO NOT DO THE STEP)
;	1 (DO THE STEP)
; 2 (DO THE STEP AND OVERWRITE ANY OUTPUT IF IT ALREAD EXISTS)
; 3 (STOP IN THE STEP)
; 4 ( PROCESS ONLY FIRST 4 FILES
; 5 (REVERSE THE SETS STRUCTURE
;SSSSS   SWITCHES     SSSSS
; 
  DO_MAPS_DAY_LENGTH_SAV				=	0
  DO_MAPS_DAY_LENGTH_STATS 			= 0
  DO_DAILY_PNGS                 = 0
  DO_DAY_LENGTH_PNGS            = 0
  DO_YEAR_PNGS  		            = 0
  DO_DAY_LENGTH_GE_HRS          = 0
  DO_OC_SAMPLING_EFFICIENCY     = 0
  DO_COMPOSITE_SEASONAL         = 0
  DO_MOVIE                      = 0
  
;SSSSS     END OF SWITCHES     SSSSS

;===> DEFAULTS
PROD = 'DAY_LENGTH'
DIR = GET_SMI(3)

; *****************************************
 	IF DO_MAPS_DAY_LENGTH_SAV GE 1 THEN BEGIN
; *****************************************
    , 'DO_MAPS_DAY_LENGTH_SAV'
    OVERWRITE = DO_MAPS_DAY_LENGTH_SAV EQ 2 & IF DO_MAPS_DAY_LENGTH_SAV EQ 3 THEN STOP
		MAPS_DAY_LENGTH
    , 'DO_MAPS_DAY_LENGTH_SAV'
  ENDIF ; IF DO_MAPS_DAY_LENGTH_SAV GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||||||||||||||||


; *******************************************
  IF DO_MAPS_DAY_LENGTH_STATS GE 1 THEN BEGIN
; *******************************************
    , 'DO_MAPS_DAY_LENGTH_STATS'
    OVERWRITE = DO_MAPS_DAY_LENGTH_STATS EQ 2  & IF DO_MAPS_DAY_LENGTH_STATS EQ 3 THEN STOP
    DIR_IN = DIR.DAY_LENGTH & DIR_OUT = DIR.STATS_PERIODS
    FILES = FILE_SEARCH(DIR_IN,'D_*.SAV') & PN,FILES
    PERIOD_CODE_OUT = 'YEAR'
    DO_STATS=['NUM','MIN','MAX','SUM','MEAN','SPAN']
    FILE_LABEL = 'SMI-DAY_LENGTH'
    STATS_ARRAYS_PERIODS,FILES,PROD=PROD,DIR_OUT=DIR_OUT,$
      PERIOD_CODE_OUT =PERIOD_CODE_OUT, $
      FILE_LABEL=FILE_LABEL,$
      DO_STATS=DO_STATS
     
    , 'DO_MAPS_DAY_LENGTH_STATS'
  ENDIF ; IF DO_MAPS_DAY_LENGTH_STATS GE 1 THEN BEGIN
; |||||||||||||||||||||||||||||||||||||||||||||||||||

; ****************************
IF DO_DAY_LENGTH_PNGS GE 1 THEN BEGIN
  ; **************************
  , 'DO_DAY_LENGTH_PNGS'
  OVERWRITE = DO_DAY_LENGTH_PNGS EQ 2  & IF DO_DAY_LENGTH_PNGS EQ 3 THEN STOP
  FILES = FILE_SEARCH(DIR.DAY_LENGTH ,'D_*.SAV') & PN,FILES
  NO_LAND = 0
  BUFFER = 1
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES[NTH]
     DIR_OUT = DIR.DAY_LENGTH_PNGS
    PRODS_2PNG,FILE,DIR_OUT=DIR_OUT,STAT = STAT ,$
      BUFFER = BUFFER,NO_LAND=NO_LAND,BIT_DEPTH = 0,$
      /OVERWRITE,/LONLAT,MAP_OUT = 'ROBINSON',/ADD_DATE_BAR,DB_BKG = 255,$
      CLEVELS=12
    P
  ENDFOR;  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  , 'DO_DAY_LENGTH_PNGS'
ENDIF ; IF DO_DAY_LENGTH_PNGS GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||

; ****************************
IF DO_YEAR_PNGS GE 1 THEN BEGIN
; **************************
  , 'DO_YEAR_PNGS'
  OVERWRITE = DO_YEAR_PNGS EQ 2  & IF DO_YEAR_PNGS EQ 3 THEN STOP
  DO_STATS=['NUM','MIN','MAX','SUM','MEAN','SPAN']
  DO_STATS=['MEAN']
  NO_LAND = 0
  BUFFER = 1
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(DO_STATS)-1 DO BEGIN
    STAT = DO_STATS[NTH]
    DIR_IN = DIR.STATS_PERIODS &  DIR_OUT = DIR.STATS_PERIODS_PNGS 
    FILE = FILE_SEARCH(DIR_IN,'YEAR_2000_2000-SMI-DAY_LENGTH-STATS.SAV') & PL,FILE
    PRODS_2PNG,FILE,DIR_OUT=DIR_OUT,STAT = STAT ,$
    BUFFER = BUFFER,NO_LAND=NO_LAND,BIT_DEPTH = 0,/OVERWRITE
    P
  ENDFOR;FOR NTH = 0,N_ELEMENTS(DO_STATS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
 
  , 'DO_YEAR_PNGS'
ENDIF ; IF DO_YEAR_PNGS GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||
;*******************************************
IF DO_DAY_LENGTH_GE_HRS GE 1 THEN BEGIN
;*******************************************
  ,'DO_DAY_LENGTH_GE_HRS'
  DIR_IN = DIR.DAY_LENGTH & DIR_OUT = DIR.STATS_PERIODS
  FILES = FILE_SEARCH(DIR_IN,'D_*.SAV') & PN,FILES
  HRS = [1,2,4,6]
  FOR _HR = 0,N_ELEMENTS(HRS)-1 DO BEGIN
    HR = HRS(_HR)   & PF,HR,/M
  ARR = REPLICATE(0,[4320,2160])
  ;*********************************************
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    POF,NTH,FILES
    FILE = FILES[NTH]
    PF,FILE,/R
    DL = STRUCT_READ(FILE)
    ;===> FIND DL GE 6
    OK = WHERE(DL NE MISSINGS(DL) AND DL GE HR,COUNT)
    IF COUNT GE 1 THEN ARR[OK] = ARR[OK] + 1
  
  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  OUT = DIR_OUT + 'YEAR_1998_2013-SMI-DAY_LENGTH-NUM-GE_' + ROUNDS(HR)+ '.SAV'
  STRUCT_WRITE,ARR,FILE =OUT ,PROD = 'DAY_LENGTH'
  
ENDFOR;FOR _HR = 0,N_ELEMENTS(HOURS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ,'DO_DAY_LENGTH_GE_HRS'

ENDIF;IF DO_DAY_LENGTH_GE_HRS GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||
;
; ******************************************
IF DO_OC_SAMPLING_EFFICIENCY GE 1 THEN BEGIN
  ; *****************************************
  , 'DO_OC_SAMPLING_EFFICIENCY'
  OVERWRITE = DO_OC_SAMPLING_EFFICIENCY EQ 2 & IF DO_OC_SAMPLING_EFFICIENCY EQ 3 THEN STOP
  DIR_IN = DIR.STATS_PERIODS &  DIR_OUT = DIR.STATS_PERIODS_PNGS
  DL_FILE = FILE_SEARCH(DIR_IN,'YEAR_2000_2000-SMI-DAY_LENGTH-STATS.SAV') & PL,DL_FILE
  CHL_FILE = FILE_SEARCH(DIR_IN,'STUDY_19980101_20131201-OSTAM-2010_12-SMI-STATS.SAV') & PL,CHL_FILE
  CHL = STRUCT_READ(CHL_FILE,TAG = 'NUM',STRUCT=S)
  DL = STRUCT_READ(DL_FILE,TAG = 'MEAN',STRUCT=S)
  STOP
  , 'DO_OC_SAMPLING_EFFICIENCY'
ENDIF ; IF DO_OC_SAMPLING_EFFICIENCY GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||

;***************************************
IF DO_DAILY_PNGS GE 1 THEN BEGIN
  ;***************************************
  DIR_IN = DIR.DAY_LENGTH & DIR_OUT = DIR.DAY_LENGTH_PNGS
  FILES = FILE_SEARCH(DIR_IN,'D_*.SAV') & PN,FILES
  FA = FILE_ALL(FILES)
  OK = WHERE(FA.DAY_START EQ 21,COUNT)
  FILES = FILES[OK]
  M = FIX(FA[OK].MONTH_START)
  OK = WHERE_IN(M ,[3,6,9,12],COUNT)
  FILES = FILES[OK]
  PL,FILES
  FILE_LOOP,'PRODS_2PNG',DIR_OUT=DIR_OUT, BUFFER = 1,NO_LAND=0,BIT_DEPTH = 0,/OVERWRITE,PROD = 'DAY_LENGTH'
  STOP
  WELD,FILES[0],FILES[1],OUT=!S.IDL_TEMP + 'J1.PNG'


ENDIF;IF DO_DAILY_PNGS GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||

;***************************************
IF DO_COMPOSITE_SEASONAL GE 1 THEN BEGIN
;***************************************
DIR_IN = DIR.DAY_LENGTH_PNGS & DIR_OUT = !S.IDL_TEMP
FILES = FILE_SEARCH(DIR_IN,'D_*ROBINSON*.PNG') & PN,FILES
FA = FILE_ALL(FILES)
OK = WHERE(FA.DAY_START EQ 21,COUNT) 
FILES = FILES[OK]
M = FIX(FA[OK].MONTH_START)
OK = WHERE_IN(M ,[3,6,9,12],COUNT)
FILES = FILES[OK]
PL,FILES 
STOP
WELD,FILES[0],FILES[1],OUT=!S.IDL_TEMP + 'J1.PNG'
WELD,FILES(2),FILES(3),OUT=!S.IDL_TEMP + 'J2.PNG'
WELD,!S.IDL_TEMP + 'J1.PNG',!S.IDL_TEMP + 'J2.PNG',OUT=!S.IDL_TEMP + 'J3.PNG',/PORTRAIT

ENDIF;IF DO_COMPOSITE_SEASONAL GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||


;***************************
IF DO_MOVIE GE 1 THEN BEGIN
;***************************
FILES = FILE_SEARCH(DIR.DAY_LENGTH_PNGS,'D_*ROBINSON-DAY_LENGTH*.PNG') & PN,FILES,'FILES'
;FILES = FILES(0:10)

;===> SUBSET FILES FOR TESTING
FPS = 15
TYPE = 'MP4'
;TITLE = 'DAY_LENGTH -JAY
 MOVIE, FILES,$
                MOVIE_FILE=MOVIE_FILE, $; FULL NAME OF MOVIE FILE
                FPS=FPS, $ ; FRAMES PER SECOND
                TYPE=TYPE,TITLE=TITLE 
ENDIF;IF DO_MOVIE GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||


END; #####################  END OF ROUTINE ################################
