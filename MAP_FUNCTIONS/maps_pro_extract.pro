; $ID:	MAPS_PRO_EXTRACT.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;;#############################################################################################################
	FUNCTION MAPS_PRO_EXTRACT,MAPS,APPEND=APPEND
;
;
; PURPOSE: THIS FUNCTION EXTRACTS MAP PARAMETERS FROM MAP*_PRO
; 
; CATEGORY:	MAPS;		 
;
; CALLING SEQUENCE: RESULT = MAPS_PRO_EXTRACT(MAPS)
;
; INPUTS: MAPS PROGRAM NAME [HAVING A MAP_SET COMMAND]

; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;   APPEND: ADDS MAPS TO MAPS MAIN

; OUTPUTS: 
;		
;; EXAMPLES:
;  S = MAPS_PRO_EXTRACT('NEC')
;	NOTES:
;	
; MODIFICATION HISTORY:
;			WRITTEN JAN 22,2014 J.O'REILLY
;			JAN 25,2014,JOR ADDED SCALE_FACTOR & SCALE [TO FIX NEC,EC, OTHERS]
;#################################################################################
;-
;*********************************
ROUTINE_NAME  = 'MAPS_PRO_EXTRACT'
;*********************************
;scale
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
    MAP = MAPS[NTH] & PFILE,MAP,/U
    IF FILE_TEST('MAP_' + MAP+ '.PRO') EQ 0 THEN BEGIN
      TXT = 'ERROR: MAP '+ MAP + '  NOT FOUND'
      REPORT,TXT
      CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    ENDIF;IF FILE_TEST('MAP_' + MAP+ '.PRO' EQ 0 THEN BEGIN
    
    SET_PLOT,'WIN'
    !P.MULTI=0 ;MAKE SURE !P.MULTI IS 0
    I = MAPS_INFO( MAP ,  QUIET=1)
    IF !X.TYPE EQ 0 THEN ZWIN,[M.PX,M.PY]
    
    CALL_PROCEDURE,'MAP_'+ MAP,NAME = NAME,CODE=CODE, PROJ = PROJ, P0LAT = P0LAT, P0LON = P0LON, ROT = ROT,$
      LIMIT = LIMIT, PX = PX, PY =PY,GRACE=GRACE,$
      SCALE=SCALE,ISOTROPIC = ISOTROPIC,STANDARD_PARALLELS = STANDARD_PARALLELS
    MM= !MAP
 ;;;   MAP_PROJ_INFO, /CURRENT, SCALE=METERS ;===> SCALE FOR NEC,EC,ALASKA,
    POSITION=[0.0, 0.0, 1.0, 1.0]
    DX=POSITION(2)-POSITION[0]
    
    IF IDLTYPE(I) EQ 'STRUCT' THEN BEGIN
      DATE =';DATE ' +DATE_FORMAT(DATE_NOW(),/YMD,/COMMA)
      DATE = REPLACE(DATE,";DATE ",'')
      INIT= I.INIT
      P0LAT = MM.P0LAT
      P0LON = MM.P0LON
      ROT = FLOAT(MM.ROTATION)
      PROJ = I.PROJ
      LIMIT = I.LIMIT
      TAGNAMES=TAG_NAMES(I)
      IF WHERE(TAGNAMES EQ 'LOWER_PARALLEL') NE -1 THEN STANDARD_PARALLELS = [I.LOWER_PARALLEL,I.UPPER_PARALLEL] ELSE STANDARD_PARALLELS = ''
      ;### NO EASY WAY TO DETERMINE ISOTROPIC ??
      ;===> LOOK FOR 'ISOTROPIC=' IN THE MAP PROGRAM
      TXT = STRCOMPRESS(READ_TXT(!S.DIR_PROGRAMS + 'MAP_' + MAP + '.PRO' ),/REMOVE_ALL)
      ;===> REMOVE ALL ;  AND $ AND ,
      TXT = REPLACE(TXT,['$',';',','],['','',''])
      OK = WHERE_STRING(TXT,'ISOTROPIC=',COUNT_ISOTROPIC)
      IF COUNT_ISOTROPIC EQ 0 THEN ISOTROPIC = 0 ; NOT FOUND IN PROGRAM
      IF COUNT_ISOTROPIC GE 1 THEN BEGIN
        T = TXT[OK]
        OK = WHERE_STRING(T,'ISOTROPIC=0',COUNT_ZERO)
        OK = WHERE_STRING(T,'ISOTROPIC=1',COUNT_ONE)
        IF COUNT_ZERO GE 1 THEN ISOTROPIC = 0
        IF COUNT_ONE GE 1 THEN ISOTROPIC = 1       
      ENDIF;IF COUNT_ISOTROPIC GE 1 THEN BEGIN
      POSITION=[0.0, 0.0, 1.0, 1.0]
      NOBORDER = 1
      PX = I.PX
      PY = I.PY
      MAP_OUT=I.MAP_OUT
      PX_OUT=I.PX_OUT
      PY_OUT=I.PY_OUT      
      NAME = STRTRIM(STR_CAP(REPLACE(MAP,'_',' '),/ALL),2)
      IF N_ELEMENTS(SCALE) EQ 0 THEN SCALE = ''
      
      D=CREATE_STRUCT('MAP',MAP,'NAME',NAME,'CODE','','PROJ',PROJ,$
        'P0_LAT',P0LAT,'P0_LON',P0LON,'ROT',ROT,$
        'LIMIT',LIMIT,'SCALE',SCALE,'POSITION',POSITION,'NOBORDER',NOBORDER,'ISOTROPIC',ISOTROPIC,$
        'STANDARD_PARALLELS',STANDARD_PARALLELS,'INIT',INIT,'PX',PX,'PY',PY,'MAP_OUT',MAP_OUT,'PX_OUT',PX_OUT,'PY_OUT',PY_OUT,$
        'DATE',DATE)
        
       S = MAPS_STRUCT() 
       STRUCT_ASSIGN,D,S 
       LIMIT = D.LIMIT
       STRUCT_ASSIGN, STRUCT_IT(LIMIT[0],'LATMIN'),S,/NOZERO
       STRUCT_ASSIGN, STRUCT_IT(LIMIT[1],'LONMIN'),S,/NOZERO
       STRUCT_ASSIGN, STRUCT_IT(LIMIT(2),'LATMAX'),S,/NOZERO
       STRUCT_ASSIGN, STRUCT_IT(LIMIT(3),'LONMAX'),S,/NOZERO
       PARALLELS = D.STANDARD_PARALLELS
       STRUCT_ASSIGN, STRUCT_IT(PARALLELS[0],'PAR_LOW'),S,/NOZERO
       IF PARALLELS[0] NE '' THEN STRUCT_ASSIGN, STRUCT_IT(PARALLELS[1],'PAR_UPP'),S,/NOZERO      
       IF SCALE[0] NE '' THEN STRUCT_ASSIGN, STRUCT_IT(SCALE[0],'SCALE'),S,/NOZERO

   ENDIF;IF IDLTYPE(M) EQ 'STRUCT' AND IDLTYPE(I) EQ 'STRUCT' THEN BEGIN
   IF N_ELEMENTS(DB) EQ 0 THEN DB = S ELSE DB = [DB,S]
ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IF NOT KEYWORD_SET(APPEND) THEN BEGIN
  RETURN,DB
  ENDIF ELSE BEGIN
    
;===> ADD THESE MAPS TO MAIN
DATE = STRTRIM(DATE_FORMAT(DATE_NOW(),/YMD,/COMMA),2)
MPMAIN = !S.ILD_MAINFILES + 'MAPS_MASTER.CSV'
COPY = REPLACE(MPMAIN,'_MASTER','_MASTER'+'-' + DATE)
IF FILE_TEST(MPMAIN) EQ 1 THEN  FILE_COPY,MASTER,COPY,/VERBOSE,/OVERWRITE
STRUCT_2CSV,MASTER,DB,/APPEND & PF,MASTER,/A
ENDELSE;IF NOT KEYWORD_SET(APPEND) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||
DONE:          
	END; #####################  END OF ROUTINE ################################
