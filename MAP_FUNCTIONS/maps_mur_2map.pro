; $ID:	MAPS_MUR_2MAP.PRO,	2019-08-09-11,	USER-KJWH	$
;##########################################################################
FUNCTION MAPS_MUR_2MAP, MUR, MAP_OUT, INIT=INIT

; THIS PROGRAM CONVERTS A 36000 X 17999 MUR ARRAY TO A VALID MAP
;
; CATEGORY:
;    MAPPING
;    
; UTILITY:
;    REMAPPING
;    
; CALLING SEQUENCE:
;    NEW = MAPS_MUR_2BIN(MUR, 'NEC') 
;    
; INPUTS:
;   MUR......... A 36000 X 17999 MUR DATA ARRAY
;   MAP_OUT..... ANY OF THE VALID_MAPS
;
; OPTIONAL INPUTS:
;
; KEYWORDS:
;
; OUTPUTS:
;
; EXAMPLES:
; 
; NOTES:
;  THE MUR_36000_17999_LAT(LON).SAV FILES WERE CREATED USING MAPS_L3B_SUBS
;  
; MODIFICATION HISTORY:
;     MAR 17, 2016  WRITTEN BY: BY K.J.W.HYDE, 28 TARZWELL DRIVE, NMFS, NOAA 02882 (KIMBERLY.HYDE@NOAA.GOV)
;     APR 28, 2016 - JEOR: MDATA = MAPS_LONLAT_GRID(MUR, MAP_OUT=MAP_OUT,METHOD = 'NATURALNEIGHBOR', LON=LONS, LAT=LATS, STRUCT=REMAP_STRUCT, INIT=INIT)
;     AUG 19, 2016 - KJWH: CHANGED !S.MASTER TO !S.MAPINFO
;     AUG 23, 2016 - KJWH: UPDATED THE MUR FILE NAMES
;     AUG 09, 2019 - KJWH: Changed DATATYPE() to IDLTYPE()
;- 
  
;********************************* 
  ROUTINE_NAME = 'MAPS_MUR_2MAP'
;*********************************
  COMMON MAPS_MUR_2MAP_, LONS, LATS, MUR_STRUCT
  IF KEY(INIT) THEN BEGIN
    LONS = []
    LATS = []
    MUR_STRUCT = []
  ENDIF 
  
  SZ = SIZEXYZ(MUR)
  IF SZ.PX NE 36000 AND SZ.PY NE 17999 THEN RETURN, 'ERROR: INPUT ARRAY DEMINSIONS MUST BE 36000 X 17999'
    
  IF NONE(LONS) THEN LONS = IDL_RESTORE(!S.MAPINFO + 'MUR-PXY_36000_17999-LON.SAV')
  IF NONE(LATS) THEN LATS = IDL_RESTORE(!S.MAPINFO + 'MUR-PXY_36000_17999-LAT.SAV')
  
  IF IDLTYPE(LONS) EQ 'STRING' OR IDLTYPE(LATS) EQ 'STRING' THEN BEGIN
    LONS = []
    LATS = []
    RETURN, 'ERROR: UNABLE TO READ THE MASTER LON/LAT FILES'
  ENDIF
  
  COUNT_MAP_OUT = 0
  IF ANY(MUR_STRUCT) THEN BEGIN
    OK = WHERE(TAG_NAMES(MUR_STRUCT) EQ MAP_OUT, COUNT_MAP_OUT)
    IF COUNT_MAP_OUT EQ 1 THEN REMAP_STRUCT = MUR_STRUCT.(OK) ELSE REMAP_STRUCT = []
  ENDIF ELSE MUR_STRUCT = []

  MDATA = MAPS_LONLAT_GRID(MUR, MAP_OUT=MAP_OUT, METHOD='NATURALNEIGHBOR', LON=LONS, LAT=LATS, STRUCT=REMAP_STRUCT, INIT=INIT)

  ; ===> CREATE COMMON STRUCTURE BASED ON MAP_OUT
  IF MUR_STRUCT NE [] THEN BEGIN
    IF COUNT_MAP_OUT EQ 0 THEN MUR_STRUCT = CREATE_STRUCT(MUR_STRUCT,MAP_OUT,REMAP_STRUCT)
  ENDIF ELSE MUR_STRUCT = CREATE_STRUCT(MAP_OUT,REMAP_STRUCT)
  
  RETURN, MDATA
  
END
