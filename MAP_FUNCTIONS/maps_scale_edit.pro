; $ID:	MAPS_SCALE_EDIT.PRO,	2022-03-21-16,	USER-KJWH	$
; #########################################################################; 
PRO MAPS_SCALE_EDIT,STRUCT
;+
; PURPOSE:  UPDATE PCT [CONGRUENCE WITH OLD MAPS]
;           IN MAPS_MAIN ONLY WHEN PCT IS GREATER THAN LOWEST_PCT AND GREATER THAN THE PCT IN MSTR

;
; CATEGORY: MAPS;
;
;
; INPUTS: STRUCT..... STRUCTURE CONTAINING KEY TAGS NEEDED TO UPDATE SCALE IN MAPS_MAIN
;
;
; KEYWORDS:

; OUTPUTS:
;
;; EXAMPLES:
;
; MODIFICATION HISTORY:
;     FEB 24, 2016  WRITTEN BY: J.E. O'REILLY
;     MAR 10,2016,  JOR NOTES TAG IN MAP_MAIN.csv WAS CHANGED TO PCT 
;                   [SO NOTES IN THIS PRO WAS CHANGED TO PCT]
;-
; #########################################################################

;********************************
ROUTINE_NAME  = 'MAPS_SCALE_EDIT'
;********************************

KEY_TAGS = ['MAP','NEW_SCALE','PCT'];THESE TAGS MUST BE PRESENT IN THE INPUT STRUCT
LOWEST_PCT = 90.0; [CONGRUENCE WITH OLD MAP MUST BE ABOVE 90 % TO UPDATE THE MSTR]

;===> MAKE AN OUTPUT DATABASE TO INFORM ON THE MAPS THAT WERE UPDATED
OUT = CREATE_STRUCT('MAP', '','NEW_SCALE','','PCT','')


IF IDLTYPE(STRUCT) NE 'STRUCT' THEN MESSAGE,'ERROR: INPUT MUST BE A STRUCT'
OK= WHERE_IN(TAG_NAMES(STRUCT),KEY_TAGS,COUNT)
IF COUNT NE NOF(KEY_TAGS) THEN MESSAGE,'STRUCT MUST HAVE TAGS: '+ STRJOIN(KEY_TAGS,';')

;******************************************************
;   MAKE A DATE-STAMPED BACKUP BEFORE EDITING MAIN
;******************************************************
MSTR = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
IF FILE_TEST(MSTR) EQ 0 THEN STOP
COPY = REPLACE(MSTR,'.CSV', '-'+ DATE_STAMP() + '.CSV')
FILE_COPY,MSTR,COPY,/VERBOSE,/OVERWRITE
;|||||||||||||||||||||||||||||||||||||||||||||||||||||

;===> GET MOST RECENT MAIN DATA [/INIT]
M = MAPS_READ(/INIT) & PN,M,' MAPS IN MAIN'

;===> DETERMINE THE NUMBER OF MAPS IN STRUCT
SETS = WHERE_SETS(STRUCT.MAP)
MAPS = SETS.VALUE

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,NOF(MAPS)-1 DO BEGIN
  MAPP = MAPS[NTH]
  PFILE,MAPP,/U
  OK = WHERE(STRUCT.MAP EQ MAPP,COUNT)
  IF COUNT GE 1 THEN DB = STRUCT[OK] 
  ;===> FIND THE HIGHEST PCT [AND ITS SUBSCRIPT] FOR THIS MAP
  MAX_PCT = MAX(DB.PCT,SUB)
  D = DB(SUB)
  OK = WHERE_MATCH(M.MAP,D.MAP,COUNT)

;#########################################################
  ;===> ONLY UPDATE MSTR IF PCT EXCEEDS LOWEST_PCT AND EXCEEDS PCT IN MSTR [M(OK).PCT]
  IF COUNT EQ 1 AND D.PCT GE LOWEST_PCT AND D.PCT GT M[OK].PCT THEN BEGIN
    M[OK].SCALE = STRTRIM(D.NEW_SCALE,2)
    M[OK].PCT = STRTRIM(D.PCT)
    M[OK].PERIOD = 'S_' + DATE_NOW()
    M[OK].AUTHOR = !S.USER
    OUT.MAP = MAPP
    OUT.NEW_SCALE = STRTRIM(D.NEW_SCALE,2)
    OUT.PCT = STRTRIM(D.PCT)
    MESSAGE,/INFORM,'UPDATED SCALE IN MAPS_MAIN FOR MAP > ' + MAPP & WAIT,1 
    IF NONE(DB_OUT) THEN DB_OUT = OUT ELSE DB_OUT = [DB_OUT,OUT]
  ENDIF;IF COUNT EQ 1 AND  D.PCT GT M(OK).PCT THEN BEGIN
  ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||
ENDFOR;FOR NTH = 0,NOF(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;
;===> REWRITE MAPS_MAIN [IF ANY RECORDS WERE UPDATED]
IF NOF(DB_OUT) GE 1 THEN BEGIN
  MSTR = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
  CSV_WRITE,MSTR,M
  ;===> REINITIALIZE MSTR [SO SUBSEQUENT CALLS TO MAP_READ HAVE THE LATEST SCALES]
  M = MAPS_READ(/INIT)
  CSV_WRITE,!S.IDL_TEMP + ROUTINE_NAME + '-' + DATE_STAMP() + '.CSV',DB_OUT
ENDIF ;IF NOF(DB_OUT) GE 1 THEN BEGIN
MESSAGE,/INFORM,'NUMBER OF MAIN MAP RECORDS EDITED: '+ ROUNDS(NOF(DB_OUT))



END; #####################  END OF ROUTINE ################################
