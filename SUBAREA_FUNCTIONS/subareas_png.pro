; $ID:	SUBAREAS_PNG.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;#############################################################################################################
	PRO SUBAREAS_PNG,MAPS=MAPS,SUBAREAS=SUBAREAS,DIR_OUT=DIR_OUT

;
; PURPOSE: MAKES  PNG MAPS OF THE SUBAREA USING THE SUBAREA MASTER DATABASE

; CATEGORY:	SUBAREAS FAMILY
;
; CALLING SEQUENCE: SUBAREAS_PNG,MAPS=MAPS
;
; INPUTS: 
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;		MAPS - THE MAPS TO USE 
;		SUBAREAS - SUBAREAS TO DISPLAY ON THE MAP
;   DIR_OUT - OUTPUT DIRECTORY

; OUTPUTS: 
;   A PNG IMAGE FOR EACH MAP-SUBAREA COMBINATION
;   
;
; MODIFICATION HISTORY:
;			JUN 03,2014,WRITTEN BY J.O'REILLY 
;						
;			
;			
;#################################################################################
;-
;*********************************
ROUTINE_NAME  = 'SUBAREAS_PNG'
;*********************************

COMMON _SUBAREAS_PNG,SUBAREAS_XY 

MAPS = ['EC','NEC']
 
IF NONE(MAPS) THEN MESSAGE,'ERROR: MAPS ARE REQUIRED'
IF NONE(DIR_OUT) THEN DIR_OUT = !S.IDL_TEMP

;===> RESTORE THE STRUCTURE SUBAREA_XY FROM THE LAST SESSION [TO SAVE TIME]
IF NONE(SUBAREAS_XY) THEN BEGIN
  SUBAREAS_XY_FILE = !S.MASTER + 'SUBAREAS_XY.SAV'
  IF FILE_TEST(SUBAREAS_XY_FILE) THEN BEGIN
    SUBAREAS_XY = IDL_RESTORE(SUBAREAS_XY_FILE)
    PRINT,'SUBAREAS IN '+  SUBAREAS_XY_FILE
    ST,SUBAREAS_XY  
  ENDIF ELSE BEGIN
    PRINT,'CAN NOT FIND  ' + SUBAREAS_XY_FILE & WAIT,5  
  ENDELSE;IF FILE_TEST(SUBAREAS_XY_FILE) THEN BEGIN
ENDIF;IF NONE(SUBAREAS_XY) THEN BEGIN


;===> READ THE SUBAREAS MASTER
MASTER = !S.MASTER + 'SUBAREAS_MASTER.SAV'
SAV = IDL_RESTORE(MASTER) 

IF NONE(SUBAREAS_XY) OR KEYWORD_SET(REFRESH) THEN SUBAREAS_XY=CREATE_STRUCT('_','')
IF NONE(AROUND) THEN AROUND = 1



;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES[NTH] & PFILE,FILE,/R
    ;===> GET INFO FROM FILE
    D = STRUCT_COPY(FILE_ALL(FILE),TAGNAMES =['FIRST_NAME','MAP','SENSOR','PROD','ALG','PERIOD','PERIOD_CODE','STAT','MATH'])
    IF D.ALG EQ '' AND D.PROD EQ 'CHLOR_A' THEN D.ALG = 'OC4'
  
    FILE_DATE = GET_MTIME(FILE,/DATE)
    D = CREATE_STRUCT(D,'FILE_DATE',FILE_DATE)
 
   DATA = STRUCT_READ(FILE)
   ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
   FOR _MAP = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
    AMAP = MAPS(_MAP)
    D.MAP = AMAP
    MAPS_SET,AMAP
    LL = !MAP.LL_BOX & LATMIN = LL[0] & LONMIN = LL[1] & LATMAX = LL(2) &LONMAX = LL(3)
   
    ;===> FIND SUBAREAS WITHIN MAP DOMAIN
    OK = WHERE(SAV.LATMIN GE LATMIN AND SAV.LONMIN GE LONMIN AND SAV.LATMAX LE LATMAX AND SAV.LONMAX LE LONMAX,COUNT)
  
     IF COUNT GE 0 THEN SUBS = SAV[OK]
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
      FOR _SUB = 0,N_ELEMENTS(SUBS) -1 DO BEGIN
        SUB= SUBS(_SUB)
        SUBAREA = SUB.SUBAREA
        PFILE,SUBAREA,/U
        ;;IF SUBAREA EQ 'BATS' THEN STOP
        SUBAREA_TXT = AMAP+'_'+STRTRIM(SUBAREA,2)
        OK_SUBAREA = WHERE(TAG_NAMES(SUBAREAS_XY) EQ SUBAREA_TXT,COUNT_SUBAREA)

        ;===> ADD ANOTHER SUBAREA_TXT  TO THE SUBAREAS_XY STRUCTURE
        IF COUNT_SUBAREA EQ 0 THEN BEGIN
          LONS = FLOAT(STR_SEP(SUB.LON,';'))
          LATS = FLOAT(STR_SEP(SUB.LAT,';'))
          IF N_ELEMENTS(LONS) + N_ELEMENTS(LATS) NE 2*LONG(SUB.NPTS) THEN $
            MESSAGE,'ERROR: INCORRECT NUMBER OF POINTS'
          ;===> CONVERT LONS,LATS TO PIXEL COORDS
          XYZ = CONVERT_COORD(LONS,LATS,/DATA,/TO_DEVICE)
          X = REFORM(XYZ(0,*)) & Y = REFORM(XYZ(1,*))
          
;          IF N_ELEMENTS(X) EQ 1 THEN BEGIN
;            M = MAPS_READ(AMAP)
;            XY = IMAGE_PXPY(BYTARR([M.PX,M.PY]))
;            XX = XY.X(X) & YY = XY.Y(Y)
;            B = BOX_AROUND(XY.X, [X,Y], SUBS=SUBS, AROUND=AROUND)
;            XX =[(X-AROUND),X,(X+AROUND)] & YY =[(Y-AROUND),Y,(Y+AROUND)] & X = XX & Y=YY
;          ENDIF;IF N_ELEMENTS(X) EQ 1 THEN BEGIN
          SUBAREAS_XY=CREATE_STRUCT(TEMPORARY(SUBAREAS_XY),SUBAREA_TXT,$
            CREATE_STRUCT('X',X, 'Y',  Y))
          PL,TAG_NAMES(SUBAREAS_XY)
        ENDIF ELSE BEGIN
          X = SUBAREAS_XY.(OK_SUBAREA).X
          Y = SUBAREAS_XY.(OK_SUBAREA).Y
        ENDELSE;IF COUNT_SUBAREA EQ 0 THEN BEGIN
;===> SINGLE LON,LAT [E.G.BATS]          
        
        _DATA = DATA(X,Y)
        OK = WHERE(_DATA NE MISSINGS(_DATA),NUM)
        STATS_ = STRUCT_REMOVE(STATS(_DATA), 'STATSTRING')
        STATS_ = CREATE_STRUCT('SUBAREA',SUBAREA,'N_VALID',NUM,STATS_)
        ;===> CHANGE INF TO NANS
        STATS_ = MISSING_2NAN( STATS_)
        DB  = STRUCT_MERGE(D,STATS_)
        IF NONE(ALL) THEN ALL = DB ELSE ALL = [ALL,DB]
        ;PN,ALL       
      ENDFOR;FOR SUB = 0,N_ELEMENTS(SUBS) -1 DO BEGIN
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
     ZWIN
   ENDFOR;FOR _MAP = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
   ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
   
  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ;===> WRITE THE SUBAREA MEANS THAT 
  ;     WERE EXTRACTED FROM ALL THE FILES
  CSVFILE = DIR_OUT + ROUTINE_NAME + '.CSV'
  CSV_WRITE,CSVFILE,ALL & PFILE,CSVFILE
  P
;===> SAVE THE STRUCTURE SUBAREAS_XY FOR THE NEXT SESSION
 ;SUBAREAS_XY_FILE = DIR_OUT + ROUTINE_NAME +'- SUBAREAS_XY.SAV'
 SAVE,FILENAME = SUBAREAS_XY_FILE,SUBAREAS_XY,/COMPRESS
 PFILE,SUBAREAS_XY_FILE



END; #####################  END OF ROUTINE ################################
