; $ID:	SUBAREAS_DEMO.PRO,	2020-07-01-12,	USER-KJWH	$
; 
PRO SUBAREAS_DEMO

; #########################################################################; 
;+
; THIS IS A DEMO ROUTINE FOR DOING SUBAREA EXTRACTIONS


; HISTORY:
;     MAY 28, 2014  WRITTEN BY: J.E. O'REILLY
;     DEC 12, 2016 - KJWH: Copied updated PLT_SHP demo example
;     DEC 13, 2016 - KJWH: Created a manual subarea extraction using the output structure from PLT_SHP
;     NOV 22, 2017 - KJWH: Changed PLT_SHP to READ_SHPFILE
;-
; #########################################################################

;***********************************
  ROUTINE_NAME  = 'SUBAREAS_DEMO'
;***********************************

; SWITCHES CONTROLLING WHICH PROCESSING STEPS TO DO:
  PLT_SHP_EXAMPLE = ''
  SUBAREA_EXTRACT	= ''
  SUBAREA_PLOT    = ''
  

  SL = PATH_SEP()
  DIR_OUT = !S.DEMO + ROUTINE_NAME + SL & DIR_TEST, DIR_OUT

; **********************************
  IF KEY(PLT_SHP_EXAMPLE) THEN BEGIN
; **********************************
    SWITCHES,PLT_SHP_EXAMPLE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP

    MP = 'NES'
    LAND = READ_LANDMASK(MP)
    OCEAN = READ_LANDMASK(MP,/OCEAN)
    CLR = 10
    , 'DO_PLT_SHP_EACH'

    PRINT,'THIS STEP MAKES A NES PNG FOR EACH OF THE SHAPE FILES'
    DIR = !S.IDL_SHAPEFILES +'NES' + SL
    FILES = FILE_SEARCH(DIR,'*.shp',COUNT=COUNT_FILES) & PL,FILES
    IF COUNT_FILES EQ 0 THEN STOP

    READ_SHPFILE, FILES, MP=MP, COLOR=COLORS,FILL=1,THICK=THICK,VERBOSE=1, GET_RANGE=GET_RANGE, TAGNAME=TAGNAME, VALUE=VALUE, STRUCT=STRUCT, $
      RANGE_X=RANGE_X, RANGE_Y=RANGE_Y, NORMAL=NORMAL, DO_ALL=DO_ALL, AUTO=AUTO,_EXTRA=_EXTRA

    STAGS = TAG_NAMES(STRUCT)
    DIR_PNGS = DIR_OUT + 'PNGS' + SL & DIR_TEST, DIR_PNGS
    FOR I=0, N_TAGS(STRUCT)-1 DO BEGIN
      PNG = DIR_OUT + STAGS(I) + '.PNG'
      ST, STRUCT.(I)
      FULL_IMG = LAND
      TAGS = TAG_NAMES(STRUCT.(I))
      CLRS = BINDGEN(N_TAGS(STRUCT.(I))+1)
      IF N_TAGS(STRUCT.(I)) LT 10 THEN CLRS = (CLRS+1)*20 ELSE CLRS = CLRS+10
      FOR S=0, N_TAGS(STRUCT.(I))-1 DO BEGIN
        PNGFILE = DIR_PNGS + STAGS(I) + '-' + TAGS(S) + '.PNG'
        IMG = STRUCT.(I).(S).IMG
        OK = WHERE(IMG NE 0)
        IM = LAND & IM[OK] = 200
        IF TAGS(S) NE 'NES' THEN FULL_IMG[OK] = CLRS(S) ; Don't add the NES polygon to the merged map because it hides the other polygons
        IM[WHERE(OCEAN EQ 0)] = LAND[WHERE(OCEAN EQ 0)]
        PAL_LANDMASK,R,G,B
        PFILE,PNGFILE
        WRITE_PNG,PNGFILE,IM,R,G,B
      ENDFOR
      FULL_IMG[WHERE(OCEAN EQ 0)] = LAND[WHERE(OCEAN EQ 0)]
      PAL_LANDMASK,R,G,B
      WRITE_PNG, PNG, FULL_IMG, R, G, B
      PFILE, PNG
    ENDFOR

    , 'PLT_SHP_EXAMPLE'

  ENDIF ; IF PLT_SHP_EXAMPLE GE 1 THEN BEGIN
  ; ||||||||||||||||||||||||||||||||||||


; **********************************
  IF KEY(SUBAREA_EXTRACT) THEN BEGIN
; **********************************
    SNAME = 'SUBAREA_EXTRACT'
    SWITCHES,SUBAREA_EXTRACT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
    , SNAME

    MP = 'NES'
    FILES = FILE_SEARCH(!S.FILES + 'M_2002*' + MP + '*CHLOR_A*STATS.SAV')
    PLIST,FILES
    
    PRINT,'THIS STEP EXTRACTS DATA FROM NES SUBREGIONS'
    DIR = !S.IDL_SHAPEFILES +'NES' + SL
    SFILES = FILE_SEARCH(DIR,'*.shp',COUNT=COUNT_FILES) & PL,FILES
    IF COUNT_FILES EQ 0 THEN STOP

    READ_SHPFILE, SFILES, MP=MP, COLOR=COLORS,FILL=1,THICK=THICK,VERBOSE=VERBOSE, GET_RANGE=GET_RANGE, TAGNAME=TAGNAME, VALUE=VALUE, STRUCT=STRUCT, $
      RANGE_X=RANGE_X, RANGE_Y=RANGE_Y, NORMAL=NORMAL, DO_ALL=DO_ALL, AUTO=AUTO,_EXTRA=_EXTRA

    STAGS = TAG_NAMES(STRUCT)
    FOR I=0, N_TAGS(STRUCT)-1 DO BEGIN
      CSV = DIR_OUT + STAGS(I) + '.CSV'
      IF FILE_MAKE([FILES,SFILES],CSV,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      ST, STRUCT.(I)
      TAGS = TAG_NAMES(STRUCT.(I))
      
      NEW = [] 
      FOR F=0, N_ELEMENTS(FILES)-1 DO BEGIN
        D = STRUCT_READ(FILES(F),STRUCT=S)
        MN = S.MEAN
        PR = PRODS_READ(S.PROD)
        IF PR.LOG EQ '1' THEN STRANS = 'ALOG' ELSE STRANS = ''
        FOR T=0, N_TAGS(STRUCT.(I))-1 DO BEGIN
          SUBS = MN(STRUCT.(I).(T).SUBS)
          SDATA = SUBS[WHERE(SUBS NE MISSINGS(MN),NUM,/NULL)]
          IF NUM EQ 0 THEN STAT = STRUCT_2MISSINGS(CREATE_STRUCT('N',0L,'MIN',0.0,'MAX',0.0,'MED',0.0,'AMEAN',0.0,'GMEAN',0.0)) $
                      ELSE STAT = STATS(SDATA,TRANSFORM=STRANS,/QUIET,/BASIC)
          STR = CREATE_STRUCT('PERIOD',S.PERIOD,'SENSOR',S.SENSOR,'PRODUCT',S.PROD+'-'+S.ALG,'REGION',STAGS(I),'SUBAREA',TAGS(T),'N_VALID',NUM,'PERCENT_VALID',FLOAT(NUM)/N_ELEMENTS(SUBS),STRUCT_REMOVE(STAT, 'N'),'INPUT_FILE',S.NAME,'DATE_CREATED',S.DATE)
          IF NEW EQ [] THEN NEW = STR ELSE NEW = STRUCT_CONCAT(NEW, STR)
        ENDFOR ; SUBAREAS
        
      ENDFOR ; FILES  
      STRUCT_2CSV, CSV, NEW
      PFILE, CSV
    ENDFOR

    , 'SUBAREA_EXTRACT'
  ENDIF ; IF SUBAREA_EXTRACT GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||


; **********************************
  IF KEY(SUBAREA_PLOT) THEN BEGIN
; **********************************
    SNAME = 'SUBAREA_PLOT'
    SWITCHES,SUBAREA_EXTRACT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
    , SNAME
    BUFFER = 1

    DIR_PLTS = DIR_OUT + 'PLOTS' + SL & DIR_TEST, DIR_PLTS
    CSVS = FILE_SEARCH(DIR_OUT + '*.CSV')
    FOR N=0, N_ELEMENTS(CSVS)-1 DO BEGIN
      DB = CSV_READ(CSVS(N))
      FP = FILE_PARSE(CSVS(N))
      SETS = WHERE_SETS(DB.SENSOR,DB.SUBAREA,DB.PRODUCT,/JOIN)
      IF N_ELEMENTS(SETS) LE 8 THEN COMP = 1 ELSE COMP = 0 
      
      IF KEY(COMP) THEN BEGIN
        PLTFILE = DIR_PLTS + FP.NAME + '-' + 'TIMESERIES.PNG'
        IF FILE_MAKE(CSVS(N),PLTFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
        W = WINDOW(DIMENSIONS=[850,1100])
        TITLE = ''
        MARGIN=[0.1,0.15,0.05,0.1]
      ENDIF    
      FOR S = 0,N_ELEMENTS(SETS) -1 DO BEGIN
        D = DB(WHERE_SETS_SUBS(SETS(S)))
        TXT = REPLACE(D[0].SUBAREA + '-' + D[0].SENSOR,'_','')
        IF ~KEY(COMP) THEN BEGIN
          PLTFILE = DIR_PLTS + FP.NAME + '-' + REPLACE(SETS(S).VALUE,';','-') + 'TIMESERIES.PNG'
          IF FILE_MAKE(CSVS(N),PLTFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
          W = WINDOW(DIMENSIONS=[850,300],BUFFER=BUFFER)
          LAYOUT = [1,1,1]
          TITLE=TXT
          MARGIN=[0.12,0.15,0.05,0.15]
        ENDIF ELSE LAYOUT = [1, N_ELEMENTS(SETS), S+1]  
        
        
        DATES=PERIOD_2DATE(D.PERIOD)
        AX = DATE_AXIS([MIN(DATES),MAX(DATES)],/MONTH)
        DT = DATE_GEN([MIN(DATES),MAX(DATES)],UNITS='MONTH')
        
        Y = FLOAT(D.AMEAN)
        X = PERIOD_2JD(D.PERIOD)
  
        YTITLE = UNITS(FIRST(D.PRODUCT))
        SUBAREA = FIRST(D.SUBAREA)
        
        PLT = PLOT(X,Y,BUFFER=BUFFER, CURRENT=1, LAYOUT=LAYOUT, MARGIN=MARGIN, TITLE=TITLE, $
          XTITLE=XTITLE, XRANGE=AX.JD,  XSTYLE=XSTYLE, XTICKNAME=AX.TICKNAME,  XTICKV=AX.TICKV,  XMINOR=XMINOR, XCOLOR=AXES_COLOR, XTHICK=AXES_THICK,$
          YTITLE=YTITLE, YRANGE=YRANGE, YSTYLE=YSTYLE, YTICKNAME=YTICKNAME,    YTICKV=YTICKV,    YMINOR=YMINOR, YCOLOR=AXES_COLOR, YTHICK= AXES_THICK, $
          FONT_SIZE=16, LINESTYLE=LINESTYLE, COLOR='BLUE', THICK=3, SYMBOL='CIRCLE', SYM_FILLED=1, SYM_COLOR='BLUE', SYM_FILL_COLOR=SYM_FILL_COLOR, SYM_SIZE=SYM_SIZE, SYM_THICK=SYM_THICK, CLIP=CLIP)
        POS = PLT.POSITION  
        IF KEY(COMP) THEN T = TEXT(POS[0]+0.02,POS(3)-0.03,TXT,FONT_SIZE=14)       
        IF KEY(COMP) THEN CONTINUE
        W.SAVE, PLTFILE
        W.CLOSE 
        PFILE, PLTFILE, /W
;        PLT_MONTHS,DATES,Y,TITLE=TITLE,XTITLE=XTITLE,YTITLE=YTITLE,OUTFILE=OUTFILE,BUFFER=0
      ENDFOR ; SETS
      IF KEY(COMP) THEN BEGIN
        W.SAVE, PLTFILE
        W.CLOSE
        PFILE, PLTFILE, /W
      ENDIF
    ENDFOR ; CSVS
  ENDIF ; SUBAREA_PLOT
  

END; #####################  END OF ROUTINE ################################
