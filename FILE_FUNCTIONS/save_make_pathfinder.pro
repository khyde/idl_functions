; $ID:	SAVE_MAKE_PATHFINDER.PRO,	2020-06-30-17,	USER-KJWH	$
;########################################################################################
	PRO SAVE_MAKE_PATHFINDER, FILES, DIR_OUT=DIR_OUT, QUALITY_LEVEL=QUALITY_LEVEL, MAPS_OUT=MAPS_OUT, DATA_ONLY=data_only, RETURN_STRUCT=return_struct, $
	    OVERWRITE=OVERWRITE, LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX, LOGLUN=LOGLUN

; NAME:
;   SAVE_MAKE_PATHFINDER
;
; PURPOSE:
;   THIS PROCEDURE CREATES SAVE FILES FROM AVHRR NETCDF DATA
;
; CALLING SEQUENCE:
;
; INPUTS:
;   FILES: COMPLETE FILE NAMES
;   
;
; OPTIONAL INPUTS:
;   MAP - OPTIONAL OUTPUT MAP (DEFAULT IS GEQ)
;
; KEYWORD PARAMETERS:
;   DIR_OUT......... Output directory for the new SAVE files 
;   QUALITY_LEVEL... Quality level to use when masking the data (Default level is 3)
;   MAPS_OUT........ Standard map name to output the data [see VALID_MAPS]
;   LOGLUN.......... If provided, then lun for the log file

;   
; OUTPUTS:
;   THIS PROGRAM CREATES AVHRR SST SAVE FILES
;
; NOTES:
; ********************************************************
; DOCUMENTATION ON THE JPL MODIS AQUA SST NETCDF FILES
; NOTES:
;   THE SST IS SCALED FROM THE RAW IMAGE IN THE NC USING THE SCALE FACTOR AND OFFSET IN THE NC FILE 
;   LAND AND OUT_SCAN ARE BOTH CODED AS 255 IN THE RAW IMAGE
;   THE FLAGS CAN BE USED TO DETERMINE LAND PIXELS 
;   This program uses PATHFINDER_QUALITY_LEVEL flags instead of QUALITY_LEVEL, but the QUALITY_LEVEL 3 should return the same mask with both  
;     OK_QUAL_0 = WHERE(MASK_IMAGE EQ 0, COUNT_QUAL_0) ; BAD_DATA            = QUALITY_LEVEL 1
;     OK_QUAL_1 = WHERE(MASK_IMAGE EQ 1, COUNT_QUAL_1) ; WORST_QUALITY       = QUALITY_LEVEL 2
;     OK_QUAL_2 = WHERE(MASK_IMAGE EQ 2, COUNT_QUAL_2) ; LOW_QUALITY         = QUALITY_LEVEL 3
;     OK_QUAL_3 = WHERE(MASK_IMAGE EQ 3, COUNT_QUAL_3) ; LOW_QUALITY         = QUALITY_LEVEL 3
;     OK_QUAL_4 = WHERE(MASK_IMAGE EQ 4, COUNT_QUAL_4) ; ACCEPTABLE_QUALITY  = QUALITY_LEVEL 4
;     OK_QUAL_5 = WHERE(MASK_IMAGE EQ 6, COUNT_QUAL_5) ; ACCEPTABLE_QUALITY  = QUALITY_LEVEL 4
;     OK_QUAL_6 = WHERE(MASK_IMAGE EQ 7, COUNT_QUAL_6) ; ACCEPTABLE_QUALITY  = QUALITY_LEVEL 4
;     OK_QUAL_7 = WHERE(MASK_IMAGE EQ 7, COUNT_QUAL_7) ; BEST_QUALITY        = QUALITY_LEVEL 5
; |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
;
; MODIFICATION HISTORY:
;     JUL 15, 2008 - TD:   ADD COVERAGE
;     APR 18, 2011 - KJWH: CHANGE INPUTS TO DIR_IN AND DIR_OUT AND TO LOOP THROUGH THE FILES WITHIN THE PROGRAM    
;     NOV  7, 2013 - KJWH: LOOP ON MAPS_OUT     
;     MAR 27, 2014 - KJWH: FIXED A PROBLEM WITH MAP_OUT
;     MAY 29, 2014 - JOR:  ADDED SOME DOCUMENTATION,UPDATED CODE,FORMATTING,
;                          REMOVED UNUSED KEYWORDS:FILE_TARGET,MASK_TARGET,
;                          NOW USING PATH_SEP()
;                          FIXED BUG - FROM: SPOS = STRPOS(FP.NAME,'_NIGHT')
;                                      TO:   SPOS = STRPOS(STRUPCASE(FP.NAME),'_NIGHT')
;     JAN 13, 2015 - KJWH: CHANGED READ_NETCDF_2STRCUT TO READ_NC          
;     OCT 20, 2015 - KJWH: CHANGED NAME TO SAVE_MAKE_PATHFINDER TO BE CONSISTENT WITH OTHER PROGRAMS THAT MAKE SAVE FILES     
;     NOV 10, 2015 - KJWH: REMOVED REVERSE_FILES KEYWORD (SHOULD BE DONE IN THE WRAPPER PROGRAM)    
;     MAR 18, 2016 - KJWH: CHANGED DATATYPE TO IDLTYPE              
;     SEP 14, 2016 - KJWH: CHANGED THE OUTPUT STRUCT TAG "INFILE" TO "NCFILES" TO BE CONSISTENT WITH OTHER FILES
;     OCT 03, 2016 - KJWH: UPDATED THE REMAPING STEP - NOW USING MAPS_REMAP AND MAP_IN = 'AVHRR'
;                          REMOVED SEVERAL UNNECESSARY KEYWORDS (DATERANGE, REFRESH, PX_OUT, PY_OUT)
;                          ADDED KEYWORDS (DATA_ONLY, RETURN_STRUCT, LONMIN, LONMAX, LATMIN, LATMAX)
;                          NOW SAVING THE GLOBAL FILE
;                          ADDED ADDITIONAL INFORMATION TO THE SAVE STRUCTURE
;     MAY 21, 2018 - KJWH: Removed IMAGE=SST_IMG from the save structure.  There is no need to save the data array twice.     
;     SEP 06, 2019 - KJWH: Added LOGLUN keyword                
;-
;**************************************
  ROUTINE_NAME='SAVE_MAKE_PATHFINDER'
;**************************************
;===> DEFINE CONSTANTS 
  DASH=DELIMITER(/DASH)
  SL=PATH_SEP()
  IF NONE(LOGLUN) THEN LOG_LUN = [] ELSE LOG_LUN = LOGLUN
  DIR_LOG = !S.LOGS + ROUTINE_NAME + SL & DIR_TEST, DIR_LOG
  
;===> CHECK INPUT KEYWORDS
  IF NONE(QUALITY_LEVEL)        THEN QUALITY_LEVEL = 3 ; (SENSITIVITY TESTS INDICATED THAT MASK CODES 1,2 & 3 WILL MASK BAD DATA)
  IF NONE(MAPS_OUT)             THEN MAPS = 'NO_MAP' ELSE MAPS = MAPS_OUT    
  IF NONE(FILES)                THEN SST_FILES = DIALOG_PICKFILE(TITLE='PICK Z OR HDF FILES') ELSE SST_FILES = FILES
    
  NOTES = 'QUALITY LEVEL ='+NUM2STR(QUALITY_LEVEL)
   
; ===> CREATE OUTPUT DIRECTORIES
  FP = FILE_PARSE(FILES[0])
  IF NONE(DIR_OUT) THEN DIR_OUT = REPLACE(FP.DIR,FP.SUB+SL,'')
  DIR_GLOBAL = DIR_OUT + 'GLOBAL' + SL
  DIRS_SAVE = [] 
  FOR M=0, N_ELEMENTS(MAPS)-1 DO DIRS_SAVE = [DIRS_SAVE,DIR_OUT + MAPS(M) + SL + 'SAVE' + SL + 'SST'  + SL] 
  DIR_TEST, [DIRS_SAVE,DIR_GLOBAL]
  
; ===> LOOP THROUGH FILES  
  FOR NTH = 0L, N_ELEMENTS(FILES)-1 DO BEGIN
    SFILE = FILES[NTH]
    FP = PARSE_IT(SFILE)
    SI = SENSOR_INFO(SFILE)
    PRODS = STRSPLIT(SI.NC_PROD,SI.DELIM,/EXTRACT)
    CASE SI.METHOD OF
      'PFV5_3': METHOD = 'V5.3'  
    ENDCASE
    OUTPUT_LABEL = SI.PERIOD + DASH + SI.SENSOR + DASH + METHOD + DASH + SI.COVERAGE + DASH + 'QUAL_'+NUM2STR(QUALITY_LEVEL) + DASH + MAPS + DASH + 'SST'
    SAVEFILES  = DIRS_SAVE + OUTPUT_LABEL +'.SAV'    
    GLOBALFILE = DIR_GLOBAL + SI.PERIOD + DASH + SI.SENSOR + DASH + SI.METHOD + DASH + SI.COVERAGE + DASH + 'GLOBAL' + '.SAV'

    IF FILE_MAKE(SFILE,[GLOBALFILE,SAVEFILES],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE

    IF FILE_MAKE(SFILE,SAVEFILES,OVERWRITE=OVERWRITE) EQ 0 THEN BEGIN ; Just missing the GLOBAL file
      POF, NTH, FILES, OUTTXT=OUTTXT,/QUIET, LOGLUN=LOG_LUN
      PFILE, SFILE, /R, _POFTXT=OUTTXT, LOGLUN=LOG_LUN
      SD = READ_NC(SFILE,PRODS='GLOBAL')
      IF IDLTYPE(SD) EQ 'STRING' THEN BEGIN
        TXT='ERROR: CAN NOT READ '+SFILE+ '; ' + DATE_NOW()
        REPORT,TXT,DIR=DIR_LOG
        PLUN, LOG_LUN,TXT
        CONTINUE
      ENDIF
      GLOBAL=SD.GLOBAL
      PLUN, LOG_LUN, 'Writing: ' + GLOBALFILE
      SAVE, GLOBAL, FILENAME=GLOBALFILE
      CONTINUE
    ENDIF
    
    POF, NTH, FILES, OUTTXT=OUTTXT,/QUIET
    PFILE, SFILE, /R, _POFTXT=OUTTXT
    SD=READ_NC(SFILE,PRODS=['GLOBAL',PRODS])                          	
  	IF IDLTYPE(SD) EQ 'STRING' THEN BEGIN
  		TXT='ERROR: CAN NOT READ '+SST_FILE+ '; ' + DATE_NOW()
  		REPORT,TXT,DIR=DIR_LOG
  		PLUN, LOG_LUN,TXT
  	  CONTINUE
  	ENDIF
    
    GLOBAL = SD.GLOBAL
    IF FILE_MAKE(SFILE,GLOBALFILE,OVERWRITE=OVERWRITE) EQ 1 THEN SAVE, GLOBAL, FILENAME=GLOBALFILE
    NOTES = [NOTES,GLOBAL.REFERENCES,GLOBAL.INSTITUTION,GLOBAL.SOURCE,GLOBAL.DATE_CREATED]
	  
	  SST    = SD.SD.SEA_SURFACE_TEMPERATURE
	  MASK   = SD.SD.PATHFINDER_QUALITY_LEVEL
	  FLAGS  = SD.SD.L2P_FLAGS
    GONE, SD
    NOTES  = [NOTES,SST.LONG_NAME,SST.COMMENT,MASK.FLAG_MEANINGS,MASK.COMMENT,FLAGS.FLAG_MEANINGS,STRJOIN(NUM2STR(FLAGS.FLAG_MASKS),';'),FLAGS.COMMENT]
    
    SIMG = SST.IMAGE
    MIMG = MASK.IMAGE
    FIMG = FLAGS.IMAGE
        
    OK_MISSINGS = WHERE(SIMG GT SST.VALID_MAX OR SIMG LT SST.VALID_MIN OR SIMG EQ MISSINGS(SIMG) OR SIMG EQ SST._FILLVALUE[0],COMPLEMENT=COMPLEMENT); Find any MISSING values or temperatures that are out of range
    SIMG = SIMG * FLOAT(SST.SCALE_FACTOR[0])
    SIMG(OK_MISSINGS) = MISSINGS(0.0)
    
    OK_MASK = WHERE(MIMG LT 0 OR MIMG GT 7, COUNT_MASK)               ; Valid quality values are from 0 (worst) to 7 (best) 
    IF COUNT_MASK GE 1 THEN MIMG(OK_MASK) = 0                         ; Change any 255 values to 0
    
    OK_LAND = WHERE(BITS(FIMG,1) EQ 1, COUNT_LAND)                    ; Find the land pixels (BIT 1) 
    IF COUNT_LAND GE 1 THEN MIMG(OK_LAND) = -1
    
    OK_QUAL = WHERE(MIMG LE QUALITY_LEVEL,COUNT_QUAL)                 ; Find the mask values that are less than or equal to the QUALITY_LEVEL (default = 3, low quality data)
    SIMG(OK_QUAL) = MISSINGS(0.0)
    
    CODE_MASK                         = BINDGEN(9)-1
    CODE_MASK_NAME                    = STRARR(9)
    CODE_MASK_NAME[0]                 = 'LAND'
    CODE_MASK_NAME(1:QUALITY_LEVEL+1) = 'MASKED'
    CODE_MASK_NAME(QUALITY_LEVEL+2:*) = 'NOT_MASK'
    
    GONE, MASK
    GONE, FIMG
    
	  FOR _MAP=0, N_ELEMENTS(MAPS)-1 DO BEGIN
      
      AMAP = MAPS(_MAP)
      SUBPOS = STRPOS(AMAP,'SUBSET')
      IF SUBPOS GE 0 THEN MAP_SUBSET = 1 ELSE MAP_SUBSET = 0
      
      IF FILE_MAKE(SFILE,SAVEFILES(_MAP),OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
  	  IF AMAP NE 'NO_MAP' THEN BEGIN
  	      SST_IMAGE  = MAPS_REMAP(SIMG,MAP_OUT=AMAP,MAP_IN='AVHRR',MAP_SUBSET=MAP_SUBSET,LONMIN=LONMIN,LONMAX=LONMAX,LATMIN=LATMIN,LATMAX=LATMAX)
  	      MASK_IMAGE = MAPS_REMAP(MIMG,MAP_OUT=AMAP,MAP_IN='AVHRR',MAP_SUBSET=MAP_SUBSET,LONMIN=LONMIN,LONMAX=LONMAX,LATMIN=LATMIN,LATMAX=LATMAX) 
  	  ENDIF ELSE BEGIN
  	    SST_IMAGE  = ROTATE(SIMG,7)
  	    MASK_IMAGE = ROTATE(MIMG,7)
    	ENDELSE
    	
    	IF KEY(DATA_ONLY) THEN RETURN_STRUCT = 1 ELSE RETURN_STRUCT = 0
      STRUCT_WRITE, SST_IMAGE, FILE=SAVEFILES(_MAP), MASK=MASK_IMAGE, CODE_MASK=CODE_MASK, CODE_MASK_NAME=CODE_MASK_NAME, QUALTIY_LEVEL=QUALITY_LEVEL, $
        DATA_UNITS=UNITS('SST'), NCFILES=SFILE, NOTES=NOTES, GLOBAL=GLOBAL, RETURN_STRUCT=RETURN_STRUCT, SOURCE=GLOBAL.SOURCE, SATELLITE=SI.SATELLITE, METHOD=SI.METHOD, $
        ORIGINAL_DATE_CREATED=GLOBAL.DATE_CREATED,COMMENT=SST.COMMENT,LONG_NAME=SST.LONG_NAME, STANDARD_NAME=SST.STANDARD_NAME, ROUTINE=ROUTINE_NAME, LOGLUN=LOG_LUN                 
      GONE, SST_IMAGE
      GONE, MASK_IMAGE          
    ENDFOR
    GONE, SST
    GONE, LAT
    GONE, LON
    GONE, SIMG
    GONE, MIMG

  ENDFOR

  DONE:


END; #####################  END OF ROUTINE ################################




