; $ID:	SAVE_MAKE_CMES.PRO,	2023-09-21-13,	USER-KJWH	$
  PRO SAVE_MAKE_CMES

;+
; NAME:
;   SAVE_MAKE_CMES
;
; PURPOSE:
;   $PURPOSE$
;
; CATEGORY:
;   FILE_FUNCTIONS
;
; CALLING SEQUENCE:
;   SAVE_MAKE_CMES,$Parameter1$, $Parameter2$, $Keyword=Keyword$, ....
;
; REQUIRED INPUTS:
;   Parm1.......... Describe the positional input parameters here. 
;
; OPTIONAL INPUTS:
;   Parm2.......... Describe optional inputs here. If none, delete this section.
;
; KEYWORD PARAMETERS:
;   KEY1........... Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
; OUTPUTS:
;   OUTPUT.......... Describe the output of this program or function
;
; OPTIONAL OUTPUTS:
;   None
;
; COMMON BLOCKS: 
;   None
;
; SIDE EFFECTS:  
;   None
;
; RESTRICTIONS:  
;   None
;
; EXAMPLE:
; 
;
; NOTES:
;   $Citations or any other useful notes$
;   
; COPYRIGHT: 
; Copyright (C) 2022, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; AUTHOR:
;   This program was written on June 03, 2022 by Kimberly J. W. Hyde, Northeast Fisheries Science Center | NOAA Fisheries | U.S. Department of Commerce, 28 Tarzwell Dr, Narragansett, RI 02882
;    
; MODIFICATION HISTORY:
;   Jun 03, 2022 - KJWH: Initial code written
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'SAVE_MAKE_CMES'
  COMPILE_OPT IDL2
  SL = PATH_SEP()
  DASH=DELIMITER(/DASH)
  
  
  DIR_LOG = !S.LOGS + ROUTINE_NAME + SL & DIR_TEST, DIR_LOG
  IF NONE(LOGLUN)   THEN LOG_LUN = [] ELSE LOG_LUN = LOGLUN
  IF NONE(DIR)      THEN DIR = !S.CMES + 'L4' + SL + 'NC' + SL
  IF NONE(MAPS_OUT) THEN MAPS = 'NES' ELSE MAPS = MAPS_OUT
  IF NONE(PRODS)    THEN PRODS = ['SLA-NRT'] ELSE PRODS = STRUPCASE(PRODS)  ; 'IOP','KD490'
  IF KEY(DATA_ONLY) THEN OVERWRITE = 1 ; Make OVERWRITE 1 so that the data extraction is not skipped if the file already exists

  FOR N=0, N_ELEMENTS(PRODS)-1 DO BEGIN
    IF KEY(ANALYSIS_ERROR) THEN AN_ERR = 1 ELSE AN_ERR = 0
    PROD = PRODS[N]
    MAIN_PROD = []
    CASE PROD OF
      'SLA-NRT':   BEGIN & DPROD='SEALEVEL_NRT' & VPRODS = 'SLA-NRT' & AN_ERR=0 & MAIN_PROD='SLA' & END
    ENDCASE

    IF KEY(AN_ERR) THEN BEGIN
      V = []
      FOR I=0, N_ELEMENTS(VPRODS)-1 DO BEGIN
        STR = STR_BREAK(VPRODS[I],'-')
        VP = STR[0]+'_'+['BIAS','RMSD']
        IF N_ELEMENTS(STR) GT 1 THEN VP = VP + '-' + STR[1] ; Add ALG back to the name
        V = [V, VP]
      ENDFOR
      VPRODS = SORTED([VPRODS,V])
    ENDIF

    PDIR = DIR + DPROD + SL
    FILES = FLS(PDIR + '*.nc',DATERANGE=DATERANGE)
    IF FILES EQ [] THEN BEGIN
      PLUN, LUN, 'ERROR: No files found for DATERANGE = ' + STRJOIN(DATERANGE, ' - ')
      GOTO, DONE
    ENDIF
    FP = PARSE_IT(FILES[0],/ALL)
    IF NONE(DIR_OUT) THEN DIR_OUT = REPLACE(FP.DIR,FP.SUB+SL,'')
    DIRS_SAVE = []
    FOR M=0, N_ELEMENTS(MAPS)-1 DO DIRS_SAVE = [DIRS_SAVE,DIR_OUT + MAPS[M] + SL + 'SAVE' + SL + PROD + SL]
    DIR_GLOBAL = DIR_OUT + 'GLOBAL' + SL + PROD + SL
    DIR_TEST, [DIR_GLOBAL,DIRS_SAVE]

    IF KEY(REVERSE_FILES) THEN FILES = REVERSE(FILES)

    FOR NTH = 0L, N_ELEMENTS(FILES)-1 DO BEGIN
      OFILE = FILES[NTH]
      FP = FILE_PARSE(OFILE)
      SI = SENSOR_INFO(OFILE)
      NPRODS = STRSPLIT(SI.NC_PROD,SI.DELIM,/EXTRACT)
      OPRODS = STRSPLIT(SI.PRODS,SI.DELIM,/EXTRACT)
      OK = WHERE_MATCH(OPRODS, VPRODS, VALID=VALID,COUNT)
      IF COUNT EQ 0 THEN MESSAGE, 'ERROR: ' + VPROD + ' not found in file.'
      NPRODS = NPRODS[OK]
      VPRODS = VPRODS[VALID]
      OUTPUT_LABEL = SI.PERIOD + DASH + SI.SENSOR + DASH + SI.METHOD + DASH + SI.COVERAGE + DASH + MAPS + DASH + PROD
      SAVEFILES = DIRS_SAVE + OUTPUT_LABEL + '.SAV'
      GLOBALFILE = DIR_GLOBAL + SI.PERIOD + DASH + SI.SENSOR + DASH + SI.METHOD + DASH + SI.COVERAGE + DASH + 'GLOBAL' + '.SAV'

      IF FILE_MAKE(OFILE,[GLOBALFILE,SAVEFILES],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE

      IF FILE_MAKE(OFILE,SAVEFILES,OVERWRITE=OVERWRITE) EQ 0 THEN BEGIN ; Just missing the GLOBAL file
        POF, NTH, FILES, OUTTXT=OUTTXT,/QUIET, LOGLUN=LOG_LUN
        PFILE, OFILE, /R, _POFTXT=OUTTXT, LOGLUN=LOG_LUN
        SD = READ_NC(OFILE,PRODS='GLOBAL')
        IF IDLTYPE(SD) EQ 'STRING' THEN BEGIN
          TXT='ERROR: CAN NOT READ '+OFILE+ '; ' + DATE_NOW()
          PLUN, LOG_LUN,TXT
          CONTINUE
        ENDIF
        GLOBAL=SD.GLOBAL
        PLUN, LOG_LUN, 'WRITING: ' + GLOBALFILE
        SAVE, GLOBAL, FILENAME=GLOBALFILE
        CONTINUE
      ENDIF

      ; ===> READ THE NETCDF FILE
      POF, NTH, FILES, OUTTXT=OUTTXT,/QUIET, LOGLUN=LOG_LUN
      PFILE, OFILE, /R, _POFTXT=OUTTXT, LOGLUN=LOG_LUN
      SD = READ_NC(OFILE,PRODS=['GLOBAL',NPRODS])
      IF IDLTYPE(SD) EQ 'STRING' THEN BEGIN
        TXT='ERROR: CAN NOT READ '+SFILE+ '; ' + DATE_NOW()
        PLUN, LOG_LUN,TXT
        CONTINUE
      ENDIF
      GLOBAL=SD.GLOBAL
      IF FILE_MAKE(SFILE,GLOBALFILE,OVERWRITE=OVERWRITE) EQ 1 THEN SAVE, GLOBAL, FILENAME=GLOBALFILE

      TAGS = TAG_NAMES(SD.SD)
      STR = []
      FOR T=0, N_ELEMENTS(TAGS)-1 DO BEGIN
        DAT = SD.SD.(T)
        TAG = TAGS[T]
        STAG = VPRODS[WHERE(STRUPCASE(NPRODS) EQ TAG,/NULL)]
        IF STAG EQ [] THEN CONTINUE
        BRK = STR_BREAK(STAG,'-')
        PRD = BRK[0]
        IF N_ELEMENTS(BRK) GT 1 THEN ALG = BRK[1] ELSE ALG = ''
        IF MAIN_PROD NE [] AND TAG EQ MAIN_PROD THEN BEGIN
          IMG = FLOAT(DAT.IMAGE)
          OK_GOOD = WHERE(ABS(IMG) NE ABS(DAT._FILLVALUE[0]) AND IMG NE MISSINGS(IMG),COUNT_GOOD, COMPLEMENT=OK_MISS)
          IMG[OK_GOOD] = IMG[OK_GOOD] * DAT.SCALE_FACTOR[0]
          IMG[OK_MISS] = MISSINGS(IMG)
          STR = CREATE_STRUCT('DATA',IMG,'PROD',PRD,'ALG',ALG)
          IF HAS(DAT,'UNITS') THEN STR = CREATE_STRUCT(STR,'DATA_UNITS',DAT.UNITS)
          IF HAS(DAT,'UNITS_NONSTANDARD') THEN STR = CREATE_STRUCT(STR,'UNITS_NONSTANDARD',DAT.UNITS_NONSTANDARD)
          IF HAS(DAT,'LONG_NAME') THEN STR = CREATE_STRUCT(STR,'LONG_NAME',DAT.LONG_NAME)
          IF HAS(DAT,'STANDARD_NAME') THEN STR = CREATE_STRUCT(STR,'STANDARD_NAME', DAT.STANDARD_NAME)
          IF HAS(DAT,'COMMENT') THEN STR = CREATE_STRUCT(STR,'COMMENT', DAT.COMMENT)
          IF HAS(DAT,'REF') THEN STR = CREATE_STRUCT(STR,'REFERCNE', DAT.REF)
        ENDIF ELSE BEGIN
          IMG = DAT.IMAGE
          OK_GOOD = WHERE(IMG NE DAT._FILLVALUE[0] AND IMG NE MISSINGS(IMG),COUNT_GOOD)
          IF COUNT_GOOD GT 0 THEN BEGIN
            IMG = IMG[OK_GOOD]
            BINS = L3B4_BINS[OK_GOOD]
          ENDIF ELSE BINS = L3B4_BINS

          BRK = STR_BREAK(STAG,'-')
          PRD = BRK[0]
          IF N_ELEMENTS(BRK) GT 1 THEN ALG = BRK[1] ELSE ALG = ''
          DTAGS = ['REL','COMMENT','REF','LONG_NAME','STANDARD_NAME','UNITS','UNITS_NONSTANDARD']
          OKTAGS = WHERE_MATCH(DTAGS,TAG_NAMES(DAT),COUNTTAGS)
          DTAGS = DTAGS[OKTAGS]
          DAT = CREATE_STRUCT('IMAGE',IMG,'PROD',PRD,'ALG',ALG,'BINS',BINS,STRUCT_COPY(DAT,DTAGS))
          STR = CREATE_STRUCT(STR,BRK[0],DAT)
        ENDELSE
      ENDFOR ; tags

      NOTES   = [GLOBAL.REFERENCES,GLOBAL.INSTITUTION] & IF HAS(GLOBAL,'SOURCE') THEN NOTES = [NOTES,GLOBAL.SOURCE]
      INFILES = OFILE
      GONE, SD


      FOR MTH=0, N_ELEMENTS(MAPS)-1 DO BEGIN
        IF FILE_MAKE(SFILE,SAVEFILES[MTH],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
        AMAP = MAPS[MTH]

        IF AMAP NE 'L3B4' THEN STR = STRUCT_REMAP(STR, MAP_OUT=AMAP, INIT=INIT)

        IF KEY(DATA_ONLY) THEN RETURN_STRUCT = 1 ELSE RETURN_STRUCT = 0
        STRUCT_WRITE, STR, FILE=SAVEFILES[MTH], RETURN_STRUCT=RETURN_STRUCT, GLOBAL=GLOBAL, NCFILES=INFILES, FILE_NAME=SAVEFILE, LOGLUN=LOG_LUN, PROD=PROD,$
          MAP=AMAP, METHOD=METHOD, SATELLITE='MULTI', SENSOR=SENSOR, COVERAGE='4KM', NOTES=NOTES, ROUTINE=ROUTINE_NAME, ORIGINAL_DATE_CREATED=GLOBAL.DATE_CREATED

        STRUCT = RETURN_STRUCT ; Output structure

      ENDFOR ; MAPS
    ENDFOR ; PRODS
  ENDFOR ; FILES

  DONE:


END ; ***************** End of SAVE_MAKE_CMES *****************
