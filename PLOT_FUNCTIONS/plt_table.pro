; $ID:	PLT_TABLE.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;#############################################################################################################
	PRO PLT_TABLE,DB,TAGS = TAGS,PROD = PROD,DECIMALS=DECIMALS

;
; PURPOSE: MAKES AN ORDINATED RAINBOW 2-COLUMN TABLE
;
; CATEGORY:	PLT FAMILY
;
; CALLING SEQUENCE: PLT_TABLE,DB
;
; INPUTS: DBURE [SPREAD SHEET TYPE DATABASE]
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;		TAGS: THE TAGNAMES TO USE FOR THE TWO COLUMNS
;   DECIMALS: THE NUM OF DECIMAL PLACES TO USE WITH ROUNDS
;   ORDER: THE SORT ORDER FOR 

; OUTPUTS: A PNGFILE
;		
; EXAMPLES: 
;
; MODIFICATION HISTORY:
;			MAY 13,2014,  WRITTEN BY J.O'REILLY 
;			SEP 2,2014, JOR ASSUME THE SECOND TAG IS PROD IF PROD NOT PROVIDED
;			SEP 5,2014,JOR ADDED KEY DECIMALS,ORDER
;			
;			
;			
;#################################################################################
;-
;********************************
ROUTINE_NAME  = 'PLT_TABLE'
;********************************
;===> DEFAULTS
PAL='PAL_SW3'  
FONT_SIZE = 10
IF NONE(DECIMALS) THEN DECIMALS = 0
RES= 600
WIDTH = 2000
HEIGHT = 6000
;DB = DB_2NUM(DB)
RGB_TABLE = CPAL_READ('PAL_SW3')
FONT_HELVETICA
IF IDLTYPE(DB) NE 'STRUCT' THEN MESSAGE,'NOT A STRUCTURE'
IF NONE(TAGS) THEN MESSAGE,'TAGS IS REQUIRED'
IF NONE(PROD) THEN PROD = TAGS[1]
;===> IF PROD IS COMPOUND PROD [WTH RANGE] THEN PARSE IT
T = STR_SEP(PROD,'_')
IF N_ELEMENTS(T) EQ 3 THEN TAGS[1] = T[0]
P
;===> MAKE A STRING OF X'S
XX = STRJOIN(REPLICATE('X',121))
IF NONE(TITLE) THEN TITLE = TAGS[0]
TAG_LAB = WHERE(TAG_NAMES(DB) EQ TAGS[0],COUNT0)
TAG_VAL = WHERE(TAG_NAMES(DB) EQ TAGS[1],COUNT1)
IF COUNT0 EQ 0 THEN MESSAGE,'ERROR: TAGS 0 NOT FOUND '
IF COUNT1 EQ 0 THEN MESSAGE,'ERROR: TAGS 1 NOT FOUND '
;===> EXTRACT LABELS AND VALUES ARRAYS
LABLES = DB.(TAG_LAB)
VALUES = FLOAT(DB.(TAG_VAL))

; ===> SORT ON THE VALUES LOW TO HIGH
S = SORT(VALUES) & VALUES = VALUES(S)
;===> ALSO SORT THE LABLES
LABLES = LABLES(S)
;===> ADD TITLE TO LAST LABLES
LABLES = [LABLES,TITLE]
VALUES = [VALUES,MISSINGS(0.0)]
NUM = N_ELEMENTS(VALUES)
IMG = REPLICATE(255B,[WIDTH,HEIGHT])
;W = WINDOW(RGB_TABLE=DIMENSIONS = [WIDTH,HEIGHT],BACKGROUND_COLOR = 'WHITE')
I = IMAGE(IMG,RGB_TABLE=RGB_TABLE,IMAGE_DIMENSIONS = [WIDTH,HEIGHT],BACKGROUND_COLOR = 'WHITE',/DEVICE)

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0, N_ELEMENTS(VALUES) -1 DO BEGIN  
  VAL = VALUES[NTH]
  TXT = ROUNDS(VAL,DECIMALS)

  LAB = LABLES[NTH]
  LAB = REPLACE(LAB,'_',' ')
  
  BYT = PRODS_2BYTE(VAL,PROD = PROD) ;& P,BYT
  ;===> CAP BYT AT 240
  BYT = BYT < 240
  FONT_COLOR = RGBS(BYT)
  IF VAL EQ MISSINGS(0.0) THEN BEGIN
    FONT_COLOR = 'GREY'
    TXT = TAGS[1]
  ENDIF;IF VAL EQ MISSINGS(0.0) THEN BEGIN
  
   
  FONT_STYLE = ODD[NTH]

  ;===> FILL A RAINBOW ROW OF TEXT WITH X'S
  T = TEXT(0,(1.0*NTH)/NUM,XX,FONT_COLOR = FONT_COLOR,FONT_SIZE = FONT_SIZE,/OVERPLOT,/RELATIVE,$
    FILL_BACKGROUND = 1,FILL_COLOR = FONT_COLOR,FONT_STYLE=FONT_STYLE )
  
  ;===> ADD THE LABLE
  T = TEXT(0,(1.0*NTH)/NUM,LAB,FONT_COLOR = 'WHITE',FONT_SIZE = FONT_SIZE,/OVERPLOT,/RELATIVE,$
    FILL_BACKGROUND = 1,FILL_COLOR = FONT_COLOR,FONT_STYLE=FONT_STYLE );
  
  ;===> ADD THE TXT [PPD] VALUE
  T = TEXT(0.4,(1.0*NTH)/NUM,TXT,FONT_COLOR = 'WHITE',FONT_SIZE = FONT_SIZE,/OVERPLOT,/RELATIVE,FONT_STYLE=FONT_STYLE)
  
  PNGFILE = DIR_PROJECT(DIR = 'FIGS') + 'PP_COLOR_TABLE.PNG'
  ;PLT_WRITE,W,FILE=PNGFILE

ENDFOR;FOR NTH = 0, N_ELEMENTS(values) -1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

I.SAVE, PNGFILE,RESOLUTION=RES,WIDTH = WIDTH,HEIGHT = HEIGHT,BORDER=20,/BITMAP,BIT_DEPTH=BIT_DEPTH
I.CLOSE
PFILE,PNGFILE



END; #####################  END OF ROUTINE ################################
