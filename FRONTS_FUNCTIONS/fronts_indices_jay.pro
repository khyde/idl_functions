; $ID:	FRONTS_INDICES.PRO,	2018-05-23-21,	USER-JEOR	$
; #########################################################################; 
PRO FRONTS_INDICES
;+
; PURPOSE:  COMPUTE USEFUL INDICES FOR KEY FRONTS
;
; CATEGORY: FRONTS
;
;
; INPUTS:  NONE
;
;
; KEYWORDS:  NONE

;         
; OUTPUTS: DEPENDS ON SWITCHES
;
;  NOTES:
;  ; FROM MILLER PAPERS:
;FREQUENT FRONT MAPS WERE CREATED BY AVERAGING THE RATIO OF
;STRONG FRONTS TO VALID OBSERVATIONS FOR EACH PIXEL FOR A PARTICULAR
;SEASON OVER ALL YEARS. THE RESULT WAS THE PERCENTAGE OF TIME IN
;WHICH STRONG FRONTS OCCURRED IN THAT PIXEL IN THAT SEASON.
;

;
;THREE-DAY THERMAL FRONT MAPS HAVE BEEN
;FOUND TO BE APPROPRIATE FOR TYPICALLY CLOUDY EUROPEAN WATERS, OR 5-DAY
;FOR SEAWIFS CHLOROPHYLL MAPS.
;
;MUST DILATE LAND TO BLOCK OUT FALSE FRONTS ALONG COAST
; 
;  
; USE MEDIAN_DIAGONAL ? 
;
; MODIFICATION HISTORY:
;     DEC 30, 2017  WRITTEN BY: J.E. O'REILLY
;     JAN 12, 2018  JEOR ADDED STEP DO_SST_3DAY_AVG
;     FEB 04, 2018  JEOR ADDED STEP DO_SST_8DAY_AVG
;     FEB 12, 2018  JEOR ADDED MAX STATISTIC TO STEP DO_SST_8DAY_AVG
;     FEB 24, 2018  JEOR ADDED STEP FRONTS_PROB_SST  
;     FEB 24, 2018  JEOR ADDED STEP FRONTS_PROB_CHL
;     MAR 03, 2018  JEOR ADDED DOCUMENTATION TO FRONTS_PROB_SST & FRONTS_PROB_CHL
;     MAR 03, 2018  JEOR REVISED THRESHOLDS,CHANGED TO MONTH_09 
;     MAY 22, 2018  JEOR:ADDED CODE TO GET_SST_SSF
; #########################################################################
;-
;*************************
ROUTINE = 'FRONTS_INDICES'
;*************************
;===> SET UP DIRECTORIES
PATH = GET_HDD(6) + 'DATASETS\FRONTS\NES\'
FOLDERS = ['SST','CHL','SAV','MEAN','PNG','DD_3','DD_8','PNG_PROB']
DIR = FILE_FOLDERS(PATH, FOLDERS=FOLDERS)


;SSSSS     SWITCHES     SSSSSSS
DO_SST_3DAY_AVG     = ''
DO_SST_8DAY_AVG     = ''
SST_PRODS_2PNG      = ''
CONTOUR_MAX_GRAD    = 'Y'  
FRONTS_PROB_SST     = ''
FRONTS_PROB_CHL     = ''
FRONTS_PROB_2PNG    = ''

;SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS



;*******************************
IF KEY(DO_SST_3DAY_AVG) THEN BEGIN
;******************************
  SWITCHES,DO_SST_3DAY_AVG,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  FILES = FILE_SEARCH(DIR.SST,'D_*-MODISA-R2015-2KM-NES-SST_BOA-4UM*.SAV')
  
  PN, FILES,'SST FRONT FILES'
  FA = FILE_ALL(FILES)
  PMM,FA.DATE_START
  JD = PERIOD_2JD(FA.PERIOD)
  IF STOPP THEN STOP
DIR_OUT = DIR.DD_3
STAT_PROD = 'GRAD_SST'
PERIOD_CODE_OUT = 'D3'
DO_STATS= ['NUM','MEAN']
STATS_ARRAYS_PERIODS, FILES, STAT_PROD=STAT_PROD, DIR_OUT=DIR_OUT, PERIOD_CODE_OUT=PERIOD_CODE_OUT, FILE_LABEL=FILE_LABEL,$
  DO_STATS=DO_STATS, KEY_STAT=KEY_STAT, STAT_TRANSFORM=STAT_TRANSFORM, DATERANGE=DATERANGE,$
  ADD_GLOBAL_PROD=ADD_GLOBAL_PROD,MISSING=MISSING, OVERWRITE=OVERWRITE, VERBOSE=1, FORCE_STATS=FORCE_STATS
  PDONE,'DO_SST_3DAY_AVG'
ENDIF;IF KEY(DO_SST_3DAY_AVG) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(DO_SST_8DAY_AVG) THEN BEGIN
  ;******************************
  SWITCHES,DO_SST_8DAY_AVG,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  FILES = FILE_SEARCH(DIR.SST,'D_*-MODISA-R2015-2KM-NES-SST_BOA-4UM*.SAV')
  IF STOPP THEN STOP
  PN, FILES,'SST FRONT FILES'
  FA = FILE_ALL(FILES)
  PMM,FA.DATE_START
  JD = PERIOD_2JD(FA.PERIOD)
  DIR_OUT = DIR.DD_8
  STAT_PROD = 'GRAD_SST'
  PERIOD_CODE_OUT = 'D8'
  DO_STATS= ['NUM','MEAN','MAX']
  IF STOPP THEN STOP
  DATERANGE=[]
  STATS_ARRAYS_PERIODS, FILES, STAT_PROD=STAT_PROD, DIR_OUT=DIR_OUT, PERIOD_CODE_OUT=PERIOD_CODE_OUT, FILE_LABEL=FILE_LABEL,$
    DO_STATS=DO_STATS, KEY_STAT=KEY_STAT, STAT_TRANSFORM=STAT_TRANSFORM, DATERANGE=DATERANGE,$
    ADD_GLOBAL_PROD=ADD_GLOBAL_PROD,MISSING=MISSING, OVERWRITE=OVERWRITE, VERBOSE=1, FORCE_STATS=FORCE_STATS
  PDONE,'DO_SST_8DAY_AVG'
ENDIF;IF KEY(DO_SST_8DAY_AVG) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(SST_PRODS_2PNG) THEN BEGIN
;********************************
  SWITCHES,SST_PRODS_2PNG,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  FILES = FILE_SEARCH(DIR.SST,'D_*-MODISA-R2015-2KM-NES-SST_BOA-4UM*.SAV')
  PN, FILES,'SST FRONT FILES'
  BUFFER = 1
  ADD_NAME = 0
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(FILES)-1 DO BEGIN
    FILE = FILES(NTH)
    POF,NTH,FILES
    NAME = (FILE_PARSE(FILE)).NAME
    ;===> CONTOUR GRAD_SST
    C_LEVELS = [0.1]
    PROD = 'GRAD_SST'
    
    PNGFILE = DIR.PNG +NAME + '.PNG'
    PRODS_2PNG,FILE, PROD = PROD,PNGFILE = PNGFILE,/ADD_LAND,TAG ='GRAD_SST' ,BUFFER=BUFFER,ADD_NAME=ADD_NAME,OVERWRITE=OVERWRITE
    PFILE,PNG
  ENDFOR;FOR NTH = 0,NOF(FILES)-1 DO BEGIN
  PDONE,'SST_PRODS_2PNG'
ENDIF;IF KEY(SST_PRODS_2PNG) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||




;*******************************
IF KEY(CONTOUR_MAX_GRAD) THEN BEGIN
  ;******************************
  SWITCHES,CONTOUR_MAX_GRAD,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
;  IF STOPP THEN STOP
  PRINT,'THIS 8-DAY STATS_ARRAYS FILE HAS THE LARGEST SIZE'
  FILE = DIR.DD_8+'D8_20100831_20100907-MODISA-R2015-NES-SST_BOA-4UM-STATS.SAV'
  GRAD_SST = STRUCT_READ(FILE,TAG = 'MAX',STRUCT=S)
  MAPP = S.MAP
  LAND = (READ_LANDMASK(MAPP,/STRUCT)).LAND
  GOTO,SKIP
  PLAIN = 1
  NO_ANNOTATION = 1
  LEVELS = 0.10
  ;===> USE A VERY LARGE MEDIAN WINDOW TO SUPPRESS SMALL-NOISY CONTOURS
;  MED_WIDTH =  31
  PROD = 'GRAD_SST'
  PRINT,'THIS WILL CONTOUR GRAD_SST AS BLACK CONTOURS ON A WHITE BACKGROUND AND OUTPUT A PNG'
  IMG= CONTOURS(GRAD_SST, BYT = BYT,PROD = PROD,MAPP=MAPP, MED_WIDTH = MED_WIDTH,$
                   MIN_VALUE= MIN_VALUE,MAX_VALUE= MAX_VALUE,PLAIN=PLAIN,$
                  LEVELS = LEVELS,C_COLORS = C_COLORS ,C_ANNOTATION=C_ANNOTATION,NO_ANNOTATION=NO_ANNOTATION,$
                 C_CHARSIZE=C_CHARSIZE ,C_CHARTHICK= C_CHARTHICK ,C_THICK = C_THICK ,C_PLACES= C_PLACES,$
                 STRUCT=STRUCT,MIN_PTS=MIN_PTS)

  
  IMG(LAND) = 252
  PAL_BR,R,G,B
  PNG = DIR.PNG + S.NAME + '.PNG'
  WRITE_PNG,PNG,IMG,R,G,B
  PFILE,PNG
  STOP
  SKIP:
  
    ;===> GET A STRUCTURE OF THE CONTOUR LINES [AS LON,LAT] FOR  GRAD_SST 
     LEVELS = [0.10]
     MAPP = S.MAP
     STRUCT = 1
     STRUCT = CONTOURS(GRAD_SST, BYT = BYT,PROD = PROD,MAPP=MAPP, MED_WIDTH = MED_WIDTH,$
                   MIN_VALUE= MIN_VALUE,MAX_VALUE= MAX_VALUE,PLAIN=PLAIN,$
                  LEVELS = LEVELS,C_COLORS = C_COLORS ,C_ANNOTATION=C_ANNOTATION,NO_ANNOTATION=NO_ANNOTATION,$
                 C_CHARSIZE=C_CHARSIZE ,C_CHARTHICK= C_CHARTHICK ,C_THICK = C_THICK ,C_PLACES= C_PLACES,$
                 STRUCT=STRUCT,MIN_PTS=MIN_PTS)
  ST,STRUCT
  STOP
  
  PRINT,'NOW PLOT THE LON,LATS IN THE STRUCT, ONLY CONTOURS HAVING GE 30 POINTS WILL BE PLOTTED BECAUSE THE DEFAULT FOR MIN_PTS IN CONTOURS IS 30' 
  PNG = DIR.PNG + S.NAME + '-FROM STRUCT.PNG'
   
   MAPS_SET,MAPP
   ERASE,255
   MAP_CONTINENTS,/HIRES,/COAST,COLOR = 0
   ;===>LOOP OVER EACH CONTOUR IN STRUCT AND PLOT THE LON,LATS
   ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
   FOR NTH = 0,NOF(STRUCT) -1 DO BEGIN
    LON = FLOAT(STR_SEP(STRUCT(NTH).LON,';'))
    LAT = FLOAT(STR_SEP(STRUCT(NTH).LAT,';'))
    PLOTS,LON,LAT,COLOR = 0,THICK = 1,LINESTYLE = 0,/DATA,PSYM = 1
   ENDFOR;FOR NTH = 0,NOF(STRUCT) -1 DO BEGIN
   IMG = TVRD()
   ZWIN
  WRITE_PNG,PNG,IMG,R,G,B
  PDONE,'CONTOUR_MAX_GRAD'
ENDIF;IF KEY(CONTOUR_MAX_GRAD) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||




;********************************
IF KEY(FRONTS_PROB_SST) THEN BEGIN
  ;********************************
  SWITCHES,FRONTS_PROB_SST,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  PROD = ['GRAD_SST']
;  GRADS_SST = [1.09,1.10,1.11,1.12,1.13]
  GRADS_SST = [0.10]
  DIR_IN = DIR.SST
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
    FOR G = 0,NOF(GRADS_SST) -1 DO BEGIN
      MIN_GRAD = GRADS_SST(G)
      FILES = FILE_SEARCH(DIR_IN + '*.SAV') & PN,FILES, PROD + ' FILES'
      ;===> GET JUST 1 MONTH [IN FUTURE USE PERIOD_STATS ?]
      FN = PARSE_IT(FILES,/ALL)
      OK = WHERE(FN.MONTH_START EQ 09,COUNT) & P,COUNT
      FILES_ = FILES(OK)
      PN,FILES_,'MONTH_09 FILES'
      SAVFILE = DIR.SAV + 'FRONTS_PROB-' + PROD +'_MONTH_09_'+ STRTRIM(REPLACE(STRTRIM(MIN_GRAD,2),'.','_'),2) + '.SAV'
      PFILE,SAVFILE,/M
      FRONTS_PROB,FILES_,VERBOSE=VERBOSE,SAVFILE=SAVFILE,MIN_GRAD=MIN_GRAD
    ENDFOR;FOR G = 0,NOF(GRADS_SST) -1 DO BEGIN

 
  PDONE,'FRONTS_PROB_SST'
ENDIF;IF KEY(FRONTS_PROB_SST) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||


;********************************
IF KEY(FRONTS_PROB_CHL) THEN BEGIN
  ;********************************
  SWITCHES,FRONTS_PROB_CHL,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  PROD = ['GRAD_CHL']
;  GRADS_CHL = [1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.10]
  GRADS_CHL = [1.03]
  DIR_IN = DIR.CHL
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
    FOR G = 0,NOF(GRADS_CHL) -1 DO BEGIN
      MIN_GRAD = GRADS_CHL(G)
      FILES = FILE_SEARCH(DIR_IN + '*.SAV') & PN,FILES, PROD + ' FILES'
      ;===> GET JUST 1 MONTH [IN FUTURE USE PERIOD_STATS ?]
      FN = PARSE_IT(FILES,/ALL)
      OK = WHERE(FN.MONTH_START EQ 09,COUNT) & P,COUNT
      FILES_ = FILES(OK)
      PN,FILES_,'MONTH_09 FILES'
      SAVFILE = DIR.SAV + 'FRONTS_PROB-' + PROD +'_MONTH_09_'+ STRTRIM(REPLACE(STRTRIM(MIN_GRAD,2),'.','_'),2) + '.SAV'
      PFILE,SAVFILE,/M
      FRONTS_PROB,FILES_,VERBOSE=VERBOSE,SAVFILE=SAVFILE,MIN_GRAD=MIN_GRAD
    ENDFOR;FOR G = 0,NOF(GRADS_SST) -1 DO BEGIN

 
  PDONE,'FRONTS_PROB_CHL'
ENDIF;IF KEY(FRONTS_PROB_CHL) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(FRONTS_PROB_2PNG) THEN BEGIN
  ;******************************
  SWITCHES,FRONTS_PROB_2PNG,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  DIR_IN = DIR.SAV
  FILES = FILE_SEARCH(DIR_IN + '*.SAV') & PN,FILES, ' FILES'
  FOR NTH = 0,NOF(FILES) -1 DO BEGIN  
    FILE = FILES(NTH)
    
    S = IDL_RESTORE(FILE)
    P,S.NAME
    P,S.N_SETS
    PMM,S.SUM
    IMG = 100.*S.SUM/S.N_SETS
    PMM,IMG
;    IMGR,IMG,PROD = 'PERCENT'
   PNG = DIR.PNG_PROB + S.NAME + '.PNG'
   IF EXISTS(PNG) THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  TITLE = S.NAME
  IF HAS(TITLE,'CHL') THEN TITLE = REPLACE(TITLE,'CHL_1_','CHL_1.')
  IF HAS(TITLE,'SST') THEN TITLE = REPLACE(TITLE,'SST_0_',' SST_0.')
  IMGR,IMG,DELAY = 0,TITLE = TITLE,PNG=PNG,BIT_DEPTH=0

;  IF STOPP THEN STOP
  ENDFOR;FOR NTH = 0,NOF(FILES) -1 DO BEGIN
  PDONE,'FRONTS_PROB_2PNG'
ENDIF;IF KEY(FRONTS_PROB_2PNG) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||

PDONE
END; #####################  END OF ROUTINE ################################
