; $ID:	FRONT_COINCIDENCE_COMPOSITE.PRO,	2023-09-21-13,	USER-KJWH	$
  PRO FRONT_COINCIDENCE_COMPOSITE, CHLFILES=CHLFILES, SSTFILES=SSTFILES, MAP_OUT=MAP_OUT, $
                                   ADD_BATHY=ADD_BATHY, BATHY_DEPTHS=BATHY_DEPTHS, BUFFER=BUFFER, OVERWRITE=OVERWRITE, _EXTRA=_EXTRA

;+
; NAME:
;   FRONT_COINCIDENCE_COMPOSITE
;
; PURPOSE:
;   $PURPOSE$
;
; CATEGORY:
;   FRONTS_FUNCTIONS
;
; CALLING SEQUENCE:
;   FRONT_COINCIDENCE_COMPOSITE,$Parameter1$, $Parameter2$, $Keyword=Keyword$, ....
;
; REQUIRED INPUTS:
;   Parm1.......... Describe the positional input parameters here. 
;
; OPTIONAL INPUTS:
;   Parm2.......... Describe optional inputs here. If none, delete this section.
;
; KEYWORD PARAMETERS:
;   KEY1........... Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
; OUTPUTS:
;   OUTPUT.......... Describe the output of this program or function
;
; OPTIONAL OUTPUTS:
;   None
;
; COMMON BLOCKS: 
;   None
;
; SIDE EFFECTS:  
;   None
;
; RESTRICTIONS:  
;   None
;
; EXAMPLE:
; 
;
; NOTES:
;   $Citations or any other useful notes$
;   
; COPYRIGHT: 
; Copyright (C) 2021, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; AUTHOR:
;   This program was written on May 14, 2021 by Kimberly J. W. Hyde, Northeast Fisheries Science Center | NOAA Fisheries | U.S. Department of Commerce, 28 Tarzwell Dr, Narragansett, RI 02882
;    
; MODIFICATION HISTORY:
;   May 14, 2021 - KJWH: Initial code written
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'FRONT_COINCIDENCE_COMPOSITE'
  COMPILE_OPT IDL2
  SL = PATH_SEP()
  
  ; ===> SET UP DEFAULTS
  ADD_CB=1
  IF NONE(FONT_SIZE)      THEN FONT_SIZE  = 16
  IF NONE(CFONT_SIZE)     THEN CFONT_SIZE = 12
  IF NONE(FONT_STYLE)     THEN FONT_STYLE = 'BOLD'
  IF NONE(PAL)            THEN PAL = 'PAL_DEFAULT' & RGB = CPAL_READ(PAL)
  IF NONE(LAND_COLOR)     THEN LAND_COLOR  = 252
  IF NONE(COAST_COLOR)    THEN COAST_COLOR = 0
  IF N_ELEMENTS(BATHY_DEPTHS) GT 0 THEN BEGIN
    OK = WHERE(BATHY_DEPTHS GT 0, COUNT)
    IF COUNT GT 0 THEN BATHY_DEPTHS[OK] = BATHY_DEPTHS[OK]*(-1)
  ENDIF

  NCOLS = 3
  NROWS = 1
  
  ; ===> Set up default plot spacing
  IF NONE(BUFFER) THEN BUFFER = 0 ; Do plotting in background
  IF NONE(SPACE)  THEN SPACE  = 10
  IF NONE(LEFT)   THEN LEFT   = SPACE * 3
  IF NONE(RIGHT)  THEN RIGHT  = SPACE * 3
  IF NONE(TOP)    THEN TOP    = SPACE * 4
  IF NONE(BOTTOM) THEN BOTTOM = SPACE * 3
  IF NONE(CBSPACE) THEN CBSPACE = SPACE * 4 ELSE CBSPACE = 0

  ; ===> Check the input file(s)
  CFP = PARSE_IT(CHLFILES,/ALL)
  SFP = PARSE_IT(SSTFILES,/ALL)
  
  ; ===> Set up the Map information
  IF N_ELEMENTS(MAP_OUT) EQ 0 THEN MP = SFP[0].MAP ELSE MP = MAP_OUT
  IF IS_L3B(MP) THEN MESSAGE, 'ERROR: Must provide MAP_OUT for the L3B files'
  
  MS = MAPS_SIZE(MP,PX=XDIM,PY=YDIM)
  XNSPACE = NCOLS-1 & YNSPACE = NROWS-1
  WIDTH   = LEFT   + NCOLS*XDIM + XNSPACE*SPACE + RIGHT 
  HEIGHT  = BOTTOM + NROWS*YDIM + YNSPACE*SPACE + TOP + CBSPACE
  SCL = 1
  WHILE WIDTH GT 1200 DO BEGIN
    XDIM = XDIM/SCL
    YDIM = YDIM/SCL
    WIDTH   = LEFT   + NCOLS*XDIM + XNSPACE*SPACE + RIGHT
    HEIGHT  = BOTTOM + NROWS*YDIM + YNSPACE*SPACE + TOP + CBSPACE
    SCL = SCL + 1
    IF SCL GT 10 THEN MESSAGE, 'ERROR: Unable to get the correct image dimensions'
  ENDWHILE
  
  IF SAME(SFP.DIR) AND N_ELEMENTS(DIR_OUT) EQ 0 THEN BEGIN
    IF HAS(SFP[0].DIR,'STACKED_FILES') EQ 0 THEN MESSAGE, 'ERROR: Need to check file directories.'
    DIR_OUT = REPLACE(SFP[0].DIR,SL+'STACKED_FILES'+SL,SL+'COMPOSITE'+SL)
    DIR_OUT = REPLACE(DIR_OUT,'GRADSST_INDICATORS','COINCIDENT_FRONTS')
  ENDIF
  
  ; ===> Loop through files
  LAND = []
  FOR N=0, N_ELEMENTS(CHLFILES)-1 DO BEGIN
    OK = WHERE(SFP.PERIOD EQ CFP[N].PERIOD,COUNT)
    IF COUNT NE 1 THEN STOP
    
    ; ===> Create the output direcgory if not provided
    IF N_ELEMENTS(DIR_OUT) NE 1 THEN BEGIN
      IF HAS(SFP.DIR,'STACKED_FILES') EQ 0 THEN MESSAGE, 'ERROR: Need to update the output directory code that is looking for "STACKED_FILES" in the directory name.'
      DIR = REPLACE(SFP[OK].DIR,SL+'STACKED_FILES'+SL,SL+'COMPOSITE'+SL)
    ENDIF ELSE DIR = DIR_OUT
    IF MP NE SFP[OK].MAP THEN DIR = REPLACE(DIR,SFP[OK].MAP,MP)
    DIR_TEST, DIR
    
    OUTFILE = DIR + SFP[OK].INAME + '-' + SFP[OK].METHOD + '-GRAD_INDICATORS-MILLER-COINCIDENT_COMPOSITE.png'
    IF FILE_MAKE([SFP[OK].FULLNAME,CFP[N].FULLNAME],OUTFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE                       ; Skip if the output file already exists
    
    WIMG = WINDOW(DIMENSIONS=[WIDTH,HEIGHT],BUFFER=BUFFER)
    TXT = TEXT(0.5,0.9,SFP[OK].PERIOD,FONT_STYLE='BOLD',FONT_SIZE=14,ALIGNMENT=0.5)
    
    XPOS = LEFT 
    YPOS = HEIGHT-TOP
    POS = [XPOS,YPOS-YDIM,XPOS+XDIM,YPOS]
    PRODS_2PNG, SFP[OK].FULLNAME, PROD='GRAD_SST', TAG='GRADSST_FMEAN', SPROD='GRAD_SST_0.3_1', ADD_CB=0, PAL=PAL, IMG_POS=POS, MAPP=MP, DEPTH=BATHY_DEPTHS, OUTLINE_IMG=OUTLINE, OUT_COLOR=0, MASK=MASK, OUT_THICK=3, /CURRENT, /DEVICE, BUFFER=BUFFER
    CBPOS = FLOAT([XPOS+XDIM*.1,YPOS-YDIM-SPACE*3,XPOS+XDIM*.9,YPOS-YDIM-SPACE*2])
    CBPOS = [CBPOS[0]/WIDTH,CBPOS[1]/HEIGHT,CBPOS[2]/WIDTH,CBPOS[3]/HEIGHT] ; Convert to NORMAL values
    CBAR, 'GRAD_SST_0.3_1', CB_TICKNAME=['0.3','0.5','0.7','1.0'], OBJ=WIMG, FONT_SIZE=CFONT_SIZE, FONT_STYLE=FONT_STYLE, CB_POS=CBPOS, CB_TITLE='SST Fronts' + UNITS('GRAD_SST',/NO_NAME), PAL=PAL


    XPOS = LEFT + XDIM + SPACE  
    POS = [XPOS,YPOS-YDIM,XPOS+XDIM,YPOS]
    PRODS_2PNG, CFP[N].FULLNAME, PROD='GRAD_CHL', TAG='GRADCHL_FMEAN', SPROD='GRAD_CHL_1_1.2', ADD_CB=0, PAL=PAL, IMG_POS=POS, MAPP=MP, DEPTH=BATHY_DEPTHS, OUTLINE_IMG=OUTLINE, OUT_COLOR=0, MASK=MASK, OUT_THICK=3, /CURRENT, /DEVICE, BUFFER=BUFFER
    CBPOS = FLOAT([XPOS+XDIM*.1,YPOS-YDIM-SPACE*3,XPOS+XDIM*.9,YPOS-YDIM-SPACE*2])
    CBPOS = [CBPOS[0]/WIDTH,CBPOS[1]/HEIGHT,CBPOS[2]/WIDTH,CBPOS[3]/HEIGHT] ; Convert to NORMAL values
    CBAR, 'GRAD_CHL_1_1.2', CB_TICKNAME=CB_TICKNAME, OBJ=WIMG, FONT_SIZE=CFONT_SIZE, FONT_STYLE=FONT_STYLE, CB_POS=CBPOS, CB_TITLE='CHL Fronts' + UNITS('GRAD_CHL',/NO_NAME), PAL=PAL


    CHL = STRUCT_READ(CFP[N].FULLNAME,STRUCT=CS, MAP_OUT=MP)
    SST = STRUCT_READ(SFP[OK].FULLNAME,STRUCT=SS, MAP_OUT=MP)
    
    OKCHL = WHERE(CS.GRADCHL_FMEAN NE MISSINGS(0.0),COUNTC)
    OKSST = WHERE(SS.GRADSST_FMEAN NE MISSINGS(0.0),COUNTS)
    OKCMB = WHERE(CS.GRADCHL_FMEAN NE MISSINGS(0.0) AND SS.GRADSST_FMEAN NE MISSINGS(0.0),COUNTB)
    
    CMB = MAPS_BLANK(MP,FILL=0)
    CMB[OKSST] = 1
    CMB[OKCHL] = 2
    CMB[OKCMB] = 3
    
    XPOS = LEFT + XDIM*2 + SPACE*2  ; Determine the left side of the image
    POS = [XPOS,YPOS-YDIM,XPOS+XDIM,YPOS]
    PRODS_2PNG, DATA_IMAGE=CMB, PROD='NUM_0_4', ADD_CB=0, IMG_POS=POS, MAPP=MP, DEPTH=BATHY_DEPTHS, BATHY_COLOR=255, OUTLINE_IMG=OUTLINE, OUT_COLOR=0, MASK=MASK, OUT_THICK=3, /CURRENT, /DEVICE, BUFFER=BUFFER
    
    CLRS = PRODS_2BYTE([0,1,2,3],PROD='NUM_0_4')
    
    SYB = SYMBOL(XPOS+SPACE*2,       YPOS-YDIM-SPACE*2,          'HLINE',SYM_THICK=6, LABEL_STRING=' No front',  SYM_COLOR=RGB[*,CLRS[0]],LABEL_COLOR=RGB[*,CLRS[0]],LABEL_FONT_SIZE=CFONT_SIZE,/DEVICE)
    SYB = SYMBOL(XPOS+XDIM/2+SPACE,  YPOS-YDIM-SPACE*2,          'HLINE',SYM_THICK=6, LABEL_STRING=' SST front', SYM_COLOR=RGB[*,CLRS[1]],LABEL_COLOR=RGB[*,CLRS[0]],LABEL_FONT_SIZE=CFONT_SIZE,/DEVICE)
    SYB = SYMBOL(XPOS+SPACE*2,       YPOS-YDIM-SPACE*3-CBSPACE/2,'HLINE',SYM_THICK=6, LABEL_STRING=' CHL front', SYM_COLOR=RGB[*,CLRS[2]],LABEL_COLOR=RGB[*,CLRS[0]],LABEL_FONT_SIZE=CFONT_SIZE,/DEVICE)
    SYB = SYMBOL(XPOS+XDIM/2+SPACE,  YPOS-YDIM-SPACE*3-CBSPACE/2,'HLINE',SYM_THICK=6, LABEL_STRING=' SST & CHL ',SYM_COLOR=RGB[*,CLRS[3]],LABEL_COLOR=RGB[*,CLRS[0]],LABEL_FONT_SIZE=CFONT_SIZE,/DEVICE)

    PRINT, 'Writing ' + OUTFILE
    WIMG.SAVE, OUTFILE, RESOLUTION=RESOLUTION
    WIMG.CLOSE
    
  ENDFOR ; FILES


END ; ***************** End of FRONT_COINCIDENCE_COMPOSITE *****************
