; $ID:	SST_MODIS_MAPPED_2SAVE.PRO,	2020-06-30-17,	USER-KJWH	$

	PRO SST_MODIS_MAPPED_2SAVE, SSTFILES=sstfiles, QUALFILES=qualfiles, FLAGFILES=flagfiles, DIR_OUT=dir_out, DIR_BROWSE=dir_browse, PRODS=prods, NO_MASK=no_mask, MAKE_BROWSE=make_browse, $
												KEEP_HDF=keep_hdf, OVERWRITE=overwrite, SENSOR=sensor, ADD_COVERAGE=add_coverage, _EXTRA=_extra

;+
; NAME:
;		L2_2MAPPED_2SAVE
;
; PURPOSE:;
;		This function opens a MODIS L2 file, maps each product and creates saves
;
; CATEGORY:
;
;
; CALLING SEQUENCE:
;		Write the calling sequence here. Include only positional parameters
;		(i.e., NO KEYWORDS). For procedures, use the form:
;
;		ROUTINE_NAME, Parameter1, Parameter2, Foobar
;
;		Note that the routine name is ALL CAPS and arguments have Initial
;		Caps.  For functions, use the form:
;
;		Result = FUNCTION_NAME(Parameter1, Parameter2, Foobar)
;
; INPUTS:
;		Parm1:	Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;		Parm2:	Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;		KEY1:	Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
;
; OUTPUTS:
;		This function returns the
;
; OPTIONAL OUTPUTS:  ;
; COMMON BLOCKS:
; SIDE EFFECTS:
; RESTRICTIONS:
;	PROCEDURE:
; EXAMPLE:
;			FILES = FILE_SEARCH('E:\MODIS_TEST\*SEAWIFS*.hdf') & DIR_OUT = 'E:\MODIS_TEST\SAVE\' & MAPS = 'NEC' & PRODS = 'chlor_a'
;			L2_2MAPPED_2SAVE,FILES=FILES,DIR_OUT=DIR_OUT,MAPS=MAPS,PRODS=PRODS, /OVERWRITE
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			Written May 1, 2007 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'L2_2MAPPED_2SAVE'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
 	DASH = '-'
 	FLAG_BITS = [1]

	ABACKGROUND=252 & ALAND_COLOR=252 & AOUTSCAN_COLOR=253 & AOUTMAP_COLOR=253 & AALGFAIL_COLOR=251
	AFLAG_COLOR=254 & AMISS_COLOR=254 & AHI_LO_COLOR=255 & ACRITERIA_COLOR=253 & ABATHY_COLOR=252

; ***** Find files and set up defaults *****
  FILES = [SSTFILES,QUALFILES,FLAGFILES]
  IF N_ELEMENTS(FILES) GE 1 THEN _FILES = FILES ELSE _FILES = DIALOG_PICKFILE(filter='*.hdf*')
  IF N_ELEMENTS(PRODS) GE 1 THEN _PRODS = PRODS ELSE _PRODS = ['SST','SST4']
  IF N_ELEMENTS(DIR_BROWSE) EQ 0 THEN DIR_BROWSE = DIR_OUT

;	***** Verify that the output products are valid *****
	OK = WHERE(VALIDS('PRODS',_PRODS,/VALID) EQ 1,COUNT_PRODS)
	IF COUNT_PRODS GE 1 THEN _PRODS=_PRODS[OK]

  FP = PARSE_IT(_FILES, /ALL)

  SETS = WHERE_SETS(FP.INAME+'*'+FP.MAP+'*'+FP.ALG+'*.hdf')

; ***** Loop through files *****
	FOR NTH=0L, N_ELEMENTS(SETS)-1 DO BEGIN
		SUBS = WHERE_SETS_SUBS(SETS[NTH])
		AFILES = _FILES(SUBS)
		AFP = FP(SUBS)
		OK = WHERE(AFP.PROD EQ 'QUAL_SST',COUNT) & IF COUNT EQ 1 THEN QUAL  = AFILES[OK] ELSE STOP
		OK = WHERE(AFP.PROD EQ 'L2_FLAGS',COUNT) & IF COUNT EQ 1 THEN FLAGS = AFILES[OK] ELSE STOP
		OK = WHERE(AFP.PROD EQ 'SST',     COUNT)
		IF COUNT EQ 1 THEN BEGIN
		  SST   = AFILES[OK]
		  SKIP = 0
		 	SAVEFILE=DIR_OUT + AFP[OK].NAME + '.save'
			IF FILE_TEST(SAVEFILE) EQ 1 AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
		ENDIF ELSE STOP

;   ***** If file is zipped, then upzip *****
;		REMOVE_FILE = ''
;    IF STRUPCASE(EXT) EQ 'GZ' THEN BEGIN
;			ZIP,FILES=AFILES,DIR_OUT=DIR_OUT
;    	AFILES = DIR_OUT + AFP.NAMES_EXT                                              ; Make the unzipped file AFILE
;   	 	FN = PARSE_IT(AFILES,/ALL)
;   	 	REMOVE_FILE = AFILES
;    ENDIF
;    FI_IN=FILE_INFO(AFILE)
;    IF NOT FI_IN[0].SIZE GT 0L THEN CONTINUE

;		***** Read the L2 HDF file *****
    PRINT,'Reading: '+ SST
    PRINT,'Reading: '+ QUAL
    PRINT,'Reading: '+ FLAGS
    SST_STRUCT   = READ_HDF_2STRUCT(SST,  ERROR=ERROR_S,ERR_MSG=ERR_MSG_S)
    QUAL_STRUCT  = READ_HDF_2STRUCT(QUAL, ERROR=ERROR_Q,ERR_MSG=ERR_MSG_Q)
    FLAGS_STRUCT = READ_HDF_2STRUCT(FLAGS,ERROR=ERROR_F,ERR_MSG=ERR_MSG_F)
    S_NAMES = STRUPCASE(TAG_NAMES(SST_STRUCT.SD))
    Q_NAMES = STRUPCASE(TAG_NAMES(QUAL_STRUCT.SD))
    F_NAMES = STRUPCASE(TAG_NAMES(FLAGS_STRUCT.SD))

;		***** Read the standard landmask for this map *****
		STRUCT_LANDMASK = READ_LANDMASK(MAP=AFP[0].MAP,/STRUCT,ERROR=ERROR)

; 	***** IF ERROR then no landmask exists *****
		IF ERROR EQ 0 AND ERROR NE 'NO LANDMASK' THEN BEGIN
	 		OK_LAND = STRUCT_LANDMASK.LAND
	 		COUNT_LAND = STRUCT_LANDMASK.COUNT_LAND
	 		GONE, STRUCT_LANDMASK
		ENDIF ELSE COUNT_LAND = 0

;   ***** Get SST image *****
    OK_SST = WHERE(S_NAMES EQ 'MAPPED___SST',COUNT)
    SST_IMAGE = ROTATE(SST_STRUCT.SD.(OK_SST).IMAGE,7)

;		***** Get QUAL information *****
		OK = WHERE(Q_NAMES EQ 'MAPPED___QUAL_SST',COUNT)
		QUAL_IMAGE = ROTATE(QUAL_STRUCT.SD.(OK).IMAGE,7)
   	OK_QUAL_0 = WHERE(QUAL_IMAGE EQ 0, COUNT_QUAL_0)
   	OK_QUAL_1 = WHERE(QUAL_IMAGE EQ 1, COUNT_QUAL_1)
   	OK_QUAL_2 = WHERE(QUAL_IMAGE EQ 2, COUNT_QUAL_2)
   	OK_QUAL_3 = WHERE(QUAL_IMAGE EQ 3, COUNT_QUAL_3)
   	OK_QUAL_4 = WHERE(QUAL_IMAGE EQ 4, COUNT_QUAL_4)
   	GONE, QUAL_IMAGE

;		***** Get FLAG information *****
		OK = WHERE(F_NAMES EQ 'MAPPED___L2_FLAGS',COUNT)
		FLAGS_IMAGE = ROTATE(FLAGS_STRUCT.SD.(OK).IMAGE,7)
		FLAGS_NAMES = SD_FLAGS(FLAGS_IMAGE,SENSOR=_SENSOR,/NAMES)
		MASK_FLAG = SD_FLAGS_COMBO(FLAGS_IMAGE,FLAG_BITS)
		OK_L2_FLAGS =WHERE(MASK_FLAG NE 0, COUNT_L2_FLAGS)
		ZENITH = SD_FLAGS_COMBO(FLAGS_IMAGE,13)
		OK_ZENITH = WHERE(ZENITH NE 0, COUNT_ZENITH)
STOP
		GONE, FLAGS_IMAGE

;		*****  Make Mask for STRUCT_SD  *****
		MASK=BYTE(SST_IMAGE) & MASK(*,*)=0B

;		===> NOT_MASK (good data , 0b)
		CODE_NAME = 'NOT_MASK'
		CODE_MASK = 0B
		CODE_NAME_MASK=[CODE_NAME]

    CODE_NAME = 'NOT_MASK'
    ACODE = 1B
    CODE_MASK = [CODE_MASK,ACODE]
    CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
    IF COUNT_QUAL_1 GE 1 THEN MASK(OK_QUAL_1) = ACODE

		CODE_NAME = 'NOT_MASK'
    ACODE = 2B
    CODE_MASK = [CODE_MASK,ACODE]
    CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
    IF COUNT_QUAL_2 GE 1 THEN MASK(OK_QUAL_2) = ACODE

		CODE_NAME = 'BAD_SST'
    ACODE = 3B
    CODE_MASK = [CODE_MASK,ACODE]
    CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
    IF COUNT_QUAL_3 GE 1 THEN MASK(OK_QUAL_3) = ACODE

		CODE_NAME = 'SST_FAIL'
    ACODE = 4B
    CODE_MASK = [CODE_MASK,ACODE]
    CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
    IF COUNT_QUAL_4 GE 1 THEN MASK(OK_QUAL_4) = ACODE

;		===> L2_FLAGS
		CODE_NAME = 'L2_FLAGS'
		ACODE = 5B
		CODE_MASK     =[CODE_MASK,ACODE]
		CODE_NAME_MASK=[CODE_NAME_MASK,CODE_NAME]
		IF COUNT_L2_FLAGS GE 1 THEN MASK(OK_L2_FLAGS) = ACODE

;		===> LAND
		CODE_NAME = 'LAND'
		ACODE = 6B
		CODE_MASK     =[CODE_MASK,ACODE]
		CODE_NAME_MASK=[CODE_NAME_MASK,CODE_NAME]
		IF COUNT_LAND GE 1 THEN MASK(OK_LAND) = ACODE

 		MISSING_CODES=[-32767]

;		***** Check to see if SCALING, SLOPE, INTERCEPT AND UNITS are present, if  not defaults are assumed *****

		PROD_TAGS = TAG_NAMES(SST_STRUCT.SD.(OK_SST))
		OK = WHERE(STRUPCASE(PROD_TAGS) EQ 'SCALING',COUNT_SCALING)
		IF COUNT_SCALING EQ 1 THEN SCALING=SST_STRUCT.SD.(OK_SST).SCALING ELSE SCALING = 'Linear'
		OK = WHERE(STRUPCASE(PROD_TAGS) EQ 'SLOPE',COUNT_SLOPE)
		IF COUNT_SLOPE EQ 1 THEN SLOPE=SST_STRUCT.SD.(OK_SST).SLOPE ELSE SLOPE = 1.0
		OK = WHERE(STRUPCASE(PROD_TAGS) EQ 'INTERCEPT',COUNT_INTERCEPT)
		IF COUNT_INTERCEPT EQ 1 THEN INTERCEPT=SST_STRUCT.SD.(OK_SST).INTERCEPT ELSE INTERCEPT = 0.0
		OK = WHERE(STRUPCASE(PROD_TAGS) EQ 'UNITS',COUNT_DATA_UNITS)
		IF COUNT_DATA_UNITS EQ 1 THEN DATA_UNITS=SST_STRUCT.SD.(OK_SST).UNITS ELSE DATA_UNITS = 'UNKNOWN'

		ASTAT='DATA'
		IF N_ELEMENTS(MISSING_CODES) NE N_ELEMENTS(MISSING_NAMES) THEN MISSING_NAMES=REPLICATE('',N_ELEMENTS(MISSING_CODES))

		_GLOBAL=''
		_L2_INPUT_FILES=''
		_INPUT_PARAMETERS=''
		OK=WHERE(STRUPCASE(TAG_NAMES(SST_STRUCT)) EQ 'GLOBAL',COUNT)
		IF COUNT EQ 1 THEN BEGIN
			_GLOBAL=STRUCT.GLOBAL
			_INPUT_PARAMETERS=STRSPLIT(_GLOBAL.INPUT_PARAMETERS,BYTE(10),/EXTRACT)
			_L2_INPUT_FILES= STRSPLIT(_GLOBAL.INPUT_FILES,',',/EXTRACT)
		ENDIF

    IF KEYWORD_SET(NO_REMAP) THEN BEGIN
      MAP = 'LATLON'
      _LONS = STRUCT.SD.LONGITUDE.IMAGE
      _LATS = STRUCT.SD.LATITUDE.IMAGE
      _CTL_LONS = STRUCT.SD.CNTL_PT_COLS.IMAGE
      _CTL_LATS = STRUCT.SD.CNTL_PT_ROWS.IMAGE
    ENDIF

    STRUCT_SD_WRITE,SAVEFILE,PROD=AFP[0].PROD, ASTAT=ASTAT,GLOBAL=_GLOBAL,$
  				 INPUT_PARAMETERS=_INPUT_PARAMETERS, 	L2_INPUT_FILES=_L2_INPUT_FILES,$
           IMAGE=SST_IMAGE,     MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
           MASK=MASK,     CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
           SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
           PERIOD=AFP[0].PERIOD, ALG=AFP[0].ALG,$
           SENSOR=AFP[0].SENSOR,    SATELLITE=AFP[0].SATELLITE, SAT_EXTRA=SAT_EXTRA,$
           METHOD=AFP[0].METHOD,   SUITE=AFP[0].SUITE,          MAP=AFP[0].MAP, $
           INFILE=AFP[0].FULLNAME,$
           NOTES='', STATUS=STATUS,  ERROR=ERROR

		IF KEYWORD_SET(ADD_COVERAGE) THEN ADD_EXTRA = COVERAGE
		IF KEYWORD_SET(MAKE_BROWSE) THEN $
			STRUCT_SD_2PNG, SAVEFILE, DIR_OUT=DIR_BROWSE, $
											/ADD_COLORBAR, /ADDDATE,/ADD_SENSOR,/ADD_PROD,/ADD_METHOD,$
											/ADD_LAND,/ADD_COAST,BACKGROUND=ABACKGROUND, $
										  LAND_COLOR=ALAND_COLOR,FLAG_COLOR=AFLAG_COLOR,OUTSCAN_COLOR=aoutscan_color,$
										  ALGFAIL_COLOR=AALGFAIL_COLOR,HI_LO_COLOR=AHI_LO_COLOR,PAL=PAL,FLAGS=_FLAGS,SOLO=SOLO ,$
										  OVERWRITE=overwrite,/QUIET,NO_MASK=NO_MASK,ADD_EXTRA=ADD_EXTRA


		GONE, SST_IMAGE
		GONE, MASK

	;	IF NOT KEYWORD_SET(KEEP_HDF) AND REMOVE_FILE NE '' THEN FILE_DELETE,REMOVE_FILE

	ENDFOR			; End FILE loop

END; #####################  End of Routine ################################
