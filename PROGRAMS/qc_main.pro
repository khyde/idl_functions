; $ID:	QC_MAIN.PRO,	2020-07-01-12,	USER-KJWH	$
;+
; ######################################################################### 
  PRO QC_MAIN


; THIS PROGRAM IS A MAIN ROUTINE FOR QUALITY CONTROL OF SATELLITE DATA FILES


; HISTORY:
;     MAR 6,2014  WRITTEN BY: J.E. O'REILLY
;-
; #########################################################################

;*****************************
ROUTINE_NAME  = 'QC_MAIN'
;*****************************
;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
;CONSTANTS
;BATHY_FILE=!S.DIR_DATA +'SRTM30-SMI-PXY_4320_2160-BATHY.SAVE'  & PF,BATHY_FILE,/X
;BOTTOM_DEPTH=STRUCT_SD_READ(BATHY_FILE)& PFILE,BATHY_FILE,/X
;LAND_MASK = READ_LANDMASK(MAP='SMI',/LAND)
SMI_PX = 4320 & SMI_PY = 2160;
; SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
; SSSSS       S W I T C H E S      CONTROLLING WHICH PROCESSING STEPS TO DO SSSSS
  DO_MLAC_NEC		         = 0
  DO_SMI_2NEC_PNG 			 = 0
  DO_PPY_VS_KIM  			   = 0
  DO_KIM_OPAL_VS_KIM_VGPM = 0
  DO_SMI_2PNG 		       = 0
  DO_PLOT_SH_PAR         = 0
  DO_LME_PPY_CSV         = 0
  
  DO_PP_OPAL_TEST   		 = 0
  DO_TEST_VERSIONS       = 0
  DO_PLOT_PPD_NORTHEAST  = 0
;SSSSS     END OF SWITCHES     SSSSS

; ****************************
 	IF DO_MLAC_NEC GE 1 THEN BEGIN
; ****************************
    , 'DO_MLAC_NEC'
    OVERWRITE = DO_MLAC_NEC EQ 2  & IF DO_MLAC_NEC EQ 3 THEN STOP 
		;D_19980330-SEAWIFS-OV2-R2010-MLAC-NEC-CHLOR_A-OC4-INTERP-TS_IMAGES
		;D_19980303-SEAWIFS-OV2-R2010-MLAC-NEC-PAR-INTERP-TS_IMAGES
		;D_19980303-AVHRR-N00-4-NEC-SST-INTERP-TS_IMAGES
		;D_19980303-SEAWIFS-OV2-R2010-MLAC-NEC-A_CDOM_443-MAN_MLR-INTERP-TS_IMAGES
		DIR_IN = "C:\IDL\KIM-IDL\"
		DIR_OUT =!S.DIR_TEMP
		;===> JUST CHLOR_A
    FILES = FILE_SEARCH(DIR_IN,'D_19980330-*NEC*CHLOR_A*.SAVE')
   
    FA = FILE_ALL(FILES) & PERIOD = FA.PERIOD & PROD = FA.PROD
    ;===> GET SMI FROM SAME PERIOD
    DIR = GET_SMI() 
    SMI = FILE_SEARCH(DIR.STATS,PERIOD +'*' + PROD + '*.SAVE')
    FILES = [FILES,SMI]

		;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
		FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
		  FILE = FILES[NTH] & PF,FILE,/R
		  FA= FILE_ALL(FILE) & PROD = FA.PROD & MAP = FA.MAP
		  DATA = STATS_READ(FILE,STRUCT=STRUCT)& ST,STRUCT & HELP,DATA & WAIT,2
		  GONE,STRUCT
		  IF MAP EQ 'SMI' THEN  MAP_OUT = 'NEC'
		   
		  S = STATS(DATA,/BASIC) &  D = CREATE_STRUCT(STRUCT_IT(PROD,'PROD'),STRUCT_IT(MAP,'MAP'),STRUCT_IT(FA.NAME_EXT,'FILE'),S) 
		  IF N_ELEMENTS(DB) EQ 0 THEN DB = D ELSE DB = [DB,D]
		  PRODS_2PNG,FILE,DIR_OUT = DIR_OUT,MAP_OUT=MAP_OUT
		ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    
    TARGET = 'D_2000' & PROD = 'CHLOR_A'
    DIR = GET_SMI()
    FILES = FILE_SEARCH(DIR.STATS,TARGET +'*' + PROD + '*.SAVE')
    PL,FILES
    P
    
    , 'DO_MLAC_NEC'
  ENDIF ; IF DO_MLAC_NEC GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||


; ****************************
  IF DO_SMI_2NEC_PNG GE 1 THEN BEGIN
; ****************************
    , 'DO_SMI_2NEC_PNG'
    OVERWRITE = DO_SMI_2NEC_PNG EQ 2 &   IF DO_SMI_2NEC_PNG EQ 3 THEN STOP 
    DIR = GET_SMI()
    DIR_OUT =!S.DIR_TEMP
    PERIOD = 'D_2000' & PROD = 'CHLOR_A'
    FILES = FILE_SEARCH(DIR.STATS,PERIOD +'*' + PROD + '*.SAVE') & PL,FILES
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
      FILE = FILES[NTH] & PF,FILE,/R
      FA= FILE_ALL(FILE) & PROD = FA.PROD & MAP = FA.MAP
      DATA = STATS_READ(FILE,STRUCT=STRUCT)
      GONE,STRUCT
      ;;IF MAP EQ 'SMI' THEN  MAP_OUT = 'NEC'
      
      S = STATS(DATA,/BASIC) &  D = CREATE_STRUCT(STRUCT_IT(PROD,'PROD'),STRUCT_IT(MAP,'MAP'),STRUCT_IT(FA.NAME_EXT,'FILE'),S)
      PRODS_2PNG,FILE,DIR_OUT = DIR_OUT,MAP_OUT=MAP_OUT,/BUFFER,/ADD_NAME
    ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    , 'DO_SMI_2NEC_PNG'
  ENDIF ; IF DO_SMI_2NEC_PNG GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||

;*******************************
IF DO_PPY_VS_KIM GE 1 THEN BEGIN
; ******************************
  , 'DO_PPY_VS_KIM'
  OVERWRITE = DO_PPY_VS_KIM EQ 2 &  IF DO_PPY_VS_KIM EQ 3 THEN STOP
  DIR = GET_SMI()
  FILE = FILE_SEARCH(DIR.LME_CSV_CONCAT,'TAG_ANNUAL-PPD.CSV')& PF,FILE,/X
  DB = STRUCT_2NUM(CSV_READ(FILE))
  DB = STRUCT_RENAME(DB,'LME_NUMBER','CODE')
  DB = STRUCT_RENAME(DB,'MEAN','PPY')
;  DB.PPY = DB.PPY*365.25
  M = GET_LME_MAPS()
  S = STRUCT_JOIN(DB,M,TAGNAMES = 'CODE') & S=STRUCT_SORT(S,TAGNAMES ='CODE')
  KIM = STRUCT_2NUM(CSV_READ(!S.DIR_DATA + '!ANNUAL-MASK_SUBAREA-L3B-PXY_1_5940423-LME-PPD-OPAL.CSV'))
  KIM = STRUCT_RENAME(KIM,['SUBAREA_CODE','MEAN'],['CODE','PPY_K'])
  
  S = STRUCT_JOIN(S,KIM,TAGNAMES = 'CODE')
  U = UNITS('PPD')
  PAL_36,R,G,B
  TXT = STRTRIM(S.CODE,2)
  PSFILE = !S.DIR_TEMP + 'DO_PPY_VS_KIM-PLOTXY.PS' 
  PSPRINT,FILENAME = PSFILE,/COLOR 
  SETCOLOR,255
  XTITLE = U +'VGPM2-KIM-(1997-2006)'&YTITLE = U +'VG2M2A-JAY(1997-2014)'
  PLOTXY,S.PPY_K,S.PPY,$
         XTITLE=XTITLE,YTITLE=YTITLE,CHARSIZE = 1.5,DECIMALS=3,$
         STATS_CHARSIZE = 1.5,PARAMS=[1,2,3,4,7],PSYM=2,$
         TITLE = 'PPD-VGPM2',SYM_COLOR = 26,SYM_THICK = 3,$
         ONE_COLOR= 21,ONE_THICK = 5,/ONE2ONE,$
         GRID_COLOR=34,GRID_THICK = 6
  
  PSPRINT& PF,PSFILE
  
 
  S = STRUCT_2NUM(S)
  
 RGB_TABLE = RGBS() 
  P = PLOT(S.PPY_K,S.PPY,SYMBOL = 3,XTITLE =XTITLE,YTITLE = YTITLE,TITLE = 'PPD-VGPM2',$
    LINESTYLE = 6,SYM_COLOR = 'GREEN',FONT_SIZE = 21)
   T = TEXT(S.PPY_K,S.PPY,TXT,COLOR = 'MAGENTA',TARGET = 'P'$
    ,/DATA,FONT_SIZE = 21,$
    ALIGNMENT = 0.5,VERTICAL_ALIGNMENT=0.5)
   ONE2ONE
  
  
  S = STATS2( S.PPY_K,S.PPY ,MODEL='RMA',DECIMALS = 3)
  S = STRUCT_COPY(S,['MODEL','N','INT','SLOPE','RSQ'])  
  S = STRUCT_ROUNDS(S, DECIMALS=3)
  S.MODEL = 'RMA'; WORKAROUND
  A = STRUCT_2ARR(S)
  N = TAG_NAMES(S)
  TXT =  N + '      ' + A
  TXT = [SPACES(),TXT]
  T = TEXT(0.2,0.6,/NORMAL,TXT,$
    FONT_SIZE = 21,$
    COLOR = RGB_TABLE(*,21),$
    ALIGNMENT = 0 ) ; MUST BE BETWEEN 0 AND 1.0 (0=LEFT, 0.5=CENTER, 1.0=RIGHT)
  ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  T = TEXT(1.35,1.5,'LME_NUMBER',TARGET = 'P',/DATA,$
    FONT_SIZE = 11,$
    COLOR = 'MAGENTA',$
    ALIGNMENT = 0 ) ;
; LEG = LEGEND(TARGET = 'P', POSITION=[0.6,0.6,0.7,0.7],/NORMAL,$
;     /AUTO_TEXT_COLOR,FONT_SIZE = 18,SHADOW=0,TRANSPARENCY = 0,$
;     HORIZONTAL_ALIGNMENT = 0.0,VERTICAL_ALIGNMENT= 0.5,$
;     SAMPLE_WIDTH= 0.05)    
;    
    
  PNGFILE = !S.DIR_TEMP + 'DO_PPY_VS_KIM.PNG'
  P.SAVE,PNGFILE & PF,PNGFILE  
  P.CLOSE
  
  , 'DO_PPY_VS_KIM'
ENDIF ; IF DO_PPY_VS_KIM GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||



;*******************************
IF DO_KIM_OPAL_VS_KIM_VGPM GE 1 THEN BEGIN
; ******************************
  , 'DO_KIM_OPAL_VS_KIM_VGPM'
  OVERWRITE = DO_KIM_OPAL_VS_KIM_VGPM EQ 2 &  IF DO_KIM_OPAL_VS_KIM_VGPM EQ 3 THEN STOP
  
  M = GET_LME_MAPS()
  OPAL = STRUCT_2NUM(CSV_READ(!S.DIR_DATA + '!ANNUAL-MASK_SUBAREA-L3B-PXY_1_5940423-LME-PPD-OPAL.CSV'))
  OPAL = STRUCT_RENAME(OPAL,['SUBAREA_CODE','MEAN'],['CODE','OPAL'])
  VGPM2 = STRUCT_2NUM(CSV_READ(!S.DIR_DATA + '!ANNUAL-MASK_SUBAREA-L3B-PXY_1_5940423-LME-VGPM2-PPD-VGPM2.CSV'))
  VGPM2 = STRUCT_RENAME(VGPM2,['SUBAREA_CODE','MEAN'],['CODE','VGPM2'])

  S = STRUCT_JOIN(OPAL,VGPM2,TAGNAMES = 'CODE')
  U = UNITS('PPD')
  PAL_36,R,G,B
  TXT = STRTRIM(S.CODE,2)
  PSFILE = !S.DIR_TEMP + 'KIM_OPAL_VS_KIM_VGPM-PLOTXY.PS'
  PSPRINT,FILENAME = PSFILE,/COLOR
  SETCOLOR,255
  XTITLE = U +'VGPM2-KIM-(1997-2006)'&YTITLE = U +'OPAL-KIM(1997-2007)'
  PLOTXY,S.VGPM2,S.OPAL,$
    XTITLE=XTITLE,YTITLE=YTITLE,CHARSIZE = 1.5,DECIMALS=3,$
    STATS_CHARSIZE = 1.5,PARAMS=[1,2,3,4,7],PSYM=2,$
    TITLE = 'PPD-VGPM2',SYM_COLOR = 26,SYM_THICK = 3,$
    ONE_COLOR= 21,ONE_THICK = 5,/ONE2ONE,$
    GRID_COLOR=34,GRID_THICK = 6
    
  PSPRINT& PF,PSFILE
  
  
  S = STRUCT_2NUM(S)
  
  RGB_TABLE = RGBS()
  P = PLOT(S.VGPM2,S.OPAL,SYMBOL = 3,XTITLE =XTITLE,YTITLE = YTITLE,TITLE = 'PPD-VGPM2',$
    LINESTYLE = 6,SYM_COLOR = 'GREEN',FONT_SIZE = 21)
    
    ONE2ONE, OBJ = P,THICK = 7,COLOR = 'SLATE GRAY' ,LINESTYLE = 0,TRANSPARENCY = 0

  T = TEXT(S.VGPM2,S.OPAL,TXT,COLOR = 'MAGENTA',TARGET = 'P'$
    ,/DATA,FONT_SIZE = 21,$
    ALIGNMENT = 0.5,VERTICAL_ALIGNMENT=0.5)
  
 
  S = STATS2( S.VGPM2,S.OPAL ,MODEL='RMA',DECIMALS = 3)
  S = STRUCT_COPY(S,['MODEL','N','INT','SLOPE','RSQ'])
  S = STRUCT_ROUNDS(S, DECIMALS=3)
  S.MODEL = 'RMA'; WORKAROUND
  ONE2ONE, OBJ = P,THICK = 3,COLOR = 'RED' ,LINESTYLE = 0,RATIO = S.SLOPE

  A = STRUCT_2ARR(S)
  N = TAG_NAMES(S)
  TXT =  N + '      ' + A
  TXT = [SPACES(),TXT]
  T = TEXT(0.2,0.6,/NORMAL,TXT,$
    FONT_SIZE = 21,$
    COLOR = RGB_TABLE(*,21),$
    ALIGNMENT = 0 ) ; MUST BE BETWEEN 0 AND 1.0 (0=LEFT, 0.5=CENTER, 1.0=RIGHT)
  ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  T = TEXT(1.35,1.5,'LME_NUMBER',TARGET = 'P',/DATA,$
    FONT_SIZE = 11,$
    COLOR = 'MAGENTA',$
    ALIGNMENT = 0 ) ;
  ; LEG = LEGEND(TARGET = 'P', POSITION=[0.6,0.6,0.7,0.7],/NORMAL,$
  ;     /AUTO_TEXT_COLOR,FONT_SIZE = 18,SHADOW=0,TRANSPARENCY = 0,$
  ;     HORIZONTAL_ALIGNMENT = 0.0,VERTICAL_ALIGNMENT= 0.5,$
  ;     SAMPLE_WIDTH= 0.05)
  ;
  
  PNGFILE = !S.DIR_TEMP + 'DO_KIM_OPAL_VS_KIM_VGPM.PNG'
  P.SAVE,PNGFILE & PF,PNGFILE
  P.CLOSE
  
  , 'DO_KIM_OPAL_VS_KIM_VGPM'
ENDIF ; IF DO_KIM_OPAL_VS_KIM_VGPM GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||



; ****************************
IF DO_SMI_2PNG GE 1 THEN BEGIN
  ; ****************************
  , 'DO_SMI_2PNG'
  OVERWRITE = DO_SMI_2PNG EQ 2 & IF DO_SMI_2PNG EQ 3 THEN STOP
  DIR = GET_SMI()
  DIR_IN = DIR.STATS_PERIODS
  DIR_OUT = DIR.STATS_BROWSE
  PAT = 'ANNUAL'
  FILES = FILE_SEARCH(DIR_IN,'*' + PAT + '*.SAVE') & PN,FILES
  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES[NTH]
    PRODS_2PNG,FILE,DIR_OUT=DIR_OUT,/BUFFER,/ADD_NAME
  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  , 'DO_SMI_2PNG'
ENDIF ; IF DO_SMI_2PNG GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||

;******************************************
IF DO_PLOT_SH_PAR GE 1 THEN BEGIN
  SH = CSV_READ("C:\DBASES\PAR\PAR_1985_JOR.CSV",SKIP = 3)
  OK = WHERE(SH.DATE NE MISSINGS(SH.DATE),COUNT)
  IF COUNT GE 1 THEN SH =SH[OK]
  JD = DATE_2JD(SH.DATE) & PL,JD_2DATE(JD)
  AX = DATE_AXIS(JD,/ENDS)
  PAL_36
  PSPRINT,/COLOR
  PLOT,JD,SMOOTH(FLOAT(SH.PAR_EM2D),31),XTICKNAME = AX.TICKNAME,XTICKV = AX.TICKV,$
       XTICKS = AX.TICKS,THICK = 5,/NODATA,TITLE='PAR AT SANDY HOOK, NJ',YTITLE = UNITS('PAR')
  OPLOT,JD,SMOOTH(FLOAT(SH.PAR_EM2D),31),COLOR = 26,THICK = 11
  GRIDS,COLOR = 32
  PSPRINT
  P = PLOT(JD,FLOAT(SH.PAR_EM2D),XTICKNAME = AX.TICKNAME,$
    COLOR = 'MAGENTA',THICK = 5,TITLE = 'PAR AT SANDY HOOK,NJ,1985',$
    BACKGROUND_COLOR = 'LIGHT GREY',YTITLE = UNITS('PAR'),FONT_SIZE = 21)
  PNGFILE = 'DO_PLOT_SH_PAR.PNG'
  P.SAVE,PNGFILE  & PF,PNGFILE   & P.CLOSE
  STOP
ENDIF;IF DO_PLOT_SH_PAR GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||
;**************************************
IF DO_LME_PPY_CSV GE 1 THEN BEGIN
  ;**************************************
  DB= IDL_RESTORE('F:\SMI\LME_DATA\UNEP_MAIN-D_PPD.SAVE') & PN,DB
  SETS = WHERE_SETS(DB.MAP) & PN,SETS,' MAPS '
  MAPS = SETS.VALUE & PL,MAPS
  CSV = REPLICATE(CREATE_STRUCT('MAP','','PPY',0.0),N_ELEMENTS(MAPS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  
    AMAP = MAPS[NTH]
    OK = WHERE(DB.MAP EQ AMAP)
    D = DB[OK]
    PL,D.AMEAN
    PL,D.MED
    OK = WHERE(FINITE(D.AMEAN) EQ 1,COUNT,COMPLEMENT = COMPLEMENT) & P,(100.0* COUNT)/N_ELEMENTS(D)
    JD = PERIOD_2JD(D.PERIOD) & YF = JD_2DYEAR(JD)
    AX = DATE_AXIS(JD,/ENDS) & ST,AX
    ;PLOT,AX.JD,Y, XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,/XSTYLE, XTITLE=AX.TITLE
    
    P = PLOT(JD,D.AMEAN,THICK = 3,YTITLE = UNITS('PPD'),FONT_SIZE = 12,XTICKNAME = AX.TICKNAME)
    P = PLOT(JD,REPLICATE(1,N_ELEMENTS(JD)),/OVERPLOT,COLOR = 'MAGENTA',THICK = 5,TITLE =AMAP )
    
    ;CSV_WRITE,'JUNK.CSV',D(OK)
    PPY = ROUNDS(TOTAL(D.AMEAN,/NAN))
    ANN = PPY +UNITS('PPY',/NO_NAME)
    T = TEXT(0.60,0.75,/NORMAL,ANN,FONT_SIZE = 25,COLOR = 'DARK RED')
    PNGFILE = !S.DIR_TEMP + 'PP_OPAL' + '-' + AMAP + '.PNG'
    P.SAVE, PNGFILE,  RESOLUTION=RES,WIDTH = 800,HEIGHT = 800 ,BORDER = 10
    PFILE,PNGFILE,/W
    P.CLOSE
    CSV[NTH].MAP = AMAP
    CSV[NTH].PPY = PPY
  ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  CSVFILE = !S.DIR_TEMP + 'DO_LME_PPY_CSV.CSV'
  CSV_WRITE,CSVFILE,CSV & PF,CSVFILE
  
ENDIF;IF DO_LME_PPY_CSV GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||

;*********************************
IF DO_PP_OPAL_TEST GE 1 THEN BEGIN
;*********************************
,'DO_PP_OPAL_TEST'
PRINT,'THIS STEP TESTS (TANH(Ek/PROFILE_PAR)) VS (Ek/(Ek+PROFILE_PAR))'

DIR = GET_SMI()
DIR_IN = DIR.STATS
FILES = FILE_SEARCH(DIR_IN,'D_19980330*.SAVE')
OK = WHERE_STRING(FILES,'KD_490',COUNT)
IF COUNT GE 1 THEN FILES = REMOVE(FILES,OK)
& PL,FILES
IF N_ELEMENTS(FILES) NE 4 THEN MESSAGE,'ERROR: IN FILES'


CHL_FILE=FILES(WHERE_STRING(FILES,'CHLOR_A')) & P,CHL_FILE
PAR_FILE=FILES(WHERE_STRING(FILES,'PAR')) & P,PAR_FILE
SST_FILE=FILES(WHERE_STRING(FILES,'SST')) & P,SST_FILE
ADG_443_FILE=FILES(WHERE_STRING(FILES,'ADG_443')) & P,ADG_443_FILE

CHL_SAT = STATS_READ(CHL_FILE)    & PFILE,CHL_FILE,/R
PAR     = STATS_READ(PAR_FILE)    & PFILE,PAR_FILE,/R
SST     = STATS_READ(SST_FILE)    & PFILE,SST_FILE,/R
ADG_443 = STATS_READ(ADG_443_FILE)& PFILE,ADG_443_FILE,/R
INFILE = [CHL_FILE,PAR_FILE,SST_FILE,ADG_443_FILE,BATHY_FILE]
KX=ADG_443
; ####### MAKE ARRAY TO HOLD PPD FROM OPAL #####
PPD_OPAL = REPLICATE(MISSINGS(0.0),[SMI_PX,SMI_PY])


OK_OPAL = WHERE($
  LAND_MASK EQ 0 AND $
  CHL_SAT NE MISSINGS(CHL_SAT) AND $
  PAR NE MISSINGS(PAR) AND $
  SST NE MISSINGS(SST) AND $
  KX NE MISSINGS(KX) AND $
  BOTTOM_DEPTH NE MISSINGS(BOTTOM_DEPTH) , $
  COUNT_OPAL)
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR TEST = 0,1 DO BEGIN
  
IF TEST EQ 0 THEN BEGIN
  
PPD= PP_OPAL(INITIALIZE = 1, $
  ;   *** REQUIRED INPUT ***          (ONE VALUE OR ARRAY, SST_SAT AND PAR MUST MATCH SIZE OF CHL_SAT)
  CHL_SAT       = CHL_SAT(OK_OPAL),        $; REMOTELY-SENSED CHLOROPHLL CONCENTRATION (MG M-3)
  PAR           = PAR(OK_OPAL),            $; PAR (EINSTEIN M-2 D-1)
  SST           = SST(OK_OPAL),            $; SEA SURFACE TEMPERATURE (DEGREES C)
  KX            = KX(OK_OPAL),             $; ABSORPTION BY 'OTHER: I.E. CDOM ABSORPTION AT 443NM'
  BOTTOM_DEPTH  = BOTTOM_DEPTH(OK_OPAL)); BOTTOM DEPTH (M)
PPD_OPAL(OK_OPAL) = PPD
PP=PPD_OPAL
TXT = 'PP_OPAL'
PP_NORTHEAST = GET_LME_DATA(PP,7) & S=STATS(PP_NORTHEAST) & PRINT,TXT,S.N,S.MEAN
ENDIF ELSE BEGIN
  PPD= PP_MARRA(INITIALIZE = 1, $
  ;   *** REQUIRED INPUT ***          (ONE VALUE OR ARRAY, SST_SAT AND PAR MUST MATCH SIZE OF CHL_SAT)
  CHL_SAT       = CHL_SAT(OK_OPAL),        $; REMOTELY-SENSED CHLOROPHLL CONCENTRATION (MG M-3)
  PAR           = PAR(OK_OPAL),            $; PAR (EINSTEIN M-2 D-1)
  SST           = SST(OK_OPAL),            $; SEA SURFACE TEMPERATURE (DEGREES C)
  BOTTOM_DEPTH  = BOTTOM_DEPTH(OK_OPAL)); BOTTOM DEPTH (M)
PPD_OPAL(OK_OPAL) = PPD
PP=PPD_OPAL
TXT = 'PP_MARRA' 
PP_NORTHEAST = GET_LME_DATA(PP,7) & S=STATS(PP_NORTHEAST) & PRINT,TXT,S.N,S.MEAN
ENDELSE 
  ENDFOR;FOR TEST = 0,1 DO BEGIN

;FFFFFFFFFFFFFFFFFFFFFFFFFFFF

ENDIF;IF DO_PP_OPAL_TEST GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||

IF DO_TEST_VERSIONS GE 1 THEN BEGIN
;  PPD = PP_OPAL(INITIALIZE = 1,CHL_SAT = 1, SST = 25, PAR=55, KX = 0.02,BOTTOM_FLAG=BOTTOM_FLAG,K_PAR=_k_par) & P,PPD
;  PPD = PP_OPAL(INITIALIZE = 0,CHL_SAT = 1, SST = 25, PAR=55, KX = 0.02,BOTTOM_FLAG=BOTTOM_FLAG,K_PAR=_k_par) & P,PPD
  PPD = PP_OPAL(CHL_SAT = 1, SST = 25, PAR=55, KX = 0.02,BOTTOM_FLAG=BOTTOM_FLAG,K_PAR=_k_par) 
  P,PPD

ENDIF;IF DO_TEST_VERSIONS GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||



;***************************************
IF DO_PLOT_PPD_NORTHEAST GE 1 THEN BEGIN
;***************************************
  
DIR = GET_SMI()
FILE = FILE_SEARCH(DIR.LME_DATA,'*VGPM2A*.SAVE') & PL,FILES
DB = IDL_RESTORE(FILE) & PN,DB
OK = WHERE(DB.MAP EQ 'NORTHEAST_US_CONTINENTAL_SHELF',COUNT)
D = DB[OK] & PN,D

JD = PERIOD_2JD(D.PERIOD) 
DATES = JD_2DATE(JD)
AX = DATE_AXIS(JD,/ENDS)
Y = FLOAT(D.AMEAN)
OK = WHERE(Y EQ MAX(Y))&  POS = [JD[OK],Y[OK]]
P = PLOT(JD,Y,XTICKNAME = AX.TICKNAME,$
  COLOR = 'MAGENTA',THICK = 5,TITLE = 'NORTHEAST_US_CONTINENTAL_SHELF!C  PPD (VGPM2A) ',$
  BACKGROUND_COLOR = 'LIGHT GREY',NAME='MONTHLY MEANS',$
  YTITLE = UNITS('PPD'),FONT_SIZE = 21)
  
  LEG = LEGEND(TARGET=P, POSITION=POS,/DATA,$
     /AUTO_TEXT_COLOR,FONT_SIZE = 8,SHADOW=0,TRANSPARENCY = 100,$
     HORIZONTAL_ALIGNMENT = 0.0,VERTICAL_ALIGNMENT= 0.5,$
     SAMPLE_WIDTH= 0.05)
    

  P = PLOT(JD,REPLICATE(1,N_ELEMENTS(JD)),/OVERPLOT,COLOR = 'GREEN',THICK = 5,LINESTYLE = 1 )
  DPMS =FLOAT(DATE_DAYS_MONTH(DATES))
  PPY = ROUNDS(TOTAL(D.AMEAN*DPMS))
  ANN = PPY +'  ' +UNITS('PPY',/NO_NAME)
  T = TEXT(0.45,0.25,/NORMAL,ANN,FONT_SIZE = 25,COLOR = 'MIDNIGHT_BLUE')
  PNGFILE = 'DO_PLOT_PPD_NORTHEAST.PNG'
  P.SAVE,PNGFILE  & PF,PNGFILE   & P.CLOSE
  STOP
ENDIF;IF DO_PLOT_PPD_NORTHEAST GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||



END; #####################  END OF ROUTINE ################################
