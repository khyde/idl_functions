; $ID:	TOPO_TAGS.PRO,	2020-06-26-15,	USER-KJWH	$
; 
FUNCTION TOPO_TAGS, MAPP, LEVELS
; #########################################################################; 
;+
; THIS FUNCTION RETURNS A STRUCTURE ARRAY OF TAGNAMES, LEVELS AND WATER OR LAND LABELS FOR EACH OF THE INPUT LEVELS 
;
; CATEGORY: TOPO_ FAMILY;
;
; CALLING SEQUENCE: 
;
; INPUTS: MAPP ..... STANDARD MAP NAME
;         LEVELS.... ELEVATIONS [VALUES GE 0 ] OR DEPTHS [LT 0] [METERS, MAY BE MULTIPLE VALUES]
;
; OPTIONAL INPUTS:
;
; KEYWORDS:  NONE

; OUTPUTS: A STRUCTURE ARRAY WITH TAGNAMES,LEVEL & REALM FOR EACH OF THE LEVELS
;
;; EXAMPLES:
;         ST,TOPO_TAGS('NEC') ; NO LEVELS SO LEVELS WILL BE SET TO -1 WATER
;         SPREAD,TOPO_TAGS('NEC',[-2000,-200,0,200,2000])
;
; MODIFICATION HISTORY:
;     DEC 20, 2015  WRITTEN BY: J.E. O'REILLY
;     DEC 21, 2015 - JEOR: IF NONE(LEVELS) THEN LEVELS = -1
;     JAN 07, 2016 - KJWH: FIXED SOME TYPOS AND FORMATTING
;     JAN 23, 2016 - JEOR: IF NONE(LEVELS) THEN LEVELS = TOPO_LEVELS()
;     FEB 19, 2019 - KJWH: FORMATTING
;
;-
; #########################################################################

;****************************
  ROUTINE_NAME  = 'TOPO_TAGS'
;****************************

  IF NONE(MAPP) THEN MESSAGE,'ERROR: MUST PROVIDE MAPP'
  IF NONE(LEVELS) THEN LEVELS = TOPO_LEVELS()

;===> MAKE A STRUCTURE 
  S = REPLICATE(CREATE_STRUCT('TAG','','MAP',MAPP,'REALM','','LEVEL',0),NOF(LEVELS))
  S.LEVEL = LEVELS
  OK = WHERE(LEVELS GE 0,COUNT,NCOMPLEMENT = NCOMPLEMENT,COMPLEMENT = COMPLEMENT)
  IF COUNT GE 1 THEN S[OK].REALM = 'LAND'
  IF NCOMPLEMENT GE 1 THEN S(COMPLEMENT).REALM = 'WATER'
  S.TAG = S.MAP+'_'+ S.REALM + '_' +  ROUNDS(ABS(S.LEVEL))
  RETURN,S

END; #####################  END OF ROUTINE ################################
