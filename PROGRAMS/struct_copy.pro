; $ID:	STRUCT_COPY.PRO,	2020-07-16-22,	USER-KJWH	$
; ;#######################################################################################
FUNCTION STRUCT_COPY, STRUCT,TAGS,TAGNAMES=TAGNAMES,NAMES=NAMES,REMOVE=REMOVE
;+
;	This function copies (extracts) tags from one structure to a new structure.
;
; SYNTAX:
;		RESULT = STRUCT_COPY(STRUCT, [NAMES=NAMES], [TAGS], [REMOVE=REMOVE])
;
; OUTPUT:
;		STRUCTURE

; INPUTS:
; 	STRUCT... The input structure
;   TAGS..... The names of the tags or the tag numbers to be copied 
;
; KEYWORDS:
;   TAGNAMES. Names of the tags
;   NAMES.... Can be any part or all of the desired tagnames (Helps when have various tagnames with similar prefix or suffix)
;		REMOVE... Removes the specified tagnames or tags from the copied structure
;		
; EXAMPLES:
; 	USING TAGNAMES:
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),TAGNAMES ='AA'); EXTRACT TAG AA
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),TAGNAMES =['CC','BB','AA'] );
;   USING NAMES:
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',2B,'AAA',3B,'AAAA',4B,'B',0UL),NAMES ='A')        ; EXTRACT ALL TAGS STARTING WITH  A
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'AAA',1L,'AAAA',0D,'B',0B,'B1',1B,'B2',2B),NAMES='B')        ; EXTRACT ALL TAGS STARTING WITH  B
;
;	  USING TAGS AS TAGNAMES:
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),'AA')   			; EXTRACT TAG AA
;		ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),['AA','CC'] ) 		; EXTRACT TAGS AA,CC
;   REARRANGE TAG ORDER
;		ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),['CC','BB','AA'] )
;		ERROR BECAUSE NO TAGNAME 'AAA' EXISTS IN STRUCT	
;		ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),['AAA'] ) 			
;   EXTRACT TAG AA [TAGS AAA & ZZ ARE NOT PRESENT]
;		ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),['AAA','AA','ZZ'])
;
;   USING TAGS (AS NUMBERS):
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),2)    ; EXTRACT TAG CC
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),[1,2]); EXTRACT TAGS BB, CC
;
;   USING REMOVE:
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),[1,2],/REMOVE) ; REMOVE TAGS BB, CC
;		ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),['BB'],/REMOVE)  	; REMOVE TAG BB
;		ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),['BB','CC'],/REMOVE); REMOVE TAG BB AND CC
;
;   ERROR WHEN TRYING TO REMOVING ALL:
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),[0,1,2],/REMOVE)     ; REMOVE TAGS BB, CC
;   ERROR WHEN TRYING TO COPY NON-EXISTENT TAG
;   ST,STRUCT_COPY(CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D),'AB') 
;
; NOTES:
;	  This routine does not alter the original structure
;   This routine may be used to rearrange the order of tags in a structure
; 	Tags may be upper, lower or mixed case.
;
; VERSION:
;		JAN 14,2001
;		
;	COPYRIGHT:
; Copyright (C) 1999, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; AUTHOR:
;   This program was written on March 10, 1999 by John E. O'Reilly, Northeast Fisheries Science Center | NOAA Fisheries | U.S. Department of Commerce, 28 Tarzwell Dr, Narragansett, RI 02882
;
; MODIFICATION HISTORY:			
;		MAR 10, 1999 WRITTEN BY: J.E. O'REILLY, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;		JUN 30, 2013 - JEOR: Added OK = WHERE(TAG_SUBS EQ TARGET,COUNT)             ; CHANGED BY K. HYDE 7-30-08 REINSTATED JOR
;		                     FORMATTING
;		JAN 15, 2014 - JEOR: FIXED LOGIC FOR COPYING TAGNAMES
;		JAN 21, 2014 - JEOR: RETURN INFORMATIVE ERROR STRING INSTEAD OF -1
;		                     ADDED MORE EXAMPLES
;		MAR 06, 2015 - JEOR: REMOVED:  PRINTING OF ERROR E.G. PRINT,'ERROR: MUST PROVIDE NAMES, TAGNAMES, OR TAGS'
;		SEP 02, 2015 - JEOR: IF TAGNAMES NOT PROVIDED THEN 
;		                     PROGRAM NOW DETERMINES IF TAGS ARE THE TAG NUMBERS OR THE TAG_NAMES
;		                     UPDATED WITH NEW FUNCTIONS,STREAMLINED
;		                     REMOVED KEY ERROR, INSTEAD RETURN THE ERROR AS AN INFORMATIVE STRING 
;		                     CHANGED DATA TO DATA_
;		JUL 16, 2020 - KJWH: Added COMPILE_OPT IDL2
;		                     Changed subscript () to []
;		                     Updated formatting                
;-
;################################################################################################
  ROUTINE_NAME='STRUCT_COPY'
  COMPILE_OPT IDL2
  
; =====> ENSURE INPUT INFORMATION IS CORRECT  
  IF IDLTYPE(STRUCT) NE 'STRUCT' THEN RETURN, 'ERROR: MUST PROVIDE STRUCT'
  ;IF NONE(NAMES)                 THEN  RETURN,'TAGS OR NAMES MUST BE PROVIDED'
  IF KEY(NAMES)  AND IDLTYPE(NAMES) NE 'STRING' THEN RETURN,'ERROR: NAMES MUST BE STRING TYPE'
  IF NONE(TAGNAMES) AND IDLTYPE(TAGS) EQ 'STRING' THEN TAGNAMES = TAGS
  NTAGS        = N_TAGS(STRUCT)
  NTH_TAG      = NTAGS -1L
  STRUCT_NAMES = TAG_NAMES(STRUCT)
  TAG_SUBS     = LINDGEN(NTAGS)
  TAG_TARGETS  = []

; =====>IF NAMES ARE PROVIDED THEN FIND TAG NUMBERS FROM NAMES, CONSERVING THE INPUT ORDER
  IF KEY(NAMES) THEN BEGIN
    FOR NTH=0L, N_ELEMENTS(NAMES)-1L DO BEGIN
      TARGET = STRUPCASE(NAMES[NTH])
      OK = WHERE(STRPOS(STRUCT_NAMES,TARGET) GE 0,COUNT)
      IF COUNT GE 1 THEN TAG_TARGETS=[TAG_TARGETS,(OK)]
    ENDFOR;FOR NTH=0L, N_ELEMENTS(NAMES)-1L DO BEGIN
  ENDIF;IF KEY(NAMES) THEN BEGIN

; =====>IF TAGNAMES PROVIDED THEN FIND TAG NUMBERS FROM TAGNAMES, CONSERVING THE INPUT ORDER
  IF NOF(TAGNAMES) GE 1 THEN BEGIN
    FOR NTH=0L, N_ELEMENTS(TAGNAMES)-1L DO BEGIN
      TARGET = STRUPCASE(TAGNAMES[NTH])
      OK = WHERE(STRUCT_NAMES EQ TARGET,COUNT)
      IF COUNT EQ 1 THEN TAG_TARGETS=[TAG_TARGETS,(OK)]
    ENDFOR;FOR NTH=0L, N_ELEMENTS(TAGNAMES)-1L DO BEGIN
  ENDIF

; =====> IF TAGS PROVIDED, EXTRACT JUST THE VALID TAGS NUMBERS FOR STRUCT, CONSERVING THE INPUT ORDER
  IF NONE(NAMES) AND IDLTYPE(TAGS) NE 'STRING'  THEN BEGIN
    FOR NTH=0L, N_ELEMENTS(TAGS)-1L DO BEGIN
      TARGET = TAGS[NTH]       
      OK = WHERE(TAG_SUBS EQ TARGET,COUNT)							
      IF COUNT EQ 1 THEN TAG_TARGETS=[TAG_TARGETS,(OK)]
    ENDFOR;FOR NTH=0L, N_ELEMENTS(TAGS)-1L DO BEGIN
  ENDIF;IF IDLTYPE(TAGS) NE 'STRING'  THEN BEGIN

; =====> IF NO TARGETS WERE FOUND RETURN ERROR
  IF N_ELEMENTS(TAG_TARGETS) EQ 0 THEN RETURN,'ERROR: THE TAGS PROVIDED ARE NOT FOUND IN THE STRUCTURE'

;===> IF KEYWORD_SET(REMOVE)
  IF KEYWORD_SET(REMOVE) THEN BEGIN
    TEMP = TAG_SUBS
    FOR NTH = 0L,N_ELEMENTS(TAG_TARGETS)-1L DO BEGIN
      TARGET = TAG_TARGETS[NTH]
      OK = WHERE(TEMP EQ TARGET,COUNT)
      IF COUNT GE 1 THEN TEMP[OK] = -1
    ENDFOR
    OK = WHERE(TEMP NE -1,COUNT)
    IF COUNT GE 1 THEN BEGIN
      TAG_TARGETS = TEMP[OK] 
    ENDIF ELSE BEGIN
      RETURN,'ERROR: NO DATA LEFT IN STRUCTURE'
    ENDELSE;IF COUNT GE 1 THEN BEGIN
  ENDIF;IF KEYWORD_SET(REMOVE) THEN BEGIN

;	===> ELIMINATE REDUNDANT TAG_TARGETS
  SETS=WHERE_SETS(TAG_TARGETS)
  S=SORT(SETS.FIRST)
  TAG_TARGETS = SETS[S].VALUE

; =====> MAKE A NEW STRUCTURE TO HOLD EACH OF THE REQUESTED VALID TAG NUMBERS
  FOR NTH = 0L, N_ELEMENTS(TAG_TARGETS)-1L DO BEGIN
    ATAG = TAG_TARGETS[NTH]
    ANAM = STRUCT_NAMES[ATAG]
    AVAL = STRUCT[0].(ATAG)
    IF NTH EQ 0 THEN BEGIN
      TEMPLATE = CREATE_STRUCT(ANAM,AVAL)
    ENDIF ELSE BEGIN
      TEMPLATE = CREATE_STRUCT(TEMPLATE,ANAM,AVAL)
    ENDELSE
  ENDFOR

;===> REPLICATE THE TEMPLATE TO HOLD ALL DATA FROM THE INPUT STRUCT
  DATA_ = REPLICATE(TEMPLATE,N_ELEMENTS(STRUCT))

;===> FILL THE DATA_ STRUCTURE WITH THE APPROPRIATE VALUES FROM THE INPUT STRUCT
  FOR NTH = 0L, N_ELEMENTS(TAG_TARGETS)-1L DO BEGIN
    ATAG = TAG_TARGETS[NTH]
    ANAM = STRUCT_NAMES[ATAG]
    AVAL = STRUCT[0].(ATAG)
    DATA_[*].(NTH) = STRUCT[*].(ATAG)
  ENDFOR;FOR NTH = 0L, N_ELEMENTS(TAG_TARGETS)-1L DO BEGIN

  RETURN, DATA_
END; #####################  END OF ROUTINE ################################
