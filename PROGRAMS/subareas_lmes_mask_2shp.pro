; $ID:	SUBAREAS_LMES_MASK_2SHP.PRO,	2020-07-01-12,	USER-KJWH	$
	PRO SUBAREAS_LMES_MASK_2SHP
;##############################################################################
;+
; NAME:
;		SUBAREAS_LMES_MASK_2SHP
;
; PURPOSE:	THIS PROCEDURE MAKES A SHAPE FILE FROM EACH COLOR IN A IN A SUBAREA MASK-IMAGE
;
; CATEGORY:
;		SUBAREAS FAMILY
;
; INPUTS: SEE KEYWORDS;

; KEYWORDS:

;    	
; OUTPUTS:
;		 A SHP FILE [SHAPE FILE] FOR EACH LME SUBAREA IN THE MASKFILE
;


; MODIFICATION HISTORY:
;			WRITTEN JUN 16,2014, BY J.O'REILLY
;     NOV 22, 2017 - KJWH: Changed PLT_SHP to READ_SHPFILE
;			
;##############################################################################
;-
;	**********************************
ROUTINE_NAME  = 'SUBAREAS_LMES_MASK_2SHP'
;***********************************
;===> CONSTANTS
  SET_PLOT,'WIN' 
  FONT_HELVETICA
  
MASKFILE = !S.MASTER + 'LME-67-SMI-MASTER.PNG'
IF FILE_TEST(MASKFILE) EQ 0 THEN MESSAGE,'ERROR: CAN NOT FIND  ' + MASKFILE
;===> THE CSVFILE WAS MADE USUNG EXCEL FROM THE DBF FILE PAIRED WITH THE SHP FILE
CSVFILE = !S.IDL_SHAPEFILES + 'LME\LME66.CSV'
IF FILE_TEST(CSVFILE) EQ 0 THEN MESSAGE,'ERROR: CAN NOT FIND  ' + CSVFILE
;READ THE MASK AND CSV FILES
MASK = READ_PNG(MASKFILE,R,G,B)
CSV = CSV_READ(CSVFILE)
;===> CHANGE LME_NAME TO SUBAREA_NAME,MAKE UPPERCASE AND UNDERSCORE BLANKS
CSV = STRUCT_RENAME(CSV,'LME_NAME','SUBAREA_NAME')
CSV.SUBAREA_NAME = STRUPCASE(CSV.SUBAREA_NAME)
CSV.SUBAREA_NAME = REPLACE(CSV.SUBAREA_NAME,' - ','_')
CSV.SUBAREA_NAME = REPLACE(CSV.SUBAREA_NAME,' ','_')
CSV.SUBAREA_NAME = REPLACE(CSV.SUBAREA_NAME,'.','')

FN = FILE_PARSE(CSVFILE) & SOURCE = FN.NAME

MIN_PTS = 10
BACKGROUND=255B

AMAP = VALID_MAPS(MASKFILE)
IF NONE(REGION) THEN REGION = SUBAREAS_REGION(MASKFILE)

H=HISTOGRAM(MASK,MIN=0,MAX=255)
COLORS=WHERE(H GE 1)
OK = WHERE(COLORS NE 0 AND COLORS NE BACKGROUND,COUNT)
IF COUNT GE 1 THEN COLORS=COLORS[OK]
COLORS = COLORS
N_COLORS =N_ELEMENTS(COLORS) 

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _COLOR=0L,N_COLORS-1L DO BEGIN
	ICOLOR = COLORS(_COLOR)
  COPY=MASK
  COPY(*,*)=BACKGROUND
  OK = WHERE(MASK EQ ICOLOR,COUNT_COLOR)
  
  IF COUNT_COLOR GE 1 THEN BEGIN
    ;===> GET SUBAREA NAME FROM CSV
    OK_CSV = WHERE(CSV.LME_NUMBER EQ ICOLOR, COUNT_CSV)
    IF COUNT_CSV NE 1 THEN BEGIN
      PRINT,' CAN NOT FIND LME_NUMBER ' + STRTRIM (ICOLOR) + '   IN CSVFILE'  + '  SO SKIPPING >>>>>>'
      WAIT,4
      CONTINUE ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    ENDIF;IF COUNT_CSV NE 1 THEN BEGIN
      
    SUBAREA = CSV(OK_CSV).SUBAREA_NAME
    SUBAREA = STRUPCASE(REPLACE(SUBAREA,' ', '_'))
    ;;REGION = AMAP 
    METHOD = ROUTINE_NAME
    SHP_FILE= !S.SUBAREAS + 'SHP\' + REGION + '-'+SUBAREA + '.SHP'
    IF FILE_MAKE(IN=[MASKFILE,CSVFILE],OUT=SHP_FILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
    
;################################################################################
      ; CREATE THE NEW SHAPEFILE AND DEFINE THE ENTITY_TYPE AS POLYGON
;################################################################################
      SHP = OBJ_NEW('IDLFFSHAPE',SHP_FILE, /UPDATE, ENTITY_TYPE=5)
;===> SET THE ATTRIBUTE DEFINITIONS FOR THE NEW SHAPEFILE
      SHP->ADDATTRIBUTE, 'REGION', 7, STRLEN(REGION), PRECISION=0
      SHP->ADDATTRIBUTE, 'SUBAREA', 7, STRLEN(SUBAREA), PRECISION=0
      SHP->ADDATTRIBUTE, 'CODE', 7, STRLEN(STRTRIM(ICOLOR,2)), PRECISION=0
      SHP->ADDATTRIBUTE, 'METHOD', 7, STRLEN(METHOD), PRECISION=0
      SHP->ADDATTRIBUTE, 'SOURCE', 7, STRLEN(SOURCE), PRECISION=0
      SHP->ADDATTRIBUTE, 'DATE', 7, STRLEN(DATE_NOW()), PRECISION=0
;===> CREATE STRUCTURE FOR NEW ATTRIBUTES
      ATTRNEW = SHP->GETATTRIBUTES(/ATTRIBUTE_STRUCTURE)
      ; DEFINE THE VALUES FOR THE NEW ATTRIBUTES
      ATTRNEW.ATTRIBUTE_0 = REGION
      ATTRNEW.ATTRIBUTE_1 = SUBAREA
      ATTRNEW.ATTRIBUTE_2 = STRTRIM(ICOLOR,2)
      ATTRNEW.ATTRIBUTE_3 = METHOD
      ATTRNEW.ATTRIBUTE_4 = SOURCE
      ATTRNEW.ATTRIBUTE_5 = DATE_NOW()
      ;==> ADD THE ATTRIBUTES TO NEW SHAPEFILE.
      SHP->SETATTRIBUTES, 0, ATTRNEW
      COPY[OK] = 1B
      MAPS_SET,AMAP
      TV,COPY
      TARGET = 26  
;############################################################################
;     CONTOUR TO GET THE PATH_INFO FOR THE OUTLINES OF THE SUBAREA BLOBS  
;############################################################################
      CONTOUR,COPY,XSTYLE = 5,YSTYLE = 5,XMARGIN=[0,0],YMARGIN=[0,0],$
      POSITION=[0,0,1,1],C_COLOR = TARGET,CLOSED=0,$
      /PATH_DATA_COORDS,/NOERASE, PATH_INFO=PATH_INFO,$
      PATH_XY=PATH_XY,/FOLLOW
     ; IMG =TVRD() ;& SL,IMG
      
      MAPS_SET,AMAP
      
      IF N_ELEMENTS(PATH_INFO) GE 1 THEN BEGIN
        ;===> THIN PATH_INFO TO WHERE PATH_INFO.N GE MIN_PTS
        OK =WHERE(PATH_INFO.N GE MIN_PTS AND PATH_INFO.LEVEL EQ 1,COUNT_PATH) 
        IF COUNT_PATH GE 1 THEN PATH_INFO = PATH_INFO[OK] ELSE MESSAGE,'ERROR: PATH_INFO NOT FOUND'
        STRUCT=REPLICATE({TYPE:0B, HIGH:0B, LEVEL:0, NUM:0L, VALUE:0.0,X:'',Y:''},N_ELEMENTS(PATH_INFO))
     
        ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
        FOR IN = 0,N_ELEMENTS(PATH_INFO)-1 DO BEGIN
          S = INDGEN(PATH_INFO(IN).N)
          XX = REFORM(PATH_XY(0,PATH_INFO(IN).OFFSET + S ))
          YY = REFORM(PATH_XY(1,PATH_INFO(IN).OFFSET + S ))
          XYZ = CONVERT_COORD(XX,YY,/DEVICE,/TO_DATA)
          STRUCT.TYPE=PATH_INFO(IN).TYPE
          STRUCT.HIGH=PATH_INFO(IN).HIGH_LOW
          STRUCT.LEVEL=PATH_INFO(IN).LEVEL
          STRUCT.NUM=PATH_INFO(IN).N
          STRUCT.VALUE=PATH_INFO(IN).VALUE
          STRUCT.x= ARR_2STR(REFORM(XYZ(0,*)),DELIM=';')
          STRUCT.y= ARR_2STR(REFORM(XYZ(1,*)),DELIM=';')
          LON = DOUBLE(STR_SEP(STRUCT(IN).X,';'))
          LAT = DOUBLE(STR_SEP(STRUCT(IN).Y,';'))
          IF KEY(VERBOSE) THEN PLT_XY,LON,LAT,/LIN_ADD
          
          LONLAT = DBLARR(2,N_ELEMENTS(LON)) & LONLAT(0,*) = LON & LONLAT(1,*) = LAT
          ;===> CREATE STRUCTURE FOR NEW ENTITY
          ENTNEW = {IDL_SHAPE_ENTITY}
          ; DEFINE THE VALUES FOR THE NEW ENTITIES
          ENTNEW.SHAPE_TYPE = 5
          ENTNEW.BOUNDS[0] = MIN(LON)
          ENTNEW.BOUNDS[1] = MIN(LAT)
          ENTNEW.BOUNDS[2] = 0.D
          ENTNEW.BOUNDS[3] = 0.D
          ENTNEW.BOUNDS[4] = MAX(LON)
          ENTNEW.BOUNDS[5] = MAX(LAT)
          ENTNEW.BOUNDS[6] = 0.D
          ENTNEW.BOUNDS[7] = 0.D
          ENTNEW.N_VERTICES = N_ELEMENTS(LON)
          ENTNEW.VERTICES = PTR_NEW(LONLAT , /ALLOCATE_HEAP, /NO_COPY )

          ; ADD THE NEW ENTITY TO NEW SHAPEFILE
          SHP->PUTENTITY, ENTNEW

        ENDFOR;FOR _IN = 0,N_ELEMENTS PATH_INFO)-1 DO BEGIN
        ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 
        ZWIN
      ENDIF;IF N_ELEMENTS(PATH_INFO) GE 1 THEN BEGIN 
            
    ENDIF;IF COUNT_PATH GE 1 THEN BEGIN
    
    ;===> CLOSE/DESTROY THE SHAPEFILE
    OBJ_DESTROY, SHP

    PFILE,SHP_FILE
    ;===> MAKE A MAP FROM THE SHP FILE
    MAPS_SET,AMAP
    MAP_CONTINENTS,/HIRES,/COASTS, COLOR = 0
    
    READ_SHPFILE, SHP_FILE,COLOR=ICOLOR,FILL=1,THICK=1,VERBOSE=VERBOSE,$
      GET_RANGE=GET_RANGE,TAGNAME='SUBAREA',VALUE=SUBAREA,$
      RANGE_LON = RANGE_LON, RANGE_LAT = RANGE_LAT,NORMAL=NORMAL,$
      DO_ALL = 1, AUTO=AUTO,LONS=LONS,LATS=LATS,PSYM = 1,SYMSIZE = 11,_EXTRA=_EXTRA
    ;===> ADD SUBAREA NAME AND CODE
    TXT = SUBAREA + '!CLME_NUMBER: ' + STRTRIM(ICOLOR,2)
    XYOUTS,0.05,0.90,TXT,/NORMAL,CHARSIZE = 4,COLOR =  ICOLOR
    IMG = TVRD()
    ZWIN
    PAL_SUBAREAS,R,G,B
    PNGFILE = !S.IDL_TEMP + REGION + '-' + SUBAREA + '.PNG'
    WRITE_PNG,PNGFILE,IMG,R,G,B    & PF,PNGFILE
    ;STOP
    
ENDFOR;FOR _COLOR=0L,N_COLORS-1L DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF




END; #####################  END OF ROUTINE ################################
