; $ID:	MAKE_LME_MOVIES_MAIN.PRO,	2020-07-08-15,	USER-KJWH	$
;+
; :AUTHOR: J.O'REILLY
;-
;###########################################################################################
	PRO MAKE_LME_MOVIES_MAIN, ERROR = ERROR

;+
; NAME:
;		MAKE_LME_MOVIES_MAIN
;
; PURPOSE:  A MAIN PROCEDURE USED TO MAKE MOVIES/ANIMATIONS FROM A TIME SERIES OF 
;           IDL SAVE FILES
; ;         PRESENTLY CONFIGURED TO MAKE MOVIES FOR 62 OF THE 64 LMES
;           FROM SMI MEAN SAVES MADE WITH SMI_MAIN
;
; CATEGORY:
;		CATEGORY
;   MOVIES
;
; INPUTS:
; NONE

; KEYWORD PARAMETERS:
; NONE
; OUTPUTS:
;		This PROGRAM MAKES EITHER PNGS FROM SAVES OR AVI FROM PNGS, DEPENDING ON THE SWITCES SET 
;
; OPTIONAL OUTPUTS:
;		ERROR:     ANY ERROR MESSAGES ARE PLACED IN ERROR, IF NO ERRORS THEN ERROR = ''
;
; 
;
; MODIFICATION HISTORY:
; WRITTEN JUL 25,2011, J.O'REILLY
; MAR 27,2012,JOR, EDITING, ADDED  ADDED SMI & GEQ TO 62 LME MAPS
; MAR 28,2012,JOR,MATH = ''; NULL -TO AVOID CONFUSION IN NAMING OF THE ISERIES FROM THE INTERP ISERIES
; APR 7,2012,JOR TEMPLATE TO TEMPLATE_FILE
; APR 22,JOR,ADDED DO_ZIP_AVI, DO_CLEANUP -NOT WORKING YET
; APR 26,2012,JOR,COMPLETED DO_LMES_PRIMER
; JUN 7,2012,JOR AVIS MOVED TO E:\SMI\AVI-ZIP BY DO_MOVE_AVI_ZIP
; JUL 2,2012,JOR, 'EAST_CENTRAL_AUSTRALIAN' TO 'EAST_CENTRAL_AUSTRALIAN_SHELF'
; JUL 5,2012,JOR:  DB = READ_CSV('D:\IDL\DATA\LME_NAMES_MAP.CSV')
; JUL 10,2012,JOR: REMOVED AMAP FROM ISERIES_FILE,CSV_FILE,TEMPLATE_FILE THROUGHOUT.
; NOV 30,2012,JOR, ADDED STEPS TO ADD LME OUTLINE AND COUNTRIES TO AVI: 
;                   DO_UNZIP_AVIZIP
; DEC 7,2012,JOR ADDED STEP  AVI_EXTRACTOR TO STEP DO_AVIEX
; DEC 11,2012,JOR,: PERMANENTLY MODIFIED LME FILE BY ADDING SMI AND GEQ 
;               DB = READ_CSV('D:\IDL\DATA\LME_NAMES_MAP_64.CSV') & MAPS=DB.MAP  & TARGETS=MAPS ; ALL MAPS
; DEC 19,2012,JOR ***!!! NOW SWITCH DO_MAKE_MAP_PRO IS USING LME AREAS FROM SHAPEFILE LME_IMAGE_FILE ='D:\IDL\IMAGES\LME-AREAS-SMI.PNG'; NEW FROM LME_64_WGS.SHP
;                           CMD = CMD   + SP + 'OutFilenameNumberWidth='                 +ROUNDS(6)
; DEC 20,2012,JOR, REARRANGED SWITCHES TO BE IN SEQUENCE ORDER  
; DEC 21,2012,JOR, ADDED SWITCHES DO_MAKE_MAP_PRO_OLD AND DO_MAKE_MAP_PRO_NEW; GRACE = 60
; DEC 22,2012,JOR, DELETED SWITCH DO_LME_CSV_EDIT BECAUSE NAMES WERE PROOFED AND ARE NOW IN:
;                                'D:\IDL\DATA\LME_NAMES_MAP_OFFICIAL.CSV'
;                  NOW USING GET_LME_MAPS TO GET OFFICIAL NAMES
;                   DO_LMES_BASEMAP IS NOW USING LME_64_WGS.SHP TO DIRECTLY DRAW LME AREAS ON A ROBINSON MAP TO MAKE: LMES_BASEMAP_ROBINSON_PXY_512_702-TITLE
; DEC 23,2012,JOR ADDED   IF MAP EQ 'WEST_BERING_SEA' THEN BEGIN; [LONS WERE  TRIAL & ERROR]
;                                 MAP_GEQ_PART, LONMIN=-180, LONMAX=-100, LATMIN= -90,LATMAX=90
; DEC 27,2012,JOR FIXED DO_MAKE_MAP_PRO_NEW [+- GRACE OF 3 DEGREES]
;                 ADDED GRACE TO MAKE_MAP_PRO, MAP = MAP, NAME = NAME,CODE=CODE, PROJ = PROJ, P0LAT = POLAT, POLON = POLON, ROT = ROT,LIMIT = LIMIT, PX = PX, PY =PY,GRACE=GRACE
; DEC 29,2012,JOR   PRINT,'MAP: '+AMAP + '  NAME   ' + NAME
; JAN 2,2013,JOR FORMATTING
; JAN 3,2013,JOR, DO_MAKE_MAP_PRO_NEW NOW PX,PY ARE 512 IN THE OUTPUT MAP_. PROS
; JAN 10,2013,JOR ADDED PROCESSING SCHEME SO THAT OUTPUT IS ALWAYS CHECKED BEFORE PROCEEDING:
;                 NOW MAY SET ALL SWITCHES ON [OR 2 TO OVERWRITE OR 3 TO STOP 
; JAN 12,2013,JOR CHANGED FILE_MOVE TO FILE_COPY:FILE_COPY,AVI_ZIP_FILE, DIR_AVI_ZIP,OVERWRITE=OVERWRITE
; JAN 15,2013,JOR; NOW USING TS_ISERIES_2PNG_LME INDTEAD OF TS_ISERIES_2PNG [2X FASTER]
; JAN 17,2013,JOR, ADDED SWITCH DO_PROOF_MAP_LIMITS; PUT -180,180,-90,90 BOUNDS ON LIMITS IN STEP DO_MAKE_MAP_PRO_NEW
; JAN 22,2013,JOR LME_NAME WAS AN ARRAY INSTEAD OF A SCALAR [SO LME BOUNDARY WAS NOT WORKING ]
;                 SOLUTION:   LME_NAME =  ANAME ; [FROM MAPS LOOP]     

; JAN 25,2013,JOR:ADDED SWITCH IF DO_TEST_4I_ISERIES_DONE
;JAN 27,2013,JOR, FIXED SWITCH DO_PROOF_LME_OUTLINES
; JAN 28,2013,JOR,FIXED ALIGNMENT 'PROBLEMS' WITH SEVERAL LANDMASK AND LME OUTLINE 
;                 [REMADE LANDMASKS SO THEY ARE AFTER DATE OF MAKING MAP PROS- AFTER DEALING WITH -180,ETC.]
; JUN 16,2013,JOR, ADDED PACIFIC_WARM_POOL LANDMASK TO D:\IDL\IMAGES
                                         


;###########################################################################################

;-
;	*************************************
	ROUTINE_NAME = 'MAKE_LME_MOVIES_MAIN'
; *************************************
;  LANDMASK  DRIVE  reverse FILE_COPY LOOP AUTO EAST_BERING  GOTO  ISERIES_2PNG_LME IOMEGA DO_ LANDMASK   SKIPPING
; LNP PROBLEMS  FOLDER PRINT ISERIES_2PNG_LME CANARY  moved DO_ADD_LME_OUTLINES READ_CSV  AVIEX PLOT_SHAPE DELETE MAKE_AVI FOLDER  READ_CSV TEMPLATE_FILE  PRIMER SMI_MAIN  DATE_RANGE
;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
;CCCCCCCCCC    CONSTANTS   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CLOSE,/ALL
CLEAR
PRODUCTION_DATE = 20130101 
PAL_SW3, R,G,B
;DRIVE = GET_HDD(2) & IF DRIVE EQ 'CAN NOT FIND IOMEGA HDD' THEN STOP
DRIVE = 'L'
DO_REVERSE = 0
DIR_LME= 'D:\IDL\LME\'
DIR_IMAGES = 'D:\IDL\IMAGES\'
DIR_AVI_ZIP =DRIVE+':\SMI\AVI-ZIP\' &  FILE_MKDIR,DIR_AVI_ZIP
DIR_INVENTORY = DRIVE+':\LME\' &  FILE_MKDIR,DIR_INVENTORY
AVI_DIR_ZIP_E = 'E:\SMI\AVI-ZIP\';E-DRIVE
DIR_TEST = 'D:\TEST\'
; ===> SET WORKING DIRECTORY
CDPRO
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;OK


;###############################################################################################
;#####      62 'OFFICIAL' LME MAPS UNLESS TARGETS  NARROWS THE SELECTION     ###################  
;###############################################################################################
  DB =  GET_LME_MAPS()
  IF DO_REVERSE EQ 1 THEN BEGIN
    SUBS=INDGEN(N_ELEMENTS(DB)) 
    SUBS = REVERSE(SUBS) 
    DB = DB(SUBS) 
  ENDIF;IF DO_REVERSE EQ 1 THEN BEGIN
  
  MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME ; 62  MAPS
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||  
;############# AUTO ########### 
AUTO = 62
;AUTO = 0
;############# AUTO ########### 
;TARGETS = ['PRIMER']
;TARGETS = ['SMI']
;
;TARGETS ='CANARY_CURRENT'  
;TARGETS = ['GULF_OF_MEXICO']           
;TARGETS = ['NORTH_SEA']
;TARGETS = 'MEDITERRANEAN_SEA'          
;TARGETS ='GULF_OF_ALASKA'   
;TARGETS ='CALIFORNIA_CURRENT' 
;TARGETS = 'SOUTHEAST_US_CONTINENTAL_SHELF'
;TARGETS ='GULF_OF_CALIFORNIA'         
;TARGETS = 'NORTHEAST_US_CONTINENTAL_SHELF'       
;TARGETS ='SCOTIAN_SHELF'             
;TARGETS ='PATAGONIAN_SHELF'       
;TARGETS ='NEWFOUNDLAND_LABRADOR_SHELF'
;TARGETS ='BALTIC_SEA'       
;TARGETS ='CARIBBEAN_SEA'          
;TARGETS ='ARABIAN_SEA';       
;TARGETS ='HUMBOLDT_CURRENT'      

;PROBLEM MAPS-LIMITS:  EAST_BERING_SEA  INSULAR_PACIFIC_HAWAIIAN  WEST_BERING_SEA  CHUKCHI_SEA
  

;TARGETS ='NORWEGIAN_SEA'      

;TARGETS ='EAST_BERING_SEA'             
;TARGETS = 'CHUKCHI_SEA'                   
;TARGETS ='INSULAR_PACIFIC_HAWAIIAN'
;TARGETS ='SOUTH_BRAZIL_SHELF'        
;TARGETS ='PACIFIC_CENTRAL_AMERICAN_COASTAL'
;TARGETS ='EAST_BRAZIL_SHELF'        
;TARGETS ='NORTH_BRAZIL_SHELF'              
;TARGETS ='WEST_GREENLAND_SHELF'       
;TARGETS ='EAST_GREENLAND_SHELF'       
;TARGETS ='BARENTS_SEA'       
;TARGETS ='CELTIC_BISCAY_SHELF'       
;TARGETS ='IBERIAN_COASTAL'       
;TARGETS ='GUINEA_CURRENT'       
;TARGETS ='BENGUELA_CURRENT'       
;TARGETS ='AGULHAS_CURRENT';       
;TARGETS ='SOMALI_COASTAL_CURRENT';       
;TARGETS ='RED_SEA';       
;TARGETS ='BAY_OF_BENGAL'';       
;TARGETS ='GULF_OF_THAILAND';       
;TARGETS ='SOUTH_CHINA_SEA';       
;TARGETS ='SULU_CELEBES_SEA';       
;TARGETS ='INDONESIAN_SEA';       
;TARGETS ='NORTH_AUSTRALIAN_SHELF';       
;TARGETS ='NORTHEAST_AUSTRALIAN_SHELF';       
;TARGETS ='EAST_CENTRAL_AUSTRALIAN_SHELF';       
;TARGETS ='SOUTHEAST_AUSTRALIAN_SHELF';       
;TARGETS ='SOUTHWEST_AUSTRALIAN_SHELF';       
;TARGETS ='WEST_CENTRAL_AUSTRALIAN_SHELF';       
;TARGETS ='NORTHWEST_AUSTRALIAN_SHELF';       
;TARGETS ='NEW_ZEALAND_SHELF';       
;TARGETS ='EAST_CHINA_SEA'
;TARGETS ='YELLOW_SEA';       
;TARGETS ='KUROSHIO_CURRENT'
;TARGETS ='SEA_OF_JAPAN';       
;TARGETS ='OYASHIO_CURRENT';       
;TARGETS ='SEA_OF_OKHOTSK';       
;TARGETS ='WEST_BERING_SEA';       
;TARGETS ='BEAUFORT_SEA';       
;TARGETS ='EAST_SIBERIAN_SEA';       
;tARGETS ='LAPTEV_SEA';       
;TARGETS ='ICELAND_SHELF';       
;TARGETS ='FAROE_PLATEAU';       
;TARGETS ='KARA_SEA';       
;TARGETS ='BLACK_SEA';       
;TARGETS ='HUDSON_BAY';  
;________________________________________________________________________________________________
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

TIMER
;***********************************
IF TARGETS[0] EQ 'PRIMER' THEN BEGIN
;***********************************
DO_LMES_PRIMER            = 1
MOVIE = 1
GOTO,DO_LMES_PRIMER
ENDIF;IF TARGETS[0] EQ 'PRIMER' THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||


IF AUTO LT 1 THEN BEGIN
  OK = WHERE_IN(MAPS,TARGETS,COUNT)
  IF COUNT EQ 0 THEN BEGIN
    STOP
  ENDIF 
 ENDIF;IF AUTO LT 1 THEN BEGIN
IF (AUTO) GE 1 THEN BEGIN
  MAPS = MAPS(0:AUTO-1) 
  NAMES = NAMES(0:AUTO-1) 
 ENDIF; IF (AUTO) GE 1 THEN BEGIN
 
   
    SUBS = WHERE_IN(DB.MAP , TARGETS,COUNT_MAPS)
    IF COUNT_MAPS GE 1 THEN BEGIN
    MAPS = DB(SUBS).MAP
      NAMES= DB(SUBS).NAME
  
  
TXT ='MAPS =:'+MAPS+'  NAME =:'+NAMES
PLINES
PLIST,TXT,/NOHEAD

ENDIF;IF COUNT_MAPS GE 1 THEN BEGIN
; LAPTEV_SEA, BEAUFORT_SEA,CHUCKCHI_SEAOKHOTSK_SEA,OYASHIO_CURRENT,[UNIT 100 EOF -MAKING PSERIES BUT PSERIES AND INTERP AND I_ISERIES ARE CORRECT SIZE - AFTER CONTINUE]
;GULF_OF_THAILAND PSERIES TOO SMALL -DELETED PSERIES AND INTERP, KEPT ISERIES

PROBLEMS = ''
SUBS = WHERE_IN(MAPS , PROBLEMS,COUNT_PROBLEMS) 
IF COUNT_PROBLEMS GE 1 THEN BEGIN
  REPORT,'REMOVING MAPS: '+ PROBLEMS
  MAPS=REMOVE(MAPS,SUBS)
  NAMES=REMOVE(NAMES,SUBS)
ENDIF ELSE BEGIN


ENDELSE;IF COUNT_PROBLEMS GE 1 THEN BEGIN

PLINES
REPORT, 'DRIVE IS :    ' + DRIVE

STOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++      
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++      
;++++++++++++++++++++++++++     MAIN LOOP ON MAPS   ++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++      
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
FOR _MAP = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	
; ===> DEFINE THE MAP >>>>>>>>>>>>>
MAP = MAPS(_MAP) & AMAP = MAP	
OK = WHERE(MAPS EQ AMAP,COUNT_MAP) & IF COUNT_MAP EQ 1 THEN NAME =NAMES[OK] 
NAME = NAMES(_MAP) & ANAME = NAME  & LME_NAME = ANAME
REPORT,'PROCESSING MAP:   ' + MAP + '    NAME:  ' + NAME
POF,_MAP,MAPS,TXT = MAP
; ===> MAKE THE FOLDERS 
; $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
;IF N_ELEMENTS(MAPS) NE 62 THEN BEGIN
DRIVE = 'E'
;;DRIVE = GET_HDD()
;PATH= DRIVE+':\LME\'+AMAP+'\' & FOLDERS = ['ISERIES','PSERIES','INTERP','I_ISERIES','I_PNGS','AVI'] &  DIR=FILE_FOLDERS(PATH, FOLDERS= FOLDERS)
;ENDIF;IF N_ELEMENTS(MAPS) NE 62 THEN BEGIN
; $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	
;INTERP
	
;SSSSSSSSSSSSSSSS ===> SWITCHES  SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
;SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS


; >>>>>>>>>>>>>> SUPER SWITCHES >>>>>>>>>>>>>
 TEST                     = 0 ; DO ISERIES THROUGH AVI BUT USING ONLY FIRST 30 FILES
 ALL_MOVIE_STEPS_ON       = 0 ; TURN ON ALL SWITCHES NEEDED TO MAKE THE MOVIE
; |||||||||||||| SUPER SWITCHES |||||||||||||

; THE FOLLOWING SWITCHES ARE PRELIMINARY STEPS FOR THE  MASS PRODUCTION OF THE MOVIES
DO_MAKE_TOPO_LME_LANDMASK = 0
DO_COMBINE_LMES_TOPO5     = 0
DO_REMAP_GEQ_2ROBINSON    = 0
DO_SMI_MAIN               = 0
DO_CHECK_SMI_MEANS        = 0
DO_LMES_BASEMAP           = 0
DO_MAKE_MAP_PRO_OLD       = -1 ;[OLD GEQ IMAGE USED FOR MOVIES BEFORE AUG,2012
DO_MAKE_MAP_PRO_NEW       = 0   ; NEW;  SMI FROM SHAPEFILE DEC 25,2012
DO_PROOF_MAP_LIMITS       = 0
DO_LME_MAP_RESOLUTION     = 0
DO_PROOF_LME_NAMES        = 0
DO_PROOF_LME_OUTLINES     = 0
DO_PROOF_MAP_PROS         = 0   
DO_VALID_MAPS             = 0
DO_MAPS_SIZE               = 0
DO_MAKE_LME_LANDMASKS     = 1
DO_PNG_2AVI               = 0
DO_MAKE_AVI_MAP_SLIDE     = 0
DO_LMES_PRIMER            = 0
DO_INVENTORY              = 0

;SWITCHES TO  EDIT THE AVI FILES BY ADDING LME OUTLINES AND COUNTRY BOARDERS  
  DO_UNZIP_AVIZIP                 = 0
  DO_AVIEX                        = 0
  DO_ADD_LME_OUTLINES             = 0
  DO_REVISED_PNG_2AVI             = 0
  DO_PNG_2AVI                     = 0 
  DO_ZIP_AVI                      = 0 ; USUALLY 1
  DO_COPY_AVI_ZIP                 = 0 ; USUALLY 1



DO_STRUCT_SD_REMAP = 0 ; OPTIONAL, USUALLY 0
DO_SAVES_2PNGS   = 0 ; OPTIONAL TO CHECK SAVES IF MADE USING DO_STRUCT_SD_REMAP (L3B TO LME AMAP)
 ;STOP
IF ALL_MOVIE_STEPS_ON GE 1 THEN BEGIN
;#################################################################
; ##########   ALL SWITCHES ON  FOR MAKING THE MOVIE  ############
;#################################################################
  DO_TEST_4I_ISERIES_DONE         = 0 ; USUALLY 0  SKIP ALL FOLLOWING SWITCHES IF I_ISERIES ALREADY EXISTS 
  DO_TEST_4AVI_DONE               = 0 ; USUALLY 1 SKIP ALL SWITCHES IF THE AVI ALREADY EXISTS 
  DO_SMI_STATS_SAVE_2ISERIES      = 0 ; USUALLY 1 SLOW TAKES 3 HOURS
  DO_TS_ISERIES_2PNG              = 0 ; USUALLY 0,(OPTIONAL TO TEST THE ISERIES FILE)
    
  DO_TS_ISERIES_REMAP             = 1 ; SHORTCUT SHORTCUT
  DO_TS_ISERIES_2PSERIES          = 1 ; USUALLY 1
  DO_TS_PSERIES_INTERP            = 1 ; USUALLY 1
  DO_INTERP_PSERIES_2ISERIES      = 1 ; USUALLY 1
  DO_INTERP_PSERIES_ISERIES_2PNG  = 1 ; USUALLY 1  ADDS LME OUTLINES AND BORDERS AS WELL
  DO_ADD_LME_OUTLINES             = -1 ; USUALLY 0  ADDS LME OUTLINES
  DO_PNG_2AVI                     = 1 ; USUALLY 1
  MOVIE                           = 1 ; USUALLY 1, 0 = DO NOT MAKE THE AVI MOVIE BUT MAKE THE CMD AND TXT AND MAP FILES
  DO_ZIP_AVI                      = 1 ; USUALLY 1
  DO_COPY_AVI_ZIP                 = 1
ENDIF ELSE BEGIN
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!!!!!     SET THESE SWITCHES AS NEEDED     !!!!!
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  DO_SMI_STATS_SAVE_2ISERIES      = 0 ; USUALLY 1
    
  DO_TS_ISERIES_REMAP             = 0 ; SHORTCUT SHORTCUT
  DO_TS_ISERIES_2PNG              = 0 ; USUALLY 0,(OPTIONAL TO TEST THE ISERIES FILE)
  DO_TS_ISERIES_2PSERIES          = 0 ; USUALLY 1
  DO_TS_PSERIES_INTERP            = 0 ; USUALLY 1
  DO_INTERP_PSERIES_2ISERIES      = 0 ; USUALLY 1
  DO_INTERP_PSERIES_ISERIES_2PNG  = 0 ; USUALLY 1-ADDS LME OUTLINES AND BORDERS AS WELL
  DO_ADD_LME_OUTLINES             = 0 ; USUALLY 0;DO_INTERP_PSERIES_ISERIES_2PNG ADDS LME OUTLINES
  DO_TEST_4I_ISERIES_DONE         = 0 ; USUALLY 1  SKIP ALL FOLLOWEING SWITCHES IF I_ISERIES ALREADY EXISTS 
  DO_TEST_4AVI_DONE               = 0 ; USUALLY 1- SKIP ALL SWITCHES IF THE AVI ALREADY EXISTS 
  DO_PNG_2AVI                     = 0 ; USUALLY 1
  MOVIE                           = 0 ; USUALLY 1, 0 = DO NOT MAKE THE AVI MOVIE BUT MAKE THE CMD AND TXT AND MAP FILES
  DO_ZIP_AVI                      = 0 ; USUALLY 1
  DO_COPY_AVI_ZIP                 = 0
ENDELSE;IF ALL_MOVIE_STEPS_ON GE 1 THEN BEGIN


;##### GOTOS  ####
IF DO_LMES_PRIMER GE 1 THEN GOTO,DO_LMES_PRIMER

IF DO_MAKE_LME_LANDMASKS GE 1 THEN GOTO,DO_MAKE_LME_LANDMASKS
IF DO_PROOF_MAP_LIMITS GE 1 THEN GOTO,DO_PROOF_MAP_LIMITS
IF DO_PROOF_LME_NAMES GE 1 THEN GOTO,DO_PROOF_LME_NAMES
IF DO_PROOF_LME_OUTLINES GE 1 THEN GOTO,DO_PROOF_LME_OUTLINES
IF DO_INVENTORY GE 1 THEN GOTO,DO_INVENTORY
IF DO_LME_MAP_RESOLUTION GE 1 THEN GOTO,DO_LME_MAP_RESOLUTION
;##### GOTOS  ####

;SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS  SWITCHES  SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

;***********************************
IF DO_TEST_4I_ISERIES_DONE EQ 1 THEN BEGIN
;***********************************
  OVERWRITE = DO_TEST_4I_ISERIES_DONE GE 2 & IF DO_TEST_4I_ISERIES_DONE EQ 3 THEN STOP 
  PLINES
  ,'PROCESSING  FOR:   '+MAP
  ;STOP
  PLINES,2
;  TS_IMAGES-SEAWIFS_AQUA-ORBV2_EOSAT-2010-NORWEGIAN_SEA-CHLOR_A-ISERIES_5423-INTERP-BLANKED.INT
    I_ISERIES_FILE= FILE_SEARCH(DIR.I_ISERIES +'TS_IMAGES*' + MAP +'*INTERP-BLANKED' +'.INT' )
  IF FILE_TEST(I_ISERIES_FILE) EQ 1 THEN BEGIN
    PLINES,2
    REPORT,'I_ISERIES_FILE IS ALREADY DONE SO SKIPPING   ' + MAP  
    PLINES,2
    WAIT,2
    GOTO,NEXT_MAP
  ENDIF;IF FILE_TEST(I_ISERIES_FILE) EQ 1 THEN BEGIN
ENDIF;IF DO_TEST_4I_ISERIES_DONE EQ 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||


;***********************************
IF DO_TEST_4AVI_DONE EQ 1 THEN BEGIN
;***********************************
  OVERWRITE = DO_TEST_4AVI_DONE GE 2 & IF DO_TEST_4AVI_DONE EQ 3 THEN STOP 
  PLINES
  ,'PROCESSING  FOR:   '+MAP
  PLINES,2
    ZIP_FILE= DIR_AVI_ZIP + MAP +'.ZIP' 
    FA=FILE_ALL(ZIP_FILE)
    DATE=LONG(STRMID(MTIME_2DATE(FA.MTIME),0,8))
  IF FILE_TEST(ZIP_FILE) EQ 1 AND DATE GE PRODUCTION_DATE THEN BEGIN
    PLINES,2
    REPORT,'AVI IS ALREADY DONE SO SKIPPING   ' + MAP  
    PLINES,2
    WAIT,2
    GOTO,NEXT_MAP
  ENDIF;IF FILE_TEST(ZIP_FILE) EQ 1 AND DATE GE PRODUCTION_DATE THEN BEGIN
ENDIF;IF DO_TEST_4AVI_DONE EQ 1 THEN BEGIN




;*****************************
IF DO_SMI_MAIN GE 1 THEN BEGIN
;*****************************
  PRINT,'GOAL = MAKING MERGED SEAWIFS +AQUA SMI STATS'
  STOP
  SMI_MAIN
ENDIF;IF DO_SMI_MAIN GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||


;************************************
IF DO_CHECK_SMI_MEANS GE 1 THEN BEGIN
;************************************
  OVERWRITE = DO_CHECK_SMI_MEANS GE 2 & IF DO_CHECK_SMI_MEANS EQ 3 THEN STOP 

FILES = FILE_SEARCH('C:\SMI\STATS\','!D_*.SAVE')
FILES = FILES(0:29)

ENDIF;IF DO_CHECK_SMI_MEANS GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||

;
;
;****************************************
IF DO_VALID_MAPS GE 1 THEN BEGIN
;****************************************
   OVERWRITE = DO_VALID_MAPS GE 2 & IF DO_VALID_MAPS EQ 3 THEN STOP 
FOR NTH = 0,(N_ELEMENTS(MAPS)-1),10 DO BEGIN
START = NTH
FIN = START +10
IF START EQ 60 THEN FIN = 61 
TXT = ARR_2STR(MAPS(START:FIN),/BRACK,/QUOTE)
PRINT,TXT
ENDFOR; FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
ENDIF ;IF DO_VALID_MAPS GE 1 THEN BEGIN

;||||||||||||||||||||||||||||||||||||||||||
;
;****************************************
IF DO_MAPS_SIZE GE 1 THEN BEGIN
FILE = 'D:\IDL\PROGRAMS\JUNK.TXT'
OPENW, 1,  FILE
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
    TXT ="  IF _MAP EQ 'MAP_MAP'        THEN BEGIN  & M.PX = 512 & M.PY =512 & M.MAP_OUT = 'MAP_MAP' & M.PX_OUT =512 & M.PY_OUT =512   & ENDIF"
    TXT = REPLACE(TXT,'MAP_MAP',MAPS[NTH])
    PRINTF,1,TXT

;STOP
ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
CLOSE,1
ENDIF;IF DO_MAP_SIZE GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||

;
;****************************************
IF DO_MAKE_TOPO_LME_LANDMASK THEN BEGIN
;*******************************************

;STOP
MAKE_TOPO_LME_LANDMASK

ENDIF; IF DO_MAKE_TOPO_LME_LANDMASK THEN BEGIN
;||||||||||||||||||||||||||||||||||
;
;****************************************
IF DO_COMBINE_LMES_TOPO5 GE 1 THEN BEGIN
;****************************************
   OVERWRITE = DO_COMBINE_LMES_TOPO5 GE 2 & IF DO_COMBINE_LMES_TOPO5 EQ 3 THEN STOP 

  LMES = READ_PNG(DIR_LME +'lme_mask_GEQ_PXY_17280_8640-EDIT-PAINT- (12).PNG')
  HELP,LMES
  H= HISTOGRAM(LMES) &OK=WHERE(H GT 0)& PRINT,'COLORS IN LMES: '+ARR_2STR[OK]
  
  ;STOP
  TOPO5= READ_PNG('D:\IDL\SRTM30_PLUS\BROWSE\MASK_LAND-GEQ-PXY_17280_8640.PNG')
  HELP,TOPO5
  H= HISTOGRAM(TOPO5) &OK=WHERE(H GT 0)& PRINT,'COLORS IN TOPO5 BEFORE ADDING LMES: '+ARR_2STR[OK]
  ; >> COLORS IN TOPO5 BEFORE ADDING LMES: [2,255]
  ; ===> CHANGE 2'S(LAND) IN TOPO5 TO 0'S TO AVOID CONFUSION WITH LME NUMS
  OK = WHERE(TOPO5 EQ 2)
  TOPO5[OK] = 0
; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL  
  FOR COLOR = 1,64 DO BEGIN
    OK = WHERE(LMES EQ COLOR,COUNT)
    IF COUNT GE 1 THEN BEGIN
      TOPO5[OK] = COLOR
      ENDIF ELSE BEGIN
        PRINT,'COLOR '+STRTRIM(COLOR,2) +'NOT FOUND'
      
  ENDELSE;IF COUNT GE 1 THEN BEGIN
  ENDFOR; FOR COLOR = 1,64 DO BEGIN
; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  
  ; ===> CHANG 0'S BACK TO LAND-GREY
  OK = WHERE(TOPO5 EQ 0)
  TOPO5[OK] = 254
  PNGFILE = DIR_LME +'TOPO_LME_MASK_GEQ_17280_8640.PNG'
 PRINT,' WRITING ' + PNGFILE
 PAL_LME,R,G,B
 WRITE_PNG,PNGFILE,TOPO5,R,G,B
  PNGFILE = 'D:\IDL\IMAGES\' +'TOPO_LME_MASK_GEQ_17280_8640.PNG'
 PRINT,' WRITING ' + PNGFILE
 PAL_LME,R,G,B
 WRITE_PNG,PNGFILE,TOPO5,R,G,B
  ,'DO_COMBINE_LMES_TOPO5'
  STOP
ENDIF;IF DO_COMBINE_LMES_TOPO5 GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||

;*****************************************
IF DO_REMAP_GEQ_2ROBINSON GE 1 THEN BEGIN
;*******************************************
   OVERWRITE = DO_REMAP_GEQ_2ROBINSON GE 2 & IF DO_REMAP_GEQ_2ROBINSON EQ 3 THEN STOP 

;; PREVIOUS SIZE > LME_IMAGE_FILE ='D:\IDL\IMAGES\LME_MASK_8640_4320.PNG'

 GEQFILE = DIR_LME +'TOPO_LME_MASK_GEQ_17280_8640.PNG'
 PRINT,' READING ' + GEQFILE
 
 GEQ= READ_PNG(GEQFILE)
 ; ===> REMAP GEQ TO ROBINSON
 ROB = MAP_REMAP(GEQ,MAP_IN = 'GEQ',MAP_OUT = 'ROBINSON',PX_OUT=8640,PY_OUT=4320)
 PAL_LME,R,G,B
 
 PNGFILE= DIR_LME    +  'TOPO_LME_MASK_ROBINSON_PXY_8640_4320.PNG'
  PRINT,' WRITING ' + PNGFILE 
 WRITE_PNG,PNGFILE,ROB,R,G,B
 PNGFILE= DIR_IMAGES +  'TOPO_LME_MASK_ROBINSON_PXY_8640_4320.PNG'
  PRINT,' WRITING ' + PNGFILE 
 WRITE_PNG,PNGFILE,ROB,R,G,B
 
 ,'DO_REMAP_GEQ_2ROBINSON'
ENDIF;IF DO_REMAP_GEQ_2ROBINSON GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||

;
;****************************************
IF DO_LMES_BASEMAP GE 1 THEN BEGIN
;****************************************
   OVERWRITE = DO_LMES_BASEMAP GE 2 & IF DO_LMES_BASEMAP EQ 3 THEN STOP 

  ,'DO_LMES_BASEMAP'
;STOP
MAP = 'ROBINSON'
  CHARSIZE  = 7    
  ALIGN=[0.5,-0.4]      
  GRACE = 100   
  SYMSIZE = 3 
  PX = 8640
  PY = 4320
  PAL = 'PAL_LME'
  LME_COLOR = 21
  PAL_LME,R,G,B
  ;===> MAKE A ROBINSON MAP OF LME SUBAREAS USING THE SHAPEFILE
  MASK = BYTARR(PX,PY) & MASK(*) = 255B
    ZWIN,MASK
    CALL_PROCEDURE,'MAP_' + MAP
    TV,MASK
  ZWIN,[PX,PY]
 ; MAP_ROBINSON
 MAP_CONTINENTS,/COASTS,COLOR = 34,THICK = 3,/FILL
  FILL = 1 & THICK = 1 & ENTITY_COLOR=1
  LME_FILE= 'D:\IDL\SHAPEFILES\LME\LME64_WGS.SHP'
  PLOT_SHAPE,LME_FILE, COLOR=LME_COLOR,THICK = THICK,FILL=FILL,ENTITY_COLOR=ENTITY_COLOR
   IM = TVRD()
   ZWIN
   PRINT,MINMAX(IM)
   H=HISTOGRAM(IM) & COLORS=WHERE(H NE 0) & PLIST,COLORS
   CODES=DB.CODE
   OK=WHERE_IN(FIX(CODES),FIX(COLORS),COUNT,COMPLEMENT = COMPLEMENT)
   PRINT,'FOUND :' + STRTRIM(COUNT,2) + '   LME CODES'
   PLIST,'DID NOT FIND THESE CODES  :   ' + STRTRIM(CODES(COMPLEMENT),2)
   PNGFILE = 'DO_LMES_BASEMAP-'+ MAP +'.PNG'
   PFILE,PNGFILE
   WRITE_PNG,PNGFILE,IM,R,G,B
      
  ;LME_IMAGE_FILE =DIR_LME +'TOPO_LME_MASK_ROBINSON_PXY_8640_4320.PNG'
  ;ROB= READ_PNG(LME_IMAGE_FILE,R,G,B)
  
   
 ; ===> MAKE A PROPORTIONAL ROBINSON MAP
 SZ = SIZEXYZ(IM) & FACT = 512./SZ.PX & PX_OUT=512 & PY_OUT =SZ.PY *FACT
 
 IM= MAP_REMAP(IM,MAP_IN=MAP,PX_OUT= PX_OUT,PY_OUT = PY_OUT,MAP_OUT=MAP)
 S = SIZEXYZ(IM)
 ; ===> MAKE THE BASE MAP 512 BU 702 TO AGREE WITH FINAL DIMENSIONS OF THE CHLOR_A PNGS (TO AVOID STRETCHING OF BASEMAP IN THE AVI)
 PAGE = REPLICATE(255B,512,702) 
 
 PAGE =IMAGE_PASTE(PAGE,IM, X=0,Y=200, BACKGROUND=255)
  WRITE_PNG,DIR_LME+'LMES_BASEMAP_ROBINSON_PXY_512_702.PNG',PAGE,R,G,B
  WRITE_PNG,DIR_IMAGES+'LMES_BASEMAP_ROBINSON_PXY_512_702.PNG',PAGE,R,G,B
 
 
 
 TXT = 'Large Marine    Ecosystems'
 TXT = REPLACE(TXT,' ', '!C') 
 DEVICE = 1
 PAGE = MAP_ADD_TXT(PAGE,60,(550),TXT,NORMAL=NORMAL,DEVICE=DEVICE,DATA=DATA,ALIGN=0.0,COLOR=0,CAPTION=caption,CHARSIZE = CHARSIZE, _EXTRA=_extra, FONT=font)
 PAL_LME,R,G,B       
 PNGFILE = DIR_LME+'LMES_BASEMAP_ROBINSON_PXY_512_702-TITLE.PNG'
 PFILE,PNGFILE
 WRITE_PNG,PNGFILE,PAGE,R,G,B
 PNGFILE = DIR_IMAGES+'LMES_BASEMAP_ROBINSON_PXY_512_702-TITLE.PNG'
 PFILE,PNGFILE
 WRITE_PNG,PNGFILE,PAGE,R,G,B
 ,'DO_LMES_BASEMAP'
 ;STOP
ENDIF ;IF DO_LMES_BASEMAP GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||
;
;*********************************
IF DO_MAKE_MAP_PRO_OLD GE 1 THEN BEGIN
;*********************************
   OVERWRITE = DO_MAKE_MAP_PRO_OLD GE 2 & IF DO_MAKE_MAP_PRO_OLD EQ 3 THEN STOP 
  ,'DO_MAKE_MAP_PRO_OLD'
  
  ;===> MAPS ARE 62 'OFFICIAL' LME MAPS UNLESS TARGETS NARROW THE SELECTION [SEE BELOW ]      
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME ; 62  MAPS
  GRACE = 20

  LME_IMAGE_FILE ='D:\IDL\IMAGES\LME_MASK_17280_8640.PNG'
  GEQ = READ_PNG(LME_IMAGE_FILE,R,G,B)
  ;===> BLANK BOTTOM 70 ROWS BECAUSE OF COLOR BAR SCALE
  GEQ(*,0:70)= 255
   PX_GEQ=1080
  PY_GEQ = 540
  IM= MAP_REMAP(GEQ,MAP_IN='GEQ',PX_OUT= PX_GEQ,PY_OUT = PY_GEQ,MAP_OUT='GEQ')
  PAL_LME
  ;SLIDEW,IM
  ;STOP
  S= SIZEXYZ(IM)
  PX= S.PX
  PY = S.PY
  ZWIN,IM
  
  MAP_GEQ
  
  TV,IM
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
  
  ;  CMD = 'MAP_' + AMAP
      ;STOP
  ;   CALL_PROCEDURE,CMD,PX,PY
    AMAP = MAPS[NTH]
    ACODE = CODES[NTH]
    ANAME = NAMES[NTH]
;_NAME = 'MAP_'+MAP
    
    AMAP = AMAP+'_OLD'
    ;STOP
    OK = WHERE (IM EQ ACODE,COUNT)
    IF COUNT EQ 0 THEN STOP
    ;PRINT,COUNT
    XY = ARRAY_INDICES([PX_GEQ,PY_GEQ], OK,/DIMENSIONS  )
    XP=REFORM(XY(0,*))
    YP=REFORM(XY(1,*))
    MMX = MINMAX(XP)
    MMY = MINMAX(YP)
   
    BOX_L = 0 >(MMX[0]-GRACE) < (PX-1)
    BOX_R = 0 >(MMX[1]+GRACE) < (PX-1)
    BOX_B=  0 > (MMY[0]-GRACE) < (PY-1)
    BOX_T = 0 >(MMY[1]+GRACE) < (PY-1) 
   
    CUT = IM(BOX_L:BOX_R,BOX_B:BOX_T)
    PNGFILE = DIR_TEST +'_'+STRTRIM(ACODE,2)+'_'+STRTRIM(ANAME,2)+'.PNG'
    PAL_LME,R,G,B
    
    
    ;WRITE_PNG,PNGFILE,CUT,R,G,B
    XYZ=CONVERT_COORD(DOUBLE(XP),DOUBLE(YP),/DEVICE,/TO_DATA)
    
    LONS = REFORM(XYZ(0,*))
    LATS = REFORM(XYZ(1,*))
    MM_LATS=MINMAX(LATS)
    MM_LONS=MINMAX(LONS)
    P0LAT = MEAN(LATS)
    POLON = MEAN(LONS)
    LIMIT = [MM_LATS[0],MM_LONS[0],MM_LATS[1],MM_LONS[1]]
  ;  PRINT,ACODE,'  ',ANAME,'   LIMIT =', LIMIT
    
  MAKE_MAP_PRO, MAP = AMAP,  NAME = ANAME,CODE=ACODE, PROJ = 'CYLINDRICAL', P0LAT = P0LAT, POLON = POLON, ROT = '0',LIMIT = LIMIT, PX = 512, PY =512 
  
    
    ;STOP
    
  TXT='MAP :'+ ANAME
  
  ,TXT
  ENDFOR ; FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

ENDIF ;IF DO_MAKE_MAP_PRO_OLD GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||


;*************************************
IF DO_MAKE_MAP_PRO_NEW GE 1 THEN BEGIN
;*************************************
  OVERWRITE = DO_MAKE_MAP_PRO_NEW GE 2 & IF DO_MAKE_MAP_PRO_NEW EQ 3 THEN STOP
    
  PRINT,' THIS SWITCH MAKES THE NEW LME MAPS WHERE SUBAREAS ARE DRAWN USING FROM THE SHAPEFILE LME_64_WGS.SHP'  
  ,'DO_MAKE_MAP_PRO_NEW'
  
 ;===> GET THE 62 LMES, EXCLUDING SMI AND GEQ WHERE CODES = 0  
   IF N_ELEMENTS(MAPS) NE 62 THEN BEGIN  & DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME & ENDIF;IF N_ELEMENTS(MAMS) NE 62 THEN BEGIN
 ;  OK = WHERE(MAPS EQ 'CANARY_CURRENT') & MAPS=MAPS[OK] & NAMES=NAMES[OK] & CODES = CODES[OK]
;STOP
  
  DIR_TEST = 'D:\TEST\' &  FILE_MKDIR,DIR_TEST
  FILES = FILE_SEARCH(DIR_TEST,'*.PNG') & IF  FILES[0] NE '' THEN FILE_DELETE,FILES

  GRACE = 3  ; DEGREES [TO LEAVE ROOM FOR THE LMR OUTLINE]
  
  LME_IMAGE_FILE ='D:\IDL\IMAGES\LME-AREAS-SMI.PNG'; NEW MADE USING LME_64_WGS.SHP
  PFILE,LME_IMAGE_FILE,/R
  IM = READ_PNG(LME_IMAGE_FILE,R,G,B)  
  S= SIZEXYZ(IM)
  PX= S.PX & PY= S.PY   
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    POF,NTH,CODES
    ;===> BLANK IM AND REDRAW LME EACH TIME USING SHAPEFILES
    ZWIN,IM & TV,IM
    AMAP = STRUPCASE(MAPS[NTH]) 
    ACODE = CODES[NTH]
    ANAME = STRUPCASE(NAMES[NTH])   
    ; !!!                           BECAUSE WEST_BERING_SEA SPANS BOTH THE LEFT AND RIGHT EDGES OF THE SMI MAP
    ;                               IT IS NECESSARY TO USE MAP_GEQ_PART AND NOT SMI [OR GEQ]
 IF AMAP EQ  'WEST_BERING_SEA' THEN BEGIN
 ;STOP
   MAP_GEQ_PART, LONMIN=-180., LONMAX=-140., LATMIN=45.,LATMAX=70. ;;;      MAP_GEQ_PART, LONMIN=-180, LONMAX=-100, LATMIN= -90,LATMAX=90
 ENDIF ELSE BEGIN
    MAP_SMI
 ENDELSE;IF AMAP EQ  'WEST_BERING_SEA' THEN BEGIN
   LME_FILE = 'D:\IDL\SHAPEFILES\LME\LME64_WGS.SHP'
    PLOT_SHAPE,LME_FILE, COLOR=ACODE,FILL=1,THICK = 4,LINESTYLE = 0,TARGET='LME_NAME',VALUE= ANAME
    IM=TVRD()
    OK = WHERE (IM EQ ACODE,COUNT)
    IF COUNT EQ 0 THEN STOP
    XY = ARRAY_INDICES([PX,PY], OK,/DIMENSIONS  )
    XP=REFORM(XY(0,*))
    YP=REFORM(XY(1,*))
    XYZ=CONVERT_COORD(DOUBLE(XP),DOUBLE(YP),/DEVICE,/TO_DATA)
    MMX = MINMAX(XP)  & MMY = MINMAX(YP)
    OK = WHERE(IM NE 0,COMPLEMENT=COMPLEMENT,COUNT)
    BOX_L = 0 >MMX[0] < (PX-1)
    BOX_R = 0 >MMX[1] < (PX-1)
    BOX_B=  0 >MMY[0] < (PY-1)
    BOX_T = 0 >MMY[1] < (PY-1)    
    LONS = REFORM(XYZ(0,*)) & LATS = REFORM(XYZ(1,*))
    MM_LATS=MINMAX(LATS)  &  MM_LONS=MINMAX(LONS)
    ;===> ENSURE LATS,LONS ARE ON THE GLOBE
    MM_LATS[0] = -90  > (MM_LATS[0]- GRACE) < 90
    MM_LATS[1] = -90  > (MM_LATS[1]+ GRACE) < 90
    MM_LONS[0] = -180 > (MM_LONS[0]- GRACE) < 180
    MM_LONS[1] = -180 > (MM_LONS[1]+ GRACE) < 180
    IF MM_LONS[0] LT -180 THEN STOP
    ;===> SINCE GRACE IS 3 POLAT,POLON MUST BE IN THE CENTER OF THE EXPANDED MAP LIMITS
    P0LAT = MEAN(MM_LATS)
    POLON = MEAN(MM_LONS)
    CUT = IM(BOX_L:BOX_R,BOX_B:BOX_T)
    PNGFILE = DIR_TEST +'_'+STRTRIM(ACODE,2)+'_'+STRTRIM(ANAME,2)+'.PNG'
    PFILE,PNGFILE
    PAL_LME,R,G,B
    WRITE_PNG,PNGFILE,CUT,R,G,B
    LIMIT = [MM_LATS[0],MM_LONS[0],MM_LATS[1],MM_LONS[1]]
    MAKE_MAP_PRO, MAP = AMAP, NAME = ANAME,CODE=ACODE, PROJ = PROJ, P0LAT = POLAT, POLON = POLON, ROT = ROT,LIMIT = LIMIT, PX = 512, PY =512,GRACE=GRACE
    ,'AMAP :    '+ ANAME
  ENDFOR ; FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

ENDIF ;IF DO_MAKE_MAP_PRO_NEW GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||

DO_PROOF_MAP_LIMITS:
;*************************************
IF DO_PROOF_MAP_LIMITS GE 1 THEN BEGIN
;*************************************
  OVERWRITE = DO_PROOF_MAP_LIMITS GE 2 & IF DO_PROOF_MAP_LIMITS EQ 3 THEN STOP
  CLEAR
  REPORT,' THIS SWITCH PROOFS/COMPARES THE LIMITS IN THE MAP PROS WITH THOSE IN !MAP.LL_BOX'  
  ,'DO_PROOF_MAP_LIMITS'
  
 ;===> GET THE 62 LMES, EXCLUDING SMI AND GEQ WHERE CODES = 0  
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME 
  DIR_TEST = 'D:\TEST\' &  FILE_MKDIR,DIR_TEST
  COUNTER = 0
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    COUNTER = COUNTER + 1
    POF,NTH,MAPS
    MAP=MAPS[NTH]
    ZWIN,[512,512]
    MAP_PROS = 'MAP_' + MAPS + '.PRO'
    OK = WHERE_IN(MAPS EQ MAP,COUNT)
    CALL_PROCEDURE,'MAP_' + MAP
    LIMITS_LL_BOX = ROUNDS(!MAP.LL_BOX,3)
    FILE = 'D:\IDL\PROGRAMS\'+ 'MAP_' + MAP + '.PRO'
    TXT = READ_TXT(FILE)
    OK = WHERE_STRING(TXT,'LIMIT',COUNT)
    IF COUNT EQ 1 THEN BEGIN
      T = TXT[OK]
      T = REPLACE(T,'LIMIT=[','')
      T = REPLACE(T,'$','')
      T = REPLACE(T,'],','')
      T = STR_SEP(T,',')
      LIMITS_PRO = ROUNDS(T,3)
      SUBS = WHERE(LIMITS_LL_BOX NE LIMITS_PRO,DISAGREE)
      IF DISAGREE GE 1 THEN BEGIN    
        REPORT,MAP
        REPORT,'          '
        REPORT,'LIMITS_PRO    '   + ARR_2STR((LIMITS_PRO(SUBS)))
        REPORT,'LIMITS_LL_BOX  '  + ARR_2STR((LIMITS_LL_BOX(SUBS)))  
        REPORT,'          '
    ENDIF ELSE BEGIN
      REPORT,MAP + '  LIMITS ARE OK '    
    ENDELSE;IF DISAGREE GE 1 THEN BEGIN    
    ENDIF;IF COUNT EQ 1 THEN BEGIN
  ENDFOR ; FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IF COUNTER GE N_ELEMENTS(MAPS) THEN STOP

ENDIF ;IF DO_PROOF_MAP_LIMITS GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||;***********************************


DO_LME_MAP_RESOLUTION:
;*************************************
IF DO_LME_MAP_RESOLUTION GE 1 THEN BEGIN
;*************************************
  OVERWRITE = DO_LME_MAP_RESOLUTION GE 2 & IF DO_LME_MAP_RESOLUTION EQ 3 THEN STOP
  CLEAR
  PRINT,' THIS SWITCH GETS THE RESOLUTION OF ALL LME MAPS' 
  ,'DO_LME_MAP_RESOLUTION'
  
 ;===> GET THE 62 LMES, EXCLUDING SMI AND GEQ WHERE CODES = 0  
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME 
  M = MAPS_INFO('SMI')
  STRUCT = M
  COUNTER = 0
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    COUNTER = COUNTER + 1
    POF,NTH,MAPS
    MAP=MAPS[NTH]
    M= MAPS_INFO(MAP,PX=512,PY=512)
    STRUCT=[STRUCT,M]
    
  ENDFOR ; FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IF COUNTER GE N_ELEMENTS(MAPS) THEN BEGIN
  CSVFILE = 'D:\IDL\LME\LME_MAPS_RESOLUTION.CSV'
  PFILE,CSVFILE
  STRUCT_2CSV,CSVFILE,STRUCT

STOP
ENDIF;IF COUNTER GE N_ELEMENTS(MAPS) THEN BEGIN


ENDIF ;IF DO_LME_MAP_RESOLUTION GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||;***********************************



;*************************************
IF DO_PROOF_LME_NAMES GE 1 THEN BEGIN
;**************************************
  DO_PROOF_LME_NAMES:
  ,'DO_PROOF_LME_NAMES'
;###   PROOF NAMED IN DB 
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME
 
  LME = READ_DB('D:\IDL\SHAPEFILES\LME\LME64_WGS.DBF')
  LME_NAMES = LME.LME_NAME &  S=SORT(LME.LME_NUMBER) & LME_NAMES=LME_NAMES(S)
  DB_NAMES = DB.NAME &  S=SORT(DB.CODE) & DB_NAMES=DB_NAMES(S)
  DB_NAMES = DB.NAME
  SUBS = WHERE_IN(DB_NAMES, LME_NAMES,BAD)
  IF BAD GE 1 THEN BEGIN
    PLINES
   
    PRINT,STRTRIM(BAD,2) + '  BAD MAP NAMES'
    
    TXT = MAPS(SUBS) + '       ' + MAP_NAMES(SUBS)
    PLIST,TXT,NOTES = 'MAPS VS MAP_NAMES'
    
  STOP
  ENDIF ELSE BEGIN
    PLINES
    PRINT,'ALL LME NAMES MATCH DB NAMES
  ENDELSE;IF BAD GE 1 THEN BEGIN
  
  
  
,'DO_PROOF_LME_NAMES'


ENDIF;IF DO_PROOF_LME_NAMES GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||

  DO_PROOF_LME_OUTLINES:
;*************************************
IF DO_PROOF_LME_OUTLINES GE 1 THEN BEGIN
;**************************************
  STEP = 'DO_PROOF_LME_OUTLINES'
  ,'DO_PROOF_LME_OUTLINES'
  COUNTER = 0
;###   DRAW LME AND COUNTRY BORDERS 
DIR_OUT = 'D:\TEST\'
COLOR_LME = 11
COLOR_BORD = 251
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME 
DO_ONE = 0
IF DO_ONE GE 1 THEN BEGIN
  OK = WHERE(MAPS EQ 'GULF_OF_THAILAND',COUNT)
  IF COUNT EQ 1 THEN BEGIN
    MAPS = MAPS[OK]
    NAMES=NAMES[OK]
    CLEAR
  ENDIF ELSE STOP;IF COUNT EQ 1 THEN BEGIN
ENDIF;IF DO_ONE GE 1 THEN BEGIN


;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _MAP = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  COUNTER = COUNTER + 1
  MAP=MAPS(_MAP)
  LME_NAME= NAMES(_MAP)
  LANDMASK_FILE= 'D:\IDL\IMAGES\'+'MASK_LAND-'+MAP+'-PXY_'+STRTRIM(512,2)+'_'+STRTRIM(512,2)+'.PNG'
  IF FILE_TEST(LANDMASK_FILE) EQ 0 THEN STOP
  LANDMASK = READ_PNG(LANDMASK_FILE,R,G,B)
  ZWIN,LANDMASK
  CALL_PROCEDURE,'MAP_' + MAP  
  TV,LANDMASK
  MAP_CONTINENTS,/HIRES,/COAST, COLOR = 21
  BORD_FILE = 'D:\IDL\SHAPEFILES\LME\BORDERS_WGS.SHP'
  PLOT_SHAPE,BORD_FILE,COLOR=COLOR_BORD,FILL=0,THICK = 3,LINESTYLE = 0       

  LME_FILE = 'D:\IDL\SHAPEFILES\LME\LME64_WGS.SHP'  
   VALUE = STRUPCASE(LME_NAME)     
  ;PLOT_SHAPE,LME_FILE,COLOR=COLOR_LME,FILL=0,THICK = 5,LINESTYLE = 0,TARGET='LME_NAME',VALUE= VALUE
  PLOT_SHAPE,LME_FILE,COLOR=COLOR_LME,FILL=0,THICK = 1,LINESTYLE = 0,TARGET='LME_NAME',VALUE= VALUE; THICK = 1 TO BETTER SEE ALIGNMENT
  
  IM = TVRD()
  ZWIN
  PNGFILE = DIR_OUT + MAP +'-' + STEP + '.PNG'
  PAL_LANDMASK,R,G,B
  WRITE_PNG,PNGFILE,IM,R,G,B
  PFILE,PNGFILE
ENDFOR;FOR _MAP = 0,N_ELEMENTS(MAPS)-1 DO BEGIN


    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF    
,'DO_PROOF_LME_OUTLINES'

IF COUNTER GE N_ELEMENTS(MAPS) THEN STOP


ENDIF;IF DO_PROOF_LME_OUTLINES GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||



IF DO_PROOF_MAP_PROS GE 1 THEN BEGIN
;***********************************
   OVERWRITE = DO_PROOF_MAP_PROS GE 2 & IF DO_PROOF_MAP_PROS EQ 3 THEN STOP 
  
  ;===> MAPS ARE 62 'OFFICIAL' LME MAPS UNLESS TARGETS NARROW THE SELECTION [SEE BELOW ]      
    IF N_ELEMENTS(MAPS) NE 62 THEN BEGIN  & DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME & ENDIF;IF N_ELEMENTS(MAMS) NE 62 THEN BEGIN

  
  DIR_OUT= 'D:\TEST\' & FILE_MKDIR,DIR_OUT
  
;===>READ LME GEQ MAP 
  LME_IMAGE_FILE ='D:\IDL\IMAGES\LME-AREAS-SMI.PNG'; NEW MADE USING LME_64_WGS.SHP
  GEQ_IMAGE = READ_PNG(LME_IMAGE_FILE,R,G,B)
 
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    AMAP= MAPS[NTH]
    ANAME = STRUPCASE(NAMES[NTH]) & LME_NAME=ANAME
    CMD = 'MAP_' + AMAP
    CALL_PROCEDURE,CMD, PX, PY 
    PAL_LME
    SETCOLOR,255,0    
    ZWIN,[PX,PY] & ERASE,255
    MAP_CONTINENTS,/HIRES,/FILL, COLOR=254
    MAP_CONTINENTS,/HIRES, COLOR=0
;;;MAP_GRID, LABEL=1, LATS=lats, LATNAMES=latnames, LATLAB=7, LONLAB=-2.5, LONDEL=20, LONS=LONS, ORIENTATION=-30
    LONS=INTERVAL([-180,180],1) & LATS=INTERVAL([-90,90],1)
;;;GRIDS,X=LONS,Y=LATS,COLOR = 0
    LME_FILE = 'D:\IDL\SHAPEFILES\LME\LME64_WGS.SHP'    
    PLOT_SHAPE,LME_FILE, COLOR=0,FILL=0,THICK = 4,LINESTYLE = 0,TARGET='LME_NAME',VALUE= ANAME
;STOP
    BORD_FILE = 'D:\IDL\SHAPEFILES\LME\BORDERS_WGS.SHP'
    PLOT_SHAPE,BORD_FILE,COLOR=0,FILL=0,THICK = 3,LINESTYLE = 1
    I=TVRD()
    ZWIN
    IM = MAP_REMAP(GEQ_IMAGE,MAP_IN='GEQ',MAP_OUT=AMAP, PX_OUT=PX, PY_OUT=PY)
    BOTH = [I,IM]
    PAL_LME,R,G,B
    PNGFILE = DIR_OUT + 'DO_PROOF_MAP_PROS-' +AMAP +'.PNG'
    PFILE,PNGFILE
    WRITE_PNG,PNGFILE, BOTH,R,G,B
;STOP
   
  ENDFOR ;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
ENDIF ;IF DO_PROOF_MAP_PROS GE 1 THEN BEGIN 
;||||||||||||||||||||||||||||||||||||||||||
;
;****************************************       
IF DO_STRUCT_SD_REMAP GE 1 THEN BEGIN
;*******************************************
    OVERWRITE = DO_STRUCT_SD_REMAP GE 2 & IF DO_STRUCT_SD_REMAP EQ 3 THEN STOP 
  

  FILES = FILE_SEARCH('E:\OC-SEAWIFS-9-L3B\SAVE\!D*.SAVE')
  DIR_OUT = DIR.SAVE
  PX_OUT = 512
    PY_OUT = 512
  
  STRUCT_SD_REMAP,FILES=FILES,DIR_OUT=DIR_OUT,MAP_OUT=MAP_OUT, PX_OUT=PX_OUT, PY_OUT=PY_OUT,OVERWRITE=OVERWRITE
ENDIF; IF DO_STRUCT_REMAP GE 1 THEN BEGIN  
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



;*********************************************************
IF DO_SMI_STATS_SAVE_2ISERIES GE 1 THEN BEGIN
;*******************************************
  OVERWRITE = DO_SMI_STATS_SAVE_2ISERIES GE 2 & IF DO_SMI_STATS_SAVE_2ISERIES EQ 3 THEN STOP 
,'DO_SMI_STATS_SAVE_2ISERIES'

FILES = FILE_SEARCH('F:\SMI\STATS\'+'!D' +'*.SAVE')
PN,FILES,'  STAT FILES'
If AMAP EQ 'SMI' THEN DATE_RANGE = ['1997090400','202012312359'] ELSE DATE_RANGE = ['1997090400','201206042359']
DIR_OUT = DIR.ISERIES
DATA_TYPE = 'INT'
PROD= 'CHLOR_A'
method = '2010'
STAT = 'MEAN'
ALG = 'OC4'
COVERAGE = '9KM'
MAP_IN = 'SMI'
MAP_OUT = AMAP
SATELLITE = 'ORBV2_EOSAT'
SENSOR = 'SEAWIFS_AQUA'
MATH = ''; NULL -TO AVOID CONFUSION IN NAMING OF THE ISERIES FROM THE INTERP ISERIES
 ;FILE_LABEL='!STUDY-SEAWIFS_AQUA-ORBV2_EOSAT-2010-9KM-CHLOR_A'
 ;STOP
; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TS_IMAGES_2ISERIES,  FILES,$
                      MAP_IN=MAP_IN,MAP_OUT=MAP_OUT,$
                      DIR_OUT=DIR_OUT, DIR_LANDMASK=DIR_LANDMASK,$
                      FILE_LABEL=FILE_LABEL,PROD = PROD,ALG=ALG,MATH=MATH,SATELLITE=SATELLITE,SENSOR=SENSOR,COVERAGE=COVERAGE,SUITE=SUITE,$
                      INTERP_DATA_TYPE=INTERP_DATA_TYPE,$
                      MED_FILL = MED_FILL, EXT=ext,DATE_RANGE=date_range, $
                      UPDATE=update,DAYS_BACK=days_back,$
                      FILES_DOY=FILES_DOY,TS_IMAGES_USE_DOY=TS_IMAGES_USE_DOY,$
                      OVERWRITE=overwrite, TEST=TEST
  ,'DO_SMI_STATS_SAVE_2ISERIES'
 ENDIF ;IF DO_SMI_STATS_SAVE_2ISERIES GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
;
; 
;************************************ 
IF DO_TS_ISERIES_2PNG GE 1 THEN BEGIN
;************************************ 
,'DO_TS_ISERIES_2PNG'   
DIR_OUT = DIR.PNGS
   
 ISERIES_KEEP = 1
 OVERWRITE = 0
 ADD_COLORBAR=1
    ;;ADD_DATEBAR=1
    ADD_DATE=1
    
    ADD_LEG=1
    ADDDATE=0
    ADD_BATHY=0
    ADD_LAND=1
    ADD_COAST=1
    COAST_COLOR = 0
    ADD_OUTLINE=0
    OUTLINE_THICK=1
    OUTLINE_COLOR=255
    ADD_MAP=0  
    ADD_SENSOR=0
    ADD_METHOD=0
    ADD_PROD=0
    ADD_ALG=0
    BOTHBARS = 0
   ; ADD_LME=1
   ; LME_NAME = NAME
    
    PAL='PAL_SW3' 
    MAP_OUT = MAP
; PREEMPT
 DIR_TEST = 'D:\TEST\' &  FILE_MKDIR,DIR_TEST
    DIR_OUT = DIR_TEST
        MAP_OUT = 'SMI'
    
    
 ; FOR LMES   
   ISERIES_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*' +AMAP + '*.INT')
   PFILE,ISERIES_FILE,/X
   CSV_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*'+AMAP  + '*.CSV')
   PFILE,CSV_FILE,/X
   TEMPLATE_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*'+AMAP  +  '*TEMPLATE*.SAVE')
   PFILE,TEMPLATE_FILE,/X
   
   OVERWRITE
   
  DIR_ISERIES = 'F:\LME\SMI\ISERIES\'
  ISERIES_FILE =FILE_SEARCH(DIR_ISERIES +'TS_IMAGES-SEAWIFS_AQUA-ORBV2_EOSAT-2010-SMI-CHLOR_A-ISERIES_5397.INT')
  CSV_FILE =FILE_SEARCH(DIR_ISERIES +'TS_IMAGES-SEAWIFS_AQUA-ORBV2_EOSAT-2010-SMI-CHLOR_A-ISERIES_5397.CSV')
  TEMPLATE_FILE =FILE_SEARCH(DIR_ISERIES +'TS_IMAGES-SEAWIFS_AQUA-ORBV2_EOSAT-2010-SMI-CHLOR_A-TEMPLATE.SAVE')
   
   
   
   ;STOP
   TS_ISERIES_2PNG, ISERIES_FILE,CSV_FILE=CSV_FILE,TEMPLATE_FILE=TEMPLATE_FILE,$
                                DIR_OUT=DIR_OUT,ISERIES_KEEP=ISERIES_KEEP,OVERWRITE=OVERWRITE,$
                                ; THE FOLLOWING GET PASSED THROUGH TO STRUCT_SD_2PNG AND STRUCT_SD_2IMAGE
                                STRUCT=STRUCT, $ ; EVERYTHING BELOW IS OPTIONAL (SEE DEFAULTS IN STRUCT_SD_2IMAGE.PRO)
;             COLORS
              BACKGROUND=BACKGROUND,LAND_COLOR=LAND_COLOR,COAST_COLOR=COAST_COLOR,LAKE_COLOR=LAKE_COLOR,$
              FLAG_COLOR=FLAG_COLOR,MISS_COLOR=MISS_COLOR,OUTSCAN_COLOR=OUTSCAN_COLOR,PAL=PAL,$
              OUTMAP_COLOR=OUTMAP_COLOR,ALGFAIL_COLOR=ALGFAIL_COLOR,$
              HI_LO_COLOR=HI_LO_COLOR,CRITERIA_COLOR=CRITERIA_COLOR,$
              BATHY_COLOR=BATHY_COLOR,MASK_COLOR=MASK_COLOR,$

;             BYTE SCALING              
              SPECIAL_SCALE=SPECIAL_SCALE,$
              CRITERIA_DATA=CRITERIA_DATA,CRITERIA_OPER=CRITERIA_OPER,USE_PROD=USE_PROD,$

;             MAP
              MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT,IMAGE_SCALE=IMAGE_SCALE,$
              FLAGS=FLAGS,NO_FLAGS=NO_FLAGS,SOLO=SOLO,$
              
;             ANNOTATIONS               
               ADD_LAND=ADD_LAND,ADD_COAST=ADD_COAST,ADD_LAKES=ADD_LAKES,$
              ADD_COLORBAR=ADD_COLORBAR, COLORBAR_WELD=COLORBAR_WELD,ADD_DATEBAR=ADD_DATEBAR,BOTHBARS=BOTHBARS, ADDDATE=ADDDATE,ADD_ALG=ADD_ALG,ADD_COVERAGE=ADD_COVERAGE,$
              ADD_MAP=ADD_MAP,ADD_SENSOR=ADD_SENSOR,ADD_PROD=ADD_PROD,ADD_METHOD=ADD_METHOD, ADD_EXTRA=ADD_EXTRA,BELOW=BELOW, $
              ADD_LME=ADD_LME,LME_NAME=LME_NAME,ADD_BORDERS=ADD_BORDERS, $
;             BATHYMETRY              
              ADD_BATHY=ADD_BATHY,BATHS=BATHS,BATHY_THICK=BATHY_THICK,$

;             MISC
              FONT=FONT,WELD=WELD,QUIET=QUIET,$              
              ERROR=ERROR                
                                
              
, 'DO_TS_ISERIES_2PNG'
ENDIF ;IF DO_TS_ISERIES_2PNG GE 1 THEN BEGIN   
;|||||||||||||||||||||||||||||||||||||||||||


;
;**********************************************
IF DO_TS_ISERIES_REMAP GE 1 THEN BEGIN
;**********************************************
  IF DO_TS_ISERIES_REMAP EQ 3 THEN STOP
  OVERWRITE=DO_TS_ISERIES_REMAP GE 2
  MAP_OUT=MAP
  DIR_OUT=DIR.ISERIES
  TEST_OUTPUT =FILE_TEST(FILE_SEARCH(DIR_OUT,'*ISERIES*.INT'))
  
  ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
    ,'DO_TS_ISERIES_REMAP' & TIMER
    DIR_ISERIES_SMI = 'F:\LME\SMI\ISERIES\'
    
    ISERIES_FILE =FILE_SEARCH(DIR_ISERIES_SMI +'TS_IMAGES-SEAWIFS_AQUA-ORBV2_EOSAT-2010-SMI-CHLOR_A-ISERIES_5397.INT')
    CSV_FILE =FILE_SEARCH(DIR_ISERIES_SMI +'TS_IMAGES-SEAWIFS_AQUA-ORBV2_EOSAT-2010-SMI-CHLOR_A-ISERIES_5397.CSV')
    TEMPLATE_FILE =FILE_SEARCH(DIR_ISERIES_SMI +'TS_IMAGES-SEAWIFS_AQUA-ORBV2_EOSAT-2010-SMI-CHLOR_A-TEMPLATE.SAVE')
    PFILE,[ISERIES_FILE,CSV_FILE,TEMPLATE_FILE],/X    
    TS_ISERIES_REMAP, ISERIES_FILE,CSV_FILE=CSV_FILE,TEMPLATE_FILE=TEMPLATE_FILE,$
                                  DIR_OUT=DIR_OUT,OVERWRITE=OVERWRITE,MAP_OUT=MAP_OUT
    ,'DO_TS_ISERIES_REMAP'
    TIMER,/STOP
  ENDIF;IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  
 
ENDIF;IF DO_TS_ISERIES_REMAP GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||

;***************************************** 
IF DO_TS_ISERIES_2PSERIES GE 1 THEN BEGIN
;****************************************
  OVERWRITE = DO_TS_ISERIES_2PSERIES GE 2
  IF DO_TS_ISERIES_2PSERIES EQ 3 THEN STOP 
  DIR_OUT = DIR.PSERIES & ISERIES_KEEP = 1  & PSERIES_KEEP = 1
  TEST_OUTPUT =FILE_TEST(FILE_SEARCH(DIR_OUT,'*PSERIES*.INT')) 
  
  ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
    ,'DO_TS_ISERIES_2PSERIES'& TIMER
  
    ISERIES_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*'+AMAP + '*.INT')    
    CSV_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*'+AMAP + '*_*.CSV')   
    TEMPLATE_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*'+AMAP + '*TEMPLATE*.SAVE')
    HELP,ISERIES_FILE,CSV_FILE,TEMPLATE_FILE
    
   IF FILE_TEST(ISERIES_FILE) EQ 0 OR FILE_TEST(CSV_FILE) EQ 0 OR FILE_TEST(TEMPLATE_FILE) EQ 0 THEN STOP
   TS_ISERIES_2PSERIES, ISERIES_FILE,CSV_FILE=CSV_FILE,TEMPLATE_FILE=TEMPLATE_FILE,$
                                  DIR_OUT=DIR_OUT,ISERIES_KEEP=ISERIES_KEEP,OVERWRITE=OVERWRITE
   
    ,'DO_TS_ISERIES_2PSERIES'
    TIMER,/STOP
   ENDIF;IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  
  
ENDIF ; IF DO_TS_ISERIES_2PSERIES GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||;                                
;                                
;*********************************************       
IF DO_TS_PSERIES_INTERP GE 1 THEN BEGIN
;*********************************************       
   OVERWRITE = DO_TS_PSERIES_INTERP GE 2
   IF DO_TS_PSERIES_INTERP EQ 3 THEN STOP
   
   DIR_OUT = DIR.INTERP 
   TEST_OUTPUT =FILE_TEST(FILE_SEARCH(DIR_OUT,'*INTERP*.INT'))
   
   ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
      ,'DO_TS_PSERIES_INTERP'& TIMER
   
     
     PSERIES_KEEP = 1 & FORT = 0 & SMOOTH_WIDTH = 5 ; DEFAULT IS 5 FOR CHLOR_A
     PSERIES_FILE =FILE_SEARCH(DIR.PSERIES +'TS_IMAGES*'+AMAP+ '*.INT')
     CSV_FILE =FILE_SEARCH(DIR.PSERIES +'TS_IMAGES*' + AMAP+ '*_*.CSV') 
     TEMPLATE_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*'+AMAP  + '*TEMPLATE*.SAVE')
     
     IF FILE_TEST(PSERIES_FILE) EQ 0 OR FILE_TEST(CSV_FILE) EQ 0 OR FILE_TEST(TEMPLATE_FILE) EQ 0 THEN STOP
     PFILE,[PSERIES_FILE,TEMPLATE_FILE,CSV_FILE],/X
     TS_PSERIES_INTERP,PSERIES_FILE,CSV_FILE=CSV_FILE,TEMPLATE_FILE=TEMPLATE_FILE,$
                                      DIR_OUT=DIR_OUT,XTEND=XTEND,SMOOTH_WIDTH=SMOOTH_WIDTH,FORT=FORT,$
                                      PSERIES_KEEP=PSERIES_KEEP,OVERWRITE=OVERWRITE; 
    ,'DO_TS_PSERIES_INTERP'
    TIMER,/STOP,REPORT=REPORT       
  ENDIF;IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 
ENDIF ;IF DO_TS_PSERIES_INTERP THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||

;*********************************************       
IF DO_INTERP_PSERIES_2ISERIES GE 1  THEN BEGIN
;*********************************************       
  OVERWRITE = DO_INTERP_PSERIES_2ISERIES GE 2 &  IF DO_INTERP_PSERIES_2ISERIES EQ 3 THEN STOP  
  DIR_OUT = DIR.I_ISERIES  & PSERIES_KEEP = 1 
  TEST_OUTPUT =FILE_TEST(FILE_SEARCH(DIR_OUT,'*TS_IMAGES-*INTERP-BLANKED*.INT'))
  
  ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
    ,'DO_INTERP_PSERIES_2ISERIES' & TIMER
    PSERIES_FILE =FILE_SEARCH(DIR.INTERP +'TS_IMAGES*'+AMAP  + '*-INTERP-BLANKED.INT')
    CSV_FILE =FILE_SEARCH(DIR.INTERP +'TS_IMAGES*'+AMAP  + '*_*.CSV')
    TEMPLATE_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*' +AMAP + '*TEMPLATE*.SAVE')
    
    TS_IMAGES_PSERIES_2ISERIES,PSERIES_FILE,CSV_FILE=CSV_FILE,TEMPLATE_FILE=TEMPLATE_FILE,$
                    DIR_OUT=DIR_OUT,PSERIES_KEEP=pseries_keep,OVERWRITE=overwrite
    
    , 'DO_INTERP_PSERIES_2ISERIES'
    TIMER,/STOP
  ENDIF;IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  
ENDIF;IF DO_INTERP_PSERIES_2ISERIES  THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||


;************************************************       
IF DO_INTERP_PSERIES_ISERIES_2PNG GE 1 THEN BEGIN 
;************************************************  
  OVERWRITE = DO_INTERP_PSERIES_ISERIES_2PNG GE 2 & IF DO_INTERP_PSERIES_ISERIES_2PNG EQ 3 THEN STOP
  DIR_OUT = DIR.I_PNGS
  TEST_OUTPUT =FILE_CHECK(DIR_OUT,'*INTERP-BLANKED*.PNG')
  
    ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
    ,'DO_INTERP_PSERIES_ISERIES_2PNG' & TIMER
    ISERIES_KEEP = 1
    ADD_COLORBAR=1
    ADD_DATEBAR=1
    ADD_LEG=1
    ADDDATE=0
    ADD_BATHY=0
    ADD_LAND=1
    ADD_COAST=1
    COAST_COLOR = 0
    ADD_OUTLINE=0
    OUTLINE_THICK=1
    OUTLINE_COLOR=255
    ADD_MAP=0  
    ADD_SENSOR=0
    ADD_METHOD=0
    ADD_PROD=0
    ADD_ALG=0
    BOTHBARS = 1
    ADD_LME=1
   
    ADD_BORDERS = 1
    PAL='PAL_SW3' 
    MAP_OUT = MAP
    ;NAMES
       ISERIES_FILE =FILE_SEARCH(DIR.I_ISERIES +'TS_IMAGES*'+AMAP  + '*.INT')
       CSV_FILE =FILE_SEARCH(DIR.I_ISERIES +'TS_IMAGES*'+AMAP + '*_*.CSV')
       TEMPLATE_FILE =FILE_SEARCH(DIR.ISERIES +'TS_IMAGES*'+AMAP + '*TEMPLATE*.SAVE')
       PFILE,[ISERIES_FILE,CSV_FILE,TEMPLATE_FILE],/X
       LME_NAME =  ANAME    
       TS_ISERIES_2PNG_LME, ISERIES_FILE,CSV_FILE=CSV_FILE,TEMPLATE_FILE=TEMPLATE_FILE,$
                                    DIR_OUT=DIR_OUT,ISERIES_KEEP=ISERIES_KEEP,OVERWRITE=OVERWRITE,$
                                    ; THE FOLLOWING GET PASSED THROUGH TO STRUCT_SD_2PNG AND STRUCT_SD_2IMAGE
                                    STRUCT=STRUCT, $ ; EVERYTHING BELOW IS OPTIONAL (SEE DEFAULTS IN STRUCT_SD_2IMAGE.PRO)
    ;             COLORS
;                  BACKGROUND=BACKGROUND,LAND_COLOR=LAND_COLOR,COAST_COLOR=COAST_COLOR,LAKE_COLOR=LAKE_COLOR,$
                  FLAG_COLOR=FLAG_COLOR,MISS_COLOR=MISS_COLOR,OUTSCAN_COLOR=OUTSCAN_COLOR,PAL=PAL,$
                  OUTMAP_COLOR=OUTMAP_COLOR,ALGFAIL_COLOR=ALGFAIL_COLOR,$
                  HI_LO_COLOR=HI_LO_COLOR,CRITERIA_COLOR=CRITERIA_COLOR,$
                  BATHY_COLOR=BATHY_COLOR,MASK_COLOR=MASK_COLOR,$
    
    ;             BYTE SCALING              
                  SPECIAL_SCALE=SPECIAL_SCALE,$
                  CRITERIA_DATA=CRITERIA_DATA,CRITERIA_OPER=CRITERIA_OPER,USE_PROD=USE_PROD,$
    
    ;             MAP
                  MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT,IMAGE_SCALE=IMAGE_SCALE,$
                  FLAGS=FLAGS,NO_FLAGS=NO_FLAGS,SOLO=SOLO,$
                  
    ;             ANNOTATIONS               
                   ADD_LAND=ADD_LAND,ADD_COAST=ADD_COAST,ADD_LAKES=ADD_LAKES,$
                  ADD_COLORBAR=ADD_COLORBAR, COLORBAR_WELD=COLORBAR_WELD,ADD_DATEBAR=ADD_DATEBAR,BOTHBARS=BOTHBARS, ADDDATE=ADDDATE,ADD_ALG=ADD_ALG,ADD_COVERAGE=ADD_COVERAGE,$
                  ADD_MAP=ADD_MAP,ADD_SENSOR=ADD_SENSOR,ADD_PROD=ADD_PROD,ADD_METHOD=ADD_METHOD, ADD_EXTRA=ADD_EXTRA,BELOW=BELOW, $
                  ADD_LME=ADD_LME,LME_NAME=LME_NAME,ADD_BORDERS=ADD_BORDERS, $
    ;             BATHYMETRY              
                  ADD_BATHY=ADD_BATHY,BATHS=BATHS,BATHY_THICK=BATHY_THICK,$
    
    ;             MISC
                  FONT=FONT,WELD=WELD,QUIET=QUIET,$              
                  ERROR=ERROR                        
     , 'DO_INTERP_PSERIES_ISERIES_2PNG'
     TIMER,/STOP
   ENDIF;IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

ENDIF ;IF DO_INTERP_PSERIES_ISERIES_2PNG GE 1 THEN BEGIN  
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||
;
;*********************************   
 IF DO_SAVES_2PNGS GE 1 THEN BEGIN  
;*********************************   
    OVERWRITE = DO_SAVES_2PNGS GT 1  & IF DO_SAVES_2PNGS EQ 3 THEN STOP
    DIR_IN = DIR.SAVE
    DIR_OUT = DIR.PNGS
    TEST_OUTPUT =FILE_CHECK(DIR_OUT,'*.PNG')
    ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
    ,'DO_SAVES_2PNGS' & TIMER
    FILES = FILE_SEARCH(DIR.SAVE  +'*.SAVE')
;;;DIR_OUT = 'E:\OC-SEAWIFS-9-L3B\PNGS\'  & IF FILE_TEST(DIR_OUT,/DIR) EQ 0 THEN FILE_MKDIR,DIR_OUT
    PROD = ['CHLOR_A']
    ADD_COLORBAR=1
    ADD_DATEBAR=1
    ADD_LEG=1
    ADDDATE=0
    ADD_BATHY=0
    ADD_LAND=1
    ADD_COAST=1
    COAST_COLOR = 0
    ADD_OUTLINE=0
    OUTLINE_THICK=1
    OUTLINE_COLOR=255
    ADD_MAP=0  
    ADD_SENSOR=0
    ADD_METHOD=0
    ADD_PROD=0
    ADD_ALG=0
    BOTHBARS = 1
    PAL='PAL_SW3' 
     
 STRUCT_SD_2PNG, FILES, DIR_OUT=dir_out, $ ; Everything below is optional (see defaults in STRUCT_SD_2IMAGE.PRO)
;             COLORS
              BACKGROUND=background,LAND_COLOR=land_color,COAST_COLOR=coast_color,LAKE_COLOR=lake_color,$
              FLAG_COLOR=flag_color,MISS_COLOR=MISS_COLOR,OUTSCAN_COLOR=outscan_color,PAL=pal,$
              OUTMAP_COLOR=outmap_color,ALGFAIL_COLOR=algfail_color,$
              HI_LO_COLOR=HI_LO_COLOR,CRITERIA_COLOR=CRITERIA_COLOR,$
              BATHY_COLOR=BATHY_COLOR,MASK_COLOR=MASK_COLOR,$

;             BYTE SCALING              
              SPECIAL_SCALE=SPECIAL_SCALE,$
              CRITERIA_DATA=CRITERIA_DATA,CRITERIA_OPER=CRITERIA_OPER,USE_PROD=USE_PROD,$

;             MAP
              MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT,IMAGE_SCALE=IMAGE_SCALE,$
              FLAGS=FLAGS,NO_FLAGS=NO_FLAGS,SOLO=SOLO,$
              
;             ANNOTATIONS               
               ADD_LAND=add_land,ADD_COAST=add_coast,ADD_LAKES=add_lakes,$
              ADD_COLORBAR=ADD_COLORBAR, COLORBAR_WELD=COLORBAR_WELD,ADD_DATEBAR=ADD_DATEBAR,BOTHBARS=BOTHBARS, ADDDATE=ADDDATE,ADD_ALG=ADD_ALG,ADD_COVERAGE=ADD_COVERAGE,$
              ADD_MAP=ADD_MAP,ADD_SENSOR=ADD_SENSOR,ADD_PROD=ADD_PROD,ADD_METHOD=ADD_METHOD, ADD_EXTRA=add_extra,BELOW=BELOW, $

;             BATHYMETRY              
              ADD_BATHY=ADD_BATHY,BATHS=BATHS,BATHY_THICK=BATHY_THICK,$

;             MISC
              FONT=FONT,WELD=WELD,OVERWRITE=OVERWRITE,QUIET=QUIET,$              
              ERROR=ERROR                   
              
   , 'DO_SAVES_2PNGS'
	ENDIF;IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
	;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	ENDIF; IF IF DO_SAVES_2PNGS GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||
  
DO_MAKE_LME_LANDMASKS:
;***************************************   
IF DO_MAKE_LME_LANDMASKS GE 1 THEN BEGIN
;***************************************  
  COUNTER = 0 
   OVERWRITE = DO_MAKE_LME_LANDMASKS GT 1  & IF DO_MAKE_LME_LANDMASKS EQ 3 THEN STOP
   ,'DO_MAKE_LME_LANDMASKS'
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME 
 ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
    AMAP= MAPS[NTH] 
    ANAME = NAMES[NTH]
    COUNTER = COUNTER + 1
    CMD = 'MAP_' + AMAP
    ZWIN,[512,512]
    CALL_PROCEDURE,CMD,PX,PY
    PAL_LANDMASK,R,G,B
    
   ; ===> Codes in the LANDMASK
    OCEAN_CODE      = 0
    COAST_CODE      = 1
    LAND_CODE       = 2
    LAKSIDE_CODE    = 3
    LAKE_CODE       = 4
    
    SETCOLOR,255,OCEAN_CODE
    ZWIN,[PX,PY] & ERASE,OCEAN_CODE
    MAP_CONTINENTS,/HIRES,/FILL, COLOR=LAND_CODE
    MAP_CONTINENTS,/HIRES, COLOR=COAST_CODE
    IM=TVRD()
    ZWIN
    LANDMASK_FILE= DIR_IMAGES+'MASK_LAND-'+AMAP+'-PXY_'+STRTRIM(PX,2)+'_'+STRTRIM(PY,2)+'.PNG'
    PNG4LME =DIR_LME+'MASK_LAND-'+AMAP+'-PXY_'+STRTRIM(PX,2)+'_'+STRTRIM(PY,2)+'.PNG'
    WRITE_PNG,LANDMASK_FILE,IM,R,G,B  & PFILE,LANDMASK_FILE
    WRITE_PNG,PNG4LME,IM,R,G,B  & PFILE,PNG4LME

  ENDFOR ;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ,'DO_MAKE_LME_LANDMASKS'
  
IF COUNTER GE N_ELEMENTS(MAPS) THEN STOP

ENDIF;IF DO_MAKE_LME_LANDMASKS GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||
;
;****************************************
IF DO_MAKE_AVI_MAP_SLIDE GE 1 THEN BEGIN
;****************************************
 OVERWRITE = DO_MAKE_AVI_MAP_SLIDE GT 1  & IF DO_MAKE_AVI_MAP_SLIDE EQ 3 THEN STOP
 DIR_OUT= DIR_LME
 
  TEST_OUTPUT =FILE_CHECK(DIR_OUT,'*INTERP-BLANKED*.PNG')
;===> MAPS ARE 62 'OFFICIAL' LME MAPS UNLESS TARGETS NARROW THE SELECTION [SEE BELOW ]      
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME ; 62  MAPS
;OK = WHERE_STRING(MAPS,'NORTHEAST_AUSTRALIAN_SHELF') & MAPS = MAPS[OK]
;STOP
  PSYM_COLORS = [0,255]
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
    MAP=MAPS[NTH]
    FOR COLOR = 0,N_ELEMENTS(PSYM_COLORS)-1 DO BEGIN
;    PSYM_COLOR=PSYM_COLORS(COLOR); ALTERNATING FOR PRIMER
    PSYM_COLOR=PSYM_COLORS(COLOR)
    F =  MAKE_AVI_MAP_SLIDE(MAP=MAP , NAME_COLOR=0,PSYM_COLOR=PSYM_COLOR)
   ENDFOR;FOR COLOR = 0,N_ELEMENTS(PSYM_COLORS)-1 DO BEGIN  
  ENDFOR ;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ,'DO_MAKE_AVI_MAP_SLIDE'
ENDIF ;IF DO_MAKE_AVI_MAP_SLIDE GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||



DO_LMES_PRIMER:
;********************************
IF DO_LMES_PRIMER GE 1 THEN BEGIN
;********************************
 OVERWRITE = DO_LMES_PRIMER GT 1  & IF DO_LMES_PRIMER EQ 3 THEN STOP
;
;===> MAPS ARE 62 'OFFICIAL' LME MAPS UNLESS TARGETS NARROW THE SELECTION [SEE BELOW ]      
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME ; 62  MAPS

 DIR_LME='D:\IDL\LME\'
 LME_BASEMAP=DIR_LME +'LMES_BASEMAP_ROBINSON_PXY_512_702-TITLE.PNG'
 BASEMAP=READ_PNG(LME_BASEMAP,R,G,B)
 LME_SLIDES= FILE_SEARCH(DIR_LME,'*MAP_PXY_512_702.PNG')
  LME_SLIDES_255= FILE_SEARCH(DIR_LME,'*MAP_PXY_512_702-255.PNG')
   LME_SLIDES =INTERLEAVE(LME_SLIDES,LME_SLIDES)
   LME_SLIDES =INTERLEAVE(LME_SLIDES,LME_SLIDES)
   LME_SLIDES =INTERLEAVE(LME_SLIDES,LME_SLIDES)
   LME_SLIDES =INTERLEAVE(LME_SLIDES,LME_SLIDES)
   SUBS = INDGEN(N_ELEMENTS(LME_SLIDES))
   SAM=SUBSAMPLE(SUBS,2) 
   FILES=LME_SLIDES
   FN=FILE_PARSE(FILES)
   NAMES = FN.NAME
   NAMES(SAM) = NAMES(SAM) +'-255'
   FILES=FN.DIR+NAMES+'.PNG'
   IMAGE_FILE=LME_BASEMAP
   BACKGROUND_COLOR= 254
   IM=BASEMAP
   IM(*)=BACKGROUND_COLOR
   TXT= 'Large Marine Ecosystems!C Primer'+'!C!C!C'+" Jay O'Reilly"
   CHARSCALE=.75
   IM = MAP_ADD_TXT(IM,0.5,0.66, /NORMAL,  TXT, COLOR=0,charsize=5*charscale,CHARTHICK=3,ALIGN=0.5)
   JAY_SLIDE = DIR_LME + 'JAY.PNG'
   WRITE_PNG,JAY_SLIDE,IM,R,G,B
   INTRO=[JAY_SLIDE,LME_BASEMAP]
;  INTRO=REVERSE(INTRO)
;===> MUST REPLICATE EACH MAP SLIDE FILE TO SLOW DOWN THE MOVIE
  PAL='PAL_LME'
  AVI_FILE= 'LME_PRIMER.AVI'
  MAKE_AVI,   FILES=FILES,            PAL=PAL, $                           ; REQUIRED INPUT
                DIR_OUT=DIR_OUT,        AVI_FILE=AVI_FILE, $                 ; USUAL INPUT

                 INTRO = INTRO ,$
                N_TITLE=N_TITLE, TYPE=TYPE, MAP=MAP,$        ; USUAL INPUT

                FPS=FPS, BITS=BITS,       QUALITY=QUALITY ,$                    ; OPTIONAL INPUT
                YOFFSET=YOFFSET,TITLE_COLOR=TITLE_COLOR,$
                AUTHORS=AUTHORS,ADDRESS=ADDRESS,SENSORS=SENSORS,BACKGROUND_COLOR=BACKGROUND_COLOR,MOVIE = MOVIE
  ,'DO_LMES_PRIMER'
  GOTO,DONE
ENDIF;IF DO_LMES_PRIMER GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||

;******************************************
IF DO_UNZIP_AVIZIP GE 1 THEN BEGIN
;******************************************
  OVERWRITE = DO_UNZIP_AVIZIP GT 1  & IF DO_UNZIP_AVIZIP EQ 3 THEN STOP

  ,'DO_UNZIP_AVIZIP'
  ;STOP
  DIR_AVIS = AVI_DIR_ZIP_E + '\AVIS\' & FILE_MKDIR,DIR_AVIS
  DIR_OUT = DIR_AVIS
  AVI_ZIPS =FILE_SEARCH(AVI_DIR_ZIP_E,'*.ZIP') 
  OK = WHERE_STRING(AVI_ZIPS,AMAP,COUNT)
  IF COUNT NE 1 THEN MESSAGE,'PROBLEM FINDING ZIPFILE' ELSE ZIPFILE = AVI_ZIPS[OK]
    FN=FILE_PARSE(ZIPFILE)
    AVI_FILE = DIR_OUT + FN.NAME + '.AVI'
    
    ;===> CHECK IF ALREADY UNZIPPED
    IF FILE_TEST(AVI_FILE) EQ 0 THEN BEGIN
       PFILE,ZIPFILE,/R
       ;OUTFILE= 
       ZIP = 0
       HIDE = 1 
       WINZIP,ZIPFILE, DIR_OUT=DIR_OUT , ZIP=ZIP,GZIP=GZIP, TEST=TEST,$
                          OUTFILE=OUTFILE,$
                          DELETE_SOURCE=DELETE_SOURCE,NO_OVERWRITE=NO_OVERWRITE,$
                          EXT_ZIP=EXT_ZIP,EXT_GZIP=EXT_GZIP,KEEP_EXT=KEEP_EXT,HIDE=HIDE
      
    ENDIF;IF FILE_TEST(AVI_FILE) NE  1 THEN BEGIN
  ,'DO_UNZIP_AVIZIP'
ENDIF;IF DO_UNZIP_AVIZIP GE  1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||


;***********************************
IF DO_AVIEX GE 1 THEN BEGIN
;***********************************
  OVERWRITE = DO_AVIEX GT 1  & IF DO_AVIEX EQ 3 THEN STOP
,'DO_AVIEX'
AVIFILES =FILE_SEARCH(DIR.AVI_OLD,'*.AVI') 
OK = WHERE_STRING(AVIFILES,AMAP,COUNT)
IF COUNT NE 1 THEN MESSAGE,'PROBLEM FINDING AVIFILE' ELSE AVIFILE = AVIFILES[OK]
;===>  AVI EXTRACTOR
;;CMD = 'C:\AVI_CONSTRUCTOR\AVIEX\AVIEX.EXE' & SPAWN,CMD,TXT &PRINT,TXT
;################################################################################################
;##################  INSTRUCTIONS FOR AVIEX  ####################################################
;################################################################################################
;AVI Extractor Copyright(c) 2012 Michael Caracena.  All Rights Reserved. AVI Extractor Options 
;   InFilename=<avi filename>    OutDir=<image output directory>
;   OutFilenamePrefix=<filename title>    OutFilenameExtension=<image filename ext (image type)>
;   OutFilenameNumberWidth=<minimum filename number width>
;   OutOverwrite=<true or false to overwrite image files if they exist>
;   OutBpp=<24, 32, 0 (default), or -1 to try default extracted image bpp ( good for getting 8bit bmps ).>
;   For example:    aviex.exe AVIFilename="c:\temp\test.avi" OutDir="c:\temp\Out\"
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
;STOP
;FILES =FILE_SEARCH(DIR.AVIEX,'*.PNG')
FILES =FILE_SEARCH(DIR.AVIEX,'*.BMP')
IF N_ELEMENTS(FILES) LT 5480 THEN BEGIN

  ;C:\AVI_CONSTRUCTOR\AVIEX\AVIEX.EXE
  ; ********************************
  ; ********* COMMANDS FOR AVIEXTRACTOR
    SP = ' '
    CMD =             'C:\AVI_CONSTRUCTOR\AVIEX\AVIEX.EXE'+SP   
    CMD = CMD   + SP + 'InFilename='              + AVIFILE  
    CMD = CMD   + SP + 'OutDir='                 + DIR.AVIEX  
;    CMD = CMD   + SP + 'OutFilenameExtension=' +'png'  
    CMD = CMD   + SP + 'OutFilenameExtension=' +'bmp'  
    CMD = CMD   + SP + 'OutFilenameNumberWidth='                 +ROUNDS(6)  
    CMD = CMD   + SP + 'OutBpp='                +ROUNDS(8) 
  ;;  CMD = CMD   + SP + 'OutOverwrite='                +'true'
    PFILE,AVIFILE,/R
    PRINT, CMD
    TIMER
    SPAWN,CMD,TXT  
    TIMER,/STOP   
ENDIF;IF N_ELEMENTS(FILES) LT 5480 THEN BEGIN

,'DO_AVIEX'

ENDIF;IF DO_AVIEX GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||

;*********************************************
IF DO_ADD_LME_OUTLINES GE 1 THEN BEGIN
;*********************************************
  OVERWRITE = DO_ADD_LME_OUTLINES GT 1  & IF DO_ADD_LME_OUTLINES EQ 3 THEN STOP
  PRINT,' ONLY ADD OUTLINES TO OLD MAPS BECAUSE OUTLINES ARE ADDED TO NEW MAPS DURING STRUCT_SD_2IMAGE [STRUCT_SD_2PNG ]'
  ,'DO_ADD_LME_OUTLINES'
  FILES = FILE_SEARCH(DIR.AVIEX,'*.PNG')
  DIR_OUT = DIR.I_PNGS_EDIT
  
  PX=512
  PY=512
  MASK = BYTARR(PX,PY) & MASK(*) = 255B
  ZWIN,MASK
  ;===> MUST USE OLD MAPS 
CALL_PROCEDURE,'MAP_' + AMAP
TV,MASK
LME_FILE = 'D:\IDL\SHAPEFILES\LME\LME64_WGS.SHP'
;;;MAP_NO_UNDERSCORES = STRUPCASE(REPLACE(AMAP,'_',' '))
PLOT_SHAPE,LME_FILE, COLOR=0,FILL=0,THICK = 3,LINESTYLE = 0,ATTRIBUTE='LME_NAME',VALUE= STRUPCASE(NAME)

BORD_FILE = 'D:\IDL\SHAPEFILES\LME\BORDERS_WGS.SHP'
PLOT_SHAPE,BORD_FILE,COLOR=2,FILL=0,THICK = 5,LINESTYLE = 1
MASK = TVRD()
ZWIN
OK_LME_0=WHERE(MASK EQ 0,COUNT_LME_0) & PRINT,'COUNT_LME 0',COUNT_LME_0
OK_BORDERS=WHERE(MASK EQ 2,COUNT_BORDERS) & PRINT,'COUNT_BORDERS ',COUNT_BORDERS

;STOP
;===> ADD LME AND POLITICAL BORDERS TO MASK
;FOR NTH = 5310,5310 DO BEGIN ; FULL IMAGE
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;FOR NTH = 90,N_ELEMENTS(FILES)-1L DO BEGIN
FOR NTH = 290,N_ELEMENTS(FILES)-1L DO BEGIN
  POF,NTH,FILES
  FILE = FILES[NTH]
  PFILE,FILE,/R
  FN=FILE_PARSE(FILE)
  
;  PNGFILE = 'D:\TEST\' + FN.NAME + '.PNG'
  PNGFILE = DIR_OUT + FN.NAME + '.PNG'
 
  ;===> ADD LME OUTLINE AND POLITICAL BOUNDARIES
  IM = READ_PNG(FILE,R,G,B)
  ;===> EXTRACT THE BOTTOM MAPED IMAGE 512X512 FROM IM
  BOT = IM(0:PX-1,0:PY-1)
;===> EXTRACT THE TOP LEGEND FROM IM  
   TOP=IM(0:*,PY:*)
 ;===> REMAP FROM OLD LIMITS TO RECENT MAP PRO LIMITS
  MAP_IN =  AMAP + '_OLD' &  MAP_OUT =  AMAP 


;STOP  
  
  BOT = MAP_REMAP(BOT, MAP_IN=map_in, MAP_OUT=map_out, PX_OUT=PX, PY_OUT=PY)
  BOT_CHL = BOT
  OK = WHERE(BOT_CHL EQ 245,COUNT) 
  IF COUNT GE 1 THEN BOT_CHL[OK] = 0
  
  
  ;stop
  BOT(OK_LME_0) = 0
  BOT(OK_BORDERS) = 0
  TVLCT,R,G,B
  
  
  WRITE_PNG,PNGFILE,IM,R,G,B
  PFILE,PNGFILE
  ;STOP
ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1L DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

,'DO_ADD_LME_OUTLINES'
ENDIF;IF DO_ADD_LME_OUTLINES GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||

;;*********************************   
  IF DO_REVISED_PNG_2AVI GE 1 THEN BEGIN
;*********************************   
  OVERWRITE = DO_REVISED_PNG_2AVI GT 1  & IF DO_REVISED_PNG_2AVI EQ 3 THEN STOP
  ,'DO_REVISED_PNG_2AVI'
  DIR_OUT  = DIR.AVI
  FILES = FILE_SEARCH(DIR.AVIEX,'*.PNG')
  
  TYPE = 'CHLOR_A'
  EDITED_PNGS:  
  BACKGROUND_COLOR= 254   
  PAL = ['PAL_SW2','PAL_LME']  
  AVI_FILE= DIR.AVI + AMAP +'.AVI' 
    
; ===>
    MAKE_AVI,   FILES=files,            PAL=pal, $                           ; REQUIRED INPUT
                DIR_OUT=dir_out,        AVI_FILE=avi_file, $                 ; USUAL INPUT

                INTRO=INTRO, $
                N_TITLE=N_TITLE, TYPE=TYPE, MAP=MAP,$        ; USUAL INPUT

                FPS=fps, BITS=bits,       QUALITY=quality ,$                    ; OPTIONAL INPUT
                YOFFSET=YOFFSET,TITLE_COLOR=title_color,$
                AUTHORS=authors,ADDRESS=address,SENSORS=sensors,BACKGROUND_COLOR=BACKGROUND_COLOR,MOVIE = MOVIE
    
    
    
    , 'DO_REVISED_PNG_2AVI'
  ENDIF;IF DO_REVISED_PNG_2AVI GE 1 THEN BEGIN  
;|||||||||||||||||||||||||||||||||||||








;*******************************   
  IF DO_PNG_2AVI GE 1 THEN BEGIN
;*******************************  
    OVERWRITE = DO_PNG_2AVI GE 2 & IF DO_PNG_2AVI EQ 3 THEN STOP 
    DIR_OUT  = DIR.AVI  
    TEST_OUTPUT =FILE_CHECK(DIR_OUT,'**.AVI')
    
    ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
      ,'DO_PNG_2AVI' & TIMER
      FILES = FILE_SEARCH(DIR.I_PNGS,'*.PNG')
    
      IMAGE_FILE = FILES[0]  
      
      ;===> DETERMINE START,STOP DATES FOR SEAWIFS AND AQUA [ FROM BZ2 FILES ]
      DIR_BZ2='E:\SMI\BZ2\'
      SW_FILES=FILE_SEARCH(DIR_BZ2,'S*.BZ2')  
      FN=FILE_PARSE(SW_FILES)
      DATES = STRMID(SATDATE_2DATE(FN.FIRST_NAME),0,8)
      SW_DATE_START= FIRST(DATES)
      SW_DATE_END = LAST(DATES)   
    
      AQ_FILES=FILE_SEARCH(DIR_BZ2,'A*.BZ2')  
      FN=FILE_PARSE(AQ_FILES)
      DATES = STRMID(SATDATE_2DATE(FN.FIRST_NAME),0,8)
      AQ_DATE_START= FIRST(DATES)
      AQ_DATE_END = LAST(DATES)  
      ;+++***> PREEMPT AQUA LAST DATE TO BE JUN 4,2012 ... FOR CONSISTENCY WITH DATE_RANGE
      AQ_DATE_END   =   '20120604'
      DATE_START = [SW_DATE_START,AQ_DATE_START]
      DATE_END = [SW_DATE_END,AQ_DATE_END]
             
        
      INTRO=[ 'D:\IDL\LME\LMES_BASEMAP_ROBINSON_PXY_512_702-TITLE.PNG']
      PAL='PAL_LME'
      
      MAP_SLIDE_PNG =MAKE_AVI_MAP_SLIDE( MAP=MAP ,DIR_OUT=DIR_OUT,TARGET_COLOR=TARGET_COLOR, PAL=PAL,$
                                         NAME_COLOR=NAME_COLOR, PSYM_CODE=PSYM_CODE,PSYM_COLOR = PSYM_COLOR)
    
 
      TYPE = 'CHLOR_A'
      SENSORS = ['SEAWIFS','AQUA']
      YOFFSET= 0.0
      TITLE_SLIDE_PNG = MAKE_AVI_TITLE( IMAGE_FILE=image_file, TYPE=type, PAL=PAL,DATE_START=date_start,DATE_END=date_end,$
                           DIR_OUT=dir_out,YOFFSET=yoffset,$
                           MAP=MAP,TITLE_COLOR=TITLE_COLOR,$
                           AUTHORS=authors,ADDRESS=address,SENSORS=sensors,BACKGROUND_COLOR=BACKGROUND_COLOR)
      INTRO = [INTRO,MAP_SLIDE_PNG,TITLE_SLIDE_PNG]
        
        
      PAL = ['PAL_SW2','PAL_LME']
        
      AVI_FILE = DIR_OUT  + AMAP +'.AVI' 
   
      AVI_FILE= DIR.AVI + AMAP +'.AVI' 
      TEMPLATE_FILE =FILE_SEARCH(DIR.ISERIES +'*TS_IMAGES*' +AMAP + '*TEMPLATE*.SAVE')
      IM = STRUCT_SD_READ(TEMPLATE_FILE,STRUCT=STRUCT)
      PERIOD = STRUCT.PERIOD
      SENSORS = STRUCT.SENSOR
      AFILE = FILES[0]
      IM = READ_PNG(AFILE,R,G,B)
      BACKGROUND_COLOR= 254       
      AVI_FILE= DIR.AVI + AMAP +'.AVI' 
    ; ===>
      MAKE_AVI,   FILES=files,            PAL=pal, $                           ; REQUIRED INPUT
                    DIR_OUT=dir_out,        AVI_FILE=AVI_FILE, $                 ; USUAL INPUT
    
                    INTRO=INTRO, $
                    N_TITLE=N_TITLE, TYPE=TYPE, MAP=MAP,$        ; USUAL INPUT
    
                    FPS=fps, BITS=bits,       QUALITY=quality ,$                    ; OPTIONAL INPUT
                    YOFFSET=YOFFSET,TITLE_COLOR=title_color,$
                    AUTHORS=authors,ADDRESS=address,SENSORS=sensors,BACKGROUND_COLOR=BACKGROUND_COLOR,MOVIE = MOVIE
       , 'DO_PNG_2AVI'
         
    ENDIF;IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    
  ENDIF;IF DO_PNG_2AVI GE 1 THEN BEGIN  
;|||||||||||||||||||||||||||||||||||||
;;

;****************************************
IF DO_ZIP_AVI GE 1 THEN BEGIN
;****************************************
  OVERWRITE = DO_ZIP_AVI GT 1  & IF DO_ZIP_AVI EQ 3 THEN STOP
  DIR_OUT  = DIR.AVI  
  TEST_OUTPUT =FILE_CHECK(DIR_OUT,'*.ZIP')
  
    ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
      ,'DO_ZIP_AVI' & TIMER
      AVI_FILE= DIR.AVI + AMAP +'.AVI' 
      FILES=  AVI_FILE
      DIR_OUT=DIR.AVI
      HIDE=1
      ZIP=1
      DELETE_AVI = 0
      WINZIP,FILES, DIR_OUT=dir_out , ZIP=ZIP,GZIP=gzip, TEST=test,$
                              OUTFILE=outfile,$
                            DELETE_SOURCE=delete_source,NO_OVERWRITE=no_overwrite,$
                            EXT_ZIP=EXT_ZIP,EXT_GZIP=ext_gzip,KEEP_EXT=keep_ext,HIDE=hide
      ,'DO_ZIP_AVI'
      IF DELETE_AVI EQ 1 THEN BEGIN
        IF FILE_TEST(AVI_FILE) EQ 1 THEN BEGIN
          PFILE,AVI_FILE,/D
          FILE_DELETE,AVI_FILE
          ,'DELETE_AVI'
          
        ENDIF;IF FILE_TEST(AVI_FILE EQ 1 THEN BEGIN
      ENDIF;IF DELETE_AVI EQ 1 THEN BEGIN
    
    
  ENDIF;IF TEST_OUTPUT EQ 0 OR OVERWRITE EQ 1 THEN BEGIN
  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  
ENDIF;IF DO_ZIP_AVI GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||

;*********************************
IF DO_COPY_AVI_ZIP GE 1 THEN BEGIN
;*********************************
  OVERWRITE = DO_COPY_AVI_ZIP GT 1  & IF DO_COPY_AVI_ZIP EQ 3 THEN STOP
  AVI_ZIP_FILE= FILE_SEARCH(DIR.AVI + AMAP +'*.ZIP') 
  DIR_OUT =AVI_DIR_ZIP_E
    
  ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
    IF FILE_TEST(AVI_ZIP_FILE) EQ 1 THEN BEGIN
       FA = FILE_ALL( AVI_ZIP_FILE)
       AVI_ZIP_FILE_COPY = AVI_DIR_ZIP_E + FA.NAME_EXT 
       FB = FILE_ALL( AVI_ZIP_FILE_COPY)
       IF FA.MTIME GT FB.MTIME THEN BEGIN
        FILE_COPY,AVI_ZIP_FILE, AVI_DIR_ZIP_E,OVERWRITE=1,/VERBOSE; ALWAYS OVERWRITE
        REPORT,'COPIED >>>  ' +AVI_ZIP_FILE + '  TO  >>>   ' + AVI_DIR_ZIP_E
       ENDIF;IF FA.MTIME GT FB.MTIME THEN BEGIN
    ENDIF;IF FILE_TEST(AVI_ZIP_FILE) EQ 1 THEN BEGIN

  ,'DO_COPY_AVI_ZIP'
  
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

  
ENDIF;IF DO_COPY_AVI_ZIP GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||
DO_INVENTORY:
;*********************************
IF DO_INVENTORY GE 1 THEN BEGIN
;*********************************
  ,'DO_INVENTORY'
  OVERWRITE = DO_INVENTORY GT 1  & IF DO_INVENTORY EQ 3 THEN STOP
  AVI_ZIP_FILE= DIR.AVI + AMAP +'.ZIP' 
  DRIVE = GET_HDD(2)
  
  DB =  GET_LME_MAPS() & MAPS=DB.MAP & TARGETS=MAPS  & CODES = DB.CODE & NAMES = DB.NAME ; 62  MAPS
  CSV = REPLICATE(CREATE_STRUCT('MAP','','ISERIES',0,'PSERIES',0,'INTERP',0,'I_ISERIES',0,'I_PNGS',0,'AVI',0,'ZIP',0,'COMMENT',''),N_ELEMENTS(DB))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _MAP = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  MAP = MAPS(_MAP)
  POF,_MAP,MAPS,TXT = MAP
  ;& FOLDERS = ['ISERIES','PSERIES','INTERP','I_ISERIES','I_PNGS','I_ISERIES'] &  DIR=FILE_FOLDERS(PATH, FOLDERS= FOLDERS)
  
  
  PATH= DRIVE+':\LME\'+MAP+'\ISERIES\'  & ISERIES = FILE_TEST(FILE_SEARCH(PATH, '*ISERIES*.INT'))
  PATH= DRIVE+':\LME\'+MAP+'\PSERIES\'  & PSERIES = FILE_TEST(FILE_SEARCH(PATH, '*PSERIES*.INT'))  
  PATH= DRIVE+':\LME\'+MAP+'\INTERP\'  & INTERP = FILE_TEST(FILE_SEARCH(PATH, '*INTERP-BLANKED*.INT'))
  PATH= DRIVE+':\LME\'+MAP+'\I_ISERIES\'  & I_ISERIES = FILE_TEST(FILE_SEARCH(PATH, '*INTERP-BLANKED*.INT'))  
  PATH= DRIVE+':\LME\'+MAP+'\I_PNGS\'  & I_PNGS = TOTAL(FILE_TEST(FILE_SEARCH(PATH, '*INTERP-BLANKED*.PNG')))  
  PATH= DRIVE+':\LME\'+MAP+'\AVI\'  & AVI = TOTAL(FILE_TEST(FILE_SEARCH(PATH, '*.AVI')))
  PATH= DRIVE+':\LME\'+MAP+'\AVI\'  & ZIP = TOTAL(FILE_TEST(FILE_SEARCH(PATH, '*.ZIP')))
  
  
  
  
  CSV(_MAP).MAP = MAP
  CSV(_MAP).ISERIES = ISERIES
  CSV(_MAP).PSERIES = PSERIES
  CSV(_MAP).INTERP = INTERP
  CSV(_MAP).I_ISERIES = I_ISERIES
  CSV(_MAP).I_PNGS = I_PNGS 
  CSV(_MAP).AVI = AVI
  CSV(_MAP).ZIP = ZIP
  
  ENDFOR;FOR _MAP = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  CSVFILE = DIR_INVENTORY + 'INVENTORY.CSV'
  STRUCT_2CSV,CSVFILE,CSV
  PFILE,CSVFILE
  WAIT,5
  PFILE,CSVFILE
  ,'DO_INVENTORY'
  
  
ENDIF;IF DO_INVENTORY GE 1 THEN BEGIN
;|||||||||||||||||||||||    ||||||||||||||||



  NEXT_MAP:
  , AMAP
  REPORT,'FINISHED '+ AMAP
ENDFOR ;FOR _MAP = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
; ===============================================
DONE:

TIMER,/STOP
;  STOP
END; #####################  END OF ROUTINE ################################
