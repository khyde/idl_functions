; $ID:	SUBAREAS_LMES_2SHP.PRO,	2020-07-01-12,	USER-KJWH	$
	PRO SUBAREAS_LMES_2SHP,REGION=REGION,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE
;##############################################################################
;+
; NAME:
;		SUBAREAS_LMES_2SHP
;
; PURPOSE:	THIS PROCEDURE MAKES A SEPARATE SHAPE FILE FOR EACH LME IN A IN THE LME66.SHP FILE
;
; CATEGORY:
;		SUBAREAS FAMILY
;
; INPUTS: SEE KEYWORDS;

; KEYWORDS:
;    REGION......... DEFAULT = 'LME'
;    OVERWRITE...... OVERRITE OUTPUT SHP FILES

;    	
; OUTPUTS:
;		 A SHP FILE [SHAPE FILE] FOR EACH LME SUBAREA IN THE SHAPEFILE LME66.SHP
;
; MODIFICATION HISTORY:
;			WRITTEN JUN 16,2014, BY J.O'REILLY
;			APR 18,2015,JOR: IF FILE_MAKE(LMES_SHP_FILE,SHP_FILE,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE) EQ 0 THEN CONTINUE;>>>>>>>>>>
;			                 ATTRNEW.ATTRIBUTE_6 = AMAP
;                      IF NONE(REGION) THEN REGION = 'LME' [TO KEEP SEPARATE FROM KIM'S IN THE GLOBAL]
;     NOV 22, 2017 - KJWH: Changed PLT_SHP to READ_SHPFILE
;			
;			
;##############################################################################
;-
;	**********************************
ROUTINE_NAME  = 'SUBAREAS_LMES_2SHP'
;***********************************
;===> CONSTANTS
  SET_PLOT,'WIN' 
  FONT_HELVETICA
  ;===> LATEST 66 LMES SHP FILE
  LMES_SHP_FILE = !S.IDL_SHAPEFILES + "LME\LME66.shp"
  IF FILE_TEST(LMES_SHP_FILE) EQ 0 THEN MESSAGE,'ERROR: CAN NOT FIND '+ LMES_SHP_FILE
;===> GET THE LME MAPS , CODES AND NAMES
DB =  READ_LME_DB() & CODES = DB.CODE & MAPS=DB.MAP & LME_NAMES = STRTRIM(DB.LME_NAME,2)
FN = FILE_PARSE(LMES_SHP_FILE) & SOURCE = FN.NAME

MIN_PTS = 10
BACKGROUND=255B


IF NONE(REGION) THEN REGION = 'LME'


;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _CODE=0L,N_ELEMENTS(CODES)-1L DO BEGIN
	  CODE = CODES(_CODE)  
    SUBAREA = DB(_CODE).MAP
    AMAP    = DB(_CODE).MAP
    ;===> PROBLEMS WITH THESE:
    IF AMAP EQ 'CENTRAL_ARCTIC'    OR $
       AMAP EQ 'ANTARCTICA'        OR $
       AMAP EQ 'ALEUTIAN_ISLANDS'  OR $
       AMAP EQ 'EAST_BERING_SEA'  THEN CONTINUE ;>>>>>>>>>>>>>>>
    
    SUBAREA = STRUPCASE(REPLACE(SUBAREA,' ', '_'))
    METHOD = ROUTINE_NAME
    ;===> MAKE A REGION SUBFOLDER
    DIR_REGION = !S.IDL_SHAPEFILES + REGION + PATH_SEP()
    DIR_TEST,DIR_REGION
    SHP_FILE= DIR_REGION + REGION + '-'+ SUBAREA + '-LME.SHP'
    IF FILE_MAKE(LMES_SHP_FILE,SHP_FILE,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE) EQ 0 THEN CONTINUE;>>>>>>>>>>>

;################################################################################
      ; CREATE THE NEW SHAPEFILE AND DEFINE THE ENTITY_TYPE AS POLYGON
;################################################################################
      SHP = OBJ_NEW('IDLFFSHAPE',SHP_FILE, /UPDATE, ENTITY_TYPE=5)
;===> SET THE ATTRIBUTE DEFINITIONS FOR THE NEW SHAPEFILE
      SHP->ADDATTRIBUTE, 'REGION', 7, STRLEN(REGION), PRECISION=0
      SHP->ADDATTRIBUTE, 'SUBAREA', 7, STRLEN(SUBAREA), PRECISION=0
      SHP->ADDATTRIBUTE, 'CODE', 7, STRLEN(STRTRIM(CODE,2)), PRECISION=0
      SHP->ADDATTRIBUTE, 'METHOD', 7, STRLEN(METHOD), PRECISION=0
      SHP->ADDATTRIBUTE, 'SOURCE', 7, STRLEN(SOURCE), PRECISION=0
      SHP->ADDATTRIBUTE, 'DATE', 7, STRLEN(DATE_NOW()), PRECISION=0
      SHP->ADDATTRIBUTE, 'MAP', 7, STRLEN(AMAP),PRECISION=0
;===> CREATE STRUCTURE FOR NEW ATTRIBUTES
      ATTRNEW = SHP->GETATTRIBUTES(/ATTRIBUTE_STRUCTURE)
      ; DEFINE THE VALUES FOR THE NEW ATTRIBUTES
      ATTRNEW.ATTRIBUTE_0 = REGION
      ATTRNEW.ATTRIBUTE_1 = SUBAREA
      ATTRNEW.ATTRIBUTE_2 = STRTRIM(CODE,2)
      ATTRNEW.ATTRIBUTE_3 = METHOD
      ATTRNEW.ATTRIBUTE_4 = SOURCE
      ATTRNEW.ATTRIBUTE_5 = DATE_NOW()
      ATTRNEW.ATTRIBUTE_6 = AMAP

      ;==> ADD THE ATTRIBUTES TO NEW SHAPEFILE.
      SHP->SETATTRIBUTES, 0, ATTRNEW
      S = MAPS_READ('SMI')
      COPY = REPLICATE(1B,[S.PX,S.PY])
      MAPS_SET,'SMI'
      ERASE,BACKGROUND
      TV,COPY
      TARGET = 26 
      ;===> PLOT THE LME FROM THE SHP FILE
      
      PLOT_SHAPE_LME,SUBAREA , COLOR=COLOR,THICK = THICK,FILL=1,VERBOSE=VERBOSE,$
        USE_LME_COLOR = 1,USE_LME_MAP = USE_LME_MAP,GET_RANGE=GET_RANGE,DO_ALL=DO_ALL,_EXTRA=_EXTRA
      
     COPY = TVRD() 
      P
      
      
      
      
      
      
      
       
;############################################################################
;     CONTOUR TO GET THE PATH_INFO FOR THE OUTLINES OF THE SUBAREA BLOBS  
;############################################################################
      CONTOUR,COPY,XSTYLE = 5,YSTYLE = 5,XMARGIN=[0,0],YMARGIN=[0,0],$
      POSITION=[0,0,1,1],C_COLOR = TARGET,CLOSED=0,$
      /PATH_DATA_COORDS,/NOERASE, PATH_INFO=PATH_INFO,$
      PATH_XY=PATH_XY,/FOLLOW
     ; IMG =TVRD() ;& SL,IMG
      
      MAPS_SET,'SMI'
      
      IF N_ELEMENTS(PATH_INFO) GE 1 THEN BEGIN
        ;===> THIN PATH_INFO TO WHERE PATH_INFO.N GE MIN_PTS
        OK =WHERE(PATH_INFO.N GE MIN_PTS AND PATH_INFO.LEVEL EQ 1,COUNT_PATH) 
        IF COUNT_PATH GE 1 THEN PATH_INFO = PATH_INFO[OK] ELSE MESSAGE,'ERROR: PATH_INFO NOT FOUND'
        STRUCT=REPLICATE({TYPE:0B, HIGH:0B, LEVEL:0, NUM:0L, VALUE:0.0,X:'',Y:''},N_ELEMENTS(PATH_INFO))
     
        ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
        FOR IN = 0,N_ELEMENTS(PATH_INFO)-1 DO BEGIN
          S = INDGEN(PATH_INFO(IN).N)
          XX = REFORM(PATH_XY(0,PATH_INFO(IN).OFFSET + S ))
          YY = REFORM(PATH_XY(1,PATH_INFO(IN).OFFSET + S ))
          XYZ = CONVERT_COORD(XX,YY,/DEVICE,/TO_DATA)
          STRUCT.TYPE=PATH_INFO(IN).TYPE
          STRUCT.HIGH=PATH_INFO(IN).HIGH_LOW
          STRUCT.LEVEL=PATH_INFO(IN).LEVEL
          STRUCT.NUM=PATH_INFO(IN).N
          STRUCT.VALUE=PATH_INFO(IN).VALUE
          STRUCT.x= ARR_2STR(REFORM(XYZ(0,*)),DELIM=';')
          STRUCT.y= ARR_2STR(REFORM(XYZ(1,*)),DELIM=';')
          LON = DOUBLE(STR_SEP(STRUCT(IN).X,';'))
          LAT = DOUBLE(STR_SEP(STRUCT(IN).Y,';'))
       ;;;   IF KEY(SHOW) THEN PLT_XY,LON,LAT,/LIN_ADD
          
          LONLAT = DBLARR(2,N_ELEMENTS(LON)) & LONLAT(0,*) = LON & LONLAT(1,*) = LAT
          ;===> CREATE STRUCTURE FOR NEW ENTITY
          ENTNEW = {IDL_SHAPE_ENTITY}
          ; DEFINE THE VALUES FOR THE NEW ENTITIES
          ENTNEW.SHAPE_TYPE = 5
          ENTNEW.BOUNDS[0] = MIN(LON)
          ENTNEW.BOUNDS[1] = MIN(LAT)
          ENTNEW.BOUNDS[2] = 0.D
          ENTNEW.BOUNDS[3] = 0.D
          ENTNEW.BOUNDS[4] = MAX(LON)
          ENTNEW.BOUNDS[5] = MAX(LAT)
          ENTNEW.BOUNDS[6] = 0.D
          ENTNEW.BOUNDS[7] = 0.D
          ENTNEW.N_VERTICES = N_ELEMENTS(LON)
          ENTNEW.VERTICES = PTR_NEW(LONLAT , /ALLOCATE_HEAP, /NO_COPY )

          ; ADD THE NEW ENTITY TO NEW SHAPEFILE
          SHP->PUTENTITY, ENTNEW

        ENDFOR;FOR _IN = 0,N_ELEMENTS PATH_INFO)-1 DO BEGIN
        ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 
        ZWIN
      ENDIF;IF N_ELEMENTS(PATH_INFO) GE 1 THEN BEGIN 
            
    
    ;===> CLOSE/DESTROY THE SHAPEFILE
    OBJ_DESTROY, SHP

    PFILE,SHP_FILE
    ;===> MAKE A MAP FROM THE SHP FILE
    MAPS_SET,'SMI'
    ERASE,BACKGROUND
    MAP_CONTINENTS,/HIRES,/COASTS, COLOR = 0
    
    READ_SHPFILE, SHP_FILE,COLOR=CODE,FILL=1,THICK=1,VERBOSE=VERBOSE,$
      GET_RANGE=GET_RANGE,TAGNAME='SUBAREA',VALUE=SUBAREA,$
      RANGE_LON = RANGE_LON, RANGE_LAT = RANGE_LAT,NORMAL=NORMAL,$
      DO_ALL = 1, AUTO=AUTO,LONS=LONS,LATS=LATS,PSYM = 1,SYMSIZE = 11,_EXTRA=_EXTRA
    ;===> ADD SUBAREA NAME AND CODE
    TXT = SUBAREA + '!CSUBAREA_CODE: ' + STRTRIM(CODE,2)
    XYOUTS,0.25,0.25,TXT,/NORMAL,CHARSIZE = 12,COLOR =  0
    IMG = TVRD()
    ZWIN
    PAL_SUBAREAS,R,G,B
    PNGFILE= DIR_REGION + REGION + '-'+ SUBAREA + '-LME.PNG'
    WRITE_PNG,PNGFILE,IMG,R,G,B    & PF,PNGFILE
    ;SHP_FILE
    
ENDFOR;FOR _CODE=0L,N_ELEMENTS(CODES)-1L DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF




END; #####################  END OF ROUTINE ################################
