; $ID:	WRITE_NC_DEMO.PRO,	2020-07-09-08,	USER-KJWH	$
; #########################################################################; 
PRO WRITE_NC_DEMO
;+
; PURPOSE:  DEMO FOR USING WRITE_NC
;
; CATEGORY: DEMO
;
;
; INPUTS: NONE
;
;
; KEYWORDS:  NONE

; OUTPUTS: DEPENDS ON THE SWITCHES SET
;
;; EXAMPLES:
;
; MODIFICATION HISTORY:
;     JUN 28, 2017  WRITTEN BY: J.E. O'REILLY
;     JUL 13, 2017  JEOR: ADD_ORIGINAL_DATA_SOURCE TO FRONTS
;     JUL 15, 2017  JEOR: MAP_OUT = 'NEC' [TO TEST STANDARD_PARALLEL OUTPUT IN WRITE_NC]
;     JUL 17, 2017  KJWH: Changed DIR_OUT to be S.DEMO + ROUTINE + SL 
;                         ADDED IMGR OF THE GRAD_CHL OUTPUT
;     JUL 19, 2017  JEOR: NAME CHANGE:  IMGR, D.SD.GRAD_CHL.IMAGE, PROD='GRAD_CHL', MAP=MAP_OUT 
;                         FILE_DELETE,OUTFILES [FOR RERUNNING DURING TESTING]
;     JUL 20, 2017  KJWH: ADDED DO_FRONTS_STATS  
;     JUL 25, 2017  JEOR: OUTPROD = 'GRAD_CHL' [TO TEST NEW LOCAL ATTRIBUTES IN THE GLOBAL FILE]
;     JUL 26, 2017  JEOR: TESTED DEMO WITH NEW LOCAL ATTRIBUTES ADDED TO GLOBAL BY FILE_NC_GLOBAL
               
;-
; #########################################################################

; **************************
  ROUTINE = 'WRITE_NC_DEMO'
; **************************
  
  SL = PATH_SEP()
  DO_IDL_DEMOS      = ''
  DO_STATS_FILE     = 'YO'
  DO_FRONTS_FILE    = ''
  DO_FRONTS_STATS   = ''

  DIR_OUT = !S.DEMO + ROUTINE + SL & DIR_TEST, DIR_OUT
  
  TEST_FILE = !S.OC + 'MODISA/L3B2/STATS/CHLOR_A-OCI/' + 'M_201404-MODISA-R2015-L3B2-CHLOR_A-OCI-STATS.SAV'

; ********************************
  IF KEY(DO_IDL_DEMOS) THEN BEGIN
; ********************************

    SWITCHES,DO_IDL_DEMOS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    
    MP = 'NES'
    APROD = 'CHLOR_A'
    
;    ; Create a file in IDL's current working directory
;    filename = dir_out + 'nc_groupdef_file.nc'
;    if exists(filename) then file_delete, filename
;    id = NCDF_CREATE(filename, /NETCDF4_FORMAT, /CLOBBER)
;    NCDF_ATTPUT, ID, 'title', 'Test netcdf4 file', /GLOBAL
;    ; Create two groups at the root level of the file
;    g1 = NCDF_GROUPDEF(id, 'group1')
;    g2 = NCDF_GROUPDEF(id, 'group2')
;    ; Create a child group inside of the two
;    ; previously-created groups
;    g11 = NCDF_GROUPDEF(g1, 'group1-sub1')
;    g21 = NCDF_GROUPDEF(g2, 'group2-sub1')
;    NCDF_CLOSE, id
;    stop
    
    
    
    
    
    
   ; D = STRUCT_READ(TEST_FILE,STRUCT=STRUCT)
    
    nc = '4'
    
    FILE = DIR_OUT + 'netcdf_'+nc+'_test.nc' ; Create the file name 
    IF EXISTS(FILE) THEN FILE_DELETE, FILE ; Remove the file
    
    PX = 50
    PY = 100
    LATS = FINDGEN(PX)*0.01+34
    LONS = FINDGEN(PY)*0.01+(-70)
    SST = CONGRID(DIST(20), PX, PY)
    TIME = 1553510205
    
       
    SD_ID = NCDF_CREATE(FILE,/CLOBBER,/NETCDF4_FORMAT) 
 
    NCDF_ATTPUT, SD_ID, 'title', 'Test netcdf' + nc + ' file', /GLOBAL, /CHAR
    NCDF_ATTPUT, SD_ID, 'ocean', 'Atlantic', /GLOBAL, /CHAR
    NCDF_ATTPUT, SD_ID, 'region', 'Northeast Shelf', /GLOBAL, /CHAR
     
    XID = NCDF_DIMDEF(SD_ID, 'x', PX) 
    YID = NCDF_DIMDEF(SD_ID, 'y', PY) 
    
    LON_ID = NCDF_VARDEF(SD_ID, 'longitude', YID, /FLOAT)
    NCDF_ATTPUT,  SD_ID, LON_ID, 'axis', 'X', /CHAR
    NCDF_ATTPUT,  SD_ID, LON_ID, 'standard_name','longitude',/CHAR
    NCDF_ATTPUT,  SD_ID, LON_ID, 'units', 'degrees_east', /CHAR
    NCDF_ATTPUT,  SD_ID, LON_ID, 'valid_max', 180.0
    NCDF_ATTPUT,  SD_ID, LON_ID, 'valid_min', -180.0
    NCDF_CONTROL, SD_ID, /ENDEF 
    NCDF_VARPUT,  SD_ID, LON_ID, LONS

    NCDF_CONTROL, SD_ID, /REDEF
    LAT_ID = NCDF_VARDEF(SD_ID, 'latitude',  XID, /FLOAT)
;    NCDF_ATTPUT,  SD_ID, LAT_ID, 'axis', 'Y'
;    NCDF_ATTPUT,  SD_ID, LAT_ID, 'standard_name','latitude'
;    NCDF_ATTPUT,  SD_ID, LAT_ID, 'units', 'degrees_north'
;    NCDF_ATTPUT,  SD_ID, LAT_ID, 'valid_max', 90.0
;    NCDF_ATTPUT,  SD_ID, LAT_ID, 'valid_min', -90.0
    NCDF_CONTROL, SD_ID, /ENDEF
    NCDF_VARPUT,  SD_ID, LAT_ID, LATS
    
NCDF_CLOSE,SD_ID  
stop
    
    NCDF_CONTROL, SD_ID, /REDEF
    NCDF_CONTROL, SD_ID, /NOFILL
    SID = NCDF_VARDEF(SD_ID, 'sst', [XID, YID], /FLOAT)
    NCDF_ATTPUT, SD_ID, SID, 'units', 'oC'
    NCDF_CONTROL, SD_ID, /ENDEF 
    NCDF_VARPUT, SD_ID, SID, SST

    TID = NCDF_DIMDEF(SD_ID, 't', 1)
    TIME_ID = NCDF_VARDEF(SD_ID, 'time', TID, /LONG)
    NCDF_ATTPUT, SD_ID, TIME_ID, 'standard_name','time'
    NCDF_ATTPUT, SD_ID, TIME_ID, 'time_origin', '1970-01-01T00:00:00'
    NCDF_ATTPUT, SD_ID, TIME_ID, 'units', 'seconds since 1970-01-01T00:00:00Z'
    NCDF_CONTROL, SD_ID, /ENDEF
    NCDF_VARPUT, SD_ID, TIME_ID, TIME
  
    NCDF_CLOSE, SD_ID 
    
    R = NCDF_PARSE(FILE)
    HELP, R, /STRUCTURE
    stop
    
    
    ; Get the full image:
    ID = NCDF_CREATE(FILE,/NETCDF4) ; Open the NetCDF file:
    
    NCDF_ATTPUT, ID, 'title', 'Test netcdf4 file', /GLOBAL
    NCDF_ATTPUT, ID, 'ocean', 'Atlantic', /GLOBAL
    NCDF_ATTPUT, ID, 'region', 'Northeast Shelf', /GLOBAL
    xid = NCDF_DIMDEF(id, 'x', 100) ; Define the X dimension.
    yid = NCDF_DIMDEF(id, 'y', 200) ; Define the Y dimension.
    
    vid0 = NCDF_VARDEF(id, 'sst', [yid, xid], /FLOAT)
    vid1 = NCDF_VARDEF(id, 'chl', [yid, xid], /FLOAT)
    
    NCDF_ATTPUT, id, vid0, 'units', UNITS('SST',/SI)
    NCDF_CONTROL, id, /ENDEF ; Put the file into data mode.
    sst = CONGRID(DIST(20), 200, 100)
    NCDF_VARPUT, id, vid0, sst
    
    NCDF_ATTPUT, id, vid1, 'units', UNITS('CHLOR_A',/SI)
    NCDF_CONTROL, id, /ENDEF ; Put the file into data mode.
    chl = CONGRID(DIST(80), 200, 100)
    NCDF_VARPUT, id, vid1, chl
    
    NCDF_CLOSE, id ; Close the NetCDF file.
    

    D = READ_NC(FILE)
    ST, D 
    WAIT, 2 & ST, D.GLOBAL
    WAIT, 2 & ST, D.SD
    WAIT, 2 & ST, D.SD.(0)
    WAIT, 2 & ST, D.SD.(1)
stop
  ENDIF

; ********************************
  IF KEY(DO_STATS_FILE) THEN BEGIN
; ********************************
    
    SWITCHES,DO_STATS_FILE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    
   ; TAGS_STAT= ['MEAN','NUM','STD','MIN','MAX']
   
   
    TEST_FILES = [!S.OC  + 'MODISA/L3B2/STATS/CHLOR_A-OCI/D8_20091225_20100101-MODISA-R2015-L3B2-CHLOR_A-OCI-STATS.SAV',$
                  !S.SST + 'MODISA/L3B2/STATS/SST-N_4UM/D8_20091225_20100101-MODISA-R2015-2KM-L3B2-SST-N_4UM-STATS.SAV',$
                  !S.SST + 'SST/MODIST/L3B2/STATS/SST-N_4UM/D8_20091225_20100101-MODIST-R2015-2KM-L3B2-SST-N_4UM-STATS.SAV',$
                  !S.SST + 'MUR/NWA/STATS/SST/D8_20091225_20100101-MUR-V04.1-NWA-SST-STATS.SAV',$
                  !S.PP + 'MODISA/L3B2/STATS/PPD-VGPM2/D8_20091225_20100101-MODISA-R2015-L3B2-PPD-VGPM2-STATS.SAV',$
                  
                  
                  
                  
                  
                  !S.OC + 'MODISA/L2/NC/A2019101171000.L2_LAC_SUB_OC',$
                  !S.OC + 'MODISA/L3B2/NC/CHL/A2019101.L3B2_DAY_CHL.nc',$
                  !S.OC + 'MODISA/L3B2/STATS/CHLOR_A-OCI/M_201901-MODISA-R2015-L3B2-CHLOR_A-OCI-STATS.SAV',$
                  !S.OC + 'MODISA/L3B2/STATS/CHLOR_A-OCI/M_201404-MODISA-R2015-L3B2-CHLOR_A-OCI-STATS.SAV',$
                  !S.OC + 'MODISA/L3B2/STATS/NANO_PERCENTAGE-HIRATA/ANNUAL_2003_2018-MODISA-R2015-L3B2-NANO_PERCENTAGE-HIRATA-STATS.SAV',$
                  !S.SST + 'MUR/L3B2/SAVE/SST/D_20020609-MUR-V04.1-1KM-L3B2-SST.SAV',$
                ;  !S.SST + 'MUR/L4/NC/20150121090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',$
                  !S.SST + 'AVHRR/L3B4/STATS/SST/A_1999-AVHRR-L3B4-SST-STATS.SAV',$
                ;  !S.SST + 'AVHRR/L3/NC/19810909024458-NCEI-L3C_GHRSST-SSTskin-AVHRR_Pathfinder-PFV5.3_NOAA07_G_1981252_night-v02.0-fv01.0.nc',$
                ;  !S.SST + 'MODIST/L2/NC/T2000057043000.L2_LAC_SST4.nc',$
                  !S.PP + 'MODISA/L3B2/STATS/PPD-VGPM2/DOY_048_2003_2019-MODISA-R2015-L3B2-PPD-VGPM2-STATS.SAV',$
                  !S.PP + 'SA/L3B2/STATS/PPD-VGPM2/MONTH_02_1998_2019-SA-R2015-L3B2-PPD-VGPM2-STATS.SAV',$
                  !S.PP + 'SA/L3B2/STATS/PPD-VGPM2/D8_20041202_20041209-SA-R2015-L3B2-PPD-VGPM2-STATS.SAV',$
                  !S.PP + 'SEAWIFS/L3B2/SAVE/PPD-VGPM2/D_20041221-SEAWIFS-R2015-2KM-L3B2-PPD-VGPM2.SAV'];,$
                ;  !S.FRONTS + 'MODISA/NES/SAVE/GRAD_CHL-BOA/D_20020721-MODISA-R2015-2KM-NES-GRAD_CHL-BOA.SAV',$
                ;  !S.FRONTS + 'AVHRR/NWA/SAVE/GRAD_SST-BOA/D_19861231-AVHRR-4KM-NWA-GRAD_SST-BOA.SAV',$
                ;  !S.FRONTS + 'SEAWIFS/NWA/STATS/GRAD_CHL-BOA/A_2005-SEAWIFS-R2015-NWA-GRAD_CHL-BOA-STATS.SAV',$
                ;  !S.OC + 'SEAWIFS/L3B2/NC/CHL/S1997281.L3B2_DAY_CHL.nc',$
                ;  !S.OC + 'OCCCI/SIN/NC/CHL/ESACCI-OC-L3S-CHLOR_A-MERGED-1D_DAILY_4km_SIN_PML_OCx-19971003-fv3.1.nc',$
                ;  !S.OC + 'MODISA/L1A/NC/A2002191170500.L1A_LAC.bz2']
   
    
  ;  S = NETCDF_INFO(TEST_FILES)
    
    PRODS_2PNG, TEST_FILES[0], MAPP='NWAGRID', DIR_OUT=DIR_OUT, PROD='CHLOR_A',/OVERWRITE
  ;  FOR N=1, NOF(TEST_FILES)-1 DO PRODS_2PNG, TEST_FILES(N), MAPP='SNEGRID', DIR_OUT=DIR_OUT
  
    WRITE_NETCDF,TEST_FILES[0],DIR_OUT=DIR_OUT,MAP_OUT='NWAGRID',TAGS_STAT=['NUM','MEAN','MED','STD'],OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,OUTFILES=OUTFILES
      
    
 ;   WRITE_NC,FILES,DIR_OUT=DIR_OUT,MAP_OUT=MAP_OUT,LONLAT=LONLAT,TAGS_STAT=TAGS_STAT,OUTPROD=OUTPROD,OVERWRITE=OVERWRITE,$
 ;     L3_GLOBAL=L3_GLOBAL,VERBOSE=VERBOSE,OUTFILES=OUTFILES
        
    
    D = READ_NC(OUTFILES)
  ;  ST, D.GLOBAL
    ST, D.SD
    STOP
    ;PLIST,D.GLOBAL.PRODUCT_INPUT_FILES
    IF STOPP THEN STOP
    ST,D.SD
    IF STOPP THEN STOP
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_TAGS(D.SD) -1 DO BEGIN
      ST,D.SD.(NTH)
      IF STOPP THEN STOP
    ENDFOR;FOR NTH = 0,N_TAGS(D.SD) -1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
    IF STOPP THEN STOP
    FILE_DELETE,OUTFILES

  ENDIF;IF KEY(DO_STATS_FILE) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||


; **********************************
  IF KEY(DO_FRONTS_FILE) THEN BEGIN
; **********************************
    PRINT,'THIS STEP:'
    PRINT," 1) READS A KIM FRONTS SAV FILE AND WRITES A NC FILE "
    PRINT," 2) READS THE NC_FILE [OUTFILES] AND DISPLAYS ITS CONTENTS"
    SWITCHES,DO_FRONTS_FILE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
    FILES = !S.FILES + "D_20120612-MODISA-R2015-2KM-NES-CHL_BOA-OCI.SAV"
    OUTPROD = 'GRAD_CHL'
    ADD_ORIGINAL_DATA_SOURCE = 1
    MAP_OUT = 'NES'
    WRITE_NC,FILES,DIR_OUT=DIR_OUT,MAP_OUT=MAP_OUT,LONLAT=LONLAT,TAGS_STAT=TAGS_STAT,OUTPROD=OUTPROD,OVERWRITE=OVERWRITE,$
      L3_GLOBAL=L3_GLOBAL,VERBOSE=VERBOSE,ADD_ORIGINAL_DATA_SOURCE=ADD_ORIGINAL_DATA_SOURCE,OUTFILES=OUTFILES
  
    D = READ_NC(OUTFILES)
    ST,D
    IF STOPP THEN STOP
    ST,D.GLOBAL
    IF STOPP THEN STOP
   
    ST,D.SD
    IF STOPP THEN STOP
    IMGR, D.SD.GRAD_CHL.IMAGE, PROD='GRAD_CHL', MAP=MAP_OUT
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_TAGS(D.SD) -1 DO BEGIN
      ST,D.SD.(NTH)
      IF STOPP THEN STOP
    ENDFOR;FOR NTH = 0,N_TAGS(D.SD) -1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    IF STOPP THEN STOP
    FILE_DELETE,OUTFILES,/VERBOSE
  ENDIF;IF KEY(DO_FRONTS_FILE) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||

; ********************************
  IF KEY(DO_FRONTS_STATS) THEN BEGIN
  ; ********************************
    PRINT,'THIS STEP:'
    PRINT," 1) READS A KIM FRONTS STATS SAV FILE AND WRITES A NC FILE WITH IMAGES FOR STATS: 'MEAN','NUM','STD','MIN','MAX'"
    PRINT," 2) READS THE NC_FILE [OUTFILES] AND DISPLAYS ITS CONTENTS"
    SWITCHES,DO_FRONTS_STATS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
    FILES = !S.FILES + "D8_20091225_20100101-MODISA-R2015-NWA-SST_BOA-4UM-STATS.SAV"
    TAGS_STAT= ['MEAN','NUM','STD','MIN','MAX']
    OUTPROD = 'GRAD_SST'
    WRITE_NC,FILES,DIR_OUT=DIR_OUT,MAP_OUT=MAP_OUT,LONLAT=LONLAT,TAGS_STAT=TAGS_STAT,OUTPROD=OUTPROD,OVERWRITE=OVERWRITE,$
      L3_GLOBAL=L3_GLOBAL,VERBOSE=VERBOSE,OUTFILES=OUTFILES
    IF STOPP THEN STOP

    D = READ_NC(OUTFILES)
    ST,D
    IF STOPP THEN STOP
    ST,D.GLOBAL
    IF STOPP THEN STOP
    PLIST,D.GLOBAL.PRODUCT_INPUT_FILES
    IF STOPP THEN STOP
    ST,D.SD
    IF STOPP THEN STOP
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_TAGS(D.SD) -1 DO BEGIN
      ST,D.SD.(NTH)
      IF STOPP THEN STOP
    ENDFOR;FOR NTH = 0,N_TAGS(D.SD) -1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
    IMGR, D.SD.GRAD_SST.IMAGE, PROD='GRAD_SST', MAP=MAP_OUT
  
    IF STOPP THEN STOP
    FILE_DELETE,OUTFILES,/VERBOSE

  ENDIF;IF KEY(DO_FRONTS_STATS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||


END; #####################  END OF ROUTINE ################################
