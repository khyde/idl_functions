; $ID:	STRUCT_DUPS.PRO,	2020-06-30-17,	USER-KJWH	$
FUNCTION STRUCT_DUPS, STRUCT, TAGNAMES=TAGNAMES, SUBS=SUBS, DUPS_REMOVED=DUPS_REMOVED
;####################################################################################3 
;+
;	THIS FUNCTION IDENTIFIES DUPLICATES IN A STRUCTURE BASED ON ALL OR ANY SET OF THE TAGNAES
;
; SYNTAX:
;	RESULT = STRUCT_DUPS(STRUCT)
;
; OUTPUT:
;		THE DUPLICATES
;
; ARGUMENTS:
; 	STRUCT:	STRUCTURE

; KEYWORDS:
;		TAGNAMES: THE TAGNAME(S) TO USE TO CHECK FOR DUPS IN THE STRUCTURE
;
; EXAMPLE:

; NOTES:
;		THIS ROUTINE EXPECTS THE INPUT STRUCT TO BE SIMPLE (SPREADSHEET OR DATABASE TYPE) STRUCTURES.
;

; HISTORY:
;		WRITTEN MARCH 19, 2005 BY J.O'REILLY, 28 TARZWELL DRIVE, NMFS, NOAA 02882 (JAY.O'REILLY@NOAA.GOV)
;		JUN 21,2014,JOR, FORMATTING, & UPDATED CODE, REMOVED ERROR KEYWORD
;-
;####################################################################################3 

;*************************
ROUTINE_NAME='STRUCT_DUPS'
;*************************

; ===> GET INFORMATION ON STRUCT
  SIZE_STRUCT	=	SIZE(STRUCT,/STRUCT)
  NAMES    		= TAG_NAMES(STRUCT)
  N_TAGS  		= N_TAGS(STRUCT)
  N 					= SIZE_STRUCT.N_ELEMENTS

; ===> MAKE SURE STRUCT IS A STRUCTURES
IF SIZE_STRUCT.TYPE  NE 8 THEN BEGIN
  PRINT,'ERROR: STRUCT MUST BE STRUCTURES'
  ERROR = 1 & RETURN, -1
ENDIF;IF SIZE_STRUCT.TYPE  NE 8 THEN BEGIN

;	===> ENSURE THAT THE TAGNAME(S) ARE PROVIDED
	IF NONE(TAGNAMES) THEN TAGNAMES = NAMES

;	===> ENSURE THAT THE TAGNAMES ARE PRESENT IN THE STRUCTURE
POS_TAG =WHERE_MATCH(NAMES,TAGNAMES,COUNT)

IF COUNT NE N_ELEMENTS(TAGNAMES) THEN BEGIN
  ERROR = 'ERROR: THE TAGNAMES PROVIDED MUST BE PRESENT IN THE STRUCTURE'
	PRINT,ERROR
	RETURN,ERROR
ENDIF;IF COUNT NE N_ELEMENTS(TAGNAMES) THEN BEGIN


;	===> NUMBER OF KEY TAGNAMES USED TO JOIN BOTH STRUCTURES
N_KEYS = N_ELEMENTS(POS_TAG)

;	===> MAKE UP KEYS TO USE IN JOINING STRUCTURES
KEY = ''

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0L,N_KEYS-1L DO BEGIN
	STR 	= STRTRIM(STRUCT.(POS_TAG[NTH]),2)
;		===> DETERMINE MAXIMUM LENGTH OF STRINGS SO THEY MAY PADDED WITH LEADING ZEROS
;				 THIS ENSURES THAT THE FINAL RETURNED STRUCTURE WILL BE PROPERLY SORTED BY VALUES
	LEN 	= STRTRIM(MAX(STRLEN(STR)), 2)
	FMT   = '(A'+LEN+')'
	STR   = STR_SPACE2ZERO(STRING(STR,FORMAT=FMT))
	KEY = KEY + STR + '$'
ENDFOR;FOR NTH = 0L,N_KEYS-1L DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


; ===> FIND SETS (DUPLICATES)
 	SETS= WHERE_SETS(KEY)

OK=WHERE(SETS.N GE 2,COUNT)
IF COUNT GE 1 THEN BEGIN
	SUBS = SETS.FIRST ; WHERE_SETS_SUBS(SETS[OK])
	DUPSETS = SETS[OK]
	FSUBS = DUPSETS.FIRST
	ASUBS = WHERE_SETS_SUBS(DUPSETS)
	SOK = WHERE_MATCH(FSUBS,ASUBS,COMPLEMENT=COMPLEMENT)
	DUPS_REMOVED = ASUBS[COMPLEMENT]
	RETURN, STRUCT[SUBS]
ENDIF ELSE BEGIN
	PRINT,'NO DUPLICATES FOUND'
	RETURN,STRUCT
	SUBS = SETS.FIRST
	DUPS_REMOVED = []
ENDELSE;IF COUNT GE 1 THEN BEGIN

 END; #####################  END OF ROUTINE #############################
