; $ID:	PHYTO_COMMUNITY_SAVE_MAKE.PRO,	2020-07-08-15,	USER-KJWH	$

	PRO PHYTO_COMMUNITY_SAVE_MAKE,DIR_IN=DIR_IN,DIR_OUT=DIR_OUT,DATE_RANGE=DATE_RANGE,ALGS=ALGS,PERIOD_CODE=PERIOD_CODE,$
	    MAP_OUT=MAP_OUT,TARGET=TARGET,REVERSE_FILES=REVERSE_FILES,VERBOSE=VERBOSE,OVERWRITE=OVERWRITE

;+
; NAME:
;		PHYTO_COMMUNITY_SAVE_MAKE
;
; PURPOSE:;
;		This procedure creates phytoplankton community files using the PAN phytoplankton community algorithm
;
; CATEGORY:
;		CATEGORY
;
; CALLING SEQUENCE:
;
;		PIGMENTS_SAVE_MAKE, Parameter1, Parameter2
;
; INPUTS:
;		Parm1:	Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;		Parm2:	Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;		KEY1:	Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
;
; OUTPUTS:
;		This procedure creates pigment save files 
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			SEP 7,  2011 - K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;			APR 3,  2014 - KJWH: Fixed bug when looking for files within a specific date range (now go to DONE if no files are found within the range)
;			JAN 16, 2015 - KJWH: Updated and streamlined code
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'PHYTO_COMMUNITY_SAVE_MAKE'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
	SL = DELIMITER(/PATH)  
  IF N_ELEMENTS(PERIOD_CODE) NE 1 THEN _PERIOD_CODE ='S'        ELSE _PERIOD_CODE=PERIOD_CODE
  IF N_ELEMENTS(TARGET)      NE 1 THEN _TARGET      = ''        ELSE _TARGET=TARGET
  IF N_ELEMENTS(ALGS)        GE 1 THEN _ALGS        = ALGS      ELSE _ALGS = 'PAN'
  IF N_ELEMENTS(SATELLITE)   EQ 1 THEN SAT          = SATELLITE ELSE SAT = ''
  IF N_ELEMENTS(DIR_OUT)     LT 1 THEN DIR_OUT      = DIR_IN + 'PHYTO_COMMUNITY' + SL 
  IF N_ELEMENTS(DIR_IN) LT 1 THEN STOP
  
  FA_IN = FILE_PARSE(DIR_IN)
  IF FA_IN[0].SUB EQ 'STATS' THEN MATH = '-MEAN' ELSE MATH = ''
  FILES = FILE_SEARCH(DIR_IN + 'CHLA-PAN' + SL + _PERIOD_CODE + '_*' + _TARGET + '*-CHLA-PAN' + MATH + '.SAV*')
  FILES = DATE_SELECT(FILES,DATE_RANGE[0],DATE_RANGE[1])  
  IF FILES EQ [] THEN GOTO,DONE
  IF KEYWORD_SET(REVERSE_FILES) THEN FILES = REVERSE(FILES)
    
  FOR FTH = 0L,N_ELEMENTS(FILES)-1L DO BEGIN
    FILE_CHLA=FILES(FTH) 
    FP = PARSE_IT(FILE_CHLA,/ALL)   
    IF NONE(MAP_OUT) THEN MAP_OUT = [] ELSE BEGIN 
      MS  = MAPS_SIZE(MAP_OUT)
      IF NONE(PX_OUT) THEN PX_OUT = MS.PX
      IF NONE(PY_OUT) THEN PY_OUT = MS.PY 
    ENDELSE  
    IF MAP_OUT EQ [] THEN MP = FP.MAP ELSE MP = MAP_OUT
    
    FILE_CHLB  = REPLACE(FILE_CHLA,'CHLA-PAN','CHLB-PAN')  ;   ===> Get matching CHLB file
    FILE_CHLC  = REPLACE(FILE_CHLA,'CHLA-PAN','CHLC-PAN')  ;   ===> Get matching CHLC file
    FILE_FUCO  = REPLACE(FILE_CHLA,'CHLA-PAN','FUCO-PAN')  ;   ===> Get matching FUCO file
    FILE_PERID = REPLACE(FILE_CHLA,'CHLA-PAN','PERID-PAN') ;   ===> Get matching PERID file
    FILE_ZEA   = REPLACE(FILE_CHLA,'CHLA-PAN','ZEA-PAN')   ;   ===> Get matching ZEA file
    FILE_ALLO  = REPLACE(FILE_CHLA,'CHLA-PAN','ALLO-PAN')  ;   ===> Get matching ALLO file
    FILE_DIA   = REPLACE(FILE_CHLA,'CHLA-PAN','DIA-PAN')   ;   ===> Get matching DIA file
    FILE_LUT   = REPLACE(FILE_CHLA,'CHLA-PAN','LUT-PAN')   ;   ===> Get matching LUT file
    FILE_NEO   = REPLACE(FILE_CHLA,'CHLA-PAN','NEO-PAN')   ;   ===> Get matching NEO file
    FILE_VIOLA = REPLACE(FILE_CHLA,'CHLA-PAN','VIOLA-PAN') ;   ===> Get matching VIOLA file
   
    INFILES = [FILE_CHLA,FILE_CHLB,FILE_CHLC,FILE_FUCO,FILE_PERID,FILE_ZEA,FILE_ALLO,FILE_DIA,FILE_LUT,FILE_NEO,FILE_VIOLA]
    IF MIN(FILE_TEST(INFILES)) EQ 0 THEN BEGIN
      LI, ['NEED: ' + INFILES[WHERE(FILE_TEST(INFILES) EQ 0)] + ' TO RUN PAN PHYTOPLANKTON COMMUNITY ALGORITHM'], /NOSEQ
 file_delete, infiles[where(file_test(infiles) eq 1)]    
      CONTINUE
    ENDIF
    
    PHYTOS = ['TCHL_A','BROWN_PERCENTAGE','BROWN_ALGAE','DIATOM','DIATOM_PERCENTAGE','DINOFLAGELLATE_A','DINOFLAGELLATE_B','DINOFLAGELLATE','DINOFLAGELLATE_PERCENTAGE','CHLOROPHYTE',$
              'CRYPTOPHYTE','CRYPTOPHYTE_PERCENTAGE','CYANOBACTERIA','GREEN_ALGAE','GREEN_PERCENTAGE','HAPTOPHYTE_A','HAPTOPHYTE_B','PRASINOPHYTE_A','PRASINOPHYTE_B','PROCHLOROPHYTE',$
              'MICRO','MICRO_PERCENTAGE','NANO','NANO_PERCENTAGE','PICO','PICO_PERCENTAGE','NANOPICO','NANOPICO_PERCENTAGE']
    SAVEFILES = []
    FIRST_NAME = FP.FIRST_NAME
    STAT = FP.STAT
    IF STAT NE '' THEN FIRST_NAME = REPLACE(FIRST_NAME,'-'+STAT,'')
    IF STAT NE '' THEN STAT = '-'+STAT
    DIR_TEST,DIR_OUT+PHYTOS+'-'+_ALGS+SL
    FOR PTH = 0L, N_ELEMENTS(PHYTOS)-1 DO SAVEFILES = [SAVEFILES,DIR_OUT+PHYTOS(PTH)+'-'+_ALGS+SL+REPLACE(FIRST_NAME,[FP.MAP,STRUPCASE('CHLA-PAN')],[MP,PHYTOS(PTH)])+'-'+_ALGS+STAT+'.SAVE']                        
   
    IF FILE_MAKE(INFILES,SAVEFILES,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
    PRINT, 'Creating phytoplankton data for ' + FP.PERIOD + ' - File ' + NUM2STR(FTH+1) + ' out of ' + NUM2STR(N_ELEMENTS(FILES)) + ' (' + NUM2STR(FLOAT(FTH)/FLOAT(N_ELEMENTS(FILES))*100.,DECIMALS=2) + '%)'
    
    DATA_CHLA  = STRUCT_SD_READ(FILE_CHLA, MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the CHLA file 
    DATA_CHLB  = STRUCT_SD_READ(FILE_CHLB, MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the CHLB file 
    DATA_CHLC  = STRUCT_SD_READ(FILE_CHLC, MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the CHLC file 
    DATA_FUCO  = STRUCT_SD_READ(FILE_FUCO, MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the FUCO file 
    DATA_PERID = STRUCT_SD_READ(FILE_PERID,MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the PERID file 
    DATA_ZEA   = STRUCT_SD_READ(FILE_ZEA,  MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the ZEA file 
    DATA_ALLO  = STRUCT_SD_READ(FILE_ALLO, MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the ALLO file 
    DATA_DIA   = STRUCT_SD_READ(FILE_DIA,  MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the DIA file 
    DATA_LUT   = STRUCT_SD_READ(FILE_LUT,  MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the LUT file 
    DATA_NEO   = STRUCT_SD_READ(FILE_NEO,  MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the NEO file 
    DATA_VIOLA = STRUCT_SD_READ(FILE_VIOLA,MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT)  ;   ===> Read the VIOLA file 
        
    MISSING=MISSINGS(DATA_CHLA)
  
;   ***** LOOP THROUGH ALGORITHMS *****
    FOR NTH = 0L, N_ELEMENTS(_ALGS)-1 DO BEGIN
      P_ALG = _ALGS[NTH]          
      IF P_ALG EQ 'PAN' THEN BEGIN      
        STRUCT = PHYTO_COMMUNITY_PAN(CHLA=DATA_CHLa,CHLB=DATA_CHLb,CHLC=DATA_CHLc,FUCO=DATA_fuco,PERID=DATA_perid,ZEA=DATA_zea,ALLO=DATA_allo,DIA=DATA_dia,LUT=DATA_lut,NEO=DATA_neo,VIOLA=DATA_viola,ERROR=ERROR, ERR_MSG=ERR_MSG, MISSING=missing,VERBOSE=verbose)
        IF STRUCT EQ [] THEN CONTINUE
      ENDIF
      
      FOR PTH = 0L, N_ELEMENTS(PHYTOS)-1 DO BEGIN    
        FIRST_NAME = FP.FIRST_NAME & STAT = FP.STAT
        IF STAT NE '' THEN BEGIN & FIRST_NAME = REPLACE(FIRST_NAME,'-'+STAT,'') & IF STAT NE '' THEN STAT = '-'+STAT & ENDIF
        SAVEFILE = DIR_OUT+PHYTOS(PTH)+'-'+_ALGS+SL+REPLACE(FIRST_NAME,[FP.MAP,STRUPCASE('CHLA-PAN')],[MP,PHYTOS(PTH)])+'-'+_ALGS+STAT+'.SAVE'                      
        IF FILE_MAKE(INFILES,SAVEFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE 
        POS = WHERE(TAG_NAMES(STRUCT) EQ PHYTOS(PTH),COUNT) & IF COUNT EQ 0 THEN STOP             
        STRUCT_SD_WRITE,SAVEFILE,PROD=PHYTOS(PTH), ALG=P_ALG,IMAGE=STRUCT.(POS),MISSING_CODE=MISSINGS(DATA_CHLA), $
                      PERIOD=PERIOD, SENSOR=FP.SENSOR, SATELLITE=FP.SATELLITE,$
                      MAP=MP,INFILE=INFILES,NOTES='',ERROR=ERROR
      ENDFOR
      GONE,STRUCT
    ENDFOR        
    GONE,DATA_CHLA
    GONE,DATA_CHLB
    GONE,DATA_CHLC
    GONE,DATA_FUCO
    GONE,DATA_PERID
    GONE,DATA_ZEA
    GONE,DATA_ALLO
    GONE,DATA_DIA
    GONE,DATA_LUT
    GONE,DATA_NEO
    GONE,DATA_VIOLA
  ENDFOR
  DONE:    
   
END; #####################  End of Routine ################################
