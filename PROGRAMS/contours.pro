; $ID:	CONTOURS.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;;#############################################################################################################
	FUNCTION CONTOURS,DATA_, BYT = BYT,PROD = PROD,MAPP=MAPP, MED_WIDTH = MED_WIDTH,$
	                 MIN_VALUE= MIN_VALUE,MAX_VALUE= MAX_VALUE,PLAIN=PLAIN,$
                  LEVELS = LEVELS,C_COLORS = C_COLORS ,C_ANNOTATION=C_ANNOTATION,NO_ANNOTATION=NO_ANNOTATION,$
                 C_CHARSIZE=C_CHARSIZE ,C_CHARTHICK= C_CHARTHICK ,C_THICK = C_THICK ,C_PLACES= C_PLACES,$
                 STRUCT=STRUCT,MIN_PTS=MIN_PTS

; PURPOSE: THIS FUNCTION CONTOURS A 2-D DATA ARRAY AND RETURNS EITHER:
;          A BYTE-SCALED 2-D IMAGE ARRAY, OR 
;          A STRUCTURE WITH ALL THE CONTOUR VECTORS [LINE SEGEMENTS AS LONS AND LATS]
; 
; CATEGORY:	CONTOURING;		 
;
; CALLING SEQUENCE: RESULT = CONTOURS(DATA_,BYT=BYT,MAPP=MAPP)
;
; INPUTS.......... DATA_ GEOPHYSICAL 2-D DATA ARRAY [REQUIRED]
;		
; KEYWORD PARAMETERS:
;     BYT.......... BYTE-SCALED IMAGE OF THE DATA_ [OPTIONAL IF PROD PROVIDED THEN BYT WILL BE MADE USING PRODS_2BYTE]
;     PROD......... NAME OF STANDARD PROD FOR THE DATA_ [NEEDED WHEN  BYT IS NOT PROVIDED]
;     MAPP......... STANDARD MAP NAME [NEC,NES, ETC.]-[REQUIRED IF WANT OUTPUT IN STRUCT IN LON,LAT UNITS]
;     MED_WIDTH.... WIDTH IN PIXELS TO USE FOR THE MEDIAN OF THE DATA_ [DEFAULT = 9]
;     MIN_VALUE.... DATA POINTS WITH VALUES ABOVE THIS VALUE ARE IGNORED (I.E., TREATED AS MISSING DATA) WHEN CONTOURING 
;     MAX_VALUE.... DATA POINTS WITH VALUES GREATER THAN THIS VALUE ARE IGNORED (I.E., TREATED AS MISSING DATA) WHEN CONTOURING
;     ;===> ....... SEE THE CONTOUR PROCEDURE FOR FOLLOWING KEYWORDS:
;     LEVELS....... DATA CONTOUR LEVELS [REQUIRED]
;     C_COLORS..... CONTOUR COLORS FOR EACH LEVELS 
;     C_ANNOTATION. ANNOTATE CONTOUR WITH USER INPUT LABELS FOR EACH LEVELS]
;     NO_ANNOTATION.DO NOT ANNOTATE/LABEL CONTOURS
;     C_CHARSIZE... SIZE FOR CONTOUR ANNOTATIONS
;     C_CHARTHICK.. THICKNESS OF ANNOTATION LABELS
;     C_THICK...... THICKNESS OF CONTOURS
;     C_PLACES..... NUMBER OF DECIMAL PLACES IN THE CONTOUR LABELS [FORCES LABELING VIA C_ANNOTATION]
;     PLAIN........ RETURNS A WHITE IMAGE WITH JUST THE BLACK CONTOURS

;     
;     STRUCT....... RETURN A STRUCTURE WITH THE CONTOUR VECTORS [INSTEAD OF A BYTE ARRAY
;     MIN_PTS .... IF /STRUCT IS SET THEN THE MINIMUM NUMBER OF POINTS IN A CONTOUR TO KEEP [LESS THAN THIS NUMBER WILL BE SKIPPED]
;     
; OUTPUTS: CONTOURS BASED ON THE DATA_ ARE APPLIED TO THE INPUT BYT IMAGE 
;		 
;; EXAMPLES:
;           B = CONTOURS()
;  
;	PROCEDURE:
;	   1) INPUT THE 2-D ARRAY OF GEOPHYSICAL DATA_ AND ITS BYTE-SCALED IMAGE (BYT)
;	   2) THE DATA_ ARE SMOOTHED [MDATA] USING A MEDIAN FILTER [TO ENHANCE CONTINUITY OF CONTOURS AND SUPPRESS NOISE]
;    3) THE BYT IMAGE IS DISPLAYED IN A ZWIN AND THE MDATA ARE CONTOURED AT EACH LEVEL IN LEVELS
;    4) CONTOURS ARE OVERLAYED ON THE INPUT BYT IMAGE
;    5) WHICH IS RETURNED BY THIS FUNCTION
;  
; NOTES:
;   IF BYT IS NOT PROVIDED THEN IT IS GENERATED FROM DATA_ USING PROD AND PRODS_2BYTE 
;   IF CONTOURS ARE TOO NOISY THEN INCREASE THE VALUE OF MED_WIDTH
;   
;    
; MODIFICATION HISTORY:
;			WRITTEN SEP 08, 2013 J.O'REILLY [ELEMENTS TAKEN FROM MAPS_CONTOUR AND MAP_ADD_CONTOUR]
;			SEP 09,2017  JEOR: IF NONE(BYT) AND KEY(PROD) THEN  BYT = PRODS_2BYTE(DATA_,PROD=PROD)
;			SEP 10,2017, JEOR: ADDED KEY C_PLACES AND C_ANNOTATION
;			SEP 12,2017, JEOR: IF NONE(C_COLORS) THEN C_COLORS = INTERLEAVE(REPLICATE(0,NOF(LEVELS)),REPLICATE(255,NOF(LEVELS)))
;     FEB 20,2017, JEOR: ADDED KEY STRUCT AND CASE BLOCK AND RELATED CODE, AUTO LEVELS,KEY PLAIN
;     MAY 22,2018, JEOR: ADDED CASE BLOCK FOR STRUCT
;     MAY 24,2018, JEOR: RENAMED KEYS TO AGREE WITH THOSE IN IDL'S CONTOUR PROCEDURE
;			
;#################################################################################
;-
;*********************
ROUTINE  = 'CONTOURS'
;*********************
IF NONE(DATA_) THEN MESSAGE,'ERROR: DATA_ ARE REQUIRED'
IF NONE(LEVELS) THEN MESSAGE,'ERROR: LEVELS ARE REQUIRED'
IF NONE(C_PLACES) THEN C_PLACES = 2
C_ANNOTATION = ROUNDS(LEVELS,C_PLACES)
;===> DEFAULTS
IF NONE(MED_WIDTH)     THEN MED_WIDTH = 11
IF NONE(C_CHARSIZE)    THEN C_CHARSIZE = 1.75
IF NONE(C_CHARTHICK)   THEN C_CHARTHICK = 2.0
IF NONE(C_THICK)       THEN C_THICK = 3.0
IF NOF(C_THICK) EQ 1 THEN  C_THICK = REPLICATE(C_THICK,NOF(LEVELS))
IF NONE(MIN_PTS) THEN MIN_PTS = 30
;LABEL EVERY CONTOUR LEVEL
IF NONE(C_LABELS)     THEN C_LABELS    = REPLICATE(1,NOF(LEVELS))
IF KEY(NO_ANNOTATION) THEN begin
  GONE,C_ANNOTATION
  C_LABELS(*) = 0
ENDIF;IF KEY(NO_ANNOTATION) THEN begin

  

IF NONE(C_LINESTYLE)  THEN C_LINESTYLE = 0
IF NOF(C_LINESTYLE) EQ 1 THEN  C_LINESTYLE = REPLICATE(C_LINESTYLE,NOF(LEVELS))
;DEFAULT IS TO ALTERNATE BETWEEN BLACK & WHITE [IF NONE(C_COLORS)]
IF NONE(C_COLORS)     THEN  C_COLORS = 0 ;INTERLEAVE(REPLICATE(0,NOF(LEVELS)),REPLICATE(255,NOF(LEVELS)))
IF NOF(C_COLORS) EQ 1 THEN  C_COLORS = REPLICATE(C_COLORS,NOF(LEVELS))

;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CASE KEY(STRUCT) OF
  0: BEGIN ; RETURN BYTE IMAGE
    IF NONE(BYT) AND KEY(PROD) THEN  BYT = PRODS_2BYTE(DATA_,PROD=PROD)
    ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    
    ;===> CHANGE MISSING DATA TO NANS
    OK = WHERE(DATA_ EQ MISSINGS(DATA_),COUNT)
    IF COUNT GE 1 THEN DATA_(OK) = MISSING_2NAN(DATA_(OK))
    
    ;===> SMOOTH DATA_ FOR CLEARER,CONTIGOUS AND LESS NOISY CONTOURS
    MDATA = MEDIAN(DATA_,MED_WIDTH)
    DATA_RANGE=MINMAX(MDATA,/FIN)
    
    IF NONE(MIN_VALUE) THEN MIN_VALUE = DATA_RANGE[0] 
    IF NONE(MAX_VALUE) THEN MAX_VALUE = DATA_RANGE[1] 
    ;################################################################################################################################################################################

    ;===> BLACK CONTOURS AGAINST A WHITE BACKGROUND?
    IF KEY(PLAIN) THEN BEGIN
      BYT(*) = 255
      C_COLORS(*) = 0      
    ENDIF;IF KEY(PLAIN) THEN BEGIN
    
    ;===> DISPLAY BYT IN THE Z WINDOW BUT COUNTOUR THE MDATA  
    ;     [/NOERASE MEANS THAT THE CONTOURS ARE DRAWN ON THE BYT IMAGE]
    ZWIN, BYT
    CONTOUR,MDATA,XSTYLE=5,YSTYLE=5,XMARGIN=[0,0],POSITION=[0,0,1,1],/NOERASE,$
           LEVELS =LEVELS,C_LINESTYLE = C_LINESTYLE ,C_COLORS = C_COLORS,$
           MIN_VALUE=MIN_VALUE,MAX_VALUE = MAX_VALUE,$
           C_CHARSIZE= C_CHARSIZE,C_THICK = C_THICK,C_LABELS=C_LABELS,C_ANNOTATION=C_ANNOTATION
           
    BYT=TVRD()
    ZWIN
    RETURN,BYT  
END;0 
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

1: BEGIN ; RETURN A STRUCT WITH CONTOURS AS LON,LAT VECTORS
CONTOUR,DATA_,XSTYLE = 5,YSTYLE = 5,XMARGIN=[0,0],YMARGIN=[0,0],$
  POSITION=[0,0,1,1],C_COLOR = TARGET,CLOSED=0, LEVELS =LEVELS,$
  /PATH_DATA_COORDS,/NOERASE, PATH_INFO=PATH_INFO,$
  PATH_XY=PATH_XY,/FOLLOW
 
IF N_ELEMENTS(PATH_INFO) EQ 0 THEN RETURN,'ERROR: NO CONTOURS FOUND'
;===> THIN PATH_INFO TO WHERE PATH_INFO.N GE MIN_PTS
;     KIM WE NEED TO BETTER UNDERSTAND THE TAGS IN PATH_INFO [TYPE,HIGH_LOW, LEVEL,ETC.] TO SELECT CONTOURS OF INTEREST
;     NOT SURE IF FOLLOWING CRITERIA ARE BEST???
OK =WHERE(PATH_INFO.N GE MIN_PTS AND PATH_INFO.TYPE EQ 1,COUNT_PATH)
IF COUNT_PATH GE 1 THEN PATH_INFO = PATH_INFO[OK] ELSE MESSAGE,'ERROR: PATH_INFO NOT FOUND'
STRUCT=REPLICATE({TYPE:0B, HIGH_LOW:0B, LEVEL:0, N:0L, VALUE:0.0,LON:'',LAT:''},N_ELEMENTS(PATH_INFO))

;===> SET UP MAP PROJECTION
MAPS_SET,MAPP
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0, (N_ELEMENTS(PATH_INFO) - 1 ) DO BEGIN
  S = INDGEN(PATH_INFO[NTH].N)
  XX = REFORM(PATH_XY(0,PATH_INFO[NTH].OFFSET + S ))
  YY = REFORM(PATH_XY(1,PATH_INFO[NTH].OFFSET + S ))
  XYZ = CONVERT_COORD(XX,YY,/DEVICE,/TO_DATA)
  STRUCT[NTH].TYPE=PATH_INFO[NTH].TYPE
  STRUCT[NTH].HIGH_LOW=PATH_INFO[NTH].HIGH_LOW
  STRUCT[NTH].LEVEL=PATH_INFO[NTH].LEVEL
  STRUCT[NTH].N=PATH_INFO[NTH].N
  STRUCT[NTH].VALUE=PATH_INFO[NTH].VALUE
  STRUCT[NTH].LON= ARR_2STR(REFORM(XYZ(0,*)),DELIM=';')
  STRUCT[NTH].LAT= ARR_2STR(REFORM(XYZ(1,*)),DELIM=';')
ENDFOR;FOR NTH = 0, (N_ELEMENTS(PATH_INFO) - 1 ) DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ZWIN
  RETURN, STRUCT
END;1
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

ENDCASE;CASE KEY(STRUCT) OF
;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
	
END; #####################  END OF ROUTINE ################################
