; $ID:	PNGS_MAKE_FRONTS.PRO,	2021-04-15-17,	USER-KJWH	$
;############################################################################
  PRO PNGS_MAKE_FRONTS, FILES, MAP_OUT=MAP_OUT,PRODS=PRODS, IMGPRODS=IMGPRODS, LOG=LOG, DIR_OUT=DIR_OUT, DELAY=DELAY, IMGROT=IMGROT, BUFFER=BUFFER, COMPOSITE=COMPOSITE, WINSCALE=WINSCALE, OVERWRITE=OVERWRITE
;
; NAME:
;      PNGS_MAKE_FRONTS (BELKIN O'REILLY ALGORITHM FOR FRONT DETECTION)
;
; PURPOSE:
;      THIS PROCEDURE GENERATES A COMPOSITE PNG FILE FOR BOASNRA SAVE FILES
;
; CATEGORY:
;      EDGE DETECTION
;
; CALLING SEQUENCE:
;      PNGS_MAKE_FRONTS, FILES, DIR_OUT=DIR_OUT 
;
; INPUTS:
;      FILES:   THE FULL PATH AND FILE NAMES OF THE INPUT IMAGES
;      DIR_OUT: FULL PATH OF THE OUTPUT DIRECTORY
;
; KEYWORD PARAMETERS:
;      DIR_OUT: DIRECTORY FOR WRITING OUTPUT FILES AFTER BOA and SNRA          
;      IMGROT: VALUE TO INPUT TO ROTATE(), DEFAULT=7  
;      COMPOSITE: CREATE COMPOSITE IMAGES
;      WINSCALE:  HOW MUCH TO SCALE THE IMAGE BY WHEN CREATING A NEW IMAGE WINDOW
;      OVERWRITE: OVERWRITE THE OUTPUT FILE IF IT ALREADY EXISTS (OVERWRITE = 1)
;      
; OUTPUTS:
;      A PNG COMPOSITE FILE INCLUDING A MAP OF THE PIXELS THAT WERE FILTERED (REMOVED) BY ORIGINAL IMAGE, MF3_1D_5PT, GRAD_MAG, GRAD_X, GRAD_Y, GRAD_DIR 
;   
; RESTRICTIONS:
;      INPUT FILES MUST BE BOASNRA SAVEFILES
;       
; REFERENCE:
;      BELKIN, I.M., O'REILLY, J.E., 2009. AN ALGORITHM FOR OCEANIC FRONT DETECTION IN CHLOROPHYLL AND SST SATELLITE IMAGERY.
;        JOURNAL OF MARINE SYSTEMS 78(3), 319-326., DOI: 0.1016/J.JMARSYS.2008.11.018 
;   
; PROCEDURE:
;      SAVEFILES MUST BE PROVIDED
;      LOCAL PROGRAMS CALLED (MUST BE IN YOUR CURRENT IDL LOCAL PROGRAMS DIRECTORY ):
;      FILE_PARSE  (PARSES ELEMENTS OF THE FILE NAME)
;      PAL_SW3 (A RAINBOW PALETTE PROGRAM USED TO MAKE THE GRAD_MAG PNG IMAGE FILE).
;      PAL_NESW(A RAINBOW PALETTE PROGRAM USED TO MAKE THE GRAD_DIR PNG IMAGE FILE). 
;
; EXAMPLES:
;
; MODIFICATION HISTORY:
;    Written by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)   
;    Mar 11, 2015 - KJWH: Removed ITERMF images because they are no longer being produced by FRONTS_BOA   
;    May 12, 2016 - KJWH: Removed MASK and FILTERED images and now creating a 4 x 1 composite
;                         Added colorbars to the composite
;    May 13, 2016 - KJWH: Fixed the DIR_OUT       
;    Jun 20, 2016 - KJWH: Added IMGROT to input into ROTATE()    
;    Aug 30, 2016 - KJWH: Added an option to write out a single image based on the PROD within the FRONTS.SAV file        
;    Nov 08, 2016 - KJWH: Removed ERROR keyword
;                         Updated GRAD_MAG_RATIO to GRAD_CHL in the individual file section.  Still need to check the rest of the program.       
;                         Added IMGPROD for the PRODS_2BYTE and COLORBAR product in the individual file section.  Still need to check the rest of the program. 
;    Nov 09, 2016 - KJWH: Added LOG keyword         
;    Nov 23, 2016 - KJWH: Updated IMGPROD info for the monthly and annual composites     
;    Mar 29, 2016 - KJWH: Now plotting the dialated cloud images in black on the Median Filtered image       
;    May 10, 2017 - KJWH: Added MAP_OUT keyword         
;                                                                                                                                                                                                          
; *******************************
  ROUTINE_NAME = 'PNGS_MAKE_FRONTS'
; *******************************
  
  DASH=DELIMITER(/DASH)
  SL=PATH_SEP()
 
  ; ===> CONSTANTS
  BACKGROUND_COLOR = 255
  LAND_COLOR       = 252
  MASK_COLOR       = 0
  FONT_SIZE        = 12
  CB_Y_PLUS        = 0.008 ; EXTRA VERTICAL ROOM FOR COLORBAR
  IF NONE(DELAY) THEN DELAY = 0
  IF NONE(BUFFER) THEN BUFFER = 1
  IF NONE(IMGROT) THEN IMGROT = 0
  IF NONE(COMPOSITE) THEN COMPOSITE = 0
  IF NONE(WINSCALE) THEN WINSCALE = 0.5
  IF NONE(PRODS) THEN PRODS = 'GRAD_CHL'

  IF NONE(FILES) THEN FILES = DIALOG_PICKFILE(TITLE='Pick files') 
  
; ===> MAKE DAILY OR MONTHLY COMPOSITES  
  IF KEY(COMPOSITE) THEN BEGIN
    FP = PARSE_IT(FILES,/ALL)
    IF SAME(FP.PERIOD_CODE) EQ 0 THEN MESSAGE, 'ERROR: All files must have the same PERIOD_CODE'
    IF FP[0].PERIOD_CODE EQ 'S' OR FP[0].PERIOD_CODE EQ 'D' THEN BEGIN    ; MAKE DAILY COMPOSITES WITH MULIPLE PRODUCTS
      FOR NTH=0, N_ELEMENTS(FILES)-1 DO BEGIN
        AFILE = FILES[NTH]
        FP = FILE_PARSE(AFILE)
        IF NONE(DIR_OUT) THEN DIR_OUT = REPLACE(FP.DIR,SL+'SAVE'+SL,SL+'DAILY_COMPOSITES'+SL) & DIR_TEST, DIR_OUT
        PNGFILE = DIR_OUT + FP.NAME + '-COMPOSITE.PNG'
        IF ANY(MAP_OUT) THEN PNGFILE = REPLACE(PNGFILE,FP.MAP,MAP_OUT)
        IF FILE_MAKE(AFILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
  
        S = STRUCT_READ(AFILE,TAG=INFILE,STRUCT=STR,MAP_OUT=MAP_OUT)
        PROD = STR.PROD & IF PROD EQ 'SST4' THEN PROD = 'SST'
  
        ; ===> GET LANDMASK
        IF HAS(STR,'LANDMASK') THEN LANDMASK = STR.LANDMASK ELSE LANDMASK = READ_LANDMASK(STR.MAP,/LAND)
        OK_LAND = WHERE(LANDMASK EQ 1,/NULL)
  
        ; ===> OPEN A WINDOW FOR THE COMPOSITE FIGURE
        W = WINDOW(DIMENSIONS=[STR.PX*6/2,STR.PY/2],BUFFER=BUFFER)
  
        ; ===> ADD ORIGINAL INPUT IMAGE
        ORG = PRODS_2BYTE(STR.INDATA, PROD=PROD)
        ORG(OK_LAND) = LAND_COLOR
        IF VALIDS('MAPS',STR.MAP) EQ '' THEN ORG = ROTATE(ORG,IMGROT)
        OIM = IMAGE(ORG, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[5,1,1])
        POS = OIM.POSITION
        T = TEXT(MEAN([POS[0],POS(2)]),POS[1],'Original Data',FONT_SIZE=FONT_SIZE+5,FONT_STYLE='BOLD',ALIGNMENT = 0.5,VERTICAL_ALIGNMENT = 1.10)
        CB_POS = [POS[0],POS(3),POS(2),POS(3)+CB_Y_PLUS]
        PRODS_COLORBAR, PROD, IMG=OIM, POSITION=CB_POS, FONT_SIZE=FONT_SIZE
        
        ; ===> ADD MEDIAN FILLED IMAGE WITH THE DILATED CLOUD MASK IN BLACK
        MASK = STR.MASK & OK_MASK = WHERE(MASK EQ 1)
        MSK = PRODS_2BYTE(STR.MEDFIL, PROD=PROD)
        MSK(OK_MASK) = BACKGROUND_COLOR
        MSK(OK_LAND) = LAND_COLOR
        IF VALIDS('MAPS',STR.MAP) EQ '' THEN MSK = ROTATE(MSK,IMGROT)
        DIF = ORG - MSK & OKDIF = WHERE(DIF NE 0,COUNT)
        IF COUNT GE 1 THEN MSK(OKDIF) = MASK_COLOR
        MSM = IMAGE(MSK, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[5,1,2])
        POS = MSM.POSITION
        T = TEXT(MEAN([POS[0],POS(2)]),POS[1],'Median Filled with dilated cloud mask (black)',FONT_SIZE=FONT_SIZE+5,FONT_STYLE='BOLD',ALIGNMENT = 0.5,VERTICAL_ALIGNMENT = 1.10)
        CB_POS = [POS[0],POS(3),POS(2),POS(3)+CB_Y_PLUS]
        PRODS_COLORBAR, PROD, IMG=MSM, POSITION=CB_POS, FONT_SIZE=FONT_SIZE
  
        ; ===> ADD MEDIAN FILTERED IMAGE
        MFL = PRODS_2BYTE(STR.MDFILTER, PROD=PROD)
        MFL(OK_LAND) = LAND_COLOR
        IF VALIDS('MAPS',STR.MAP) EQ '' THEN MFL = ROTATE(MFL,IMGROT)
        MFM = IMAGE(MFL, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[5,1,3])
        POS = MFM.POSITION
        T = TEXT(MEAN([POS[0],POS(2)]),POS[1],'Median Filtered',FONT_SIZE=FONT_SIZE+5,FONT_STYLE='BOLD',ALIGNMENT = 0.5,VERTICAL_ALIGNMENT = 1.10)
        CB_POS = [POS[0],POS(3),POS(2),POS(3)+CB_Y_PLUS]
        PRODS_COLORBAR, PROD, IMG=MFM, POSITION=CB_POS, FONT_SIZE=FONT_SIZE
  
        ; ===> ADD GRAD_MAG IMAGE
        IF STRUCT_HAS(STR,'GRAD_CHL') THEN GMPROD = 'GRAD_CHL' ELSE GMPROD='GRAD_SST'
        IF STRUCT_HAS(STR,'GRAD_CHL') THEN GM = PRODS_2BYTE(STR.GRAD_CHL, PROD=GMPROD) ELSE GM = PRODS_2BYTE(STR.GRAD_SST, PROD=GMPROD)
        GM(OK_LAND) = LAND_COLOR
        IF VALIDS('MAPS',STR.MAP) EQ '' THEN GM = ROTATE(GM,IMGROT)
        GMM = IMAGE(GM, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[5,1,4])
        POS = GMM.POSITION
        IF GMPROD EQ 'GRAD_CHL' THEN TXT = 'Chlorophyll Gradient Magnitude (ratio)' ELSE TXT = 'SST Gradient Magnitude'
        T = TEXT(MEAN([POS[0],POS(2)]),POS[1],TXT,FONT_SIZE=FONT_SIZE+5,FONT_STYLE='BOLD',ALIGNMENT = 0.5,VERTICAL_ALIGNMENT = 1.10)
        CB_POS = [POS[0],POS(3),POS(2),POS(3)+CB_Y_PLUS]
        PRODS_COLORBAR, GMPROD, IMG=GMM, POSITION=CB_POS, FONT_SIZE=FONT_SIZE
  
        ; ===> ADD GRAD_DIR IMAGE
        GD = PRODS_2BYTE(STR.GRAD_DIR, PROD='GRAD_DIR')
        GD(OK_LAND) = LAND_COLOR
        IF VALIDS('MAPS',STR.MAP) EQ '' THEN GD = ROTATE(GD,IMGROT)
        GDM = IMAGE(GD, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[5,1,5])
        POS = GDM.POSITION
        T = TEXT(MEAN([POS[0],POS(2)]),POS[1],'Gradient Direction',FONT_SIZE=FONT_SIZE+5,FONT_STYLE='BOLD',ALIGNMENT = 0.5,VERTICAL_ALIGNMENT = 1.10)
        CB_POS = [POS[0],POS(3),POS(2),POS(3)+CB_Y_PLUS]
        PRODS_COLORBAR, 'GRAD_DIR', IMG=GDM, POSITION=CB_POS, FONT_SIZE=FONT_SIZE
  
        PRINT, 'Writing ' + PNGFILE
        W.SAVE, PNGFILE
        WAIT, DELAY
        W.CLOSE
  
      ENDFOR ; FOR _FILE = 0L, N_FILES-1 DO BEGIN
      GOTO, DONE
    ENDIF ; PERIOD_CODE EQ 'D' OR 'S'
    
    
    IF NONE(DIR_OUT) THEN DIR_OUT = REPLACE(FP.DIR,SL+'STATS'+SL,SL+'COMPOSITES'+SL) & DIR_TEST, DIR_OUT
    FOR PTH=0, N_ELEMENTS(PRODS)-1 DO BEGIN
      S = STRUCT_READ(FILES[0],TAG=INFILE,STRUCT=STR,MAP_OUT=MAP_OUT)
      APROD = PRODS(PTH)
      IF NONE(IMGPRODS) THEN CPROD = APROD ELSE CPROD = IMGPRODS(PTH)
      CTITLE = UNITS(APROD)
      IF FP[0].PERIOD_CODE EQ 'M' OR FP[0].PERIOD_CODE EQ 'MONTH' THEN BEGIN
        MONTHLY_COMPOSITES, FILES, APROD, IMGPROD=CPROD, DIR_OUT=DIR_OUT, MAP_OUT=MAP_OUT, COLORBAR_TITLE=CTITLE, BUFFER=BUFFER, OVERWRITE=OVERWRITE
        YSETS = WHERE_SETS(FP.YEAR_START)
        IF N_ELEMENTS(YSETS) GT 1 THEN FOR Y=0, N_ELEMENTS(YSETS)-1 DO MONTHLY_COMPOSITES, FILES[WHERE_SETS_SUBS(YSETS(Y))], APROD, IMGPROD=IMGPROD, DIR_OUT=DIR_OUT, MAP_OUT=MAP_OUT, COLORBAR_TITLE=CTITLE, BUFFER=BUFFER, OVERWRITE=OVERWRITE
      ENDIF
      IF FP[0].PERIOD_CODE EQ 'A' THEN BEGIN
        ANNUAL_COMPOSITES, FILES, APROD, IMGPROD=CPROD, DIR_OUT=DIR_OUT, MAP_OUT=MAP_OUT, COLORBAR_TITLE=CTITLE, BUFFER=BUFFER, OVERWRITE=OVERWRITE
      ENDIF
    ENDFOR
    GOTO, DONE
  ENDIF ; DO COMPOSITES
  

; ===> MAKE INDIVIDUAL FILES   
  FOR NTH=0, N_ELEMENTS(FILES)-1 DO BEGIN
    AFILE = FILES[NTH]
    FP = PARSE_IT(AFILE,/ALL)
    IF NONE(DIR_OUT) THEN DIR_OUT = REPLACE(FP.DIR,[SL+'SAVE'+SL,SL+'STATS'+SL],[SL+'BROWSE'+SL,SL+'BROWSE'+SL]) & DIR_TEST, DIR_OUT
    S = []
    FOR PTH=0, N_ELEMENTS(PRODS)-1 DO BEGIN
      APROD = PRODS(PTH)
      IF NONE(IMGPRODS) THEN CPROD = APROD ELSE CPROD = IMGPRODS(PTH)
      PNGFILE = DIR_OUT + FP.NAME + '-' + APROD+'.PNG'
      IF ANY(MAP_OUT) THEN PNGFILE = REPLACE(PNGFILE,FP.MAP,MAP_OUT)
      IF FILE_MAKE(AFILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE

      IF S EQ [] THEN BEGIN
        S = STRUCT_READ(AFILE,TAG=INFILE,STRUCT=STR,MAP_OUT=MAP_OUT)
        IF HAS(STR,'LANDMASK') THEN LANDMASK = STR.LANDMASK ELSE LANDMASK = READ_LANDMASK(STR.MAP,/LAND)
        OK_LAND = WHERE(LANDMASK EQ 1,/NULL)
        SZ = MAPS_SIZE(MAP_OUT,PX=MPX,PY=MPY)
      ENDIF  
      
      ; ===> OPEN A WINDOW FOR THE COMPOSITE FIGURE
      PX = MPX * WINSCALE
      PY = MPY * WINSCALE
      XSP = PX*0.01
      YSP = PY*0.01
      CSP = PY*0.1
      W = WINDOW(DIMENSIONS=[PX+XSP*2,PY+YSP*2+CSP/2],BUFFER=BUFFER)
      IM = PRODS_2BYTE(GET_TAG(STR,APROD), PROD=CPROD, LOG=LOG)
      IM(OK_LAND) = LAND_COLOR
      IF VALIDS('MAPS',STR.MAP) EQ '' THEN IM = ROTATE(IM,IMGROT)
      IMG = IMAGE(IM, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, POSITION=[XSP,CSP+YSP,XSP+PX,CSP+YSP+PY],/DEVICE)
      CB_POS = [XSP+PX*.25, CSP*.75, XSP+PX*.75, CSP]
      PRODS_COLORBAR, CPROD, IMG=IMG, POSITION=CB_POS, TEXTPOS=0, FONT_SIZE=FONT_SIZE, TITLE=STR.PERIOD+' '+UNITS(CPROD), TICKDIR=0,/DEVICE, LOG=LOG
      W.SAVE, PNGFILE
      W.CLOSE
      PFILE, PNGFILE, /W
    ENDFOR ; PRODS
  ENDFOR ; FILES  
      
  
  DONE:

END; #####################  END OF ROUTINE ################################
