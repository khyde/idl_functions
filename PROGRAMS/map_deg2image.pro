; $ID:	MAP_DEG2IMAGE.PRO,	2020-07-29-14,	USER-KJWH	$
;##########################################################################
FUNCTION MAP_DEG2IMAGE,IMG,LON,LAT,  X=X, Y=Y,AROUND=AROUND, SUBS=SUBS
;+
; NAME:
;       MAP_DEG2IMAGE
;
; PURPOSE:
;				RETURN VALUES FROM A 2-D IMAGE ARRAY AT THE INPUT LONGITUDE & LATITUDE LOCATIONS
;
;
; CALLING SEQUENCE:
;       RESULT = MAP_DEG2IMAGE(IMG)
;
; INPUTS:
;				IMAGE: A 2-D ARRAY
;       LONGITUDE, LATITUDE (IN DECIMAL DEGREES), AND IMAGE ARRAY
;
; KEYWORD PARAMETERS:
;       IF X AND Y KEYWORDS PROVIDED THEN PIXEL DEVICE COORDINATES MATCHING
;       THE LONGITUDE AND LATITUDE INPUTS ARE RETURNED
;
;       X:    	THE PIXEL X DEVICE COORDINATE CLOSEST TO THE INPUT LONGITUDE
;       Y:    	THE PIXEL Y DEVICE COORDINATE CLOSEST TO THE INPUT LATITUDE
;				AROUND: ALLOWS PIXELS IN A BOX AROUND THE CENTER PIXEL TO BE EXTRACTED FROM THE INPUT IMAGE ARRAY
;								AROUND = 0 JUST GET THE VALUE FROM THE IMAGE ARRAY THAT IS CLOSEST TO THE INPUT LON,LAT
;								AROUND = 1 GET 9 VALUES IN A 3X3 BOX AROUND THE CENTRAL PIXEL CLOSEST TO THE INPUT LON, LAT
;								AROUND = 2 GET 25 VALUES IN A 5X5 BOX AROUND THE CENTRAL PIXEL CLOSEST TO THE INPUT LON, LAT
;
;				SUBS:		SUBSCRIPTS FOR THE X,Y LOCATIONS (-1 MEANS NOT FOUND, NOT A VALID SUBSCRIPT)
;
;
; RESTRICTIONS:
;       YOU MUST HAVE ESTABLISHED THE MAP COORDINATE SYSTEM USING IDL'S MAP_SET AND YOUR IMAGE DIMENSIONS MUST AGREE WITH
;				THOSE EXPECTED BY THE MAP SYSTEM.
;
;
; MODIFICATION HISTORY:
;   WRITTEN BY:  J.E.O'REILLY, DECEMBER 17, 1997
;   MODIFIED: 
;     MAR 12, 1998 - JEOR: Now returns pixel coord as X and Y
;     AUG 16, 1998 - JEOR: Modified to allow extraction of a square box of pixels to be extracted around the LON/LAT coordinates.
;		  SEP 29, 2003 - JEOR: Added SUBS=SUBS
;		  OCT 07, 2003 - JEOR: Speed up by working with arrays
;			MAY 07, 2015 - JEOR: Added INDEX= TWO2ONE(XP, YP, IMG)
;     SEP 23, 2019 - KJWH: Changed LAST_PX and LAST_PY to be the dimensions of the map and not PX-1 and PY-1 because rounding errors were creating "BAD" data at the edges of the map.
;                   
;
;-

; ===> ENSURE THAT A MAP_SET COMMAND HAS BEEN ISSUED
  IF !X.TYPE NE 3 THEN MESSAGE,'ERROR: MAP PROGRAM (MAP_SET) MUST BE RUN FIRST"

; ===> GET THE WINDOW DEVICE X AND Y SIZES
  DX = !D.X_SIZE
  DY = !D.Y_SIZE

; ===> GET THE SIZE OF THE IMAGE
  S   = SIZE(IMG)
  PX  = S[1]
  PY  = S(2)
  IF PX NE DX OR PY NE DY THEN MESSAGE,'ERROR: IMAGE DIMENSIONS DIFFERENT FROM GRAPHICS WINDOW'

;	===> NUMBER OF LON,LATS
	N_LON = N_ELEMENTS(LON)
	N_LAT = N_ELEMENTS(LAT)
	IF N_LON EQ 0 OR N_LAT EQ 0 OR N_LON NE N_LAT THEN MESSAGE,'ERROR: MUST INPUT LON,LAT PAIRS'

; ===> GET THE LAST SUBSCRIPTS FOR THE IMAGE WIDTH AND HEIGHT
  LAST_PX = PX;-1L ; Commented out "-1L" -> KJWH on 9/23/2019 because of issues at the edges of the map
  LAST_PY = PY;-1L

; ====> CALCULATE THE BOX SIZE
  IF KEYWORD_SET(AROUND) THEN BEGIN
    IF AROUND[0] GE 1 AND AROUND[0] LT PX/2 THEN BOX = AROUND ELSE BOX = 0 ;
  ENDIF ELSE BEGIN
    BOX = 0
  ENDELSE

; ===> DETERMINE NUMBER OF ELEMENTS IN BOX EXTRACTED FROM THE IMAGE
  WIDTH = (BOX*2+1)
  SQUARE = WIDTH^2

; ===> CONVERT LONGITUDE, LATITUDE COORDINATES TO DEVICE COORDINATES
  XYZ = CONVERT_COORD(LON,LAT,/DATA,/TO_DEVICE)
  X   = REFORM(XYZ(0,*))
  Y   = REFORM(XYZ(1,*))

; ===> ROUND X,Y TO NEAREST IMAGE LONG SUBSCRIPT
  X = LONG(ROUND(X))
  Y = LONG(ROUND(Y))

; ===>CREATE AN OUTPUT ARRAY AND SET ALL OUTPUT VALUES TO MISSING OF TYPE IMAGE
  VALUE = REPLICATE(MISSINGS(IMG), N_ELEMENTS(X),SQUARE)

; EXCEPT IF IMAGE TYPE IS BINARY THEN OUTPUT ARRAY IS INTEGER TYPE
; SO THAT A MISSING CODE MAY BE USED (THE MISSING CODE FOR BINARY IS ZERO AND IS USUALLY NOT USEFUL)
  TYPE = IDLTYPE(IMG,/CODE)
  IF TYPE EQ 1 THEN VALUE = REPLICATE(MISSINGS(0),N_ELEMENTS(X),SQUARE) ; MAKE BYTES INTEGERS

	XX=	-1L
	YY= -1L

;	===>DEFINE BOXL,BOXR,BOXB,BOXT IMAGE SUBSCRIPTS
    BOXL =  - BOX
    BOXR =  + BOX
    BOXB =   - BOX
    BOXT =   + BOX
    COUNTER = -1L ; A COUNTER FOR THE EXTRACTED BOX

    FOR _Y = BOXB,BOXT DO BEGIN
      FOR _X = BOXL,BOXR DO BEGIN
        XX = [XX,_X]
        YY = [YY,_Y]
      ENDFOR
    ENDFOR

 	XX=XX(1:*)
 	YY=YY(1:*)

	S=  REPLICATE(CREATE_STRUCT('XX',XX,'YY',YY),N_ELEMENTS(X))
	XX=TRANSPOSE(S.XX)
	YY=TRANSPOSE(S.YY)

	STRUCT_X = REPLICATE(CREATE_STRUCT('X',X),SQUARE)
	XP = STRUCT_X.X
	XP = XX + XP

	STRUCT_Y = REPLICATE(CREATE_STRUCT('Y',Y),SQUARE)
	YP = STRUCT_Y.Y
	YP = YY + YP

;	===> CREATE SUBS TO HOLD SUBSCRIPTS
	SUBS = LONG(XP) & SUBS(*) = -1L

	OK=WHERE(XP GE 0 AND XP LE LAST_PX AND YP GE 0 AND YP LE LAST_PY,COUNT)
	IF COUNT GE 1 THEN BEGIN
		VALUE[OK] = IMG(XP[OK],YP[OK])
;		===> CONVERT THE 2-D LOCATIONS INTO 1-D SUBSCRIPTS
  	INDEX= TWO2ONE(XP, YP, IMG) 
		SUBS[OK]  = INDEX[OK]
	ENDIF

;	===> CLEAN UP ANY X,Y'S THAT ARE OUTSIDE THE MAP AREA
	BAD=WHERE(X LT 0 OR X GT LAST_PX OR Y LT 0 OR Y GT LAST_PY,COUNT_BAD)
  IF COUNT_BAD GE 1 THEN BEGIN
  	X(BAD) = -1L
  	Y(BAD) = -1L
  ENDIF

  RETURN, VALUE

  END ; END OF PROGRAM
