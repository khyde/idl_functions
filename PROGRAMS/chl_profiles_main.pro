; $ID:	CHL_PROFILES_MAIN.PRO,	2020-07-01-12,	USER-KJWH	$
; +
; ######################################################################### 
  PRO CHL_PROFILES_MAIN

; THIS PROGRAM IS A MAIN ROUTINE FOR PROCESSING NATHAN REBUCK'S CHLOROPHYLL PROFILES
; NOTES:
;    1) Started with !S.PROJECTS+"CHL_PROFILES\DATA\ALLCHL.CSV" and added header row
;    2) CONVERTED DB TO NUMERIC EXCEPT SOURCE AND CODE
;    3) ADDED ALPHA CODES:
;       Z = ZERO CHL
;       D = DUPLICATE CHL (2753 DUPLICATES)
;       S = THE SURFACE CHL FOR THE PROFILE (105958 SURFACE)
;    4) ADDED TAG PROFILE NUMBER (PNUM) FOR INDEXING AND FINDING
;    5) SORTED DATABASE (IN EXCEL)  BY DEPTH THEN PNUM
;    6) MADE MASTER !S.MASTER + 'CHL_PROFILES-MASTER.SAV'


; MODIFICATION HISTORY:
;     SEP 15, 2014  WRITTEN BY: J.E. O'REILLY
;     SEP 16, 2014 - JOR:  REVISED EXTENSIVELY
;     SEP 23, 2014 - JOR:  CHANGED SAV TO NUMERIC
;     SEP 26, 2014 - JOR:  REVISED DB BY ADDING 'Z' FOR ZERO CHL
;     SEP 27, 2014 - JOR:  REVISED DB BY ADDING 'D' FOR DUPLICATES
;     OCT 01, 2014 - JOR:  ADDED STEPS DO_FIND_FIVE,DO_NEC_OPAL
;     DEC 28, 2015 - KJWH: TESTED AND UPDATED
;                          UPDATED SWITCHES
;                          UPDATED DIRECTORIES
;-
; #########################################################################

;************************************
  ROUTINE_NAME  = 'CHL_PROFILES_MAIN'
;************************************
 
  DO_ADD_SOURCE		     = ''
  DO_ADD_TAG_CODE      = ''
  DO_STRUCT_2NUM       = ''
  DO_SORT_DEPTH        = ''
  DO_CODE_SURFACE      = ''
  DO_CODE_ZERO_CHL     = ''
  DO_CODE_DUPS         = ''
  DO_CODE_PNUM         = ''
  DO_CHECK_DEPTHS      = ''
  DO_EXCEL_2_MASTER    = ''
  DO_MASTER_2CSV       = ''
  DO_FIND_LOOP         = ''
  DO_DEMO_NULL         = ''
  DO_PLT_LONLAT 	     = ''
  DO_NEC_OPAL          = ''
  
 
; DEFAULTS 
  SL = PATH_SEP()
  SAV_FILE = !S.MASTER + 'CHL_PROFILES.SAV'
  DIR_PRO  = !S.PROJECTS + 'CHL_PROFILES' + SL
  DIR_DATA = DIR_PRO + 'DATA' + SL
  DIR_TEMP = DIR_DATA + 'TEMP' + SL
  DIR_PLOTS = DIR_PRO + 'PLOTS' + SL
  DIR_TEST, [DIR_TEMP, DIR_PLOTS]

; ***********************************
  IF KEY(DO_ADD_SOURCE) THEN BEGIN
; ***********************************
    SNAME = 'DO_ADD_SOURCE'
    SWITCHES,DO_ADD_SOURCE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
		IF VERBOSE THEN PRINT, 'Running: ' + SNAME
		
		CSVFILE = DIR_DATA + 'CHL_PROFILES.CSV'
		IF FILE_MAKE(CSVFILE,SAV_FILE,OVERWRITE=OVERWRITE) EQ 1 THEN BEGIN
		  DB = CSV_READ(CSVFILE) & IF VERBOSE THEN PF,CSVFILE,/R
		  ST,DB
		  PC,(N_ELEMENTS(DB))
		  SETS = WHERE_SETS(DB.SOURCE)
		 ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
		  FOR _SET=0,N_ELEMENTS(SETS) -1 DO BEGIN
  		  POF,_SET,SETS
  		  SET = SETS(_SET)
  		  SUBS = WHERE_SETS_SUBS(SET)
        ;SOURCE:   1 WOD; 2 SEABASS; 3 CLIVEC; 4 DE0911 TOW-YO; 5 MARMAP
  		  IF SET.VALUE EQ '1' THEN DB(SUBS).SOURCE = 'WOD'
        IF SET.VALUE EQ '2' THEN DB(SUBS).SOURCE = 'SEABASS'
        IF SET.VALUE EQ '3' THEN DB(SUBS).SOURCE = 'CLIVEC'
        IF SET.VALUE EQ '4' THEN DB(SUBS).SOURCE = 'DE0911'
        IF SET.VALUE EQ '5' THEN DB(SUBS).SOURCE = 'MARMAP'
		  ENDFOR;FOR _SET=0,N_ELEMENTS(SETS) -1 DO BEGIN
		 ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
      STRUCT_WRITE,DB,FILE=SAV_FILE & PF,SAV_FILE
    ENDIF;IF FILE_MAKE(IN = CSVFILE,OUT=SAV_FILE,OVERWRITE=OVERWRITE) EQ 1 THEN BEGIN
    IF VERBOSE THEN , 'DO_ADD_SOURCE'
  ENDIF ; IF DO_ADD_SOURCE GE 1 THEN BEGIN


; ***********************************
  IF KEY(DO_ADD_TAG_CODE) THEN BEGIN
; ***********************************
    SNAME = 'DO_ADD_TAG_CODE'
    SWITCHES,DO_ADD_TAG_CODE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME
    
    DB = CHL_PROFILES_READ(/INIT) & PN,DB  
    S  = REPLICATE(CREATE_STRUCT('CODE',''),N_ELEMENTS(DB))
    DB = STRUCT_MERGE(DB,S)
    
    ENTER
    STRUCT_WRITE,DB,FILE=SAV_FILE
  ENDIF ; IF DO_ADD_TAG_CODE GE 1 THEN BEGIN


; ***********************************
  IF KEY(DO_STRUCT_2NUM) THEN BEGIN
; ***********************************
    SNAME = 'DO_STRUCT_2NUM'
    SWITCHES,DO_STRUCT_2NUM,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME  
  
    DB   = CHL_PROFILES_READ(/INIT) & PN,DB
    OK_DOY = WHERE(DB.DOY EQ 'NaN',COUNT)   & IF VERBOSE THEN P,COUNT  ;===> DOY & CHL NOT CONVERTED TO FLT BECAUSE OF NANS
    IF COUNT GE 1 THEN DB(OK_DOY).DOY =''                              ;     SO MAKE THEM '' FOR NOW AND CHANGE TO MISSINGS AFTER A SECOND STRUCT_2NUM
    OK_CHL = WHERE(DB.CHL EQ 'NaN',COUNT)   & IF VERBOSE THEN P,COUNT
    IF COUNT GE 1 THEN DB(OK_CHL).CHL =''
    OK_TEMP = WHERE(DB.TEMP EQ 'NaN',COUNT) & IF VERBOSE THEN P,COUNT
    IF COUNT GE 1 THEN DB(OK_TEMP).TEMP =''

    DB = STRUCT_2NUM(DB,EXCLUDE = ['SOURCE','CODE'],/FLT)
    SAVE,FILENAME = SAV_FILE,DB,/VERBOSE & PF,SAV_FILE
  ENDIF ; IF DO_STRUCT_2NUM GE1 THEN BEGIN


; ***********************************
  IF KEY(DO_CODE_SURFACE) THEN BEGIN
; ***********************************
    SNAME = 'DO_CODE_SURFACE'
    SWITCHES,DO_CODE_SURFACE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME  
    
    DB   = CHL_PROFILES_READ(/INIT) & IF VERBOSE THEN PN,DB 
    DB(*).CODE = '' ; ===> MAKE ALL DB.CODE BLANK
    SETS = WHERE_SETS(DB.YEAR,DB.DOY,DB.LAT,DB.LON,/JOIN)&  PN,SETS

    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_ELEMENTS(SETS)-1 DO BEGIN
      IF VERBOSE THEN POF,NTH,SETS
      SET = SETS[NTH]
      SUBS = WHERE_SETS_SUBS(SET)     
      OK_DEPTH = WHERE(DB(SUBS).DEPTH LE 5.0,COUNT_DEPTH)    ;===> ADD A 'S' CODE TO THE SURFACE DEPTH [ ONLY IF FIRST DEPTH LE 5]
      IF COUNT_DEPTH GE 1 THEN BEGIN
        SUB = FIRST(SUBS)
        DB(SUB).CODE = 'S'
      ENDIF;IF COUNT_DEPTH GE 1 THEN BEGIN
      IF DB(SUB).CODE EQ 'S' AND DB(SUB).DEPTH GT 5.0 THEN STOP 
    ENDFOR;FOR NTH = 0,N_ELEMENTS(SETS)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
  
  ;===> FIND AND NEGATE SURFACE WHERE DEEPER THAN 5 M
   OK = WHERE(DB.CODE EQ 'S' AND DB.DEPTH GT 5,COUNT) & IF VERBOSE THEN P,COUNT
   IF COUNT GE 1 THEN DB[OK].CODE = ''
   ENTER
   SAVE,FILENAME = SAV_FILE,DB,/VERBOSE & PF,SAV_FILE
  ENDIF ; IF DO_CODE_SURFACE GE1 THEN BEGIN

  
; ***********************************
  IF KEY(DO_CODE_ZERO_CHL) THEN BEGIN
; ***********************************
    SNAME = 'DO_CODE_ZERO_CHL'
    SWITCHES,DO_CODE_ZERO_CHL,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME

    DB = CHL_PROFILES_READ(/INIT) & IF VERBOSE THEN ST,DB ;===> READ SOURCE DB
    OK = WHERE(DB.CHL EQ 0,COUNT) & P,COUNT
    IF COUNT GE 1 THEN BEGIN
      DB[OK].CODE = 'Z'
      D = DB[OK]
      OUT = DIR_TEMP + 'ZERO-CHLOROPHYLLS.CSV'
      CSV_WRITE,OUT,D
      IF VERBOSE THEN PFILE,OUT
      SAVE,FILENAME = SAV_FILE,DB,VERBOSE=VERBOSE & IF VERBOSE THEN PF,SAV_FILE
    ENDIF
    ,'DO_CODE_ZERO_CHL'

  ENDIF ; IF DO_CODE_ZERO_CHL GE 1 THEN BEGIN


; ***********************************
  IF KEY(DO_CODE_DUPS) THEN BEGIN
; ***********************************
    SNAME = 'DO_CODE_DUPS'
    SWITCHES,DO_CODE_DUPS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME
  
    DB = CHL_PROFILES_READ(/INIT) & IF VERBOSE THEN PN,DB
    SETS = WHERE_SETS(DB.YEAR,DB.DOY,DB.DEPTH,DB.LAT,DB.LON,DB.CHL,ALL_SUBS=ALL_SUBS,JOIN=1,PAD=1,ERROR=ERROR)
    OK = WHERE(SETS.N GT 1,COUNT) & IF VERBOSE THEN P,COUNT
    IF COUNT GE 1 THEN BEGIN
      DUPS = SETS[OK]
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
      FOR NTH = 0,N_ELEMENTS(DUPS) - 1 DO BEGIN
        DUP = DUPS[NTH]
        SUBS = WHERE_SETS_SUBS(DUP)
        D = DB(SUBS)
        OK = WHERE(D.CODE NE 'S',COUNT)
        IF COUNT GE 1 THEN D[OK].CODE = 'D'
        IF COUNT GE 1 THEN DB(SUBS[OK]).CODE = 'D'
        BLANK = STRUCT_2MISSINGS(D[0])
        IF NONE(ALL) THEN ALL = D ELSE ALL = [ALL,D]
        ALL = [ALL,BLANK]
      ENDFOR;FOR NTH = 0,N_ELEMENTS(DUPS) - 1 DO BEGIN
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
      OUT = DIR_TEMP + 'CHL_PROFILE_DUPLICATES.CSV'
      CSV_WRITE,OUT,ALL
      IF VERBOSE THEN PFILE,OUT
      SAVE, FILENAME=SAV_FILE,DB,VERBOSE=VERBOSE & IF VERBOSE THEN PF,SAV_FILE
    ENDIF;IF COUNT GE 1 THEN BEGIN
    IF VERBOSE THEN ,'DO_CODE_DUPS'
  ENDIF ; IF DO_CODE_DUPS GE 1 THEN BEGIN


; ***********************************
  IF KEY(DO_CODE_PNUM) THEN BEGIN
; ***********************************
    SNAME = 'DO_CODE_PNUM'
    SWITCHES,DO_CODE_PNUM,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME
  
    DB   = CHL_PROFILES_READ(/INIT) & IF VERBOSE THEN PN,DB
    SETS = WHERE_SETS(DB.YEAR,DB.DOY,DB.LAT,DB.LON,/JOIN) & IF VERBOSE THEN PN,SETS ;===> GET SETS BASED ON LOCATION AND TIME
    S = REPLICATE(CREATE_STRUCT('PNUM',0UL),N_ELEMENTS(DB)) ;===> MKE A PNUM STRUCTURE AND MERGE WITH DB
    DB = STRUCT_MERGE(DB,S)
    PNUM = 0UL
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_ELEMENTS(SETS)-1 DO BEGIN
      POF,NTH,SETS
      PNUM = PNUM + 1
      SET = SETS[NTH]
      SUBS = WHERE_SETS_SUBS(SET)
      DB(SUBS).PNUM = PNUM   
    ENDFOR;FOR NTH = 0,N_ELEMENTS(SETS)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

    SAVE,FILENAME = SAV_FILE,DB,/VERBOSE & PF,SAV_FILE
  ENDIF ; IF DO_CODE_PNUM GE1 THEN BEGIN


; ***********************************
  IF KEY(DO_CHECK_DEPTHS) THEN BEGIN  ; 'THIS STEP CHECKS IF THE DEPTHS FOR EACH PROFILE ARE INCREASING'
; ***********************************
    SNAME = 'DO_CHECK_DEPTHS'
    SWITCHES,DO_CHECK_DEPTHS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME
  
    DB   = CHL_PROFILES_READ(/INIT) & IF VERBOSE THEN PN, DB
    PNUMS = INTERVAL(MM(DB.PNUM))
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_ELEMENTS(PNUMS)-1 DO BEGIN
      PNUM = PNUMS[NTH]
      IF VERBOSE THEN POF,NTH,PNUMS
      OK = WHERE(DB.PNUM EQ PNUM)
      DEPTHS = DB[OK].DEPTH
      OK = WHERE_SHIFT(DEPTHS,COUNT)
      IF COUNT GE 1 THEN STOP    
    ENDFOR;FOR NTH = 0,N_ELEMENTS(PNUMS)-1 DO BEGIN

  ENDIF ; IF DO_CHECK_DEPTHS GE 1 THEN BEGIN


; ***********************************
  IF KEY(DO_EXCEL_2_MASTER) THEN BEGIN ; THIS STEP READS THE EXCEL DATABASE [SORTED ON DEPTH THEN PNUM] AND MAKES THE MASTER DATABASE
; ***********************************
  SNAME = 'DO_EXCEL_2_MASTER'
  SWITCHES,DO_EXCEL_2_MASTER,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  IF VERBOSE THEN PRINT, 'Running: ' + SNAME

  OUT = DIR_TEMP + "CHL_PROFILES_MASTER-EXCEL-SORTED.CSV"
  DB = CSV_READ(OUT)
  MSTR = !S.MASTER + 'CHL_PROFILES-MASTER.SAV'
  SAVE,FILENAME = MSTR,DB,/VERBOSE

ENDIF;IF DO_EXCEL_2_MASTER GE 1 THEN BEGIN

 
; ***********************************
  IF KEY(DO_MASTER_2CSV) THEN BEGIN ; THIS STEP WRITES A CSV OF ALL THE RECORDS IN THE MASTER CHL_PROFILES DATABASE
; ***********************************
    SNAME = 'DO_MASTER_2CSV'
    SWITCHES,DO_MASTER_2CSV,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME

    DB   = CHL_PROFILES_READ() & IF VERBOSE THEN PN,DB
    OUT = DIR_TEMP + 'CHL_PROFILES_MASTER.CSV'
    CSV_WRITE,OUT,DB
    IF VERBOSE THEN PFILE,OUT
  ENDIF;IF DO_MASTER_2CSV GE1 THEN BEGIN


; ***********************************
  IF KEY(DO_PLT_LONLAT) THEN BEGIN ; THIS STEP MAKES A PLOT OF THE LOCATIONS OF EACH SOURCE IN THE MASTER
; ***********************************
    SNAME = 'DO_PLT_LONLAT'
    SWITCHES,DO_PLT_LONLAT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME
  
    PAL_36,R,G,B 
    FONT_HELVETICA
    
    DB = CHL_PROFILES_READ(/S) & IF VERBOSE THEN PN,DB ;===> READ JUST THE SURFACE RECORDS
    SETS = WHERE_SETS(DB.SOURCE)
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR _SET=0,N_ELEMENTS(SETS) -1 DO BEGIN
      IF VERBOSE THEN POF,_SET,SETS
      SET = SETS(_SET)
      SUBS = WHERE_SETS_SUBS(SET)
      SOURCE = SET.VALUE ; 1 WOD; 2 SEABASS; 3 CLIVEC; 4 DE0911 TOW-YO; 5 MARMAP
      D = STRUCT_2NUM(DB(SUBS))
      MAPS_SET,'NEC'
      LAND = READ_LANDMASK(MAP='NEC',/LAND)
      OK = WHERE(LAND EQ 0,COUNT) & IF COUNT GE 1 THEN LAND[OK]=255
      OK = WHERE(LAND EQ 1,COUNT) & IF COUNT GE 1 THEN LAND[OK]=34
      TV,LAND
      PLOTS,D.LON,D.LAT,PSYM =1,SYMSIZE = 2.5,COLOR = 21,THICK = 3
      TXT = SOURCE + '!C' +'SURFACE' + '!C(' + ROUNDS(N_ELEMENTS(D)) + ')'
      XYOUTS,0.15,0.85,/NORMAL,TXT,CHARSIZE = 7,COLOR = 0
      IMG = TVRD()
      ZWIN
      PNGFILE = DIR_PLOTS + 'CHL_PROFILES-' + SOURCE + '.PNG'
      WRITE_PNG,PNGFILE,IMG,R,G,B & PF,PNGFILE    
    ENDFOR;FOR _SET=0,N_ELEMENTS(SETS) -1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
     
    , 'DO_PLT_LONLAT'
  ENDIF ; IF DO_PLT_LONLAT GE 1 THEN BEGIN


; ***********************************
  IF KEY(DO_FIND_LOOP) THEN BEGIN ; THIS STEP PLOTS THE MEAN CHL PROFILE BASED ON INCREASING NUMBER OF PROFILES
; ***********************************
    SNAME = 'DO_FIND_LOOP'
    SWITCHES,DO_FIND_LOOP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME
  
    NUMS = 5
    SHOW = 0
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_ELEMENTS(NUMS) -1 DO BEGIN
     NUM = NUMS[NTH] 
      S = CHL_PROFILES_READ(800,/S) & LON=S.LON & LAT=S.LAT & DOY=S.DOY & CHL=S.CHL
      STRUCT=CHL_PROFILES_GET(LON=LON,LAT=LAT,DOY=DOY,CHL=CHL,NUM=NUM,WT_METERS=WT_METERS,WT_DAYS=WT_DAYS,WT_CHL=WT_CHL,Z_RES=Z_RES, MAX_DEPTH=MAX_DEPTH,PNUMS=PNUMS,SHOW=SHOW)
      ST,STRUCT
    ENDFOR;FOR NTH = 0,N_ELEMENTS(NUMS) -1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ENDIF;IF DO_FIND_LOOP GE 1 THEN BEGIN


; ***********************************
  IF KEY(DO_DEMO_NULL) THEN BEGIN
; ***********************************
    SNAME = 'DO_DEMO_NULL'
    SWITCHES,DO_DEMO_NULL,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME
  
    TIMER
    S = CHL_PROFILES_READ(30570,/S) & LON=S.LON & LAT=S.LAT & DOY=S.DOY & CHL=S.CHL
    NUM=1 & SHOW=1
    STRUCT=CHL_PROFILES_GET(LON=LON,LAT=LAT,DOY=DOY,CHL=CHL,NUM=NUM,WT_METERS=WT_METERS,WT_DAYS=WT_DAYS,WT_CHL=WT_CHL,Z_RES=Z_RES, MAX_DEPTH=MAX_DEPTH,PNUMS=PNUMS,SHOW=SHOW)
    PRINT,'A NULL WAS RETURNED BECAUSE NO DEPTHS WERE FOUND  STRUCT =  ',STRUCT
    TIMER,/STOP

  ENDIF ; IF DO_DEMO_NULL GE 1 THEN BEGIN


; ***********************************
  IF KEY(DO_NEC_OPAL) THEN BEGIN
; ***********************************
    SNAME = 'DO_NEC_OPAL'
    SWITCHES,DO_NEC_OPAL,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    IF VERBOSE THEN PRINT, 'Running: ' + SNAME

    FILE = !S.FILES +'M_200304-SEAWIFS-R2010-MLAC-NEC-CHLOR_A-OC4-MEAN.SAVE'
    FA = FILE_ALL(FILE)
    CHLS = STRUCT_READ(FILE)
    M = MAPS_2LONLAT('NEC')
    LONS = M.LON & LATS = M.LAT
    DOY = DATE_2DOY(FA.DATE_START)
    DOYS = REPLICATE(DOY,N_ELEMENTS(LONS))
    NUM = 5 ;NUMBER OF PROFILES TO AVERAGE
 
   ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_ELEMENTS(LONS)-1 DO BEGIN
      LON = LONS[NTH] & LAT = LATS[NTH] & DOY = DOYS[NTH] & CHL = CHLS[NTH]
      IF CHL EQ MISSINGS(CHL) THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>
      PPD = PP_OPAL(CHL=CHL,SST = 20,PAR = 30,KX = 0.01,LON=LON,LAT=LAT,DOY=DOY,NUM=NUM,/NEW_PROFILE,/PROFILES)
      IF VERBOSE THEN P,PPD
    ENDFOR;FOR NTH = 0,N_ELEMENTS(LONS)-1 DO BEGIN
   ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    ENTER

  ENDIF;IF DO_NEC_OPAL GE 1 THEN BEGIN



END; #####################  END OF ROUTINE ################################
