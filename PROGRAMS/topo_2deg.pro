; $ID:	TOPO_2DEG.PRO,	2020-06-30-17,	USER-KJWH	$
; 
PRO TOPO_2DEG, MAPP, LEVELS, MIN_PTS=MIN_PTS, FACT=FACT, OVERWRITE=OVERWRITE, OUTFILES=OUTFILES
; #########################################################################; 
;+
; THIS PROGRAMS WRITES A '.DEG' FILE FOR EACH LEVEL IN A CONTOUR PATH_XY TAG FROM THE TOPO_GET ROUTINE 

;
; CATEGORY: TOPO FAMILY
;
;
; INPUTS: MAPP ..... = 'SMI'
;         LEVELS.... ELEVATIONS [VALUES GE 0 ] OR DEPTHS [LT 0] [METERS, MAY BE MULTIPLE VALUES]

;
; KEYWORDS: 
;         MIN_PTS... MINIMUM NUMBER OF POINTS[VERTICES] THE CONTOUR PATH MUST HAVE


; OUTPUTS: WRITES A 'DEG' FILE FOR EACH LEVEL EXTRACTED FROM THE SMI TOPO ARRAY
;
; EXAMPLE:
;      TOPO_2DEG,'SMI',TOPO_LEVELS()
;      TOPO_2DEG,'SMI',FACT = 1
;      
; MODIFICATION HISTORY:
;     DEC 23, 2015  WRITTEN BY: J.E. O'REILLY
;     DEC 24, 2015 - JEOR: IF !S.USER EQ 'JOR' THEN FACT = 2
;                          TOPO = TOPO_MAP(MAPP,PX=PX,PY=PY); TO MAKE A HIGH RES MAP 
;     DEC 31, 2015 - JEOR: MADE LONS,LATS IN DEG FILES DOUBLE
;     FEB 19, 2019 - KJWH: Added OVERWRITE keyword to rewrite the file if it already exists
;                          Added a check to look for the file and skip unless the OVERWRITE keyword is set
;                          Creating a list of files to be returned in the keyword OUTFILES
;                          Updated formatting
; #########################################################################

;**************************
  ROUTINE_NAME  = 'TOPO_2DEG'
;**************************
  IF NONE(MAPP) THEN MAPP = 'SMI'
  DIR = !S.IDL_BATHY
  FMT = '(2F16.5)'
  IF NONE(LEVELS) THEN LEVELS = TOPO_LEVELS()

  IF NONE(MIN_PTS) THEN MIN_PTS = 21

;===> GET THE STANDARD PX,PY FOR MAPP
  M = MAPS_SIZE(MAPP) & PX = M.PX & PY = M.PY

;===> FACTOR TO MULTIPLY PX,PY TO ENLARE TOPO [USE FACT = 4 OR PERHAPS FACT = 10 IF SUFFICIENT MEMORY]:
;     A FACTOR OF 10 WILL MAKE A FULL-SIZED HI-RES SMI EQUAL TO THE SIZE OF THE COMBINED ORIGINAL 33 SRTM30PLUS TOPO FILES: [43200 COLUMNS AND 21600 ROWS]
  IF NONE(FACT) AND !S.USER EQ 'JEOR' THEN FACT = 2
  IF NONE(FACT) AND !S.USER EQ 'khyde' THEN FACT = 10; KIM HAS MORE MEMORY
  PX = PX*FACT
  PY = PY*FACT

  ;===> GET THE USUAL-SIZED SMI TOPO
  TOPO = TOPO_GET(MAPP,/DATA,FACT=FACT)

;===> GET THE TAGS
  TT=TOPO_TAGS(MAPP,LEVELS)

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  OUTFILES = []
  FOR NTH = 0,NOF(LEVELS)-1 DO BEGIN
    LEVEL = LEVELS[NTH]
    
    TT=TOPO_TAGS(MAPP,LEVEL)
    FILE = !S.IDL_BATHY + TT.TAG + '-PXY_'+ ROUNDS(PX) + '_' + ROUNDS(PY) + '-TOPO.DEG'
    OUTFILES = [OUTFILES,FILE]
    IF EXISTS(FILE) AND ~KEY(OVERWRITE) THEN CONTINUE
    
    TG = TOPO_GET(MAPP,LEVEL,THICK=THICK,FACT=FACT)
    IF TG EQ [] THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    
    PATH_INFO = STRUCT_GET(TG,TT.TAG + '.PATH_INFO') ; GET THE PATH_INFO TAG
    PATH_XY = STRUCT_GET(TG,TT.TAG + '.PATH_XY') ; GET THE PATH_XY TAG
    
    CLOSE,/ALL
    OPENW,LUN,FILE,/GET_LUN 
    
    MAPS_SET,MAPP,PX=PX,PY=PY ; SET UP MAPP PROJECTION
  
  ;===> GET THE CONTOUR PATHS FOR THIS LEVEL
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR I = 0,N_ELEMENTS(PATH_INFO)-1 DO BEGIN
      NUM = (PATH_INFO[I].N)
      IF NUM  LT MIN_PTS THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      S = LINDGEN(PATH_INFO(I).N)
      X = REFORM(PATH_XY(0,PATH_INFO(I).OFFSET + S ))
      Y = REFORM(PATH_XY(1,PATH_INFO(I).OFFSET + S ))
      XYZ = CONVERT_COORD(X,Y,/NORMAL,/TO_DATA,/DOUBLE)
      LONS = REFORM(XYZ(0,*))
      LATS = REFORM(XYZ(1,*))
      PRINTF,LUN,NUM,LEVEL,FORMAT = FMT
      PRINTF,LUN,LONS,LATS,FORMAT = FMT
    ENDFOR;FOR I = 0,N_ELEMENTS(PATH_INFO)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
   ZWIN
   CLOSE,LUN 
   PFILE, FILE  
  ENDFOR;FOR NTH = 0,NOF(LEVELS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
 
END; #####################  END OF ROUTINE ################################
