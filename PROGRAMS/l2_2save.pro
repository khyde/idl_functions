; $ID:	L2_2SAVE.PRO,	2020-07-08-15,	USER-KJWH	$

	PRO L2_2SAVE, FILES=files, DATE_RANGE=date_range,PRODS=prods,DIR_OUT=DIR_OUT,$
									NO_EXCLUDE=NO_EXCLUDE,DIR_EXCLUDE=DIR_EXCLUDE,N_EXCLUDE=N_EXCLUDE,$
									MAP_OUT=map_out,PX_OUT=px_out,PY_OUT=py_out,REVERSE_FILES=REVERSE_FILES,$
									FLAG_BITS=FLAG_BITS,NOFLAG=NOFLAG,METHOD=METHOD,$
									KEEP_HDF=keep_hdf,OVERWRITE=overwrite,_EXTRA=_extra,$
									STRUCT_RETURN=struct_return,ERROR=ERROR

;+
; NAME:
;		L2_2SAVE
;
; PURPOSE:;
;		This function opens a L2 file,and creates saves for maps
;
; CATEGORY:
;
;
; CALLING SEQUENCE:
;		Write the calling sequence here. Include only positional parameters
;		(i.e., NO KEYWORDS). For procedures, use the form:
;
;		ROUTINE_NAME, Parameter1, Parameter2, Foobar
;
;		Note that the routine name is ALL CAPS and arguments have Initial
;		Caps.  For functions, use the form:
;
;		Result = FUNCTION_NAME(Parameter1, Parameter2, Foobar)
;
; INPUTS:
;		Parm1:	Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;		Parm2:	Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;		KEY1:	Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
;
; OUTPUTS:
;		This function returns the
;
; OPTIONAL OUTPUTS:  ;
; COMMON BLOCKS:
; SIDE EFFECTS:
; RESTRICTIONS:
;	PROCEDURE:
; EXAMPLE:
;			FILES = FILE_SEARCH('E:\MODIS_TEST\*SEAWIFS*.hdf') & DIR_OUT = 'E:\MODIS_TEST\SAVE\' & MAPS = 'NEC' & PRODS = 'chlor_a'
;			L2_2SAVE,FILES=FILES,PRODS=PRODS,DIR_OUT=DIR_OUT,MAP_OUT=MAP_OUT, /OVERWRITE
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			Written:  May 01, 2007 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;     Modified: May 21, 2010 T.Ducas Combine with SST and write out L2 saves
;               Dec 17, 2013 K.J.W.Hyde: Fixed bug with finding bad data using BAD_VALUE_SCALED tag
;               Jul 18, 2016 - KJWH: Updated the default FLAG_BITS 
;     
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'L2_2SAVE'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERR_MSG = ''
	ERROR = 0
 	DASH = '-'
 	SL = DELIMITER(/PATH)
 	;;; REPRO5 FLAG_BITS = [1,2,3,4,5,8,9,10,12,14]

 	IF N_ELEMENTS(FLAG_BITS) LT 1 THEN FLAG_BITS = [0,1,3,4,5,8,9,12,14,25]
	MAP = 'LONLAT'
	;ABACKGROUND=252 & ALAND_COLOR=252 & AOUTSCAN_COLOR=253 & AOUTMAP_COLOR=253 & AALGFAIL_COLOR=251
	;AFLAG_COLOR=254 & AMISS_COLOR=254 & AHI_LO_COLOR=255 & ACRITERIA_COLOR=253 & ABATHY_COLOR=252



; ***** Find files and set up defaults *****
  IF N_ELEMENTS(FILES) EQ 0 THEN BEGIN
    ERR_MSG = 'ERROR: No files provided for L2_2SAVE'
    ERROR = 1
    PRINT, ERR_MSG
    RETURN
  ENDIF  
  
  IF KEYWORD_SET(MAP_OUT)        THEN _MAP_OUT  = MAP_OUT  ELSE _MAP_OUT  = 'LONLAT'
  IF KEYWORD_SET(PRODS)          THEN _PRODS = PRODS ELSE _PRODS = 'CHLOR_A'
  IF N_ELEMENTS(DATE_RANGE) NE 2 THEN DATE_RANGE = ['19700101000000','20201231235959']
  IF N_ELEMENTS(N_EXCLUDE)  NE 1 THEN N_EXCLUDE = 100
	IF KEYWORD_SET(PX_OUT) OR KEYWORD_SET(PY_OUT) THEN BEGIN
		IF NOT KEYWORD_SET(MAP_OUT) THEN STOP
		IF N_ELEMENTS(MAP_OUT) GT 1 OR N_ELEMENTS(PX_OUT) GT 1 OR N_ELEMENTS(PY_OUT) GT 1 THEN STOP
	ENDIF

;	***** Verify that the output maps and products are valid *****
	OK = WHERE(VALID_MAPS(_MAP_OUT,/VALID) EQ 1,COUNT_MAPS)
	IF COUNT_MAPS GE 1 THEN _MAP_OUT=_MAP_OUT[OK] ELSE STOP

  FILES = DATE_SELECT(FILES,DATE_RANGE)
  IF FILES EQ [] THEN GOTO, DONE
  IF KEYWORD_SET(REVERSE_FILES) THEN FILES = REVERSE(FILES)
  FP = PARSE_IT(FILES,/ALL)
  
  IF KEYWORD_SET(METHOD) THEN FP[0].METHOD=METHOD

; Set up output directories  
  DIRS_OUT = []
  IF N_ELEMENTS(DIR_OUT)     EQ 0 THEN DIR_OUT = FP[0].DIR
  IF N_ELEMENTS(DIR_OUT)     EQ 1 THEN FOR N=0,N_ELEMENTS(_MAP_OUT)-1 DO DIRS_OUT = [DIRS_OUT,DIR_OUT+_MAP_OUT(N)+SL+'SAVE'+SL] ELSE DIRS_OUT = DIR_OUT
  IF N_ELEMENTS(DIR_EXCLUDE) EQ 0 THEN DIRS_EXCLUDE = REPLACE(DIRS_OUT,'SAVE','EXCLUDE') ELSE DIRS_EXCLUDE = DIR_EXCLUDE
  
  DIR_TEST,[DIRS_OUT,DIRS_EXCLUDE] 
  EXT = FP.EXT
  EXT_DELIM = FP.EXT_DELIM

  OK_MISS = WHERE(FP.PERIOD EQ MISSINGS(''),COUNT_MISS)
  IF COUNT_MISS GE 1 THEN BEGIN
    OK = WHERE(STRPOS(FP(OK_MISS).NAME_EXT,'L2') GE 0,COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).LEVEL = 'L2'
    SATDATE = FP(OK_MISS).FIRST_NAME
    SAT = STRMID(SATDATE,0,1)
    OK = WHERE(SAT NE 'A' AND SAT NE 'T' AND SAT NE 'S' AND SAT NE 'C',COUNT) & IF COUNT GE 1 THEN STOP
    FP(OK_MISS).PERIOD = 'S_' + SATDATE_2DATE(SATDATE)    
    OK = WHERE(SAT EQ 'A' OR SAT EQ 'T',COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).SENSOR = 'MODIS'
    OK = WHERE(SAT EQ 'S',COUNT)               & IF COUNT GE 1 THEN FP(OK_MISS[OK]).SENSOR = 'SEAWIFS'
    OK = WHERE(SAT EQ 'C',COUNT)               & IF COUNT GE 1 THEN FP(OK_MISS[OK]).SENSOR = 'CZCS'
    OK = WHERE(SAT EQ 'A',COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).SATELLITE = 'AQU'
    OK = WHERE(SAT EQ 'T',COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).SATELLITE = 'TER'
    OK = WHERE(SAT EQ 'S',COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).SATELLITE = 'OV2'
    OK = WHERE(SAT EQ 'C',COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).SATELLITE = 'NI7'
    
    OK = WHERE(STRPOS(FP(OK_MISS).NAME,'GAC')  GE 0, COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).COVERAGE = 'GAC'
    OK = WHERE(STRPOS(FP(OK_MISS).NAME,'LAC')  GE 0, COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).COVERAGE = 'LAC'
    OK = WHERE(STRPOS(FP(OK_MISS).EXT,'LAC')   GE 0, COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).COVERAGE = 'LAC'
    OK = WHERE(STRPOS(FP(OK_MISS).NAME,'MLAC') GE 0, COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).COVERAGE = 'MLAC'
    OK = WHERE(STRPOS(FP(OK_MISS).NAME_EXT,'L2_1KM') GE 0, COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).COVERAGE = 'MLAC'

    OK = WHERE(STRPOS(FP(OK_MISS).EXT,'L2_LAC_SST') GE 0, COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).PROD = 'SST'
    OK = WHERE(STRPOS(FP(OK_MISS).EXT,'L2_LAC_SST4') GE 0, COUNT) & IF COUNT GE 1 THEN FP(OK_MISS[OK]).PROD = 'SST4'
  ENDIF
        

; ***** Create output directories *****
  BSET = WHERE_SETS(FP.SENSOR)
  DIRS = []
  FOR N=0, N_ELEMENTS(BSET)-1 DO BEGIN
    ALG_TEST  = VALID_ALG_CHECK(STRUPCASE(_PRODS),OPRODS=OUTPROD,ALGS=ALG)    
    FOR M = 0, N_ELEMENTS(DIRS_OUT)-1 DO DIRS = [DIRS,DIRS_OUT(M) + OUTPROD + dash + ALG + SL] 
    OK = WHERE(ALG EQ '',COUNT)
    IF COUNT GE 1 THEN DIRS[OK] = REPLACE(DIRS[OK],DASH+SL,SL)
  ENDFOR  
  DIR_TEST,DIRS
  
; ***** Loop through files *****
	FOR NTH=0L, N_ELEMENTS(FILES)-1 DO BEGIN
		AFILE    = FILES[NTH]		
		FN       = FP[NTH]
		INAME    = FN.PERIOD + dash + FN.SENSOR + dash + FN.SATELLITE
		IF FN.METHOD NE '' THEN INAME = INAME + dash + FN.METHOD
    SENSOR   = FN.SENSOR
    COVERAGE = FN.COVERAGE
		REMOVE_FILE = ''
		FI_IN=FILE_INFO(AFILE)
	;	IF STRUPCASE(FN.EXT) EQ 'L2_1KM' THEN REMOVE_FILE=AFILE

;		***** Check if any maps are missing saves for any prods *****
		SAVEFILES = []
		FOR MTH = 0L, N_ELEMENTS(_MAP_OUT)-1 DO BEGIN
			AMAP = _MAP_OUT(MTH)
      _DIR_OUT = DIRS_OUT(MTH)
      _DIR_EXCLUDE = DIRS_EXCLUDE(MTH)	      			      
      OUTPUT_LABEL = INAME + dash + FN.COVERAGE + dash + AMAP
      IF NOT KEYWORD_SET(NO_EXCLUDE) THEN BEGIN
      	DIR_TEST,_DIR_EXCLUDE
				EXCLUDE_FILE=_DIR_EXCLUDE + OUTPUT_LABEL  + '.TXT'
				IF FILE_TEST(EXCLUDE_FILE) EQ 1 THEN CONTINUE
   			;IF FILE_TEST(EXCLUDE_FILE) EQ 1 AND GET_MTIME(EXCLUDE_FILE) GT GET_MTIME(AFILE) THEN CONTINUE
			ENDIF
		
			ALG_TEST  = VALID_ALG_CHECK(STRUPCASE(_PRODS),OPRODS=OUTPROD,ALGS=ALG)
			SAVEFILES = [SAVEFILES,_DIR_OUT + OUTPROD + dash + ALG + SL + OUTPUT_LABEL + dash + OUTPROD + dash + ALG + '.SAVE'] 					
		ENDFOR;FOR MTH = 0L, N_ELEMENTS(_MAP_OUT)-1 DO BEGIN
		IF SAVEFILES EQ [] THEN CONTINUE
		SAVEFILES = REPLACE(SAVEFILES,[dash+SL,dash+dash,dash+'.'],[SL,dash,'.'])
		IF FILE_MAKE(AFILE,SAVEFILES,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE ; >>>>>>> Go to next file
 
;   ***** If file is zipped, then upzip *****
    IF STRUPCASE(FN.EXT) EQ 'GZ' OR STRUPCASE(FN.EXT) EQ 'BZ2' THEN BEGIN
			ZIP,FILES=AFILE,DIR_OUT=FN.DIR
			AFILE = FN.DIR + FN.NAME                                             ; Make the unzipped file AFILE
   	 	FA = PARSE_IT(AFILE,/ALL)
   	 	REMOVE_FILE = AFILE
    ENDIF
    
    IF NOT FI_IN[0].SIZE GT 0L THEN BEGIN
      EXCLUDE_TEXT = 'INPUT FILE: '+AFILE+'   ZERO FILE SIZE'
      GOTO, WRITE_EXCLUDE
    ENDIF  

;		***** Read the L2 HDF file *****
    PRINT, 'Working on file (' + NUM2STR(NTH+1) + ' of ' + NUM2STR(N_ELEMENTS(FILES)) + '): ' + AFILE    
		HDF_PRODS=['L2_FLAGS','LONGITUDE','LATITUDE','CNTL_PT_COLS','CNTL_PT_ROWS']
		QUAL = []
		FOR _ALG=0, N_ELEMENTS(ALG)-1 DO IF STRPOS(ALG(_ALG),'4UM')  GE 0 THEN QUAL = 'QUAL_SST4'
		FOR _ALG=0, N_ELEMENTS(ALG)-1 DO IF STRPOS(ALG(_ALG),'11UM') GE 0 THEN QUAL = 'QUAL_SST'
		HDF_PRODS=[HDF_PRODS,QUAL]

;   ***** Look for PRODS in HDF file *****
    STRUCT = READ_HDF_2STRUCT(AFILE,PRODUCTS=_PRODS,/LOOK,ERROR=ERROR,ERR_MSG=ERR_MSG)
    IF ERROR EQ 1 THEN BEGIN
      PRINT, ERR_MSG
      CONTINUE
    ENDIF

    STRUCT = READ_HDF_2STRUCT(AFILE,PRODUCTS=HDF_PRODS,ERROR=ERROR,ERR_MSG=ERR_MSG)
		IF ERROR NE '' THEN BEGIN			
			EXCLUDE_TEXT='INPUT FILE: '+AFILE+'    ' + ERR_MSG			          
      PRINT, EXCLUDE_TEXT            
      WRITE_TXT,EXCLUDE_FILE, EXCLUDE_TEXT ; ; Write text to exclude folder      
      GONE,STRUCT
      CONTINUE
		ENDIF
    
;		***** Get tagnames *****
		TAGS = TAG_NAMES(STRUCT.SD)

;   ***** Retrieve the LATITUDE/LONGITUDE *****
    PRINT, 'Retrieving latitude, longitude and control points'
    IN_LONS = STRUCT.SD.LONGITUDE.IMAGE
    IN_LATS = STRUCT.SD.LATITUDE.IMAGE
    CTL_LONS = STRUCT.SD.CNTL_PT_COLS.IMAGE
    CTL_LATS = STRUCT.SD.CNTL_PT_ROWS.IMAGE

		LON_MIN=NUM2STR(ROUND(MIN(IN_LONS)-0.5))
		LON_MAX=NUM2STR(ROUND(MAX(IN_LONS)+0.5))
		LAT_MIN=NUM2STR(ROUND(MIN(IN_LATS)-0.5))
		LAT_MAX=NUM2STR(ROUND(MAX(IN_LATS)+0.5))

		LON_MIN=REPLACE(LON_MIN,'-','W')
		LON_MAX=REPLACE(LON_MAX,'-','W')
		LAT_MIN=REPLACE(LAT_MIN,'-','S')
		LAT_MAX=REPLACE(LAT_MAX,'-','S')

		SZ=SIZE(IN_LONS,/STRUCT)
		L2_PX=SZ.DIMENSIONS[0]
		L2_PY=SZ.DIMENSIONS[1]		

		FLAGS_IMAGE=''
		OK = WHERE(TAGS EQ 'L2_FLAGS',COUNT)
		IF COUNT EQ 1  THEN FLAGS_IMAGE = STRUCT.SD.L2_FLAGS.IMAGE

		IF QUAL NE [] THEN BEGIN
			OK_QUAL = WHERE(TAGS EQ QUAL,COUNT)
			IF COUNT EQ 1 THEN QUAL_IMAGE = STRUCT.SD.(OK_QUAL).IMAGE
		ENDIF
		GONE,STRUCT

;		***** Loop through each map *****
		FOR MTH = 0L, N_ELEMENTS(_MAP_OUT)-1 DO BEGIN
		; REFRESH COMMON MEMORY FOR MAP_REMAP OF EACH NEW MAP
			REFRESH = 1
      AMAP = _MAP_OUT(MTH)
      _DIR_OUT = DIRS_OUT(MTH)
      _DIR_EXCLUDE = DIRS_EXCLUDE(MTH)  		
			OUTPUT_LABEL = INAME + dash + COVERAGE + dash + AMAP
      IF NOT KEYWORD_SET(NO_EXCLUDE) THEN BEGIN      
        EXCLUDE_FILE=_DIR_EXCLUDE + OUTPUT_LABEL  + '.TXT'
        IF FILE_TEST(EXCLUDE_FILE) EQ 1 AND GET_MTIME(EXCLUDE_FILE) GT GET_MTIME(AFILE) THEN CONTINUE
      ENDIF

			; check if any saves need to be done for AMAP
			DO_SAVE=0
			; check for L2 save containing LATS,LONS and SUBS arrays
			IF AMAP EQ 'LONLAT' THEN BEGIN
			  LONLAT_SAVE=_DIR_OUT+OUTPUT_LABEL+dash+'LON_'+LON_MIN+'_'+LON_MAX+dash+'LAT_'+LAT_MIN+'_'+LAT_MAX+'.SAVE'				
	      IF GET_MTIME(LONLAT_SAVE) LT FI_IN.MTIME OR KEYWORD_SET(OVERWRITE) THEN DO_SAVE = DO_SAVE + 1
			ENDIF
			
			ALG_TEST  = VALID_ALG_CHECK(STRUPCASE(_PRODS),OPRODs=OUTPRODS,ALGS=ALG)
      SAVEFILES = _DIR_OUT + OUTPRODS + dash + ALG + SL + OUTPUT_LABEL + dash + OUTPRODS + dash + ALG + '.SAVE'           
      OK = WHERE(ALG EQ '',COUNT)
      IF COUNT GE 1 THEN SAVEFILES[OK] = REPLACE(SAVEFILES[OK],[dash+SL,dash+dash,dash+'.'],[SL,dash,'.'])
      OK = WHERE(FILE_TEST(SAVEFILES) EQ 0 OR GET_MTIME(SAVEFILES) LT FI_IN.MTIME,COUNT)
      IF COUNT EQ 0 AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
      IF NOT KEYWORD_SET(OVERWRITE) THEN BEGIN
        SAVEFILES = SAVEFILES[OK]
        _PRODS = _PRODS[OK]
        ALG  = ALG[OK]
      ENDIF  
      
;     ***** Check for output directories *****
      DIR_FP = FILE_PARSE(SAVEFILES)
      FOR DFP = 0, N_ELEMENTS(DIR_FP)-1 DO IF FILE_TEST(DIR_FP(DFP).DIR,/DIR) EQ 0 THEN FILE_MKDIR, DIR_FP(DFP).DIR 
      

			SZ = MAPS_SIZE(AMAP)
			IF N_ELEMENTS(PX_OUT) EQ 0 THEN _PX_OUT = SZ.PX ELSE _PX_OUT = PX_OUT
			IF N_ELEMENTS(PY_OUT) EQ 0 THEN _PY_OUT = SZ.PY ELSE _PY_OUT = PY_OUT

;			***** Read the standard landmask for this map *****
			STRUCT_LANDMASK = READ_LANDMASK(AMAP,/STRUCT)
			IF ERROR NE '' THEN BEGIN
				COUNT_LAND = 0
				COUNT_OCEAN =0
			ENDIF ELSE BEGIN
	  		OK_LAND     = STRUCT_LANDMASK.LAND
	  		COUNT_LAND  = STRUCT_LANDMASK.COUNT_LAND
				OK_OCEAN    = STRUCT_LANDMASK.OCEAN
	  		COUNT_OCEAN = STRUCT_LANDMASK.COUNT_OCEAN
	  		GONE, STRUCT_LANDMASK
			ENDELSE

;			***** Get FLAG information *****
			COUNT_L2_FLAGS=0
			IF FLAGS_IMAGE[0] NE '' THEN BEGIN
				_FLAGS_IMAGE=FLAGS_IMAGE
				_AMAP = AMAP
				IF MAP NE AMAP THEN $
			  	_FLAGS_IMAGE = MAP_REMAP(_FLAGS_IMAGE,MAP_IN=MAP,MAP_OUT=AMAP,CONTROL_LONS=IN_LONS,CONTROL_LATS=IN_LATS,CONTROL_SUBS_LON=CTL_LONS,CONTROL_SUBS_LAT=CTL_LATS,REFRESH=REFRESH,PX_OUT=_PX_OUT,PY_OUT=_PY_OUT)
        IF AMAP NE _AMAP THEN AMAP = _AMAP  
	      OUT_OF_SCAN =WHERE(_FLAGS_IMAGE EQ MISSINGS(_FLAGS_IMAGE),COUNT_OUT_OF_SCAN)
	      FLAGS_NAMES = SD_FLAGS(_FLAGS_IMAGE,SENSOR=SENSOR,/NAMES)
	  		MASK_FLAG = SD_FLAGS_COMBO(_FLAGS_IMAGE,FLAG_BITS)
	      OK_L2_FLAGS =WHERE(MASK_FLAG NE 0, COUNT_L2_FLAGS)
				IF WHERE(_PRODS EQ 'SST') GE 0 OR WHERE(_PRODS EQ 'SST4') GE 0 THEN COUNT_L2_FLAGS=0
	      GONE, _FLAGS_IMAGE
	      REFRESH = 0
	    ENDIF; IF FLAGS_IMAGE(0) NE '' THEN BEGIN

;   	*****  SST QUAL MASK *****
			IF QUAL NE [] THEN BEGIN
				_QUAL_IMAGE = QUAL_IMAGE
				_AMAP = AMAP
        IF MAP NE AMAP THEN $
          _QUAL_IMAGE = MAP_REMAP(_QUAL_IMAGE,MAP_IN='LONLAT',MAP_OUT=AMAP,CONTROL_LONS=IN_LONS,CONTROL_LATS=IN_LATS,CONTROL_SUBS_LON=CTL_LONS,CONTROL_SUBS_LAT=CTL_LATS,REFRESH=REFRESH,PX_OUT=_PX_OUT,PY_OUT=_PY_OUT)
        IF AMAP NE _AMAP THEN AMAP = _AMAP
				IF REFRESH EQ 1 THEN REFRESH=0

       	OK_QUAL_0 = WHERE(_QUAL_IMAGE EQ 0, COUNT_QUAL_0)
       	OK_QUAL_1 = WHERE(_QUAL_IMAGE EQ 1, COUNT_QUAL_1)
       	OK_QUAL_2 = WHERE(_QUAL_IMAGE EQ 2, COUNT_QUAL_2)
       	OK_QUAL_3 = WHERE(_QUAL_IMAGE EQ 3, COUNT_QUAL_3)
       	OK_QUAL_4 = WHERE(_QUAL_IMAGE EQ 4, COUNT_QUAL_4)

;    		*****  Make Mask for STRUCT_SD  *****
				MASK=BYTE(_QUAL_IMAGE) & MASK(*,*)=0B
				GONE,_QUAL_IMAGE

;    		===> NOT_MASK (good data , 0b)
    		CODE_NAME = 'NOT_MASK'
    		CODE_MASK = 0B
    		CODE_NAME_MASK=[CODE_NAME]

        CODE_NAME = 'NOT_MASK'
        ACODE = 1B
        CODE_MASK = [CODE_MASK,ACODE]
        CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
        IF COUNT_QUAL_1 GE 1 THEN MASK(OK_QUAL_1) = ACODE

				CODE_NAME = 'SUSPECT_SST'
        ACODE = 2B
        CODE_MASK = [CODE_MASK,ACODE]
        CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
        IF COUNT_QUAL_2 GE 1 THEN MASK(OK_QUAL_2) = ACODE
        NOTES = 'Quality code 2 masked as SUSPECT_SST'

				CODE_NAME = 'BAD_SST'
        ACODE = 3B
        CODE_MASK = [CODE_MASK,ACODE]
        CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
        IF COUNT_QUAL_3 GE 1 THEN MASK(OK_QUAL_3) = ACODE

				CODE_NAME = 'SST_FAIL'
        ACODE = 4B
        CODE_MASK = [CODE_MASK,ACODE]
        CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
        IF COUNT_QUAL_4 GE 1 THEN MASK(OK_QUAL_4) = ACODE

;    		===> L2_FLAGS
    		CODE_NAME = 'L2_FLAGS'
    		ACODE = 5B
    		CODE_MASK     =[CODE_MASK,ACODE]
    		CODE_NAME_MASK=[CODE_NAME_MASK,CODE_NAME]
    		IF COUNT_L2_FLAGS GE 1 THEN MASK(OK_L2_FLAGS) = ACODE

;    		===> LAND
    		CODE_NAME = 'LAND'
    		ACODE = 6B
    		CODE_MASK     =[CODE_MASK,ACODE]
    		CODE_NAME_MASK=[CODE_NAME_MASK,CODE_NAME]
    		IF COUNT_LAND GE 1 THEN MASK(OK_LAND) = ACODE

			ENDIF; IF ALG EQ '4UM' OR ALG EQ '11UM' THEN BEGIN

;			***** Loop through each product *****
			FOR PTH = 0L, N_ELEMENTS(_PRODS)-1 DO BEGIN
				APROD = STRUPCASE(_PRODS(PTH))
				AALG  = ALG(PTH) 
				OUTPROD = OUTPRODS(PTH)
				SAVEFILE = SAVEFILES(PTH)
				        
;	  		***** Check which PRODs need saves made *****				
	      IF GET_MTIME(SAVEFILE) GT FI_IN.MTIME AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE

		    STRUCT = READ_HDF_2STRUCT(AFILE,PRODUCTS=APROD,ERROR=ERROR,ERR_MSG=ERR_MSG)
				IF ERROR EQ 1 THEN BEGIN					
					PRINT,ERR_MSG
					CONTINUE 
				ENDIF

				NAMES = STRUPCASE(TAG_NAMES(STRUCT.SD))
				OK_PROD = WHERE(STRUPCASE(NAMES) EQ APROD, COUNT_PROD)

				IF COUNT_PROD EQ 1 THEN IMG = STRUCT.SD.(OK_PROD).IMAGE ELSE CONTINUE

;       ***** Remap ARRAY to output map *****
				_AMAP = AMAP
				IF AMAP NE MAP THEN $
					IMG = MAP_REMAP(IMG,MAP_IN='LONLAT',MAP_OUT=AMAP,CONTROL_LONS=IN_LONS,CONTROL_LATS=IN_LATS,CONTROL_SUBS_LON=CTL_LONS,CONTROL_SUBS_LAT=CTL_LATS,REFRESH=REFRESH,PX_OUT=_PX_OUT,PY_OUT=_PY_OUT)
        IF AMAP NE _AMAP THEN AMAP = _AMAP  
				IF REFRESH EQ 1 THEN REFRESH=0

				LONG_NAME=''
				DATA_UNITS=''
	  		BAD_VALUE_UNSCALED=[]
	  		BAD_VALUE_SCALED=[]

				TAGNAMES= TAG_NAMES(STRUCT.SD.(OK_PROD))
				OK=WHERE(STRUPCASE(TAGNAMES) EQ 'DATA_UNITS',COUNT)
				IF COUNT EQ 1 THEN DATA_UNITS=STRUCT.SD.(OK_PROD).UNITS[0]
				OK=WHERE(STRUPCASE(TAGNAMES) EQ 'LONG_NAME',COUNT)
				IF COUNT EQ 1 THEN 	LONG_NAME=STRUCT.SD.(OK_PROD).LONG_NAME[0]
				OK=WHERE(STRUPCASE(TAGNAMES) EQ 'BAD_VALUE_UNSCALED',COUNT)
				IF COUNT EQ 1 THEN 	BAD_VALUE_UNSCALED=STRUCT.SD.(OK_PROD).BAD_VALUE_UNSCALED[0]
				OK=WHERE(STRUPCASE(TAGNAMES) EQ 'BAD_VALUE_UNSCALED',COUNT)
				IF COUNT EQ 1 THEN 	BAD_VALUE_SCALED=STRUCT.SD.(OK_PROD).BAD_VALUE_SCALED[0] ELSE BAD_VALUE_SCALED = ''
	 ; 		NOTES=['BAD_VALUE_UNSCALED:   '+NUM2STR(BAD_VALUE_UNSCALED)]

				;  REPRO 5 does not have same tags as REPRO6				
				IF STRPOS(AALG,'4UM')EQ -1 AND STRPOS(AALG,'11UM') THEN BEGIN
					IF APROD NE 'L2_FLAGS' THEN BEGIN
					; check scaled image for  BAD_VALUE_SCALED
						COUNT_BAD=0
						IF BAD_VALUE_SCALED NE [] THEN OK_BAD=WHERE(IMG EQ BAD_VALUE_SCALED,COUNT_BAD)
						IF COUNT_BAD GE 1 THEN IMG(OK_BAD) = MISSINGS(IMG)
					ENDIF
					; set flagged pixels to missings
					IF APROD NE 'L2_FLAGS' AND APROD NE 'PAR' AND APROD NE 'SENZ' AND APROD NE 'SST' AND APROD NE 'SST4' THEN BEGIN
						IF NOT KEYWORD_SET(NOFLAG) AND COUNT_L2_FLAGS GE 1 THEN IMG(OK_L2_FLAGS)=MISSINGS(IMG)
					ENDIF
				ENDIF

			;	IF COUNT_OUT_OF_SCAN GE 1 THEN IMAGE(OUT_OF_SCAN)=MISSINGS(IMAGE)
				IF APROD EQ 'SST' OR APROD EQ 'SST4' THEN BEGIN
					OK_GOOD=WHERE(IMG GT -32767 AND IMG LT MISSINGS(IMG) ,COUNT_GOOD)
				ENDIF ELSE BEGIN
					OK_GOOD=WHERE(IMG NE MISSINGS(IMG),COUNT_GOOD)
				ENDELSE
			; apply slope & intercept to get data values

				IF OUTPROD NE 'L2_FLAGS' THEN BEGIN
					DATA=FLOAT(IMG)
					DATA(0:*) = MISSINGS(0.0)
					IF COUNT_GOOD GE 1 THEN DATA(OK_GOOD)=IMG(OK_GOOD) * STRUCT.SD.(OK_PROD).SLOPE[0] + STRUCT.SD.(OK_PROD).INTERCEPT[0]
					IMG=DATA
					GONE, DATA
				ENDIF

				IF APROD EQ 'CHLOR_A' OR APROD EQ 'POC' OR APROD EQ 'DOC' OR APROD EQ 'A_CDOM' THEN BEGIN
					OK=WHERE(IMG LE 0,COUNT)
					IF COUNT GE 1 THEN IMG[OK] = MISSINGS(0.0)
				ENDIF

				IF NOT KEYWORD_SET(NO_EXCLUDE) THEN BEGIN ; Check if this belongs in the exclude folder
					OK=WHERE(IMG NE MISSINGS(IMG),COUNT)
					IF COUNT LT N_EXCLUDE THEN BEGIN
						EXCLUDE_TEXT='INPUT FILE: '+AFILE+'     CONTAINED LESS THAN '+NUM2STR(N_EXCLUDE) + ' GOOD DATA PIXELS FOR MAP: ' + AMAP
					; Write text to exclude folder
					  WRITE_EXCLUDE:
            PRINT, EXCLUDE_TEXT					  
						WRITE_TXT,EXCLUDE_FILE, EXCLUDE_TEXT
						GONE,DATA
						GONE,IMG
						GONE,STRUCT
						GOTO,DONE_PRODS
					ENDIF
				ENDIF

				SCALING='linear'
				SLOPE=1.0
				INTERCEPT=0.0

				ASTAT='DATA'
				MISSING_CODES=MISSINGS(0.0)
    		IF OUTPROD EQ 'L2_FLAGS' THEN MISSING_CODES=''
    		MISSING_NAMES=[STRTRIM(MISSING_CODES,2)]
				IF N_ELEMENTS(MISSING_CODES) NE N_ELEMENTS(MISSING_NAMES) THEN MISSING_NAMES=REPLICATE('',N_ELEMENTS(MISSING_CODES))

				IF AMAP EQ 'LONLAT' THEN BEGIN
					OK=WHERE(STRUPCASE(TAG_NAMES(STRUCT)) EQ 'GLOBAL',COUNT)
					IF COUNT EQ 1 THEN BEGIN
						_GLOBAL=STRUCT.GLOBAL
						_INPUT_PARAMETERS=STRSPLIT(_GLOBAL.INPUT_PARAMETERS,BYTE(10),/EXTRACT)
						_L2_INPUT_FILES= STRSPLIT(_GLOBAL.INPUT_FILES,',',/EXTRACT)
					ENDIF
				ENDIF

       	IF KEYWORD_SET(STRUCT_RETURN) THEN BEGIN
       	; THIS WORKS FOR A SINGLE FILE,RETURN STRUCT_RETURN TO THE CALLING PROGRAM
       		IF AMAP EQ 'LONLAT' THEN BEGIN
	          	IF APROD EQ 'SST' OR APROD EQ 'SST4' THEN BEGIN
	          		STRUCT_RETURN=STRUCT_SD_MAKE(IMG,FILE_NAME=SAVEFILE,PROD=APROD, ASTAT=ASTAT,GLOBAL=_GLOBAL,$
	          				 INPUT_PARAMETERS=_INPUT_PARAMETERS, 	L2_INPUT_FILES=_L2_INPUT_FILES,$
	                   MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
	                   MASK=MASK,     CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
	                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
	                   PERIOD=FN.PERIOD, ALG=AALG,$
	                   SENSOR=SENSOR,    SATELLITE=SATELLITE, SAT_EXTRA=SAT_EXTRA,$
	                   METHOD=METHOD,   SUITE=SUITE,          MAP=_MAP, $
	                   INFILE=FN.FULLNAME,$
	                   NOTES=NOTES, ERROR=ERROR, $
	                   LONS=IN_LONS, LATS=IN_LATS,CTL_LONS=CTL_LONS,CTL_LATS=CTL_LATS)
							ENDIF ELSE BEGIN
	          		STRUCT_RETURN=STRUCT_SD_MAKE(IMG,FILE_NAME=SAVEFILE,PROD=APROD, ASTAT=ASTAT,GLOBAL=_GLOBAL,$
	          				 INPUT_PARAMETERS=_INPUT_PARAMETERS, 	L2_INPUT_FILES=_L2_INPUT_FILES,$
	                   MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
	                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
	                   PERIOD=FN.PERIOD, ALG=AALG,$
	                   SENSOR=SENSOR,    SATELLITE=FN.SATELLITE, SAT_EXTRA=SAT_EXTRA,$
	                   METHOD=METHOD,   SUITE=SUITE,          MAP=AMAP, $
	                   INFILE=FN.FULLNAME,$
	                   NOTES=NOTES, ERROR=ERROR, $
	                   LONS=IN_LONS, LATS=IN_LATS,CTL_LONS=CTL_LONS,CTL_LATS=CTL_LATS)
							ENDELSE;IF APROD EQ 'SST' OR APROD EQ 'SST4' THEN BEGIN
					ENDIF ELSE BEGIN;	IF AMAP EQ 'LONLAT' THEN BEGIN
						IF APROD EQ 'SST' OR APROD EQ 'SST4' THEN BEGIN
          		STRUCT_RETURN=STRUCT_SD_MAKE(IMG,FILE_NAME=SAVEFILE,PROD=APROD, ASTAT=ASTAT,$
                   MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
                   MASK=MASK,     CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
                   PERIOD=FN.PERIOD, ALG=AALG,$
                   SENSOR=SENSOR,    SATELLITE=SATELLITE, SAT_EXTRA=SAT_EXTRA,$
                   METHOD=METHOD,   SUITE=SUITE,          MAP=_MAP, $
                   INFILE=FN.FULLNAME,$
                   NOTES=NOTES, ERROR=ERROR)
						ENDIF ELSE BEGIN
							STRUCT_RETURN=STRUCT_SD_MAKE(IMG,FILE_NAME=SAVEFILE,PROD=OUTPROD, ASTAT=ASTAT,$
				   					MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
                   PERIOD=FN.PERIOD,   SENSOR=SENSOR,       SATELLITE=FN.SATELLITE, SAT_EXTRA=SAT_EXTRA,$
                   METHOD=METHOD,   ALG=AALG,  MAP=AMAP, $
                   INFILE=FN.FULLNAME,$
                   NOTES=NOTES,ERROR=ERROR)
						ENDELSE;IF APROD EQ 'SST' OR APROD EQ 'SST4' THEN BEGIN
					ENDELSE;IF AMAP EQ 'LONLAT' THEN BEGIN
					IF N_ELEMENTS(FILES) EQ 1 AND KEYWORD_SET(STRUCT_RETURN) THEN BEGIN
						IF NOT KEYWORD_SET(KEEP_HDF) AND REMOVE_FILE NE '' THEN FILE_DELETE,REMOVE_FILE
					ENDIF
					GOTO,DONE
       	ENDIF ELSE BEGIN;IF KEYWORD_SET(STRUCT_RETURN) THEN BEGIN
		      IF AMAP EQ 'LONLAT' THEN BEGIN ; WRITE OUT LONLAT save with LONS & LATS if it does not exist						       		 	
	      		IF GET_MTIME(LONLAT_SAVE) LT FI_IN.MTIME OR KEYWORD_SET(OVERWRITE) THEN BEGIN
	      			DUMMY=''
	      			STRUCT_LONLAT=STRUCT_SD_MAKE(DUMMY,FILE_NAME=LONLAT_SAVE,PROD='LONLAT',GLOBAL=_GLOBAL,$
          				 INPUT_PARAMETERS=_INPUT_PARAMETERS, 	L2_INPUT_FILES=_L2_INPUT_FILES,$
                   PERIOD=FN.PERIOD,$
                   SENSOR=SENSOR,    SATELLITE=FN.SATELLITE, SAT_EXTRA=SAT_EXTRA,$
                   METHOD=METHOD,   SUITE=SUITE, MAP=AMAP, $
                   INFILE=FN.FULLNAME,$
                   NOTES=NOTES, ERROR=ERROR, $
                   LONS=IN_LONS, LATS=IN_LATS,CTL_LONS=CTL_LONS,CTL_LATS=CTL_LATS)
							SAVE,FILENAME=LONLAT_SAVE,STRUCT_LONLAT,/COMPRESS
	      		ENDIF
						IF APROD EQ 'SST' OR APROD EQ 'SST4' THEN BEGIN
							STRUCT_SD_WRITE,SAVEFILE,PROD=APROD, ASTAT=ASTAT,$
		                   IMAGE=IMG,     MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
		                   MASK=MASK,     CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
		                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
		                   PERIOD=FN.PERIOD,   SENSOR=SENSOR,       SATELLITE=FN.SATELLITE, SAT_EXTRA=SAT_EXTRA,$
		                   METHOD=METHOD,   ALG=AALG,  MAP=AMAP, $
		                   INFILE=FN.FULLNAME,LONLAT_FILE=LONLAT_SAVE,$
		                   NOTES=NOTES,ERROR=ERROR
						ENDIF ELSE BEGIN
		        	STRUCT_SD_WRITE,SAVEFILE,PROD=APROD, ASTAT=ASTAT,$
		                   IMAGE=IMG,     MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
		                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
		                   PERIOD=FN.PERIOD,   SENSOR=SENSOR,       SATELLITE=FN.SATELLITE, SAT_EXTRA=SAT_EXTRA,$
		                   METHOD=METHOD,   ALG=AALG,  MAP=AMAP, $
		                   INFILE=FN.FULLNAME,LONLAT_FILE=LONLAT_SAVE,$
		                   NOTES=NOTES,ERROR=ERROR
		      	ENDELSE
		      ENDIF ELSE BEGIN;IF AMAP EQ 'LONLAT' THEN BEGIN
		      	IF APROD EQ 'SST' OR APROD EQ 'SST4' THEN BEGIN
							STRUCT_SD_WRITE,SAVEFILE,PROD=OUTPROD, ASTAT=ASTAT,$
		                   IMAGE=IMG,     MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
		                   MASK=MASK,     CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
		                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
		                   PERIOD=FN.PERIOD,   SENSOR=SENSOR,       SATELLITE=FN.SATELLITE, SAT_EXTRA=SAT_EXTRA,$
		                   METHOD=METHOD,   ALG=ALG,  MAP=AMAP, $
		                   INFILE=FN.FULLNAME,$
		                   NOTES=NOTES,ERROR=ERROR
		      	ENDIF ELSE BEGIN
		      		STRUCT_SD_WRITE,SAVEFILE,PROD=OUTPROD, ASTAT=ASTAT,$
		                   IMAGE=IMG,     MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
		                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
		                   PERIOD=FN.PERIOD,   SENSOR=SENSOR,       SATELLITE=FN.SATELLITE, SAT_EXTRA=SAT_EXTRA,$
		                   METHOD=METHOD,   ALG=AALG,  MAP=AMAP, $
		                   INFILE=FN.FULLNAME,$
		                   NOTES=NOTES,ERROR=ERROR
		      	ENDELSE
		      ENDELSE;IF AMAP EQ 'LONLAT' THEN BEGIN
	      ENDELSE
				GONE, IMG
			ENDFOR 		; End PROD loop
      DONE_PRODS:
  	ENDFOR	; End MAP loop


		IF NOT KEYWORD_SET(KEEP_HDF) AND REMOVE_FILE NE '' THEN FILE_DELETE,REMOVE_FILE,/QUIET
		GONE, STRUCT
		GONE, IN_LONS
    GONE, IN_LATS
    GONE, CTL_LONS
    GONE, CTL_LATS
	ENDFOR			; End FILE loop
	DONE:
END; #####################  End of Routine ################################
