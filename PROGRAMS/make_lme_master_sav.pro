; $ID:	MAKE_LME_MASTER_SAV.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;#############################################################################################################
	PRO MAKE_LME_MASTER_SAV

;
; PURPOSE: ASSEMBLE KEY STATS FROM SEVERAL PRODS INTO A MASTER LOOKUP SAV FILE
;
; CATEGORY:	
;
; CALLING SEQUENCE: MAKE_LME_MASTER_SAV
;
; INPUTS: 
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;		

; OUTPUTS: 
;		
; EXAMPLES: 
; 
;
; MODIFICATION HISTORY:
;			JUL 3,2014,  WRITTEN BY J.O'REILLY 
;			SEP 10,2014,JOR ADDED TAGS M_SAMPLED_CHL N_M_CHL 
;			SEP 13,2014,JOR CHANGED SAMPLING_EFF TO SAMPLING_FREQ
;			SEP 14,2014,JOR ADDED MED_PCT_COVERAGE
;			
;			
;#################################################################################
;-
;***********************************
ROUTINE_NAME  = 'MAKE_LME_MASTER_SAV'
;***********************************
;===> DEFAULTS
DIR = GET_SMI(3)
PTAG,DIR
TRENDS = IDL_RESTORE(DIR.LME_TRENDS + 'STATS_TREND_PRODS.SAV') & PN,TRENDS
CHL_TRENDS = TRENDS(WHERE(TRENDS.PROD EQ 'CHLOR_A')) & PN,CHL_TRENDS
PP_TRENDS = TRENDS(WHERE(TRENDS.PROD EQ 'PPD')) & PN,PP_TRENDS
PAR_TRENDS = TRENDS(WHERE(TRENDS.PROD EQ 'PAR')) & PN,PAR_TRENDS
SST_TRENDS = TRENDS(WHERE(TRENDS.PROD EQ 'SST')) & PN,SST_TRENDS

;###. RESTRICT TO 1998-2013
MIN_YEAR = '1998' & MAX_YEAR ='2013'
CHLOR_A = IDL_RESTORE(DIR.LME_DATA + 'UNEP_MAIN-M_CHLOR_A.SAVE') 
OK = WHERE(CHLOR_A.YEAR GE MIN_YEAR AND CHLOR_A.YEAR LE MAX_YEAR)& CHL = CHLOR_A[OK]& PN,CHL

PPM = IDL_RESTORE(DIR.LME_DATA + 'UNEP_MAIN-M_CHLOR_A.SAVE')
OK = WHERE(PPM.YEAR GE MIN_YEAR AND PPM.YEAR LE MAX_YEAR)& PPM = PPM[OK]& PN,PPM
 
PPY = IDL_RESTORE(DIR.LME_DATA + 'UNEP_MAIN-Y_PPD-OPAL.SAVE')
OK = WHERE(PPY.YEAR GE MIN_YEAR AND PPY.YEAR LE MAX_YEAR)& PPY = PPY[OK]& PN,PPY

DB = GET_LME_DB() 
;===> ADD NICKNAMES TO DB
NICK = STRUCT_IT(GET_LME_NICKNAME(DB.MAP),'NICKNAME',/ARR)  & PN,NICK
DB = MERGE_STRUCT(DB,NICK)

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0, N_ELEMENTS(DB) -1 DO BEGIN
  D=DB[NTH]
  MAPP = D.MAP
  PF,MAPP,/U
  ;######     GET ALL MONTHS FOR MAPP     ############
  OK = WHERE(CHL.MAP EQ MAPP,M_SAMPLED_CHL) & CHL_ = CHL[OK] 
  ;|||||||||||||||||||||||||||||||||||||||||||||||||||
  ;
  
  ;===> ADD MIN MAX YEARS OF ANALYSIS AND DATE_NOW
  D= CREATE_STRUCT(D,'DATE_RUN',DATE_NOW(),'MIN_YEAR',MIN_YEAR,'MAX_YEAR',MAX_YEAR)
  ;===> ADD TOTAL NUMBER OF MONTH SAMPLED FOR CHL
  D = CREATE_STRUCT(D,'M_SAMPLED_CHL',M_SAMPLED_CHL)
  ;===> ADD NUMBER OF M WITH NON-MISSING DATA  SAMPLING_FREQ
  OK = WHERE(FINITE(CHL_.GMEAN) EQ 1,N_M_CHL)
  D = CREATE_STRUCT(D,'N_M_CHL',N_M_CHL)
  ;===> ADD SAMPLING_FREQ
  SAMPLING_FREQ = 100.0 * D.N_M_CHL/D.M_SAMPLED_CHL
  D = CREATE_STRUCT(D,'SAMPLING_FREQ',SAMPLING_FREQ)
  ;===> ADD MED_PCT_COVERAGE
  MED_PCT_COVERAGE =MEDIAN(100.0*CHL_.N/CHL_.LME_N_PIXELS)
  D = CREATE_STRUCT(D,'MED_PCT_COVERAGE',MED_PCT_COVERAGE)
  
  
  ;#####  ADD CLIMATOLOGICAL MONTHLY MEAN CHL     ##############################
  JD = PERIOD_2JD(CHL_.PERIOD) & DATA = CHL_.GMEAN & PERIOD_CODE = 'MONTH'
  PER_MONTH = STATS_PERIOD(JD,DATA,PERIOD_CODE=PERIOD_CODE)
  JD_4_TREND = JD & DATA_4_TREND = DATA
  S = STATS_NAN(PER_MONTH.MEAN)
  CHL_MONTH_MEAN = S.MEAN
  OK = WHERE(PER_MONTH.N GT 0,N_MONTH_CHL)
  D = CREATE_STRUCT(D,'N_MONTH_CHL',N_MONTH_CHL,'CHL_MONTH_MEAN',CHL_MONTH_MEAN)
  ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 P
  ;#####     ADD CHL MONTH OF MIN AND MAX     ###################################################################################################
  MIN = MIN(PER_MONTH.MEAN,/NAN,SUB_MIN) & CHL_MONTH_OF_MIN = STRUPCASE(MONTH_NAMES(DATE_2MONTH(PERIOD_2DATE((PER_MONTH(SUB_MIN).PERIOD))),/SHORT))
  MAX = MAX(PER_MONTH.MEAN,/NAN,SUB_MAX) & CHL_MONTH_OF_MAX = STRUPCASE(MONTH_NAMES(DATE_2MONTH(PERIOD_2DATE((PER_MONTH(SUB_MAX).PERIOD))),/SHORT))
  D = CREATE_STRUCT(D,'CHL_MONTH_MIN',MIN,'CHL_MONTH_MAX',MAX,'CHL_MONTH_OF_MIN',CHL_MONTH_OF_MIN,'CHL_MONTH_OF_MAX',CHL_MONTH_OF_MAX)
  ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

P
  ;#####     ADD CLIMATOLOGICAL Y MEANS CHL FROM ALL MONTHLY DATA MEANS  ##########################
  JD = PERIOD_2JD(CHL_.PERIOD) & DATA = CHL_.GMEAN & PERIOD_CODE = 'Y'
  PER_Y = STATS_PERIOD(JD,DATA,PERIOD_CODE=PERIOD_CODE)
  CHL_Y_MEAN = MEAN(PER_Y.MEAN,/NAN)
  OK = WHERE(PER_Y.N GT 0,N_Y_CHL)

  ;===> GET CHL YEAR OF MIN AND MAX
  MIN = MIN(PER_Y.MEAN,/NAN,SUB_MIN) & CHL_Y_OF_MIN = DATE_2YEAR(PERIOD_2DATE((PER_Y(SUB_MIN).PERIOD)))
  MAX = MAX(PER_Y.MEAN,/NAN,SUB_MAX) & CHL_Y_OF_MAX = DATE_2YEAR(PERIOD_2DATE((PER_Y(SUB_MAX).PERIOD)))
  D = CREATE_STRUCT(D,'N_Y_CHL',N_Y_CHL,'CHL_Y_MEAN',CHL_Y_MEAN,'CHL_Y_OF_MIN',CHL_Y_OF_MIN,'CHL_Y_OF_MAX',CHL_Y_OF_MAX)
  
  P
  
  ;===> GET CLIMATOLOGICAL YEARLY MEAN CHL FROM Y
  JD = PERIOD_2JD(PER_Y.PERIOD) & DATA = PER_Y.MEAN & PERIOD_CODE = 'YEAR'
  PER_YEAR = STATS_PERIOD(JD,DATA,PERIOD_CODE=PERIOD_CODE)
  CHL_YEAR_MEAN = MEAN(PER_YEAR.MEAN,/NAN)
  N_YEAR_CHL = N_ELEMENTS(PER_YEAR)
  OK = WHERE(PER_YEAR.N GT 0,N_YEAR_CHL)
  D = CREATE_STRUCT(D,'N_YEAR_CHL',N_YEAR_CHL,'CHL_YEAR_MEAN',CHL_YEAR_MEAN)
   
   P
  ;===> CHECK ON AGREEMENT BETWEEN PER_YEAR.MEAN AND CHL_YEAR_MEAN
  IF PER_YEAR.MEAN NE CHL_YEAR_MEAN THEN MESSAGE,'ERROR: MEANS DO NOT AGREE'
  ;===> CHECK ON  CHL_Y_OF_MIN,CHL_Y_OF_MAX
  CHECK_CHL_Y_OF_MIN = DATE_2YEAR(JD_2DATE(PER_YEAR.JD_MIN))
  CHECK_CHL_Y_OF_MAX = DATE_2YEAR(JD_2DATE(PER_YEAR.JD_MAX))
  IF CHECK_CHL_Y_OF_MIN NE D.CHL_Y_OF_MIN OR CHECK_CHL_Y_OF_MAX NE D.CHL_Y_OF_MAX THEN MESSAGE,'ERROR IN CHL_Y_OF_MIN MAX'
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  ;===> GET TREND INFO FOR CHL
  OK = WHERE(CHL_TRENDS.LME EQ MAPP,COUNT)
  IF COUNT EQ 1 THEN BEGIN
    T = CHL_TRENDS[OK]
    D = CREATE_STRUCT(D,'CHL_TREND_SIG',T.Y_ANOM_SLOPE_SIG,'CHL_TVAL',T.Y_ANOM_SLOPE_T_VAL,'CHL_PCT_CHANGE',T.PCT_CHANGE)
  ENDIF;IF COUNT EQ 1 THEN BEGIN
  
  
  ;#################################  PPY     #####################
  OK = WHERE(PPY.MAP EQ MAPP,N_PPM) & PPY_ = PPY[OK] 
  P
;  #####  ADD CLIMATOLOGICAL YEAR MEAN PP     ##############################
  JD = PERIOD_2JD(PPY_.PERIOD) & DATA = PPY_.AMEAN & PERIOD_CODE = 'YEAR'
  JD_4_TREND = JD & DATA_4_TREND = DATA

  PER_YEAR = STATS_PERIOD(JD,DATA,PERIOD_CODE=PERIOD_CODE)
  PP_YEAR_MEAN = PER_YEAR.MEAN
  PP_N_YEAR = PER_YEAR.N
  ;===>MIN MAX PP VALUES
  PP_Y_MIN = PER_YEAR.MIN
  PP_Y_MAX = PER_YEAR.MAX
  ;
  ;
  ;===> YEARS OF MIN MAX
  PP_Y_OF_MIN = DATE_2YEAR(JD_2DATE(PER_YEAR.JD_MIN))
  PP_Y_OF_MAX = DATE_2YEAR(JD_2DATE(PER_YEAR.JD_MAX))
  
  P
  D = CREATE_STRUCT(D,'PP_N_YEAR',PP_N_YEAR,'PP_Y_MIN',PP_Y_MIN,'PP_Y_MAX',PP_Y_MAX,'PP_Y_OF_MIN',PP_Y_OF_MIN,'PP_Y_OF_MAX',PP_Y_OF_MAX,'PP_YEAR_MEAN',PP_YEAR_MEAN)
  ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  
  ;===> GET STATS TRENDS ON ALL THE PP DATA 
  OK = WHERE(PP_TRENDS.LME EQ MAPP,COUNT)
  IF COUNT EQ 1 THEN BEGIN
    T = PP_TRENDS[OK]
    D = CREATE_STRUCT(D,'PP_TREND_SIG',T.Y_ANOM_SLOPE_SIG,'PP_TVAL',T.Y_ANOM_SLOPE_T_VAL,'PP_PCT_CHANGE',T.PCT_CHANGE)
  ENDIF;IF COUNT EQ 1 THEN BEGIN
  IF NONE(SAV) THEN SAV = D ELSE SAV = [SAV,D]
ENDFOR;FOR NTH = 0, N_ELEMENTS(MAPS) -1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;STOP
;===> RENAME TO PPY
DB = STRUCT_RENAME(SAV,'PP_YEAR_MEAN','PPY')
;===> CHANGE BY X 365.25
DB.PPY = DB.PPY * 365.25
PPY = DB.PPY
;===> ADD GROUP TO DB
G = REPLICATE(CREATE_STRUCT('LME','','GROUP',0),N_ELEMENTS(DB))
DB = STRUCT_MERGE(DB,G)
DB.LME = DB.MAP

P,MM(PPY)
PERCENT=[0,10,25,75,90,100.D]
PERS = PERCENTILE(PPY,PERCENT=PERCENT)

;===> ADD GROUP TO DB
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(PERS) -2 DO BEGIN
  R = [PERS[NTH],PERS(NTH+1)]
  P = [PERCENT[NTH],PERCENT(NTH+1)]
  OK = WHERE(PPY GE R[0] AND PPY LE R[1],COUNT)
  DB[OK].GROUP = (NTH+1)
ENDFOR;FOR NTH = 0,N_ELEMENTS(PER) -1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;===> SAVE TO MASTER TO BE BACKED UP
SAVFILE = !S.MASTER + 'LME_STATS.SAV'
SAVE,FILENAME = SAVFILE,DB,/VERBOSE
PF,SAVFILE,/W
;===> ALSO MAKE A CSV FOR VIEWING
CSV = !S.IDL_TEMP + 'LME_STATS.CSV'
CSV_WRITE,CSV,DB & PF,CSV



END; #####################  END OF ROUTINE ################################
