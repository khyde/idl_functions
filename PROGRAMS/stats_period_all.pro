; $ID:	STATS_PERIOD_ALL.PRO,	2020-07-08-15,	USER-KJWH	$
;######################################################################################
 FUNCTION STATS_PERIOD_ALL, JD, DATA, PROD=PROD,ALG=ALG, MAP=MAP, $
          CRITERIA_RANGE = CRITERIA_RANGE,$
          CRITERIA_OPER=CRITERIA_OPER, $
          DATE_RANGE=DATE_RANGE,DT_RANGE_TREND=DT_RANGE_TREND,$
          MPY_MIN=MPY_MIN,YEARS_PER_Y = YEARS_PER_Y,$
           $
          MIN_CPY=MIN_CPY,MAX_CPY=MAX_CPY,$
          DO_LNP=DO_LNP, DO_DFT=DO_DFT, $


          INFO=INFO,$
          LON=LON,LAT=LAT,$
          XP=XP,YP=YP, N_PIXELS=N_PIXELS, $
          ERROR=ERROR


;+
;  NAME:
;   STATS_PERIOD_ALL
;
; PURPOSE: THIS PROGRAM USES STATS_PERIOD TO COMPUTE STATISTICS FROM A TIME SERIES FOR VARIOUS PERIODS 
;
; CATEGORY:
;   TIME SERIES
;    
;
; CALLING SEQUENCE:STATS_PERIOD_ALL,JD, DATA, PROD=PROD
;
; INPUTS:
;   VALUES: INPUT DATA/VALUES
;   
; OPTIONAL INPUTS:
;   NONE: 
;   
; KEYWORD PARAMETERS:
;   NONE:

; OUTPUTS:
;   
;; EXAMPLES:
;  STATS_PERIOD_ALL,JD, DATA, PROD=PROD
; NOTES:
; 
;		INPUTS:
;			JD:										JULIAN DAY
;			DATA:						  		GEOPHYSICAL DATA
;			PROD:									STANDARD PRODUCT NAME (CHLOR_A,SST,PPD,ETC)
;			CRITERIA_RANGE:				MIN AND MAX ALLOWED IN THE DATA TIME SERIES
;			CRITERIA_OPER:				OPERATORS (DEFAULT= ['GE','LT'] )
;			MPY_MIN: 	MINIMUM NUMBER OF MONTHS PER YEAR NEEDED FOR COMPUTING YEARLY STATISTIC
;			CPY:			[MIN CYCLES PER YEAR, MAX CYCLES PER YEAR]
;

; OPTIONAL OUTPUTS:
;		ERROR:     ANY ERROR MESSAGES ARE PLACED IN ERROR, IF NO ERRORS THEN ERROR = ''

; 	MODIFICATION HISTORY:
;			WRITTEN FEB 25, 2006 BY J.O'REILLY
;			MAY 6,2012,JOR, FORMATTING
;			SEP 29,2012,JOR: NO LONGER USING LNP_PARAMS.PRO TO ESTIMATE OFAC,HIFAC
;			RESULT= LNP_TEST(FLOAT(DYEAR), FLOAT(DETREND_DATA), WK1 = WK1, WK2 = WK2, JMAX = JMAX, OFAC= FLOAT(PARAMS_LNP.OFAC),HIFAC=FLOAT(PARAMS_LNP.HIFAC))  CHANGED TO:
;			RESULT= LNP_TEST(FLOAT(DYEAR), FLOAT(DETREND_DATA), WK1 = WK1, WK2 = WK2, JMAX = JMAX)
;     WK2_DAN=FILTER_DANIELL(WK2,5); EFFECTIVELY SAME AS BLOOMFIELD'S RECOMMENDED WIDTH = 6
;     STRUCT_LNP_D = CREATE_STRUCT(PARAMS_LNP,'MAX_PEAK',RESULT[0],'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN)
;     STRUCT_LNP_M_ANOM = CREATE_STRUCT(PARAMS_LNP,'MAX_PEAK',RESULT[0],'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN)
;     LNP_TEST /DOUBLE TO GET GOOD PRECISION FOR FAP IN RESULT:
;     RESULT= LNP_TEST(FLOAT(DYEAR), FLOAT(DETREND_DATA), WK1 = WK1, WK2 = WK2, JMAX = JMAX,/DOUBLE)
;     MAR 30,2013,JOR ADDED MAX_CPY:    STRUCT_LNP_D = CREATE_STRUCT(PARAMS_LNP,'MAX_PEAK',RESULT[0],'MAX_CPY',WK1(JMAX),'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN)
;     MAY 13,2013,JOR:
;                     $$$ ERROR DUPLICATE TAGS FROM PARAMS_LNP STRUCT_LNP_D = CREATE_STRUCT(PARAMS_LNP,'MAX_PEAK',RESULT[0],'MAX_CPY',WK1(JMAX),'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN)
;                        ERROR DUP TAGS STRUCT_LNP_M_ANOM = CREATE_STRUCT(PARAMS_LNP,'MAX_PEAK',RESULT[0],'MAX_CPY',WK1(JMAX),'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN)
;    JUN 13,2013,JOR REMOVED KEYWORD LN 
;    jun 28,2013,jor, ADDED KEYWORD DT_RANGE_TREND
;                     IF N_ELEMENTS(DT_RANGE_TREND) NE 2 THEN DT_RANGE_TREND=_DATE_RANGE
;    JUL 9,2013,JOR, ADDED TREND_Y_ANOM TO STRUCT
;    SEP 10.2013,JOR: ADDED AMEAN, GMEAN : TAGNAMES=['N','MIN','SUB_MIN','MAX','SUB_MAX','MED','MEAN','AMEAN','GMEAN','STD']), CREATE_STRUCT('JD_MIN',JD_MIN,'JD_MAX',JD_MAX,'P_1',P_1,'P_50',P_2,'P_99',P_3) )
;    MAR 8,2014 REPLACED ALL ! :  '!M_' TO 'M_' AND SAME FOR ALL THAT BEGAN WITH !
;               TO BE CONSISTENT WITH NEW PERIOD_CODES SYSTEM
;               COMMENTED OUT PER_WEEK,PER_WEEKS
;   MAR 10,2014,JOR : IF STRPOS(ERROR , 'ERROR')NE -1 THEN BEGIN
;   MAR 13,JOR,ADDED KEYWORD ALG AND ADDED ALG TO OUTPUT STRUCTURE







;######################################################################################
;-
;***********************************************
	ROUTINE_NAME = 'STATS_PERIOD_ALL'
;***********************************************
; PER_MONTH  PER_Y  .MEAN   =STATS_PERIOD(PER_M.JD,PER_M.MEAN, STATS_PERIOD  ALOG
	ERROR = ''
;;; y_anom ADD MEDIAN GAP, XSQ_TEST OF NORMALALITY, SLOPE SIGNIFICANCE TEST
;	===> INITIALIZE IDL MEAN PROGRAM
	M=MEAN[0]

	IF N_ELEMENTS(DO_LNP) EQ 0 THEN DO_LNP = 1
	IF N_ELEMENTS(DO_DFT) EQ 0 THEN DO_DFT = 1

	IF N_ELEMENTS(PROD) NE 1 THEN STOP
	IF N_ELEMENTS(MAP) NE 1 THEN _MAP = '' ELSE _MAP = MAP


	IF N_ELEMENTS(MPY_MIN) NE 1 THEN MPY_MIN = 12
	IF N_ELEMENTS(MIN_CPY) NE 1 THEN MIN_CPY = 0.02
	IF N_ELEMENTS(MAX_CPY) NE 1 THEN MAX_CPY = 100.0
	IF N_ELEMENTS(MIN_LNP) NE 1 THEN MIN_LNP = 20L

	IF N_ELEMENTS(INFO) EQ 0 THEN _INFO = '' ELSE _INFO=INFO
	IF N_ELEMENTS(LON) EQ 0 THEN _LON = '' ELSE _LON=LON
	IF N_ELEMENTS(LAT) EQ 0 THEN _LAT = '' ELSE _LAT=LAT
	IF N_ELEMENTS(XP) EQ 0 THEN _XP = '' ELSE _XP=XP
	IF N_ELEMENTS(YP) EQ 0 THEN _YP = '' ELSE _YP=YP
	IF N_ELEMENTS(N_PIXELS) EQ 0 THEN _N_PIXELS = 1 ELSE _N_PIXELS=N_PIXELS

  IF N_ELEMENTS(DT_RANGE_TREND) EQ 2 THEN BEGIN
    JD_START=DATE_2JD(DT_RANGE_TREND[0])
    JD_END=DATE_2JD(DT_RANGE_TREND[1])
  ENDIF;IF N_ELEMENTS(DT_RANGE_TREND) EQ 2 THEN BEGIN


	TRANSFORMATION = 'LINEAR'

	STRUCT=CREATE_STRUCT('PROD',PROD,'ALG',ALG,'MAP',_MAP,'INFO',_INFO,'LON',_LON,'LAT',_LAT,'XP',_XP,'YP',_YP,'N_PIXELS',_N_PIXELS )



;	*************************************************************************************************************************************************************************
;  VALID_PSTATS = ['NUM','MIN','MAX','JD_MIN','JD_MAX','P_1','P_50','P_99','MEAN','STD','INT','SLOPE','R','INT_M','SLOPE_M','R_M','INT_Y','SLOPE_Y','R_Y','T0_ACT','T0_ACF']
;	*************************************************************************************************************************************************************************


;	*****************************************************************
;	****************   D A T A    E D I T I N G   *******************
;	*****************************************************************

;	===> MISSING DATA CODES
	OK=WHERE(DATA EQ MISSINGS(DATA),COUNT_MISSING)
;	===> ENSURE DATA ARE DOUBLE PRECISION
	DATA = DOUBLE(DATA)
;	===> NOW SET ANY THAT WERE MISSING ON INPUT TO THE MISSING CODE FOR DOULBLE PRECISION
	IF COUNT_MISSING GE 1 THEN DATA[OK] = MISSINGS(DATA[OK])

;	===> APPLY DEFAULT CRITERIA BASED ON VALID_CRITERIA
	DATA = VALID_DATA( DATA, PROD=PROD, MAP=MAP,SENSOR=SENSOR,SUBS=SUBS,OPERATORS=OPERATORS,$
                          RANGE=RANGE,CRITERIA_TXT=CRITERIA_TXT, ERROR = ERROR)

	IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
		_DATE_RANGE = DATE_RANGE
	  JD_RANGE = DATE_2JD(DATE_RANGE)

		OK=WHERE(JD GE JD_RANGE[0] AND JD LE JD_RANGE[1],COUNT)
		IF COUNT GE 1 THEN BEGIN
					DATA=DATA[OK]
					JD = JD[OK]
		ENDIF
	ENDIF ELSE 	_DATE_RANGE = JD_2DATE(MINMAX(JD))
  IF N_ELEMENTS(DT_RANGE_TREND) NE 2 THEN DT_RANGE_TREND=_DATE_RANGE
  
  
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('CRITERIA',CRITERIA_TXT,'DATE_RANGE',_DATE_RANGE))

	
		SCALING = 'LINEAR'
		TRANSFORMATION=''


;	*****************************************************************
;	***********   B A S I C    S T A T I S T I C S   ****************
;	*****************************************************************
	S = STATS(DATA,/QUIET)
;	===> JD_MIN,JD_MAX
	IF S.N GE 1 THEN BEGIN
		JD_MIN = JD(S.SUB_MIN)
  	JD_MAX = JD(S.SUB_MAX)
  ENDIF ELSE BEGIN
  	JD_MIN = S.SUB_MIN
  	JD_MAX = S.SUB_MAX
  ENDELSE
	P = PERCENTILE(DATA,PERCENT=[1,50,99],ERROR=ERROR)
	IF STRPOS(ERROR , 'ERROR')NE -1 THEN BEGIN
		P_1=MISSINGS(0.0)
		P_2=MISSINGS(0.0)
		P_3=MISSINGS(0.0)
	ENDIF ELSE BEGIN
		P_1=P[0]
		P_2=P[1]
		P_3=P(2)
	ENDELSE

	STRUCT=CREATE_STRUCT(STRUCT,STRUCT_COPY(STATS(DATA,/QUIET), TAGNAMES=['N','MIN','SUB_MIN','MAX','SUB_MAX','MED','MEAN','AMEAN','GMEAN','STD']), CREATE_STRUCT('JD_MIN',JD_MIN,'JD_MAX',JD_MAX,'P_1',P_1,'P_50',P_2,'P_99',P_3) )

	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('SCALING',SCALING,'TRANSFORMATION',TRANSFORMATION))

;	*************************************************************************
;	************   P E R I O D     M  E  A  N  S   **************************
;	*************************************************************************
;	===> JD > !D
	PER_D 		=STATS_PERIOD(JD,DATA,							PERIOD_CODE='D',		/QUIET)

;	===> !D > !W
	PER_W = STATS_PERIOD(PER_D.JD, PER_D.MEAN, PERIOD_CODE = 'W',/QUIET)

;	===> !W > !WEEK
	;PER_WEEK = STATS_PERIOD(PER_W.JD, PER_W.MEAN, PERIOD_CODE = 'WEEK',/QUIET)

;	===> !WEEK > !WEEKS
;	PER_WEEKS = STATS_PERIOD(PER_WEEK.JD, PER_WEEK.MEAN, PERIOD_CODE = 'WEEKS',/QUIET)
;  JD_START=JD_START,JD_END=JD_END
;	===> !D > !M
	PER_M 		=STATS_PERIOD(PER_D.JD,PER_D.MEAN,	PERIOD_CODE='M',JD_START=JD_START,JD_END=JD_END,		/QUIET)

;	===> !D > !DOY
;; NOT WORKING ?	PER_DOY =STATS_PERIOD(PER_D.JD,PER_D.MEAN,	  PERIOD_CODE='DOY',JD_START=JD_START,JD_END=JD_END,/QUIET)

; ===> !M > !Y
	PER_Y 		=STATS_PERIOD(PER_M.JD,PER_M.MEAN,	PERIOD_CODE='Y',JD_START=JD_START,JD_END=JD_END,		/QUIET)


; ===> !Y > !YEAR  (MUST USUALLY HAVE ALL 12 MONTHS, BUT AT LEAST MPY_MIN,OTHERWISE BLANK THESE INCOMPLETES);
	OK=WHERE(PER_Y.N LT MPY_MIN,COUNT)
	YY = PER_Y.MEAN
	IF COUNT GE 1 THEN YY[OK]=MISSINGS(YY[OK])
	PER_YEAR	=STATS_PERIOD(PER_Y.JD,YY,	PERIOD_CODE='YEAR',/QUIET)

;	===> !M > !MONTH
	PER_MONTH =STATS_PERIOD(PER_M.JD,PER_M.MEAN,				PERIOD_CODE='MONTH',/STD,/QUIET)

;	===> !MONTH > !ANNUAL
	PER_ANNUAL =STATS_PERIOD(PER_MONTH.JD,PER_MONTH.MEAN,PERIOD_CODE='ANNUAL',/STD,/QUIET)


;	*****************************************************************
;	*******************      S  P  A  N      ************************
;	*****************************************************************

;	===> SEASONAL SPAN (!ANNUAL.MAX - !ANNUAL.MIN)
	TEMP=CREATE_STRUCT('SPAN_N',0L,'SPAN',MISSINGS(PER_D.MEAN))

	S=REPLICATE(TEMP,N_ELEMENTS(PER_ANNUAL))
  PER_ANNUAL = STRUCT_MERGE(PER_ANNUAL,S)

	IF PER_ANNUAL.N GE 1 THEN 	PER_ANNUAL.SPAN = PER_ANNUAL.MAX - PER_ANNUAL.MIN

;	===> INTER-ANNUAL SPAN (!Y.MAX - !Y.MIN)
	S=REPLICATE(TEMP,N_ELEMENTS(PER_Y))
  PER_Y = STRUCT_MERGE(PER_Y,S)

; ===> MUST USUALLY HAVE ALL 12 MONTHS, BUT AT LEAST MPY_MIN
	OK=WHERE(PER_Y.N GE MPY_MIN,COUNT)
	IF COUNT GE 1 THEN BEGIN
		PER_Y[OK].SPAN_N 		= PER_Y[OK].N
  	PER_Y[OK].SPAN 			= PER_Y[OK].MAX - PER_Y[OK].MIN
	ENDIF


;	*****************************************************************
;	*******************   A N O M A L I E S  ************************
;	*****************************************************************


;	===> ANOMALY (!M - !MONTH)
	TEMP=CREATE_STRUCT('PERIOD_ANOM','','PERIOD_N',0L,'PERIOD_MEAN',MISSINGS(PER_D.MEAN),'ANOM',MISSINGS(PER_D.MEAN))

	S=REPLICATE(TEMP,N_ELEMENTS(PER_M))
  PER_M = STRUCT_MERGE(PER_M,S)
; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
  FOR _MONTH = 0,N_ELEMENTS(PER_MONTH)-1  DO BEGIN
  	SUBS=WHERE_SETS_SUBS(PER_MONTH(_MONTH))
  	PER_M(SUBS).PERIOD_ANOM = PER_MONTH(_MONTH).PERIOD
  	PER_M(SUBS).PERIOD_N 		= PER_MONTH(_MONTH).N
  	PER_M(SUBS).PERIOD_MEAN = PER_MONTH(_MONTH).MEAN
  	PER_M(SUBS).ANOM = PER_M(SUBS).MEAN - PER_MONTH(_MONTH).MEAN
	ENDFOR

;	===> ANOMALY (!Y - !YEAR)
	S=REPLICATE(TEMP,N_ELEMENTS(PER_Y))
  PER_Y = STRUCT_MERGE(PER_Y,S)
  PER_Y(*).PERIOD_ANOM = PER_YEAR.PERIOD
  PER_Y(*).PERIOD_MEAN = PER_YEAR.MEAN
  PER_Y(*).PERIOD_N 	 = PER_YEAR.N
  OK=WHERE(PER_Y.N GE MPY_MIN,COUNT)
  IF COUNT GE 1 THEN BEGIN
  	PER_Y[OK].ANOM = PER_Y[OK].MEAN - PER_YEAR.MEAN
	ENDIF

;	===> ANOMALY (!MONTH - !ANNUAL)
	S=REPLICATE(TEMP,N_ELEMENTS(PER_MONTH))
  PER_MONTH = STRUCT_MERGE(PER_MONTH,S)
  PER_MONTH(*).PERIOD_ANOM = PER_ANNUAL.PERIOD
  PER_MONTH(*).PERIOD_MEAN = PER_ANNUAL.MEAN
  PER_MONTH(*).PERIOD_N 	 = PER_ANNUAL.N
  PER_MONTH(*).ANOM = PER_MONTH(*).MEAN - PER_ANNUAL.MEAN


	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('D',PER_D))
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('W',PER_W))
	;; NOT WORKING  ??STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('WEEK',PER_WEEK))
	;;STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('WEEKS',PER_WEEKS))
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('M',PER_M))
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('MONTH',PER_MONTH))
	;;STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('DOY',PER_DOY))
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('Y',PER_Y))
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('YEAR',PER_YEAR))
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('ANNUAL',PER_ANNUAL))



;	$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
; $$$$$$$$$$$$$$$$$$$$$$$$$     TRENDS     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
; $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$



; ######################################################
;	##### TREND PER YEAR USING PER_D.MEAN	(RAW DATA) #####
; ######################################################
	OK = WHERE(PER_D.N GE 1,COUNT)
	IF COUNT LT 2 THEN ERROR = 1 ELSE ERROR = 0
	S=STATS2(JD_2DYEAR(PER_D.JD),PER_D.MEAN,/QUIET,MODEL='LSY')
 	TREND_D = STRUCT_COPY(S,TAGNAMES=['TYPE_','N','INT','SLOPE','STD_INT','STD_SLOPE','R','SLOPE_PROB'])
 	TREND_D = CREATE_STRUCT(TREND_D,'ERROR',ERROR)
	TREND_D = NAN_2INFINITY(TREND_D)
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('TREND_D',TREND_D))
	
	
; #################################################
; ###     TREND PER YEAR USING PER_Y.MEAN     ##### 
; #################################################
  OK = WHERE(PER_Y.N GE 1,COUNT)
  IF COUNT LT 2 THEN ERROR = 1 ELSE ERROR = 0
  S=STATS2(JD_2DYEAR(PER_Y.JD),PER_Y.MEAN,/QUIET,MODEL='LSY')
  TREND_Y = STRUCT_COPY(S,TAGNAMES=['TYPE_','N','INT','SLOPE','STD_INT','STD_SLOPE','R','SLOPE_PROB'])
  TREND_Y = CREATE_STRUCT(TREND_Y,'ERROR',ERROR)
  TREND_Y = NAN_2INFINITY(TREND_Y)
  STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('TREND_Y',TREND_Y))


; #############################################
;	##### TREND PER YEAR USING PER_M.ANOM   #####
; #############################################
	OK = WHERE(PER_M.N GE 1,COUNT)	
	IF COUNT LT 2 THEN ERROR = 1 ELSE ERROR = 0
	S=STATS2(JD_2DYEAR(PER_M.JD),PER_M.ANOM,/QUIET,MODEL='LSY')
 	TREND_M_ANOM = STRUCT_COPY(S,TAGNAMES=['TYPE_','N','INT','SLOPE','STD_INT','STD_SLOPE','R','SLOPE_PROB'])
 	TREND_M_ANOM = CREATE_STRUCT(TREND_M_ANOM,'ERROR',ERROR)
	TREND_M_ANOM = NAN_2INFINITY(TREND_M_ANOM)
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('TREND_M_ANOM',TREND_M_ANOM))

; ##################################################
;	##### TREND PER MONTH USING TREND_MONTH_ANOM #####
; ##################################################
;	(USE THE PER_MONTH SUBSCRIPTS TO OBTAIN THE PER_M ANOMALIES FOR EACH MONTH)
;	===> MAKE A STRUCTURE WITH 12 RECORDS TO HOLD THE TRENDS FOR EACH OF THE 12 !MONTHS

	TREND_MONTH_ANOM = STRUCT_COPY(STATS2(),TAGNAMES=['TYPE_','N','INT','SLOPE','STD_INT','STD_SLOPE','R','SLOPE_PROB'])
	TREND_MONTH_ANOM = REPLICATE(CREATE_STRUCT('PERIOD','',TREND_MONTH_ANOM,'ERROR',1),12) ; INITIALIZE ERROR TO 1
	TREND_MONTH_ANOM.PERIOD = 'MONTH_' + STR_PAD(INDGEN(12)+1,2)

;	FFFFFFFFFFFFFFFFFFFFFFF
	FOR NTH = 0,11 DO BEGIN
		OK_MONTH = WHERE(PER_MONTH.PERIOD EQ TREND_MONTH_ANOM[NTH].PERIOD, COUNT_MONTH)
		IF COUNT_MONTH EQ 1 THEN BEGIN
			COPY = TREND_MONTH_ANOM[NTH]
			SUBS= STRSPLIT(PER_MONTH(OK_MONTH).SUBS,';',/EXTRACT)
			S=STATS2(JD_2DYEAR(PER_M(SUBS).JD),PER_M(SUBS).ANOM,/QUIET,MODEL='LSY',ERROR=ERROR)
			STRUCT_ASSIGN, S,COPY,/NOZERO
			COPY.ERROR = STRLEN(ERROR) GT 0
			TREND_MONTH_ANOM[NTH] = COPY
		ENDIF;IF COUNT_MONTH EQ 1 THEN BEGIN
	ENDFOR;FOR NTH = 0,11 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  TREND_MONTH_ANOM = NAN_2INFINITY(TREND_MONTH_ANOM)
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('TREND_MONTH_ANOM',TREND_MONTH_ANOM))


; ===> MAKE A STRUCTURE WITH N_YEARS RECORDS TO HOLD THE TRENDS FOR EACH OF THE Y YEARS
  N_YEARS = N_ELEMENTS(PER_Y)
  TREND_Y_ANOM = STRUCT_COPY(STATS2(),TAGNAMES=['TYPE_','N','INT','SLOPE','STD_INT','STD_SLOPE','R','SLOPE_PROB'])
  TREND_Y_ANOM = REPLICATE(CREATE_STRUCT('PERIOD','',TREND_Y_ANOM,'ERROR',1),N_YEARS) ; INITIALIZE ERROR TO 1
  TREND_Y_ANOM.PERIOD = PER_Y.PERIOD
;WHERE_SETS
; FFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_YEARS-1 DO BEGIN
    OK_Y = WHERE(PER_Y.PERIOD EQ TREND_Y_ANOM[NTH].PERIOD, COUNT_Y)
    IF COUNT_Y EQ 1 THEN BEGIN
      COPY = TREND_Y_ANOM[NTH]
      SUBS=WHERE_SETS_SUBS(PER_Y[NTH])
 ;;     SUBS= STRSPLIT(PER_Y(OK_Y).SUBS,';',/EXTRACT)
 ;;     S=STATS2(JD_2DYEAR(PER_Y(SUBS).JD),PER_Y(SUBS).ANOM,/QUIET,MODEL='LSY',ERROR=ERROR)
      S=STATS2(JD_2DYEAR(PER_M(SUBS).JD),PER_M(SUBS).ANOM,/QUIET,MODEL='LSY',ERROR=ERROR)
      STRUCT_ASSIGN, S,COPY,/NOZERO
      COPY.ERROR = STRLEN(ERROR) GT 0
      TREND_Y_ANOM[NTH] = COPY
    ENDIF;IF COUNT_Y EQ 1 THEN BEGIN
  ENDFOR;FOR NTH = 0,11 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  TREND_Y_ANOM = NAN_2INFINITY(TREND_Y_ANOM)

  STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('TREND_Y_ANOM',TREND_Y_ANOM))




;	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	IF DO_LNP EQ 0 THEN RETURN, STRUCT ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


;	*****************************************************************
;	*******************   C Y C L E S     ***************************
;	*****************************************************************

;	=================================
;	=== BASED ON THE DAILY MEANS  ===
;	=================================

;	===> IF PER_D.N IS 0 THEN THE DATA FOR THAT DAY ARE MISSING OR OUTSIDE THE CRITERIA RANGE
	OK_2 = WHERE(PER_D.N GE 1,COUNT_2)
;	===> MUST HAVE AT LEAST 2 POINTS FOR LNP_PARAMS.Y_SPAN TO COMPUTE PROPERLY
	IF COUNT_2 GE 2 THEN BEGIN
		ERROR_2 = 0
;		===> GET GOOD DYEAR AND DATA
		DYEAR = [JD_2DYEAR(PER_D(OK_2).JD)]
		TS 		= PER_D(OK_2).MEAN
	ENDIF ELSE BEGIN
		ERROR_2 = 1
		DYEAR = [JD_2DYEAR(PER_D.JD)]
		TS    = FINDGEN( N_ELEMENTS(DYEAR))
	ENDELSE

; ===> DEMEAN
	DEMEAN_DATA = [DEMEAN(TS)]

;	===> DETREND THE TS DATA USING THE TREND FROM THE !M ANOMALIES
	IF TREND_M_ANOM.SLOPE NE 0 AND FINITE(TREND_M_ANOM.SLOPE) EQ 1 THEN BEGIN
 		Y_MODEL= TREND_M_ANOM.INT + TREND_M_ANOM.SLOPE*DYEAR
		DETREND_DATA = DEMEAN_DATA-Y_MODEL
	ENDIF ELSE BEGIN
		DETREND_DATA = DEMEAN_DATA
	ENDELSE

; ===> GET THE TREND STATISTICS ON THE DETRENDED DATA (SLOPE SHOULD BE ZERO)
;	S2=STATS2(DYEAR,DETREND_DATA,MODEL='LSY',/QUIET)

;	===> GET LNP PARAMETERS
	PARAMS_LNP = LNP_PARAMS(DYEAR,MIN_CPY,MAX_CPY,/DEFAULT)
;STOP
; ===> LOMB PERIODOGRAM (MUCH FASTER WHEN USING FLOAT INPUTS THAN DOUBLE PRECISION INPUTS)
;;	RESULT= LNP_TEST(FLOAT(DYEAR), FLOAT(DETREND_DATA), WK1 = WK1, WK2 = WK2, JMAX = JMAX, OFAC= FLOAT(PARAMS_LNP.OFAC),HIFAC=FLOAT(PARAMS_LNP.HIFAC))

; LNP_TEST USING DEFAULT OFAC OF 4 AND HIFAC OF 1 /DOUBLE TO GET GOOD PRECISION FOR FAP IN RESULT
  RESULT= LNP_TEST(FLOAT(DYEAR), FLOAT(DETREND_DATA), WK1 = WK1, WK2 = WK2, JMAX = JMAX,/DOUBLE)
  
  ;===> SMOOTH THE PERIODOGRAM
  WK2_DAN=FILTER_DANIELL(WK2,5); EFFECTIVELY SAME AS BLOOMFIELD'S RECOMMENDED WIDTH = 6
  ;$$$ ERROR DUPLICATE TAGS  STRUCT_LNP_D = CREATE_STRUCT(PARAMS_LNP,'MAX_PEAK',RESULT[0],'MAX_CPY',WK1(JMAX),'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN)
  
  STRUCT_LNP_D = CREATE_STRUCT('MAX_PEAK',RESULT[0],'MAX_CPY',WK1(JMAX),'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN,'ERROR','')
  STRUCT_LNP_D.ERROR = STRUCT_LNP_D.ERROR > ERROR_2

	IF STRUCT_LNP_D.ERROR NE 0 THEN BEGIN
		STRUCT_LNP_D.MAX_PEAK 	= MISSINGS(STRUCT_LNP_D.MAX_PEAK)
		STRUCT_LNP_D.MAX_CPY    = MISSINGS(STRUCT_LNP_D.MAX_CPY)		
		STRUCT_LNP_D.PERIOD_MAX = MISSINGS(STRUCT_LNP_D.PERIOD_MAX)
		STRUCT_LNP_D.SPECTRUM 	= MISSINGS(STRUCT_LNP_D.SPECTRUM)
	ENDIF

;	 ===> LNP TO POWER AND TO ACF (NEEDS TESTING)
;  LNP_POW =LNP_2POWER(DATA=DEMEAN_DATA, FREQUENCY=LNP_D.FREQUENCY, SPECTRUM=LNP_D.SPECTRUM)
;  LNP_ACF = FFT(LNP_POW,/INVERSE)
;  TP_DYEAR = SPAN(DYEAR)
;  ACF_WIDTH = 11
;  T0_LNP_ACF = ACF_FIRST_ZERO(LNP_ACF,TP=  TP_DYEAR,WIDTH=ACF_WIDTH, SUBS=SUBS,SMO=SMO,  ERROR=ERROR)
;  PRINT, 1./T0_LNP_ACF


;	==================================
;	===  BASED ON THE M ANOMALIES  ===
;	==================================

;	===> IF PER_M.N IS 0 THEN THE DATA FOR THAT DAY ARE MISSING OR OUTSIDE THE CRITERIA RANGE
	OK_2 = WHERE(PER_M.N GE 1,COUNT_2)
;	===> MUST HAVE AT LEAST 2 POINTS FOR LNP_PARAMS.Y_SPAN TO COMPUTE PROPERLY
	IF COUNT_2 GE 2 THEN BEGIN
		ERROR_2 = 0
;		===> GET GOOD DYEAR AND DATA
		DYEAR = [JD_2DYEAR(PER_M(OK_2).JD)]
		TS 		= PER_M(OK_2).ANOM
	ENDIF ELSE BEGIN
		ERROR_2 = 1
		DYEAR = [JD_2DYEAR(PER_M.JD)]
		TS    = FINDGEN( N_ELEMENTS(DYEAR))
    TS    = FINDGEN( N_ELEMENTS(DYEAR))
	ENDELSE

; ===> DEMEAN
	DEMEAN_DATA = [DEMEAN(TS)]

;	===> DETREND THE TS DATA USING THE TREND FROM THE !M ANOMALIES
	IF TREND_M_ANOM.SLOPE NE 0 AND FINITE(TREND_M_ANOM.SLOPE) EQ 1 THEN BEGIN
 		Y_MODEL= TREND_M_ANOM.INT + TREND_M_ANOM.SLOPE*DYEAR
		DETREND_DATA = DEMEAN_DATA-Y_MODEL
	ENDIF ELSE BEGIN
		DETREND_DATA = DEMEAN_DATA
	ENDELSE

; ===> GET THE TREND STATISTICS ON THE DETRENDED DATA (SLOPE SHOULD BE ZERO)
;	S2=STATS2(DYEAR,DETREND_DATA,MODEL='LSY',/QUIET)

;	===> GET LNP PARAMETERS
  PARAMS_LNP = LNP_PARAMS(DYEAR,MIN_CPY,12,/DEFAULT)

; ===> LOMB PERIODOGRAM (MUCH FASTER WHEN USING FLOAT INPUTS THAN DOUBLE PRECISION INPUTS)
;;	RESULT= LNP_TEST(FLOAT(DYEAR), FLOAT(DETREND_DATA), WK1 = WK1, WK2 = WK2, JMAX = JMAX, OFAC= FLOAT(PARAMS_LNP.OFAC),HIFAC=FLOAT(PARAMS_LNP.HIFAC) )
  RESULT= LNP_TEST(FLOAT(DYEAR), FLOAT(DETREND_DATA), WK1 = WK1, WK2 = WK2, JMAX = JMAX,/DOUBLE)
  WK2_DAN=FILTER_DANIELL(WK2,5); EFFECTIVELY SAME AS BLOOMFIELD'S RECOMMENDED WIDTH = 6
 ;; ERROR DUP TAGS STRUCT_LNP_M_ANOM = CREATE_STRUCT(PARAMS_LNP,'MAX_PEAK',RESULT[0],'MAX_CPY',WK1(JMAX),'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN)
  STRUCT_LNP_M_ANOM = CREATE_STRUCT('MAX_PEAK',RESULT[0],'MAX_CPY',WK1(JMAX),'PERIOD_MAX',1.0/(WK1(JMAX)),'FAP',RESULT[1],'FREQUENCY',WK1,'SPECTRUM',WK2_DAN,'ERROR','')
  STRUCT_LNP_M_ANOM.ERROR = STRUCT_LNP_M_ANOM.ERROR > ERROR_2

	IF STRUCT_LNP_M_ANOM.ERROR NE 0 THEN BEGIN
		STRUCT_LNP_M_ANOM.MAX_PEAK 	= MISSINGS(STRUCT_LNP_M_ANOM.MAX_PEAK)
    STRUCT_LNP_M_ANOM.MAX_CPY  = MISSINGS(STRUCT_LNP_M_ANOM.MAX_CPY)
		STRUCT_LNP_M_ANOM.PERIOD_MAX = MISSINGS(STRUCT_LNP_M_ANOM.PERIOD_MAX)
		STRUCT_LNP_M_ANOM.SPECTRUM 	= MISSINGS(STRUCT_LNP_M_ANOM.SPECTRUM)
	ENDIF

	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('LNP_D',STRUCT_LNP_D))
  STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('LNP_M_ANOM',STRUCT_LNP_M_ANOM))


	IF DO_DFT EQ 0 THEN RETURN, STRUCT




;	******************************************************************************
;	*************** D I S C R E T E    F O U R R I E R    T R A N S F O R M   ****
;	******************************************************************************
	NUMF = 4L*1024
	HALF=1L
	NO_EXTEND=0L
	ACF_WIDTH = 11
	TRAP = 0   ; NO TRAPEZOID FILTER
	IF HALF EQ 1 THEN NTHOUT = NUMF/2  ELSE NTHOUT = NUMF-1L
	DFT=FT_SCARGLE(DYEAR,	DETREND_DATA,NUMF=NUMF,NUF=NUF,NUP=NUP,DFTS=DFTS,TP=TP_DYEAR,HALF=HALF,NO_EXTEND=NO_EXTEND,ERROR=ERROR_DFT,/QUIET)
	STRUCT_DFT = CREATE_STRUCT('NUMF',NUMF,'HALF',HALF, 'TP_DYEAR',TP_DYEAR, 'FREQUENCY',NUF,'DFT',DFT,'ERROR', ERROR_DFT > ERROR_2)

	IF STRUCT_DFT.ERROR NE 0 THEN BEGIN
		STRUCT_DFT.TP_DYEAR = MISSINGS(STRUCT_DFT.TP_DYEAR)
		STRUCT_DFT.DFT 			= MISSINGS(STRUCT_DFT.DFT)
	ENDIF

;	*** ACF ***
	ACF = FT_2ACF(DFT) ; 	RETURN, FFT( FT_2POWER(DFT),/INVERSE,DOUBLE=DOUBLE)
	T0_ACF = ACF_FIRST_ZERO(ACF,TP= 2*TP_DYEAR, TRAP=TRAP,WIDTH=ACF_WIDTH, SUBS=SUBS,SMO=SMO,  ERROR= ERROR_T0_ACF)
	STRUCT_ACF = CREATE_STRUCT( 'TRAP',TRAP,'ACF_WIDTH',ACF_WIDTH,'TP_DYEAR',TP_DYEAR,'T0_ACF',T0_ACF,'ERROR', ERROR_T0_ACF > ERROR_2)
	IF STRUCT_DFT.ERROR NE 0 THEN BEGIN
		STRUCT_ACF.TP_DYEAR 	= MISSINGS(STRUCT_ACF.TP_DYEAR)
		STRUCT_ACF.T0_ACF 		= MISSINGS(STRUCT_ACF.T0_ACF)
	ENDIF

	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('DFT',STRUCT_DFT))
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('ACF',STRUCT_ACF))


;	***********************************************************************************
;	*** A U T O   C O R R E L A T I O N    F U N C T I O N   A P P R O X I M A T E  ***
;	***********************************************************************************
	ACT = A_CORRELATE(DETREND_DATA, INDGEN(N_ELEMENTS(DYEAR)),/DOUBLE)
	T0_ACT = ACF_FIRST_ZERO(ACT,TP=TP_DYEAR,TRAP=TRAP,WIDTH=ACF_WIDTH, SUBS=SUBS,SMO=SMO,  ERROR=ERROR_T0_ACT)
  STRUCT_ACT = CREATE_STRUCT('TP_DYEAR',TP_DYEAR,'TRAP',TRAP,'ACF_WIDTH',ACF_WIDTH,'T0_ACT',T0_ACT,'ERROR', ERROR_T0_ACT > ERROR_2)
  IF STRUCT_DFT.ERROR NE 0 THEN BEGIN
		STRUCT_ACT.TP_DYEAR 	= MISSINGS(STRUCT_ACT.TP_DYEAR)
		STRUCT_ACT.T0_ACT 		= MISSINGS(STRUCT_ACT.T0_ACT)
	ENDIF
	STRUCT=CREATE_STRUCT(STRUCT,CREATE_STRUCT('ACT',STRUCT_ACT))


  RETURN, NAN_2INFINITY(STRUCT)


END; #####################  END OF ROUTINE ################################



