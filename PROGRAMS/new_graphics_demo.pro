; $ID:	NEW_GRAPHICS_DEMO.PRO,	2021-04-15-17,	USER-KJWH	$
PRO NEW_GRAPHICS_DEMO

;+
; NAME:
;   NEW_GRAPHICS_DEMO
;
; PURPOSE:;
;   This procedure is to test the new plotting and image routines in IDL 8.0
;
; NOTES:
;
; MODIFICATION HISTORY:
;     Written May 16, 2011 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'NEW_GRAPHICS_DEMO'
  
  DO_COLORS             = 1
  DO_TRUE_COLOR         = 0
  DO_BYR_PAL            = 0
  WHITE_CENTERED_PAL    = 0
  RWB_GREY_PAL          = 0
  ANOM_PAL              = 0
  GRAY_REVERSE_PAL      = 0
  IMG_LOCATIONS         = 0  
  MARMAP_STATIONS       = 0
  
  
  SL = DELIMITER(/PATH)


  IF DO_COLORS GE 1 THEN BEGIN
    COLORS = TAG_NAMES(!COLOR)
    W = WINDOW(DIMENSIONS=[1024,1024])
    XPOS = 0.02
    YPOS = 0.97
    XCOUNT = 0
    FOR C = 0, N_ELEMENTS(COLORS)-1 DO BEGIN
      T = TEXT(XPOS,YPOS-(XCOUNT*0.025),COLORS(C),COLOR=!COLOR.(C),FONT_SIZE=18,FONT_STYLE='BOLD',/NORMAL,/CURRENT)
      XCOUNT = XCOUNT+1
      IF C EQ 37  THEN BEGIN & XPOS = 0.27 & XCOUNT = 0 & ENDIF
      IF C EQ 75  THEN BEGIN & XPOS = 0.52 & XCOUNT = 0 & ENDIF
      IF C EQ 112 THEN BEGIN & XPOS = 0.78 & XCOUNT = 0 & ENDIF
    ENDFOR
    STOP
  ENDIF


  IF DO_TRUE_COLOR GE 1 THEN BEGIN
  
    D = READ_HDF_2STRUCT(FIX_PATH(!S.DATASETS + 'OC-SEAWIFS-MLAC\TEST\S2007113173207.hdf'),PRODUCTS=['LONGITUDE','LATITUDE','RGB'])
    LONS = D.SD.LONGITUDE.IMAGE * D.SD.LONGITUDE.SLOPE[0] + D.SD.LONGITUDE.INTERCEPT[0]
    LATS = D.SD.LATITUDE.IMAGE  * D.SD.LATITUDE.SLOPE[0]  + D.SD.LATITUDE.INTERCEPT[0]
    R = MAP_REMAP(REFORM(D.SD.RGB.IMAGE(0,*,*)),MAP_IN='LONLAT',MAP_OUT='NEC',CONTROL_LONS=LONS,CONTROL_LATS=LATS,REFRESH=REFRESH,PX_OUT=1024,PY_OUT=1024)
    G = MAP_REMAP(REFORM(D.SD.RGB.IMAGE(1,*,*)),MAP_IN='LONLAT',MAP_OUT='NEC',CONTROL_LONS=LONS,CONTROL_LATS=LATS,REFRESH=REFRESH,PX_OUT=1024,PY_OUT=1024)
    B = MAP_REMAP(REFORM(D.SD.RGB.IMAGE(2,*,*)),MAP_IN='LONLAT',MAP_OUT='NEC',CONTROL_LONS=LONS,CONTROL_LATS=LATS,REFRESH=REFRESH,PX_OUT=1024,PY_OUT=1024)
    GONE, D
    GONE, LONS
    GONE, LATS
    RGB = BYTARR(3,1024,1024)
    RGB(0,*,*) = R
    RGB(1,*,*) = G
    RGB(2,*,*) = B
    W = WINDOW(DIMENSION=[1024,512])
    RM = IMAGE(RGB,POSITION=[0,0,512,512],/CURRENT,/DEVICE)
    GONE,RGB
    CHL = STRUCT_SD_READ(FIX_PATH(!S.DATASETS + 'OC-SEAWIFS-MLAC\NEC\SAVE\CHLOR_A-OC4\S_20070423173207-SEAWIFS-OV2-R2010-MLAC-NEC-CHLOR_A-OC4.SAVE'),STRUCT=CSTRUCT)
    CM = STRUCT_SD_2IMAGE_NG(CSTRUCT,/ADD_LAND,/ADD_COAST,COLORBAR_TITLE=UNITS('CHLOROPHYLL'),IMG_POSITION=[512,0,1024,512],/DEVICE,/CURRENT)
    GONE, CHL
    BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',SPECIAL_SCALE=SPECIAL_SCALE,PX=530,PY=485,CHARSIZE=16,BACKGROUND=252,XDIM=300,YDIM=12,PAL='PAL_SW3',LAYOUT=LAYOUT,$
      NO_NAME=no_name,NO_UNIT=no_unit,TITLE=UNITS('CHLOROPHYLL'),HORIZONTAL=1,BOTTOM=1,FONT='HELVETICA')
    TD  = TEXT(20,460,'SeaWiFS!C23 April 2007',/CURRENT,/DEVICE,FONT_SIZE=16,FONT_STYLE=1)   
    W.SAVE, FIX_PATH(!S.PROJECTS + 'DEMO_PLOTS\TRUE_COLOR-CHLOROPHYLL-COMPOSITE.PNG'),RESOLUTION=600
    W.CLOSE
    
    
   STOP
    
  ENDIF

  
  
  IF DO_BYR_PAL GE 1 THEN BEGIN
  	
;  	RGB = CPAL_READ('PAL_SW3')
;  	R = RGB(0,*) & RR = R(1:250) & RR = REVERSE(RR) & R(1:250) = RR
;  	G = RGB(1,*) & GG = G(1:250) & GG = REVERSE(GG) & G(1:250) = GG
;  	B = RGB(2,*) & BB = B(1:250) & BB = REVERSE(BB) & B(1:250) = BB
;  	
;  	RGB(0,*) = R
;  	RGB(1,*) = G
;  	RGB(2,*) = B
;  	
;  	W = WINDOW(DIMENSIONS=[800,200])
;  	ARR    = FLTARR(200,200)
;  	FOR I = 0, 199 DO ARR(*,I) = (0+(100/199.)*FINDGEN(200))            ; scale the array to 200 intervals ranging from 0 to 100 (adapted from the jhuapl routine maken)
;  	X = [MIN(ARR),MAX(ARR)]
;  	IM = IMAGE(ARR,/CURRENT,RGB_TABLE=RGB,LAYOUT=[2,1,1],TITLE='LINEAR')
;  	
  	
  	RGB = CPAL_READ('PAL_ANOMG')
    R = RGB(0,*)  
    G = RGB(1,*)  
    B = RGB(2,*)  
      	
    INTERVALS  = [0,      1,   50,   110,   125,   140,   250,    251,252,253,254,255]
    RR = INTERPOL([0,  R(10),R(50),R(110),R(125),R(140),R(225),   128,160,192,224,255],INTERVALS,INDGEN(256))
    GG = INTERPOL([0,  G(10),G(50),G(110),G(125),G(140),G(225),   128,160,192,224,255],INTERVALS,INDGEN(256))
    BB = INTERPOL([0,  B(10),B(50),B(110),B(125),B(140),B(225),   128,160,192,224,255],INTERVALS,INDGEN(256))
    
    PAL = BYTARR(3,N_ELEMENTS(RR))
    PAL(0,*) = RR
    PAL(1,*) = GG
    PAL(2,*) = BB
    
    PALLIST = LIST()
    FOR I = 0, N_ELEMENTS(R)-1 DO PALLIST.ADD,REFORM(PAL[*,I])
    
  ;  W = WINDOW(DIMENSIONS=[800,800],LAYOUT=[2,1,1])
    ARR    = FLTARR(500,500)
    FOR I = 0, 499 DO ARR(*,I) = (0+(100/499.)*FINDGEN(500))            ; scale the array to 200 intervals ranging from 0 to 100 (adapted from the jhuapl routine maken)
    X = [MIN(ARR),MAX(ARR)]
    IM = IMAGE(ARR,RGB_TABLE=PAL,TITLE='LINEAR')
    
    WRITEPAL,'pal_anom_grey',RR,GG,BB

  	
  STOP
    INTERVALS  = [0,1,  120,128, 250,251,252,253,254,255]
    R = INTERPOL([0,0,  255,255,245,128,160,192,224,255],INTERVALS,INDGEN(256)) 
    G = INTERPOL([0,0,  255,255,0,  128,160,192,224,255],INTERVALS,INDGEN(256)) 
    B = INTERPOL([0,255,204,204,0,  128,160,192,224,255],INTERVALS,INDGEN(256)) 

    PAL = BYTARR(3,N_ELEMENTS(R))
    PAL(0,*) = R
    PAL(1,*) = G
    PAL(2,*) = B
    
    PALLIST = LIST()
    FOR I = 0, N_ELEMENTS(R)-1 DO PALLIST.ADD,REFORM(PAL[*,I])
        
    W = WINDOW(DIMENSIONS=[800,800],LAYOUT=[2,1,1])
    ARR    = FLTARR(200,200) 
    FOR I = 0, 199 DO ARR(*,I) = (0+(100/199.)*FINDGEN(200))            ; scale the array to 200 intervals ranging from 0 to 100 (adapted from the jhuapl routine maken)     
    X = [MIN(ARR),MAX(ARR)]
    IM = IMAGE(ARR,/CURRENT,RGB_TABLE=PAL,LAYOUT=[2,1,1],TITLE='LINEAR')
    
    WRITEPAL,'pal_dif_byr',R,G,B
   
 STOP
  
  ENDIF
  
  IF WHITE_CENTERED_PAL GE 1 THEN BEGIN
    INTERVALS  = [0,1,  20, 80, 100,105,145,170,195,250,251,252,253,254,255]
    R = INTERPOL([0,0,  0,  51, 230,255,255,255,255,255,128,160,192,224,255],INTERVALS,INDGEN(256)) 
    G = INTERPOL([0,255,191,0,  230,255,255,0,  153,255,128,160,192,224,255],INTERVALS,INDGEN(256)) 
    B = INTERPOL([0,255,255,255,250,255,255,0,  18, 0,  128,160,192,224,255],INTERVALS,INDGEN(256)) 

    PAL = BYTARR(3,N_ELEMENTS(R))
    PAL(0,*) = R
    PAL(1,*) = G
    PAL(2,*) = B
    
    PALLIST = LIST()
    FOR I = 0, N_ELEMENTS(R)-1 DO PALLIST.ADD,REFORM(PAL[*,I])
        
    W = WINDOW(DIMENSIONS=[800,800],LAYOUT=[2,1,1])
    ARR    = FLTARR(200,200) 
    FOR I = 0, 199 DO ARR(*,I) = (0+(100/199.)*FINDGEN(200))            ; scale the array to 200 intervals ranging from 0 to 100 (adapted from the jhuapl routine maken)     
    X = [MIN(ARR),MAX(ARR)]
    IM = IMAGE(ARR,/CURRENT,RGB_TABLE=PAL,LAYOUT=[2,1,1],TITLE='LINEAR')
    
    WRITEPAL,'pal_anomcy',R,G,B
   
 STOP 
  ENDIF
  
  IF RWB_GREY_PAL GE 1 THEN BEGIN
    INTERVALS  = [0, 1,  110,140,250,251,252,253,254,255]
    R = INTERPOL([0, 0,  240,240,245,128,160,192,224,255],INTERVALS,INDGEN(256))
    G = INTERPOL([0, 0,  240,240,0,  128,160,192,224,255],INTERVALS,INDGEN(256))
    B = INTERPOL([0, 245,240,240,0,  128,160,192,224,255],INTERVALS,INDGEN(256))
    
    PAL = BYTARR(3,N_ELEMENTS(R))
    PAL(0,*) = R
    PAL(1,*) = G
    PAL(2,*) = B
    
    PALLIST = LIST()
    FOR I = 0, N_ELEMENTS(R)-1 DO PALLIST.ADD,REFORM(PAL[*,I])
    
    W = WINDOW(DIMENSIONS=[800,800],LAYOUT=[2,1,1])
    ARR    = FLTARR(200,200)
    FOR I = 0, 199 DO ARR(*,I) = (0+(100/199.)*FINDGEN(200))            ; scale the array to 200 intervals ranging from 0 to 100 (adapted from the jhuapl routine maken)
    X = [MIN(ARR),MAX(ARR)]
    IM = IMAGE(ARR,/CURRENT,RGB_TABLE=PAL,LAYOUT=[2,1,1],TITLE='LINEAR')
    
    WRITEPAL,'pal_anom_rgb',R,G,B
    
    STOP
  ENDIF
  
  IF ANOM_PAL GE 1 THEN BEGIN
    INTERVALS  = [0, 1,   25, 50, 75,100,110,115,135,140,150,160,175,200,225,250,251,252,253,254,255]
    R = INTERPOL([0, 132, 75, 12,  0,  0,  0,236,236,233,255,255,255,255,255,255,128,160,192,224,255],INTERVALS,INDGEN(256))
    G = INTERPOL([0, 0,    0,  0,125,239,255,236,236,255,234,202,150, 70,  0,  0,128,160,192,224,255],INTERVALS,INDGEN(256))
    B = INTERPOL([0, 124,181,244,255,255,221,236,236,  0,  0,  0,  0,  0, 23,255,128,160,192,224,255],INTERVALS,INDGEN(256))
    
    PAL = BYTARR(3,N_ELEMENTS(R))
    PAL(0,*) = R
    PAL(1,*) = G
    PAL(2,*) = B
    
    PALLIST = LIST()
    FOR I = 0, N_ELEMENTS(R)-1 DO PALLIST.ADD,REFORM(PAL[*,I])
     
    W = WINDOW(DIMENSIONS=[800,800],LAYOUT=[2,1,1])
    ARR    = FLTARR(200,200)
    FOR I = 0, 199 DO ARR(*,I) = (0+(100/199.)*FINDGEN(200))            ; scale the array to 200 intervals ranging from 0 to 100 (adapted from the jhuapl routine maken)
    X = [MIN(ARR),MAX(ARR)]
    IM = IMAGE(ARR,/CURRENT,RGB_TABLE=PAL,LAYOUT=[2,1,1],TITLE='LINEAR')
    
    WRITEPAL,'pal_anomg',R,G,B
    FILE_DOC,'pal_anomg' 
    STOP
    IM.CLOSE
  ENDIF
  
  IF GRAY_REVERSE_PAL GE 1 THEN BEGIN
   ; PAL_GRAY_IDL,R,G,B
    PAL_GRAY,R,G,B
    RR = REVERSE(R)
    GG = REVERSE(G)
    BB = REVERSE(B)
    
    I = [0,251,252,253,254,255]
    C = [0,128,160,192,224,255]
    
    FOR N=0, N_ELEMENTS(I)-1 DO BEGIN
      RR(I(N)) = C(N)
      GG(I(N)) = C(N)
      BB(I(N)) = C(N)
    ENDFOR
    
    PAL = BYTARR(3,N_ELEMENTS(RR))
    PAL(0,*) = RR
    PAL(1,*) = GG
    PAL(2,*) = BB
    
    W = WINDOW(DIMENSIONS=[800,800],LAYOUT=[2,1,1])
    ARR    = FLTARR(200,200)
    FOR I = 0, 199 DO ARR(*,I) = (0+(100/199.)*FINDGEN(200))            ; scale the array to 200 intervals ranging from 0 to 100 (adapted from the jhuapl routine maken)
    X = [MIN(ARR),MAX(ARR)]
    IM = IMAGE(ARR,/CURRENT,RGB_TABLE=PAL,LAYOUT=[2,1,1],TITLE='LINEAR')
    
    WRITEPAL,'pal_gray_reverse',RR,GG,BB
    FILE_DOC,'pal_gray_reverse'
    ENTER
    IM.CLOSE
  ENDIF  
  
    
  
  IF MARMAP_STATIONS GE 1 THEN BEGIN
    DATA = READALL(FIX_PATH(!S.PROJECTS+'MARMAP_OPAL\DATA\MARMAP_INTEGRATED_PP.CSV'))
       
    SUBAREAFILE     = !S.IMAGES+'MASK_SUBAREA-NEC-PXY_1024_1024-GFISH4.SAVE'    
    D = STRUCT_SD_READ(SUBAREAFILE,STRUCT=STRUCT)  
    ZWIN, [1024,1024]
    MAP_NEC    
    PXPY = MAP_DEG2IMAGE(D,FLOAT(DATA.LON),FLOAT(DATA.LAT),X=X,Y=Y,AROUND=0)
    ZWIN
    
    IM = STRUCT_SD_2IMAGE_NG(STRUCT,/ADD_LAND,/ADD_COAST)
    T  = TEXT(30,970,'MARMAP Primary Production Stations',/DEVICE,FONT_SIZE=20)
    FOR N=0,N_ELEMENTS(DATA)-1 DO BEGIN
      PRINT, N
      S = SYMBOL(X(N),Y(N),'STAR',/DEVICE,SYM_COLOR='BLACK',/SYM_FILLED,SYM_SIZE=1.25)
    ENDFOR      
    STOP
  ENDIF
  
END



