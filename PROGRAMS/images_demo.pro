; $ID:	IMAGES_DEMO.PRO,	2021-04-15-17,	USER-KJWH	$
; 
PRO IMAGES_DEMO, SIMPLE_EXAMPLES=SIMPLE_EXAMPLES, NEC_VARIATIONS=NEC_VARIATIONS, MONTHLY_COMPOSITE=MONTHLY_COMPOSITE, MAKE_MASK=MAKE_MASK, MAKE_MOVIE=MAKE_MOVIE

; #########################################################################; 
;+
; This program produces examples of images preferred by K. Hyde using older
; methods so that J. O'Reilly can reproduce them with the new methods.


; HISTORY:
;     FEB 4, 2014  WRITTEN BY: J.E. O'REILLY
;     JAN 6, 2015  MODIFIED BY: K. HYDE
;-
; #########################################################################

; *****************************
  ROUTINE_NAME  = 'IMAGES_DEMO'
; *****************************

  ;#####   SWITCHES   #####################
  IF TOTAL([ANY(SIMPLE_EXAMPLES),ANY(NEC_VARIATIONS),ANY(MONTHLY_COMPOSITE),ANY(MAKE_MASK),ANY(MAKE_MOVIE)]) EQ 0 THEN BEGIN
    SIMPLE_EXAMPLES           = ''  ; Added 1/6/2015 - Simple global maps using STRUCT_SD_2IMAGE_NG
    NEC_VARIATIONS            = ''  ; Added 1/6/2015 - NEC map examples of CHLOR_A
    MONTHLY_COMPOSITE         = ''  ; Added 1/6/2015 - Uses MONTHLY_COMPOSITES to create a large composite of monthly files.
    MAKE_MASK                 = ''  ; Added 8/21/2017 - Create a mask using LME shapefiles
    MAKE_MOVIE                = 'Y_2016'
    TRUE_COLOR                = 'Y'
    ; OUTLINES                  = ''  ; Added 1/6/2015 - Creates outline files used in DO_GLOBAL_PRESENTATION_MAPS
    ; GLOBAL_PRESENTATION_MAPS  = ''  ; Added 1/6/2015 - Global map examples with outlines for presentations
  ENDIF

  SL = PATH_SEP()
  DIR_DEMO = !S.DEMO + 'IMAGES_DEMO' + SL 
  DIR_DATA = DIR_DEMO + 'DATA' + SL
  DIR_TEST,[DIR_DEMO,DIR_DATA]

  USER = !S.USER
 
; *************************************
  IF KEY(SIMPLE_EXAMPLES) THEN BEGIN
; *************************************
    SNAME = 'SIMPLE_EXAMPLES'
    PRINT, 'Running: ' + SNAME
    SWITCHES,DO_SIMPLE_EXAMPLES,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    DIR_OUT = DIR_DEMO + USER + '_' + SNAME + SL & DIR_TEST, DIR_OUT
   
    RESOLUTION = 600
    BUFFER = 0
    PAL='PAL_BR'
    RGB_TABLE = CPAL_READ(PAL)
      
    PROD  = 'CHLOR_A'
    SS    = 'LOW'
    UPROD = 'CHLOR_A'
    TITLE = UNITS('CHLOROPHYLL')
    
    FILE = FILE_SEARCH(!S.FILES + 'ANNUAL*L3B4*' + PROD + '*.SAV')
    MAPS_OUT = ['GEQ','ROBINSON','NEC','EC']
    DIMS = LIST([2048,1024],[2048,1024],[1024,1024],[1024,1024])
    CPOS = LIST([0.25,0.05,0.75,0.08],[0.25,0.05,0.75,0.08],[0.03,0.95,0.55,0.97],[0.03,0.94,0.5,0.96])
    ; ??? WE USED TO HAVE COLORBAR POSITIONS HARD CODED IN A PROGRAM, BUT COULD WE PUT THE DEFAULT CBAR POSITION AND IMAGE DIMENSIONS IN MAPS_MASTER???
    
    FOR N=0, N_ELEMENTS(MAPS_OUT)-1 DO BEGIN
      PNGFILE = REPLACE(FILE,[!S.FILES,'L3B4','.SAV'],[DIR_OUT,MAPS_OUT(N),'.PNG'])
      IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      D = STRUCT_READ(FILE,STRUCT=2,MAP_OUT=MAPS_OUT(N))
      B = PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAPS_OUT(N))
      I = IMAGE(B,MARGIN=0,RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS(N))
      PRODS_COLORBAR, PROD, IMG=I, ORIENTATION=0, TITLE=UNITS(PROD), FONT_SIZE=14, POSITION=CPOS(N), TEXTPOS=0, PAL=PAL

      ; ??? IT WOULD BE NICE IF THE COLORBAR HAD A COMPLETE OUTLINE
      ; ??? ALSO, IS IT POSSIBLE TO PUT THE COLORBAR TITLE ON TOP OF THE BAR AND THE TICK LABELS BELOW??? 
            
      WAIT, 5
      I.SAVE, PNGFILE
      I.CLOSE
    ENDFOR  
  ENDIF  ; DO_SIMPLE_EXAMPLES




; *******************************************
  IF KEY(NEC_VARIATIONS) THEN BEGIN
; *******************************************
    SNAME = 'NEC_VARIATIONS'
    PRINT, 'Running: ' + SNAME
    SWITCHES,NEC_VARIATIONS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    DIR_OUT = DIR_DEMO + USER + '_' + SNAME + SL & DIR_TEST, DIR_OUT
       
    BUFFER = 0
    PAL='PAL_BR'
    RGB_TABLE = CPAL_READ(PAL)
    MAP_OUT='NWA'
    PROD='CHLOR_A'
    DIMS=[1024,1024]
      
    FILE = FILE_SEARCH(!S.FILES + 'ANNUAL*L3B4*' + PROD + '*.SAV')
    D = STRUCT_READ(FILE,STRUCT=S,MAP_OUT=MAP_OUT) & STR = S
    OUTLINE_FILE = !S.OUTLINES + 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_FULL_NO_ESTUARIES-OUTLINE.PNG'
    MASK = STRUCT_READ(!S.SUBAREAS + 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_FULL_NO_ESTUARIES.SAVE',MAP_OUT=MAP_OUT)
    MASK_SUBS = WHERE(MASK EQ 36 AND MASK NE MISSINGS(0.0))

    ; DEFAULT PNG
    PNGFILE = DIR_OUT + MAP_OUT + '-CHLOR_A-PLAIN.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_PLAIN
    IM = STRUCT_SD_2IMAGE_NG(S) & S = STR
    IM2 = IMAGE(PRODS_2BYTE(D,PROD=PROD),RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    STOP
    IM.SAVE, PNGFILE
    IM.CLOSE & IM2.CLOSE
    SKIP_PLAIN:
    
    ; ADD LANDMASK
    PNGFILE = DIR_OUT + MAP_OUT + '-CHLOR_A-LANDMASK.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_LANDMASK
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST) & S = STR
    IM2 = IMAGE(PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAP_OUT),RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    STOP
    IM.SAVE, PNGFILE
    IM.CLOSE & IM2.CLOSE
    SKIP_LANDMASK:
    
    ; REMAP TO 512 X 512
    PNGFILE = DIR_OUT + MAP_OUT + '-PXY_512_512-CHLOR_A-LANDMASK.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_512
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,IMG_DIMENSIONS=[512,512]) & S = STR
    IM2 = IMAGE(PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAP_OUT),RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=[512,512],MARGIN=0)
    STOP
    IM.SAVE, PNGFILE
    IM.CLOSE & IM2.CLOSE
    SKIP_512:
    
    ; ADD COLORBAR
    PNGFILE = DIR_OUT + MAP_OUT + '-CHLOR_A-COLORBAR.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_COLORBAR
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR) & S = STR
    IM2 = IMAGE(PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAP_OUT),RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    PRODS_COLORBAR, PROD, IMG=IM2, ORIENTATION=0, TITLE=UNITS(PROD), FONT_SIZE=14, POSITION=[0.03,0.95,0.55,0.97], TEXTPOS=0, PAL=PAL
    PLINES, TXT = ['NOTE THE DIFFERENCES IN THE COLORBAR.  ONE HAS AN OUTLINE AND THE OTHER HAS TICKMARKS.  IS IT POSSIBLE TO GET BOTH???',   $
                  'IS IT ALSO POSSIBLE TO GET THE COLORBAR TITLE ABOVE THE BAR AND THE TICK LABELS BELOW???']
    STOP
    IM.SAVE, PNGFILE
    IM.CLOSE & IM2.CLOSE
    SKIP_COLORBAR:
    
    ; ADD SCALING - HIGH
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-SCALING_HIGH.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_HIGH
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR,SPECIAL_SCALE='HIGH',COLORBAR_TITLE=UNITS('CHLOROPHYLL')) & S = STR
    IM2 = IMAGE(PRODS_2BYTE(D,PROD=PROD+'_0.1_30.0',/ADD_LAND,/ADD_COAST,MP=MAP_OUT),RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    PRODS_COLORBAR, PROD+'_0.1_30.0', IMG=IM2, ORIENTATION=0, TITLE=UNITS('CHLOROPHYLL'), FONT_SIZE=14, POSITION=[0.03,0.95,0.55,0.97], TEXTPOS=0, PAL=PAL
    PLINES, TXT = ['I LIKE THE .01, .03, .1, .3, AND 10 TICKMARKS BETTER.', 'I ALSO PREFER "CHLROPHYLL" OVER "CHL" OR "CHLOR_A" FOR COLORBAR LABELS']
        
    STOP
    IM.SAVE, PNGFILE
    IM.CLOSE & IM2.CLOSE
    SKIP_HIGH:
   
    ; ADD SCALING - LOW
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-SCALING_LOW.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_LOW
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR,SPECIAL_SCALE='LOW',COLORBAR_TITLE=UNITS('CHLOROPHYLL')) & S = STR
    IM2 = IMAGE(PRODS_2BYTE(D,PROD=PROD+'_0.01_10.0',/ADD_LAND,/ADD_COAST,MP=MAP_OUT),RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    PRODS_COLORBAR, PROD+'_0.01_10.0', IMG=IM2, ORIENTATION=0, TITLE=UNITS('CHLOROPHYLL'), FONT_SIZE=14, POSITION=[0.03,0.95,0.55,0.97], TEXTPOS=0, PAL=PAL
    PLINES, TXT = ['I LIKE THE .01, .03, .1, .3, AND 10 TICKMARKS BETTER.','I ALSO PREFER "CHLROPHYLL" OVER "CHL" OR "CHLOR_A" FOR COLORBAR LABELS.']
    STOP
    IM.SAVE, PNGFILE
    IM.CLOSE & IM2.CLOSE
    SKIP_LOW:
    
    ; ADD DATEBAR
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-DATEBAR.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_DATEBAR
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR,/ADD_DATEBAR) & S = STR
    IM2 = IMAGE(PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAP_OUT),RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    PRODS_COLORBAR, PROD, IMG=IM2, ORIENTATION=0, TITLE=UNITS(PROD), FONT_SIZE=14, POSITION=[0.03,0.95,0.55,0.97], TEXTPOS=0, PAL=PAL
    BAR = DATE_BAR_NG(DATE_NOW(),POSITION=[0.03,0.855,0.5,0.88])
    STOP
    IM.SAVE, PNGFILE
    IM.CLOSE & IM2.CLOSE
    SKIP_DATEBAR:
    
    ; ADD BATHY LINES
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-BATHY.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_BATHY
    BATHS = [50,100,500,1000]
   
   ; IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR,/ADD_BATHY,BATHS=[100,500,1000]) & S = STR    
   
    BATH  = TOPO_GET(MAP_OUT,-1*BATHS,SWIDTH=SWIDTH,THICKS=THICKS,VERBOSE=VERBOSE,FACT=1)
    BSUBS = []
    FOR B=0, N_ELEMENTS(BATHS)-1 DO BEGIN
      TT    = TOPO_TAGS(MAP_OUT,-1*BATHS(B))
      BSUBS = [BSUBS,STRSPLIT(STRUCT_GET(BATH,TT.TAG+'.SUBS'),';',/EXTRACT)]
    ENDFOR
    BIMG = PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAP_OUT)
    BIMG(BSUBS) = 252
    IM2 = IMAGE(BIMG,RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    PRODS_COLORBAR, PROD, IMG=IM2, ORIENTATION=0, TITLE=UNITS(PROD), FONT_SIZE=14, POSITION=[0.03,0.95,0.55,0.97], TEXTPOS=0, PAL=PAL
    PLINES, TXT = ['MAP_ADD_BATHY IS NOT WORKING IN STRUCT_SD_2IMAGE_NG SO IT IS CURRENTLY COMMENTED OUT.','WE SHOULD DETERMINE IF THAT PROGRAM IS THE BEST WAY TO ADD A BATHYMETRY LINE OR NOT']
    STOP
    IM2.SAVE, PNGFILE
    IM2.CLOSE 
    SKIP_BATHY:
    
    ; ADD SUBAREA OUTLINES
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-OUTLINES.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_OUTLINES
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR,/ADD_OUTLINE,OUTLINE_THICK=3,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=0) & S = STR
    
    SUBAREAFILES = FLS(!S.IDL_SHAPEFILES + 'NES_ECOREGIONS' + SL + 'EPUS_CORE.shp')
    STRUCT = READ_SHPFILE(SUBAREAFILES, MAPP=MAP_OUT, COLOR=COLORS, VERBOSE=VERBOSE)
    OUTLINE = STRUCT.EPUS_CORE.EPUS_CORE_OUTLINE
    BIMG = PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAP_OUT)
    BIMG(OUTLINE) = 0
    IM2 = IMAGE(BIMG,RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    PRODS_COLORBAR, PROD, IMG=IM2, ORIENTATION=0, TITLE=UNITS(PROD), FONT_SIZE=14, POSITION=[0.03,0.95,0.55,0.97], TEXTPOS=0, PAL=PAL
    
    BLANK = BYTE(MAPS_BLANK(MAP_OUT,FILL=0))
    BLANK(OUTLINE) = 1
    SDIL = IMG_DILATE(BLANK,COLOR=1,BOX=3,SUBS=SSUBS)
    BIMG = PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAP_OUT)
    BIMG(SSUBS) = 0
    IM3 = IMAGE(BIMG,RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    PRODS_COLORBAR, PROD, IMG=IM3, ORIENTATION=0, TITLE=UNITS(PROD), FONT_SIZE=14, POSITION=[0.03,0.95,0.55,0.97], TEXTPOS=0, PAL=PAL    
    STOP
    IM3.SAVE, PNGFILE
    IM3.CLOSE & IM2.CLOSE & IM.CLOSE 
    SKIP_OUTLINES:
    
    ; ADD OFFSHORE MASK
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-OFFSHORE_MASK.PNG'
    IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_MASK
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR,/ADD_MASK,MASK_SUBS=MASK_SUBS,MASK_COLOR=255) & S = STR
    
    SUBAREAFILES = FLS(!S.IDL_SHAPEFILES + 'NES_ECOREGIONS' + SL + 'EPUS_EXTENDED.shp')
    STRUCT = READ_SHPFILE(SUBAREAFILES, MAPP=MAP_OUT, COLOR=COLORS, VERBOSE=VERBOSE)
    SUBS = STRUCT.EPUS_EXTENDED.MAB.SUBS
    SUBS = [SUBS,STRUCT.EPUS_EXTENDED.GB.SUBS]
    SUBS = [SUBS,STRUCT.EPUS_EXTENDED.GOM.SUBS]
    SUBS = [SUBS,STRUCT.EPUS_EXTENDED.SS.SUBS]
    BLANK = BYTE(MAPS_BLANK(MAP_OUT,FILL=0))
    BLANK(SUBS) = 1
    MASK = WHERE(BLANK EQ 0)
    BIMG = PRODS_2BYTE(D,PROD=PROD)
    LM = READ_LANDMASK(MAP_OUT,/STRUCT)
    BIMG(MASK) = 255
    BIMG(LM.LAND) = 252
    BIMG(LM.COAST) = 0
    IM2 = IMAGE(BIMG,RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0)
    PRODS_COLORBAR, PROD, IMG=IM2, ORIENTATION=0, TITLE=UNITS(PROD), FONT_SIZE=14, POSITION=[0.03,0.95,0.55,0.97], TEXTPOS=0, PAL=PAL
    PLINES, TXT = ['NOTE: THE TWO IMAGES ARE USING DIFFERENT MASKS SO THEY ARE NOT IDENTICAL.','IT MAY BE POSSIBLE TO ADD THE MASKING STEP TO PRODS_2BYTE IF YOU KNOW THE SUBSCRIPTS']
    
    STOP
    IM2.SAVE, PNGFILE
    IM2.CLOSE & IM.CLOSE 
    SKIP_MASK:
    
    ; ADD LAT/LON LINES
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-LONLATS.PNG'
    IF FILE_MAKE(FILE,DIR_OUT+PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_LONLAT
    LATS = [36,40,44]        & LATNAMES = STRTRIM(LATS,2)
    LONS = [-76,-72,-68,-64] & LONNAMES = STRTRIM(LONS,2)
    IM = STRUCT_SD_2IMAGE_NG(S,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR,/ADD_LONLAT_LINES,LONLAT_THICK=2,LONLAT_COLOR=0,LATS=LATS,LONS=LONS) & S = STR
    PLINES, TXT = ['I DO NOT KNOW AN EASY WAY USING NG TO ADD THE LON/LAT LINES SO THAT THEY FOLLOW THE ACTUAL LINES OF LONGITUDE AND LATITUDE IN A SPECIFIC MAP!C!C', $
                  'IT WOULD BE GREAT IF WE COULD ADD LON/LAT COORDINATES AND LINES USING THE "MAP" FUNCTIONS INSTEAD OF USING MAPS_2LONLAT']
    STOP
    IM.SAVE, PNGFILE
    IM.CLOSE 
    SKIP_LONLAT:
    
    ; ADD LAT/LON LABELS
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-LONLAT-LABELS.PNG'
    IF FILE_MAKE(FILE,DIR_OUT+PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_LABELS
    W = WINDOW(DIMENSION=[1124,1124],BUFFER=BUFFER)
    IMG = STRUCT_SD_2IMAGE_NG(S,BUFFER=BUFFER,PAL=PAL,/ADD_LAND,IMG_DIMENSIONS=[1024,1024],/CURRENT,/DEVICE,IMG_POSITION=[50,50,1074,1074],ADD_LONLAT_LINES=1,LONLAT_THICK=2,LONLAT_COLOR=0,LATS=LATS,LONS=LONS) & S = STR
    BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',PX=70,PY=990,CHARSIZE=16,BACKGROUND=BACKGROUND,XDIM=600,YDIM=20,PAL=PAL,LAYOUT=LAYOUT,TITLE=UNITS('CHLOR_A'),HORIZONTAL=HORIZONTAL,BOTTOM=0,TOP=1,LEFT=LEFT,RIGHT=RIGHT,FONT='HELVETICA')
    FOR S=0, N_ELEMENTS(LAT)-1 DO LLAT = SYMBOL(54,LAT(S)+50, 0,SYM_SIZE=2,SYM_COLOR='BLACK',SYM_THICK=3,/SYM_FILLED,/CURRENT,/DEVICE,LABEL_STRING=LATNAMES(S),LABEL_FONT_SIZE=16,LABEL_FONT_STYLE='BOLD',LABEL_POSITION='L')
    FOR S=0, N_ELEMENTS(LON)-1 DO LLON = SYMBOL(LON(S)+50,54, 0,SYM_SIZE=2,SYM_COLOR='BLACK',SYM_THICK=3,/SYM_FILLED,/CURRENT,/DEVICE,LABEL_STRING=LONNAMES(S),LABEL_FONT_SIZE=16,LABEL_FONT_STYLE='BOLD',LABEL_POSITION='B')
    
    IM2 = IMAGE(PRODS_2BYTE(D,PROD=PROD,/ADD_LAND,/ADD_COAST,MP=MAP_OUT),RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=[1124,1124],POSITION=[50,50,1074,1074],/DEVICE)
    PY = POLYLINE([50,1074,1074,50,50],[50,50,1074,1074,50],COLOR='BLACK',THICK=3,/DEVICE,/CURRENT)
    PRODS_COLORBAR, PROD, IMG=IM2, ORIENTATION=0, TITLE=UNITS(PROD), FONT_SIZE=14, POSITION=[0.08,0.92,0.6,0.95], TEXTPOS=0, PAL=PAL
    NEAR = 0.1
    LL = MAPS_2LONLAT('NEC',PX=1024,PY=1024)
    LAT = WHERE_NEAREST(LL.LAT(0,*),FLOAT(LATS),NEAR=NEAR)
    LON = WHERE_NEAREST(LL.LON(*,0),FLOAT(LONS),NEAR=NEAR)
    FOR T=0, N_ELEMENTS(LAT)-1 DO LLAT = SYMBOL(52,LAT(T)+50,'HLINE',SYM_SIZE=1.5,SYM_COLOR='BLACK',SYM_THICK=3,/SYM_FILLED,/CURRENT,/DEVICE,LABEL_STRING=LATNAMES(T),LABEL_FONT_SIZE=16,LABEL_FONT_STYLE='BOLD',LABEL_POSITION='L')
    FOR T=0, N_ELEMENTS(LON)-1 DO LLON = SYMBOL(LON(T)+50,52,'VLINE',SYM_SIZE=1.5,SYM_COLOR='BLACK',SYM_THICK=3,/SYM_FILLED,/CURRENT,/DEVICE,LABEL_STRING=LONNAMES(T),LABEL_FONT_SIZE=16,LABEL_FONT_STYLE='BOLD',LABEL_POSITION='B')
    PLINES, TXT = 'IT WOULD BE GREAT IF WE COULD ADD LON/LAT COORDINATES AND LINES USING THE "MAP" FUNCTIONS INSTEAD OF USING MAPS_2LONLAT'
    STOP
    IM2.SAVE,PNGFILE
    IM2.CLOSE & W.CLOSE
    SKIP_LABELS:
    
    ; COMPOSITE WITH MORE SCALING EXAMPLES
    PNGFILE = DIR_OUT + 'NEC-CHLOR_A-COMPOSITE_WITH_SCALING.PNG'
    IF FILE_MAKE(FILE,DIR_OUT+PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_LAYOUT
    W = WINDOW(DIMENSION=[1536,512],BUFFER=BUFFER)
    S=STR & IMG = STRUCT_SD_2IMAGE_NG(S,BUFFER=BUFFER,PAL=PAL,SPECIAL_SCALE='.1_10',       /ADD_LAND,IMG_DIMENSIONS=[512,512],/CURRENT,/DEVICE,LAYOUT=[3,1,1])
    S=STR & IMG = STRUCT_SD_2IMAGE_NG(S,BUFFER=BUFFER,PAL=PAL,SPECIAL_SCALE='.03_50',      /ADD_LAND,IMG_DIMENSIONS=[512,512],/CURRENT,/DEVICE,LAYOUT=[3,1,2])
    S=STR & IMG = STRUCT_SD_2IMAGE_NG(S,BUFFER=BUFFER,PAL=PAL,SPECIAL_SCALE='.VERY_NARROW',/ADD_LAND,IMG_DIMENSIONS=[512,512],/CURRENT,/DEVICE,LAYOUT=[3,1,3]) & S = STR
    BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',SPECIAL_SCALE='.1_10',       PX=10,  PY=480,CHARSIZE=14,BACKGROUND=BACKGROUND,XDIM=256,YDIM=20,PAL=PAL,LAYOUT=LAYOUT,TITLE=UNITS('CHLOR_A'),HORIZONTAL=HORIZONTAL,BOTTOM=1,FONT='HELVETICA')
    BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',SPECIAL_SCALE='.03_50',      PX=522, PY=480,CHARSIZE=14,BACKGROUND=BACKGROUND,XDIM=256,YDIM=20,PAL=PAL,LAYOUT=LAYOUT,TITLE=UNITS('CHLOR_A'),HORIZONTAL=HORIZONTAL,BOTTOM=1,FONT='HELVETICA')
    BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',SPECIAL_SCALE='.VERY_NARROW',PX=1034,PY=480,CHARSIZE=14,BACKGROUND=BACKGROUND,XDIM=256,YDIM=20,PAL=PAL,LAYOUT=LAYOUT,TITLE=UNITS('CHLOR_A'),HORIZONTAL=HORIZONTAL,BOTTOM=1,FONT='HELVETICA')
    STOP
    W.SAVE,PNGFILE
    W.CLOSE
    SKIP_LAYOUT: 
    
  ENDIF ; IF DO_NEC_VARIATIONS GE 1 THEN BEGIN
  ; ||||||||||||||||||||||||||||||||||||

; *******************************************
  IF KEY(MONTHLY_COMPOSITE) THEN BEGIN
; *******************************************
    SNAME = 'MONTHLY_COMPOSITE'
    PRINT, 'Running: ' + SNAME
    SWITCHES,MONTHLY_COMPOSITE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    DIR_OUT = DIR_DEMO + USER + '_' + SNAME + SL & DIR_TEST, DIR_OUT

    BUFFER = 1
    PAL='PAL_BR'
    RGB_TABLE = CPAL_READ(PAL)
    MAP_OUT='NEC'
    PROD = 'CHLOR_A_0.1_30.0'

    DR = ['19970901','20101231']
    YEARS  = YEAR_RANGE(DATE_2YEAR(DR[0]),DATE_2YEAR(DR[1]))
    MONTHS = MONTH_RANGE(/STRING)
    NAMES  = MONTH_NAMES(MONTHS)
    SS = '03_50'
    CBAR_TITLE = UNITS('CHLOROPHYLL')
    FILES = FILE_SEARCH(DIR_DATA + 'M_*MEAN.SAVE')
    FILES = DATE_SELECT(FILES,DR)
    FP = PARSE_IT(FILES)
    FILES = FILES[SORT(FP.MONTH_END+FP.YEAR_START)]
    PNGFILE = DIR_OUT + NUM2STR(DATE_2YEAR(DR[0]))+'_'+NUM2STR(DATE_2YEAR(DR[1]))+'_COMPOSITE-NEC-CHLOR_A.PNG'
    IF FILE_MAKE(FILES,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_MONTHLY_COMPOSITE
    MONTHLY_COMPOSITES, FILES, MAP_OUT=MAP_OUT, DIR_OUT=DIR_OUT, OUTFILE=PNGFILE, DATERANGE=DR, /YEARS_ON_TOP, IMGPROD=PROD, PAL=PAL, COLORBAR_TITLE=CBAR_TITLE,$
      XDIM=XDIM, YDIM=YDIM, NROWS=NROWS, NCOLS=NCOLS, TOP=TOP, BOTTOM=BOTTOM, LEFT=LEFT, RIGHT=RIGHT, NO_COLORBAR=NO_COLORBAR, SPACE=SPACE, BUFFER=BUFFER, VERBOSE=VERBOSE, ERROR=ERROR
      
    SKIP_MONTHLY_COMPOSITE:  
  ENDIF ; MONTHLY_COMPOSITE
  ; ||||||||||||||||||||||||||||||||||||

; *******************************************
  IF KEY(MAKE_MASK) THEN BEGIN
; *******************************************
    SNAME = 'MAKE_MASK'
    PRINT, 'Running: ' + SNAME
    SWITCHES,MAKE_MASK,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    DIR_OUT = DIR_DEMO + USER + '_' + SNAME + SL & DIR_TEST, DIR_OUT
  
    SHPFILE = !S.IDL_SHAPEFILES + 'LME_64' + SL + 'lmes_64.shp'  ; USE LME_64 TO AVOID ISSUES WITH THE CENTRAL ARCTIC LME
  
; ===> SHOW HOW TO EXTRACT THE SUBSCRIPTS FOR VARIOUS MAPS   
    MP = 'GEQ'
    STRUCT = READ_SHPFILE(SHPFILE, MAPP=MP, COLOR=COLORS, VERBOSE=VERBOSE)
    TAGS = TAG_NAMES(STRUCT.(0)) & TAGS = TAGS(0:-3)
    SUBS = []
    FOR N=0, N_ELEMENTS(TAGS)-1 DO SUBS = [SUBS,STRUCT.(0).(N).SUBS]
    BLK = MAPS_BLANK(MP,FILL=255B)
    BLK(SUBS) = 22
    IM = IMAGE(BLK,RGB_TABLE=CPAL_READ('PAL_36'),DIMENSIONS=[1024,512],MARGIN=0)
    
    MP = 'GS9'
    STRUCT = READ_SHPFILE(SHPFILE, MAPP=MP, COLOR=COLORS, VERBOSE=VERBOSE)
    TAGS = TAG_NAMES(STRUCT.(0)) & TAGS = TAGS(0:-3)
    SUBS = []
    FOR N=0, N_ELEMENTS(TAGS)-1 DO SUBS = [SUBS,STRUCT.(0).(N).SUBS]
    BLK = MAPS_BLANK(MP,FILL=255B)
    BLK(SUBS) = 22
    IMG = IMAGE(BLK,RGB_TABLE=CPAL_READ('PAL_36'),DIMENSIONS=[1024,512],MARGIN=0)
    
    MP = 'L3B9'
    STRUCT = READ_SHPFILE(SHPFILE, MAPP=MP, COLOR=COLORS, VERBOSE=VERBOSE)
    TAGS = TAG_NAMES(STRUCT.(0)) & TAGS = TAGS(0:-3)
    SUBS = []
    FOR N=0, N_ELEMENTS(TAGS)-1 DO SUBS = [SUBS,STRUCT.(0).(N).SUBS]
    BLK = MAPS_BLANK(MP,FILL=255B)
    BLK(SUBS) = 22
    BLKS = MAPS_REMAP(BLK,MAP_IN='L3B9',MAP_OUT='GS9')
    IMS = IMAGE(BLKS,RGB_TABLE=CPAL_READ('PAL_36'),DIMENSIONS=[1024,512],MARGIN=0)
    
    STOP
    IM.CLOSE & IMG.CLOSE & IMS.CLOSE & IMM.CLOSE


; ===> HIGHLIGHT THE ISSUE WITH THE CENTRAL ARCTIC LME IN LMEs66
    SHPFILE = !S.IDL_SHAPEFILES + 'LME66' + SL + 'LMEs66.shp'    
    MP = 'GEQ'
    STRUCT = READ_SHPFILE(SHPFILE, MAPP=MP, COLOR=COLORS, VERBOSE=VERBOSE)
    CA = STRUCT.(0).CENTRALARCTIC
    STRUCT = STRUCT_REMOVE(STRUCT.(0),'CENTRALARCTIC')
    TAGS = TAG_NAMES(STRUCT) & TAGS = TAGS(0:-3)
    SUBS = []
    FOR N=0, N_ELEMENTS(TAGS)-1 DO SUBS = [SUBS,STRUCT.(N).SUBS]
    BLK = MAPS_BLANK(MP,FILL=255B)
    BLK(SUBS) = 22
    IMG2 = IMAGE(BLK,RGB_TABLE=CPAL_READ('PAL_36'),DIMENSIONS=[1024,512],MARGIN=0)
    LMEMASK = WHERE(BLK EQ 255B)
    PLINES, TXT='WITHOUT THE CENTRAL ARCTIC LME'
    STOP
    
    BLK(CA.SUBS) = 12
    IMG3 = IMAGE(BLK,RGB_TABLE=CPAL_READ('PAL_36'),DIMENSIONS=[1024,512],MARGIN=0)
    PLINES, TXT=['I BELIEVE THE POLYFILL STEP (LINE 298 IN READ_SHPFILE) IS FILLING IN THE OUTSIDE OF THE CENTRAL ARCTIC POLYGON INSTEAD OF THE INSIDE',$
                 'I AM NOT SURE IF THERE IS AN EASY FIX FOR THIS, BUT FOR MY PURPOSES I DO NOT NEED THAT LME SO I MAY ELIMINATE IT.']
    STOP
    IMG2.CLOSE & IMG3.CLOSE
    
    
; ===> ADD MASK TO AN IMAGE    
    FILE = FILE_SEARCH(!S.FILES + 'ANNUAL*L3B4*CHLOR_A*.SAV')
    D = STRUCT_READ(FILE,MAP_OUT=MP)
    IM_FULL = IMAGE(PRODS_2BYTE(D,PROD='CHLOR_A',/ADD_LAND,/ADD_COAST,MP=MP),MARGIN=0,RGB_TABLE=CPAL_READ('PAL_BR'),DIMENSIONS=[1024,512])
     
    D = STRUCT_READ(FILE,MAP_OUT='GEQ',MASK=LMEMASK) 
    IM_MASK = IMAGE(PRODS_2BYTE(D,PROD='CHLOR_A',/ADD_LAND,/ADD_COAST,MP=MP),MARGIN=0,RGB_TABLE=CPAL_READ('PAL_BR'),DIMENSIONS=[1024,512])

    STOP
    IM_FULL.CLOSE & IM_MASK.CLOSE
    
  ENDIF ; MAKE_MASK
  
; *************************************
  IF KEY(MAKE_MOVIE) THEN BEGIN
; *************************************
    SNAME = 'MAKE_MOVIE'
    PRINT, 'Running: ' + SNAME
    SWITCHES,MAKE_MOVIE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_PRODS=R_PRODS,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
    
    RESOLUTION = 600
    BUFFER = 0
    PAL='PAL_BR'
    RGB_TABLE = CPAL_READ(PAL)
    FPS = 20
    NTITLE = 10
    MP = 'NEC'
    DIMS = [1024,1024]
    LANDMASK = READ_LANDMASK(MP,/STRUCT)
    
    PRODS  = ['CHLOR_A-OCI','PPD-VGPM2']
    DIRS   = [!S.OC+ 'MODISA/',!S.PP+'MODISA/']
    SDIRS  = ['INTERP_SAVE','SAVE']
    TITLES = [UNITS('CHLOROPHYLL'),UNITS('PRIMARY_PRODUCTION')]
    SCL    = ['CHLOR_A_0.03_30','PPD_0.1_10.0']
    
    SUBAREAFILES = FLS(!S.IDL_SHAPEFILES + 'NES_ECOREGIONS/EPUS_EXTENDED.shp')
    STRUCT = READ_SHPFILE(SUBAREAFILES, MAPP=MP, COLOR=COLORS, VERBOSE=VERBOSE)
    OUTLINE = STRUCT.(0).OUTLINE
    BLANK = BYTE(MAPS_BLANK(MP,FILL=0))
    BLANK(OUTLINE) = 1
    OUTLINE = IMG_DILATE(BLANK,TARGET=1,BOX=4,SUBS=OSUBS)
    
    FOR I=0, N_ELEMENTS(PRODS)-1 DO BEGIN
      FILES = FLS(DIRS(I) + 'L3B2/STATS/' + PRODS(I) + '/A_'+STRMID(DATERANGE[0],0,4)+'*.SAV')
      FILES = [FILES,FLS(DIRS(I) + 'L3B2/' + SDIRS(I) + '/' + PRODS(I) + '/D_*.SAV',DATERANGE=DATERANGE)]
      DIR_OUT = DIRS(I) + MP + '/PNGS/' + PRODS(I) + '/'      & DIR_TEST, DIR_OUT
      DIR_MOVIES = DIRS(I) + MP + '/MOVIES/' + PRODS(I) + '/' & DIR_TEST, DIR_MOVIES      

      PFILES = []  
      IF KEY(R_FILES) THEN FILES = REVERSE(FILES)
      FOR N=0, N_ELEMENTS(FILES)-1 DO BEGIN
        FP = FILE_PARSE(FILES(N))
        PNGFILE = REPLACE(FILES(N),[FP.DIR,'L3B2','.SAV'],[DIR_OUT,MP,'.PNG'])
        PFILES = [PFILES,PNGFILE]
;        IF FILE_MAKE(FILES(N),PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
;  prods_2png, files(n),pngfile=pngfile, /add_cb, /add_db, /add_outlines, outline_img=outline,sprod=scl(i), mapp='NEC'
;        D = STRUCT_READ(FILES(N),STRUCT=S,MAP_OUT=MP)
;        BIMG = PRODS_2BYTE(D,PROD=SCL(I),MP=MP)
;        BIMG(OSUBS) = 255
;        BIMG(LANDMASK.LAND) = 253
;        BIMG(LANDMASK.COAST) = 0
;        IM2 = IMAGE(BIMG,RGB_TABLE=CPAL_READ(PAL),DIMENSIONS=DIMS,MARGIN=0,BUFFER=BUFFER)
;        CBAR, SCL(I), IMG=IM2, ORIENTATION=0, CB_TITLE=TITLES(I), FONT_SIZE=10, CB_POS=[0.03,0.92,0.5,0.94], CB_TYPE=3, PAL=PAL
;        DB = DATE_BAR(PERIOD_2DATE(S.PERIOD),DB_FONT_SIZE=10, DB_POS=[0.03,0.95,0.5,0.98])
;      
;        PFILE, PNGFILE, /W
;        IF BUFFER EQ 0 THEN WAIT, 5
;        IM2.SAVE, PNGFILE
;        IM2.CLOSE
      ENDFOR ; FILES
      
      PFILES = PFILES[SORT(PFILES)]
      MOVIE_FILE = MP + '-'+ 'D_2016'+'-'+PRODS(I)+'-FPS_'+NUM2STR(FPS)+['.MP4','.AVI']
      FOR M =0, N_ELEMENTS(MOVIE_FILE)-1 DO IF FILE_MAKE(PFILES,DIR_MOVIES+MOVIE_FILE(M),OVERWRITE=OVERWRITE) EQ 1 THEN $
        MAKE_FF_MOVIE,FILES=PFILES,DIR_OUT=DIR_MOVIES,PAL=PAL,KBPS=KBPS,FPS=FPS,MAP=MP,YOFFSET=YOFFSET,TITLE_FILE_PNG=PFILES[0],N_TITLE=N_TITLE,TITLE_SLIDE=TITLE_SLIDE,MOVIE_FILE=MOVIE_FILE(M)
    ENDFOR ; PRODS  
  ENDIF  ; MAKE_MOVIE
  
; *************************************
  IF KEY(TRUE_COLOR) THEN BEGIN
; *************************************
    SNAME = 'TRUE_COLOR'
    PRINT, 'Running: ' + SNAME
    SWITCHES,TRUE_COLOR,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_PRODS=R_PRODS,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE

    RESOLUTION = 600
    BUFFER = 1
    MP = 'NEC'
    DIMS = [1024,1024]
    
    FILES = !S.FILES + ['A2005303175000.L2_LAC_OC',$
                        'A2008083173500.L2_LAC_OC',$
                        'S2002131165839.L2_LAC_OC',$
                        'S2002224171658.L2_LAC_OC']
    FILES = FILES[WHERE(EXISTS(FILES) EQ 1,/NULL)]                    
    TPNGS = REPLACE(FILES,'.L2_LAC_OC','-TRUE_COLOR.PNG')
    CPNGS = REPLACE(FILES,'.L2_LAC_OC','-CHLOR_A.PNG')
    DIR_OUT = DIR_DEMO + SNAME + SL & DIR_TEST, DIR_OUT
    
    FOR N=0, N_ELEMENTS(FILES)-1 DO BEGIN
      IF FILE_MAKE(FILES(N),[TPNGS(N)],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE

      D = READ_NC(FILES(N))
      LONS = D.SD.LONGITUDE.IMAGE 
      LATS = D.SD.LATITUDE.IMAGE  
      
      IF D.GLOBAL.INSTRUMENT EQ 'MODIS' THEN PRODS = ['RHOS_645','RHOS_555','RHOS_469'] ELSE PRODS = ['RHOS_670','RHOS_555','RHOS_443']
      FOR I=0, N_ELEMENTS(PRODS)-1 DO BEGIN
        POS = WHERE(TAG_NAMES(D.SD) EQ PRODS(I))
        S = D.SD.(POS)
        IMG = S.IMAGE
        
      ; ===>  Find FILLED/BAD data
        IF STRUCT_HAS(S,'_FILLVALUE')       THEN FV = S._FILLVALUE._DATA[0] ELSE FV = MISSINGS(IMG)
        IF STRUCT_HAS(S,'BAD_VALUE_SCALED') THEN BV = S.BAD_VALUE_SCALED    ELSE BV = MISSINGS(IMG)
        IF STRUCT_HAS(S,'VALID_MIN')        THEN MN = S.VALID_MIN._DATA[0]  ELSE MN = MIN(IMG)
        IF STRUCT_HAS(S,'VALID_MAX')        THEN MX = S.VALID_MAX._DATA[0]  ELSE MX = MAX(IMG)

        ; ===>  Find GOOD data
        OK_GOOD=WHERE(IMG NE MISSINGS(IMG) AND IMG NE BV AND IMG NE FV AND IMG LE MX AND IMG GE MN,COUNT_GOOD,COMPLEMENT=OK_BAD,NCOMPLEMENT=COUNT_BAD)

        ; ===> Scale with slope and intercept if available
        SLOPE = 1.0 & INTERCEPT = 0.0
        IF STRUCT_HAS(S,'SLOPE')            THEN SLOPE = FLOAT(S.SLOPE[0])
        IF STRUCT_HAS(S,'SCALE_FACTOR')     THEN SLOPE = FLOAT(S.SCALE_FACTOR._DATA[0])
        IF STRUCT_HAS(S,'INTERCEPT')        THEN INTERCEPT = FLOAT(S.INTERCEPT[0])
        IF STRUCT_HAS(S,'ADD_OFFSET')       THEN INTERCEPT = FLOAT(S.ADD_OFFSET._DATA[0])

        SAT_DATA = IMG * SLOPE + INTERCEPT
        CASE I OF
          0: BEGIN & R = SAT_DATA & RMIN = MN & RMAX=MX & END
          1: BEGIN & G = SAT_DATA & GMIN = MN & GMAX=MX & END
          2: BEGIN & B = SAT_DATA & BMIN = MN & BMAX=MX & END
        ENDCASE
      ENDFOR  
      
      R = MAPS_REMAP(R,MAP_IN='LONLAT',MAP_OUT=MP,CONTROL_LONS=LONS,CONTROL_LATS=LATS)
      G = MAPS_REMAP(G,MAP_IN='LONLAT',MAP_OUT=MP,CONTROL_LONS=LONS,CONTROL_LATS=LATS)
      B = MAPS_REMAP(B,MAP_IN='LONLAT',MAP_OUT=MP,CONTROL_LONS=LONS,CONTROL_LATS=LATS)
      
      GONE, D
      GONE, LONS
      GONE, LATS
      
      RGB = BYTARR(3,1024,1024)
      RGB(0,*,*) = PRODS_2BYTE(R,PROD='NUM_'+NUM2STR(RMN)+'_'+NUM2STR(RMX),LOG=1)
      RGB(1,*,*) = PRODS_2BYTE(G,PROD='NUM_'+NUM2STR(GMN)+'_'+NUM2STR(GMX),LOG=1)
      RGB(2,*,*) = PRODS_2BYTE(B,PROD='NUM_'+NUM2STR(BMN)+'_'+NUM2STR(BMX),LOG=1)
      W = WINDOW(DIMENSION=[1024,1024])
      RM = IMAGE(RGB,POSITION=[0,0,1024,1024],/CURRENT,/DEVICE)
      
     STOP
      
      
      IF BUFFER EQ 0 THEN WAIT, 5
      W.SAVE, TPNGS(N)
      W.CLOSE
      PFILE, TPNGS(N), /W
    ENDFOR ; FILES

  ENDIF  ; TRUE_COLOR
  
;  ; *************************************
;  IF KEY(OUTLINES) THEN BEGIN
;    ; *************************************
;    SNAME = 'OUTLINES'
;    PRINT, 'Running: ' + SNAME
;    SWITCHES,OUTLINES,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
;    DIR_OUT = DIR_DEMO + USER + '_' + SNAME + SL & DIR_TEST, DIR_OUT
;
;    PAL_SW3,R,G,B
;
;    MAP_IN = 'GEQ'
;    MAPS_OUT = ['ROBINSON', 'MOLLWEIDE']
;    PXS = [4096,4096]
;    PYS = [2048,2048]
;
;    FOR M=0, N_ELEMENTS(MAPS_OUT)-1 DO BEGIN
;      MAP_OUT = MAPS_OUT(M)
;      PX = PXS(M)
;      PY = PYS(M)
;
;      LAND = READ_LANDMASK(MAP_OUT,PX=PX,PY=PY,/STRUCT)
;      DIR_OUT = !S.OUTLINES
;
;      REGION = ['FAO_MINUS','LME_TOTAL','LME_0_300','LME_300']
;      FOR N=0, N_ELEMENTS(REGION)-1 DO BEGIN
;        AREGION = REGION(N)
;        FILE    = !S.SUBAREAS + 'MASK_SUBAREA-GEQ-PXY_4096_2048-'+AREGION+'.SAVE'
;        MASK    = STRUCT_SD_READ(FILE, STRUCT=STRUCT)
;        MASK    = MAPS_REMAP(MASK,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT,PX_OUT=PX,PY_OUT=PY)
;        OK      = WHERE(STRUCT.SUBAREA_NAME NE 'OCEAN' AND STRUCT.SUBAREA_NAME NE 'COAST' AND STRUCT.SUBAREA_NAME NE 'LAND')
;        CODES   = STRUCT.SUBAREA_CODE[OK]
;        AREA = MASK & AREA(*,*) = 254 & IMG = AREA
;        FOR NTH = 0L, N_ELEMENTS(CODES)-1 DO BEGIN
;          OK_SUBAREA = WHERE(MASK EQ CODES[NTH],COUNT_SUBAREA)
;          AREA(OK_SUBAREA) = CODES[NTH]
;        ENDFOR
;        AREA(LAND.LAND) = 254
;        AREA(LAND.COAST) = 254
;        OUTLINE = IMAGE_OUTLINE(AREA)
;        OUTLINE=REFORM(OUTLINE,PX,PY)
;        OK_OUTLINE = WHERE(OUTLINE EQ 1)
;        OK_OTHER   = WHERE(OUTLINE EQ 0)
;        OUTLINE(OK_OUTLINE) = 250
;        IMG(OK_OUTLINE) = 0
;        IMG(LAND.LAND) = 252
;        IMG(LAND.COAST) = 0
;        IF N EQ 0 THEN COMBO = IMG ELSE COMBO(OK_OUTLINE) = 0
;        IF N EQ 0 THEN LINE_COMBO = OUTLINE ELSE LINE_COMBO(OK_OUTLINE) = 250
;        WRITE_PNG, !S.OUTLINES + 'MASK_SUBAREA-'+MAP_OUT+'-PXY_'+NUM2STR(PX)+'_'+NUM2STR(PY)+'-'+AREGION+'-OUTLINE.PNG',OUTLINE,R,G,B
;        WRITE_PNG, !S.OUTLINES + 'MASK_SUBAREA-'+MAP_OUT+'-PXY_'+NUM2STR(PX)+'_'+NUM2STR(PY)+'-'+AREGION+'-OUTLINE_LAND.PNG',IMG,R,G,B
;      ENDFOR
;      WRITE_PNG, !S.OUTLINES + 'MASK_SUBAREA-'+MAP_OUT+'-PXY_'+NUM2STR(PX)+'_'+NUM2STR(PY)+'-FAO_LME-OUTLINE_LAND.PNG',COMBO,R,G,B
;      WRITE_PNG, !S.OUTLINES + 'MASK_SUBAREA-'+MAP_OUT+'-PXY_'+NUM2STR(PX)+'_'+NUM2STR(PY)+'-FAO_LME-OUTLINE.PNG',LINE_COMBO,R,G,B
;    ENDFOR
;
;  ENDIF ; OUTLINES
;
;
;  ; *******************************************
;  IF KEY(GLOBAL_PRESENTATION_MAPS) THEN BEGIN
;    ; *******************************************
;    SNAME = 'GLOBAL_PRESENTATION_MAPS'
;    PRINT, 'Running: ' + SNAME
;    SWITCHES,GLOBAL_PRESENTATION_MAPS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
;    DIR_OUT = DIR_DEMO + USER + '_' + SNAME + SL & DIR_TEST, DIR_OUT
;
;
;    RESOLUTION = 600
;    BUFFER = 1
;    BORDERS = ['BLUE','WHITE'] ; Blue border for PPT presentations
;    DIR_OUT = DIR_DEMO + USER + '_GLOBAL_PRESENTATION_MAPS' + SL & DIR_TEST, DIR_OUT
;
;    FOR BTH=0, N_ELEMENTS(BORDERS)-1 DO BEGIN
;      PAL='PAL_BR'
;      RGB_TABLE = CPAL_READ(PAL)
;      BORDER = BORDERS(BTH)
;      IF BORDER EQ 'BLUE' THEN BEGIN
;        BK_COLOR = [30,92,144]
;        RGB_TABLE(0,254) = BK_COLOR[0]
;        RGB_TABLE(1,254) = BK_COLOR[1]
;        RGB_TABLE(2,254) = BK_COLOR(2)
;      ENDIF ELSE BK_COLOR = [255,255,255]
;
;      PRODS  = ['A_CDOM_443-GIOP',  'PAR',       'CHLOR_A-OC4',       'MICRO_PERCENTAGE-PAN',            'PPD-VGPM2']
;      SS     = ['0.001_1',          '',          'LOW',               '50',                              'LOW']
;      UPRODS = ['LNUM',             'PAR',       'CHLOR_A',           'PERCENT',                         'PPD']
;      TITLES = [UNITS('A_CDOM_443'),UNITS('PAR'),UNITS('CHLOROPHYLL'),'Percent Microplankton Chlorophyll',UNITS('PRIMARY_PRODUCTION')]
;
;      MAP_IN  = 'GEQ'
;      PX_IN   = 4096 & PY_IN = 2048
;      MAP_OUT = 'MOLLWEIDE'
;      PX_OUT = 4096 & PY_OUT = 2048
;      LANDMASK = READ_LANDMASK(MAP=MAP_OUT,PX=PX_OUT,PY=PY_OUT,/STRUCT) & MASK = LANDMASK.LANDMASK & MASK(*) = 0
;      OK_BORDER = WHERE(LANDMASK.LANDMASK EQ 22)
;      LL = MAPS_2LONLAT(MAP_OUT,PX=PX_OUT,PY=PY_OUT)
;      LMASK = STRUCT_SD_READ(!S.SUBAREAS + 'MASK_SUBAREA-'+MAP_IN+'-PXY_'+NUM2STR(PX_IN)+'_'+NUM2STR(PY_IN)+'-LME_TOTAL.SAVE',STRUCT=TSTRUCT,MAP_OUT=MAP_OUT,PX_OUT=NUM2STR(PX_OUT),PY_OUT=NUM2STR(PY_OUT))
;
;      OUTLINE_FILE = !S.OUTLINES + 'MASK_SUBAREA-'+MAP_OUT+'-PXY_'+NUM2STR(PX_OUT)+'_'+NUM2STR(PY_OUT)+'-LME_TOTAL-OUTLINE.PNG'
;      OUTLINE = READALL(OUTLINE_FILE)
;      CLOUDIER, IMAGE=OUTLINE,CLOUDS=250B,MASK=OMASK,BOX=2,/QUIET
;      OK_OUTLINE = WHERE(OMASK EQ 1,COUNT_OUTLINE)
;      ELMES = [64,63,62,61,58,57,56,55,54]
;      FOR N=0, N_ELEMENTS(ELMES)-1 DO BEGIN
;        OK = WHERE(LMASK EQ ELMES(N))
;        MASK[OK] = 1
;      ENDFOR
;      MASK_SUBS = WHERE(MASK EQ 1)
;
;      FOR N=0, N_ELEMENTS(PRODS)-1 DO BEGIN
;        APROD = PRODS(N)
;
;        FILE = FILE_SEARCH(DIR_DATA + 'ANNUAL*GEQ*' + APROD + '-MEAN.SAVE')
;        FP = FILE_PARSE(FILE)
;        PNGFILE = DIR_OUT + FP.NAME + '-DPI_'+NUM2STR(RESOLUTION) + '-'+ BORDER + '.PNG'
;        IF GET_MTIME(PNGFILE) GT GET_MTIME(FILE) AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
;        PDATA = STRUCT_SD_READ(FILE,MAP_OUT=MAP_OUT)
;
;        DIMENSIONS=[1034,597]
;        W = WINDOW(DIMENSIONS=DIMENSIONS,BUFFER=BUFFER,BACKGROUND_COLOR = BK_COLOR)
;        POS = [5,80,1029,592]
;        CDIMX = 512 & CPX = 266
;        CDIMY = 20  & CPY = 50
;
;        BIMG = SD_SCALES(PDATA,PROD=UPRODS(N),SPECIAL_SCALE=SS(N),/DATA2BIN)
;        OK = WHERE(PDATA EQ MISSINGS(0.0))
;        BIMG[OK] = 255
;        IF BORDER NE 'WHITE' THEN BIMG(OK_BORDER) = 254
;        BIMG(LANDMASK.LAND) = 252
;        BIMG(OK_OUTLINE) = 0
;
;        IMG = IMAGE(BIMG,POSITION=POS,/DEVICE,RGB_TABLE=RGB_TABLE,BUFFER=BUFFER,/CURRENT,BACKGROUND_COLOR=RGB_TABLE(*,255))
;        IF BORDER EQ 'WHITE' THEN COLOR = 'BLACK' ELSE COLOR = 'WHITE'
;        BAR = COLOR_BAR_SCALE_NG(PROD=UPRODS(N),SPECIAL_SCALE=SS(N),PX=CPX,PY=CPY,CHARSIZE=12,BACKGROUND=252,XDIM=CDIMX,YDIM=CDIMY,PAL=PAL,VERTICAL=0,RIGHT=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE=TITLES(N),/DEVICE,COLOR=COLOR)
;        W.SAVE,PNGFILE,RESOLUTION=RESOLUTION
;        W.CLOSE
;
;      ENDFOR
;    ENDFOR
;
;  ENDIF ; IF GLOBAL_PRESENTATION_MAPS GE 1 THEN BEGIN
;  ; ||||||||||||||||||||||||||||||||||||

END; #####################  END OF ROUTINE ################################
