; $ID:	FILE_DUPS.PRO,	2020-07-01-12,	USER-KJWH	$
;###########################################################################################
	PRO FILE_DUPS, DIRS,FILES=FILES, MARK=MARK,UNMARK=UNMARK,DELETE=DELETE,VERBOSE=VERBOSE
;+
; NAME:
;		FILE_DUPS
;
; PURPOSE:;
;		THIS PROCEDURE FINDS DUPLICATE FILES IN ONE OR MORE DIRS 
;		AND EITHER MARKS(!DUP) OR DELETES THE EARLIEST DUPLICATES
; (FILES ARE CONSIDERED DUPLICATES IF BOTH THE FILE NAMES AND FILE SIZES MATCH)

; CATEGORY:
;		FILES
;
; CALLING SEQUENCE:
;		FILE_DUPS, DIRS, [MARK,UNMARK,DELETE]
;
; INPUTS:
;		DIRS:	FULL PATH(S) OF ONE OR MORE DIR(S)TO CHECK FOR DUPLICATES
;
; OPTIONAL INPUTS:  NONE
;
; KEYWORD PARAMETERS:
;    FILES: COMPLETE FILE NAMES [INSTEAD OF PROVIDING DIRS]
;     MARK:   MARK BY RENAMING THE DUPLICATES WITH *!DUP.*
;   UNMARK: UNMARK BY RENAMING THE DUPLICATES FROM *!DUP.* TO ''
;   DELETE: DELETE THE DUPLICATES

; OUTPUTS:
;		THE DUPLICATE FILES ARE EITHER RENAMED (*!DUP.*) OR DELETED 
;
; EXAMPLES: SEE FILE_DUPS_DEMO
;   
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			WRITTEN MAY 16,2011 BY J.O'REILLY
;			JAN 03,2014,JOR, UPDATED WITH NEW FUNCTIONS
;			JAN 04,2015,JOR: IF NOF(TARGET) EQ 1 THEN TARGET = TARGET[0]
;     JAN 11,2016,JOR  CHANGED PARSE_IT TO FILE_PARSE

;####################################################################################			
;-
;**************************
ROUTINE_NAME = 'FILE_DUPS'	
;**************************
;===> DEFAULTS
MARKER = '!DUP'
; >>> DEFAULT IS TO MARK THE DUPLICATE FILE
IF NONE(MARK) AND NONE(DELETE) AND NONE(UNMARK)  THEN MARK = 1
IF KEY(MARK) AND KEY(DELETE) THEN DELETE = 0
IF KEY(MARK) THEN DELETE = 0
IF KEY(UNMARK) THEN BEGIN
  MARK = 0
  DELETE = 0
ENDIF;IF KEY(UNMARK) THEN BEGIN
 


;===> DIRS PROVIDED ?
;**************************************
IF KEY(DIRS) AND NONE(FILES) THEN BEGIN
  ;************************************
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _DIR = 0, N_ELEMENTS(DIRS)-1 DO BEGIN
    DIR = FIX_PATH(DIRS(_DIR))  
    FILES = FILE_SEARCH(DIR ,'*')     
    IF NONE(ALL) THEN ALL = FILES ELSE ALL = [ALL,FILES]
  ENDFOR;FOR _DIR = 0, N_ELEMENTS(DIRS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
   FILES = ALL
ENDIF;IF KEY(DIRS) AND NONE(FILES) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||
;
;===>  REMOVE NULL FILES
OK_NOT_NULL = WHERE(FILES NE '',COUNT_NOT_NULL) 
IF COUNT_NOT_NULL GE 1 THEN FILES=FILES(OK_NOT_NULL)
;===>  REMOVE ANY PARENT DIRECTORIES        
BADFILES = ['.\','..\']          
OK_BAD = WHERE_IN(FILES,BADFILES,COUNT_BAD)
IF COUNT_BAD GE 1 THEN FILES = REMOVE(FILES,OK_BAD)

        
;===>  GET JUST THE NAMES PLUS EXT
NAMES = (FILE_PARSE(FILES)).NAME_EXT
;===>  GET JUST THE SIZES
SIZE = (FILE_INFO(FILES)).SIZE



;************************
IF KEY(UNMARK) THEN BEGIN
;************************
  ;===> UNMARK FILES HAVING MARKER
  OK = WHERE_STRING(NAMES,MARKER,COUNT)
  IF COUNT GE 1 THEN BEGIN
    F = FILES[OK]
    NEW = REPLACE(F,MARKER,'')
    FILE_MOVE,F,NEW,VERBOSE=VERBOSE,/ALLOW_SAME,/OVERWRITE
    GOTO,DONE
  ENDIF ELSE BEGIN
    T = 'NO FILES MARKED WITH  ' +MARKER
    PREP,T,7,WAIT=0.1
    GOTO,DONE
  ENDELSE;IF COUNT GE 1 THEN BEGIN
ENDIF;IF KEY(UNMARK) THEN BEGIN
;||||||||||||||||||||||||||||||
;
;************************
IF KEY(DELETE) THEN BEGIN
;************************
  ;===> DELETE FILES HAVING MARKER
  OK = WHERE_STRING(NAMES,MARKER,COUNT)
  IF COUNT GE 1 THEN BEGIN
    FILE_DELETE,FILES[OK],VERBOSE=VERBOSE
  
    GOTO,DONE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  ENDIF ELSE BEGIN
    T = 'NO FILES MARKED WITH  ' +MARKER
    PREP,T,7,WAIT=0.1
    GOTO,DONE
  ENDELSE;IF COUNT GE 1 THEN BEGIN
ENDIF;IF KEY(UNMARK) THEN BEGIN
;||||||||||||||||||||||||||||||


;>>>CONCATENATE FILE SIZE TO NAMES
TXT = NAMES +';' + ROUNDS(SIZE)

; >>> FIND DUPLICATES
DUPS = WHERE_DUPS(TXT,COUNT) 
IF DUPS EQ [] THEN BEGIN
  IF KEY(VERBOSE) THEN PREP,'NO DUPS FOUND  ',7,WAIT = 0.2
  GOTO,DONE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ENDIF;IF DUPS EQ [] THEN BEGIN

IF COUNT GE 1 THEN BEGIN 
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0L,NOF(DUPS)-1L DO BEGIN
    DUP = DUPS[NTH]      
    SUBS= WHERE_SETS_SUBS(DUP)
    TARGETS= FILES(SUBS)     
    FI = FILE_INFO(TARGETS)
;   >>> SORT IN ASCENDING ORDER OF MTIMES
    S=SORT(FI.MTIME)
    FI=FI(S)
    TARGETS= FI.NAME
    ;===> MAY BE MORE THAN 1 DUP 
    N = NOF(TARGETS)
    TARGET = GET(TARGETS,NUM = N-1)
    IF NOF(TARGET) EQ 1 THEN TARGET = TARGET[0]
    KEEP_FILE = LAST(TARGETS)
    FO=FILE_PARSE(TARGET)
    MARK_FILES= FO.DIR + FO.NAME + MARKER + FO.EXT_DELIM + FO.EXT
    F = [KEEP_FILE,MARK_FILES]
    IF NONE(DUPS_TXT) THEN DUPS_TXT = STRJOIN(F+';') ELSE DUPS_TXT = [DUPS_TXT,STRJOIN(F+';')]

    ;**********************
    IF KEY(MARK) THEN BEGIN
    ;**********************
; >>> IF MARK_FILES WAS NOT ALREADY CREATED THEN RENAME IT  
      IF TOTAL(FILE_TEST(MARK_FILES)) EQ 0 THEN FILE_MOVE, TARGET, MARK_FILES,VERBOSE=VERBOSE,/NOEXPAND_PATH
    ENDIF; IF KEY(MARK) THEN BEGIN
    ;|||||||||||||||||||||||||||||
  ENDFOR;FOR NTH = 0L,NOF(DUPS)-1L DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDIF; IF COUNT GE 1 THEN BEGIN 
       
        
    
;===> WRITE THE DUPS_TXT TO A TXTFILE
DUPS_TXT = ['N_DUPS = ' + ROUNDS(NOF(DUPS_TXT)),DUPS_TXT]
TXTFILE = !S.IDL_TEMP + ROUTINE_NAME +'-'+ DATE_FORMAT(DATE_NOW(),/YMD)+ '.TXT'
WRITE_TXT,TXTFILE,DUPS_TXT
IF KEY(VERBOSE) THEN PFILE,TXTFILE


DONE:
CLOSE,/ALL

END; #####################  END OF ROUTINE ################################

