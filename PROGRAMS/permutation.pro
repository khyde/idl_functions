; $ID:	PERMUTATION.PRO,	2014-04-29	$
 ;+
 ;
 ;;##################################################################
FUNCTION PERMUTATION, OGGETTI
; NAME:
;       PERMUTATION
;
; PURPOSE:
;   COMPUTES ALL THE PERMUTATION WHITHOUT REPETITION OF THE ELEMENTS IN THE INPUT ARRAY.
;
; CATEGORY:
;       COMBINATORIAL
;
; CALLING SEQUENCE:
;
;   RESULT = PERMUTATION(ARRAY)
;   
; EXAMPLES:
;         PRINT,PERMUTATION(INDGEN(3))
;         PRINT,PERMUTATION(['A','B'])
;         PRINT,PERMUTATION(['A','B','C'])
;         PRINT,PERMUTATION(['A','B','C','D'])
; INPUTS:
;       ARRAY: IS A 1-DIMENSIONAL ARRAY OF ANY TYPE WHOSE ELEMENTS WILL BE PERMUTATED.
;
; OUTPUTS:
;       RESULT: IS A 2-D ARRAY EACH ROW OF WHICH IS A DIFFERENT PERMUTATION OF THE INPUT ARRAY.
;   ITS DIMENSIONS IS N_ELEMENTS(ARRAY) X FACTORIAL(N_ELEMENTS(ARRAY)).
;
; PROCEDURE:
;   THE FUNCTION IS CALLED RECURSIVELY UNTILL ALL THE PERMUTATIONS ARE COMPUTED.
;
; CALLS:
;   THE FACTORIAL ROUTINE OF IDL IS CALLED.
;
; NOTE: ATTENTION: WHEN THE NUMBER OF ELEMENTS IN INPUT ARRAY IS GREATER THAN 7 OR 8 THE PROGRAM WILL
;   TAKE LONG TIME TO FINISH AND THE TOTAL NUMBER OF PERMUTATION IS VERY HUGE.
;
; MODIFICATION HISTORY:
;          G. LI CAUSI, ROME ASTRONOMICAL OBSERVATORY: 15-11-2000
;          THE O.A.R. IDL LIBRARY
;          FEB 21,2013, JOR: FORMATTING, ADDED EXAMOLES
 ;;##################################################################
;-

;****************************
ROUTINE_NAME = 'PERMUTATION'
;****************************

SO = SIZE(OGGETTI)
TYPE = SO(2)
NO = N_ELEMENTS(OGGETTI)
LIBERI = OGGETTI
PERM_LOC = MAKE_ARRAY(NO, FACTORIAL(NO), TYPE = TYPE) ;MATRICE CHE CONTIENE LE PERMUTAZIONI

P_ID_LOC = 0
NLIB_C = N_ELEMENTS(LIBERI)
FOR C = 0, NLIB_C-1 DO BEGIN
  PERM_LOC(NO - NLIB_C, P_ID_LOC:(P_ID_LOC+FACTORIAL(NLIB_C-1)-1)) = LIBERI(C)
  LIBERI_PRIMA_C = LIBERI
  INDEX = WHERE(INDGEN(NLIB_C) NE C, COUNT)
  IF COUNT NE 0 THEN BEGIN
    LIBERI = LIBERI(INDEX)
    SOTTO = PERMUTATION(LIBERI)           ;RECURSION
    PERM_LOC((NO-NLIB_C+1):(NO-1), P_ID_LOC:(P_ID_LOC+FACTORIAL(NLIB_C-1)-1)) = SOTTO
    P_ID_LOC = P_ID_LOC+FACTORIAL(NLIB_C-1)
  ENDIF
  LIBERI = LIBERI_PRIMA_C
ENDFOR

RETURN, PERM_LOC

END; #####################  END OF ROUTINE ################################
 
 


 
