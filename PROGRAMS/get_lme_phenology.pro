; $ID:	GET_LME_PHENOLOGY.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;;#############################################################################################################
	FUNCTION GET_LME_PHENOLOGY,LME,PROD = PROD,PER=PER,YR_RANGE =YR_RANGE,PPY=PPY,INIT=INIT,OTHER=OTHER

; PURPOSE: THIS FUNCTION  COMPUTES THE PHENOLOGY FROM A LME TIME SERIES 
; 
; CATEGORY:	LMES;		 
;
; CALLING SEQUENCE: RESULT = GET_LME_PHENOLOGY(LME)
;
; INPUTS: LME  [NAME OR NUMERIC CODE]

; OPTIONAL INPUTS:
;		
; KEYWORD PARAMETERS:
;         PROD : STANDARD PROD NAME
;         PER : STANDARD PERIOD CODE [E.G. M OR Y]
;         INIT : REREAD THE SAVFILE INTO MEMORY
;         OTHER : ADDITIONAL TAGS TO ADD TO THE OUTPUT STRUCTURE



; OUTPUTS: 
;		
;; EXAMPLES:
;       TS =GET_LME_PHENOLOGY('BALTIC_SEA',PROD = 'CHLOR_A',PER = 'MONTH') & ST,(TS)
;       TS =GET_LME_PHENOLOGY('BALTIC_SEA',PROD = 'PPD',PER = 'Y') & H,(TS)
;       TS =GET_LME_PHENOLOGY('BALTIC_SEA',PROD = 'PPD',PER = 'Y',/PPY) & H,(TS)
;       TS =GET_LME_PHENOLOGY(7,PROD = 'CHLOR_A',PER = 'M',OTHER = ['']) & ST,TS
;       TS =GET_LME_PHENOLOGY(7,PROD = 'CHLOR_A',PER = 'MONTH') & ST,TS
;       TS =GET_LME_PHENOLOGY('BALTIC_SEA',PROD = 'CHLOR_A',PER = 'MONTH') & P,MM(TS)
;	NOTES:

;
; MODIFICATION HISTORY:
;			WRITTEN SEP 11, 2014 J.O'REILLY
;			OCT 7,2014,JOR ALLOW NUMERIC LME CODE AS INPUT
;			OCT 15,2014,JOR MAP INSTEAD OF LME
;			OCT 22,2014,JOR ADDED KEY PPY 
;			OCT 29,2014,JOR:IF KEY(OTHER)THEN D = CREATE_STRUCT(D,OTHER,OTHER)

;			
;#################################################################################
;-
;**********************************
ROUTINE_NAME  = 'GET_LME_PHENOLOGY'
;**********************************
;===> YR_RANGE ['1998','2013'] TO INCLUDE ONLY YEARS COMPLETELY SAMPLED
IF NONE(YR_RANGE) THEN YR_RANGE = FIX(['1998','2013'])

;===> PER MUST BE EITHER MONTH OR Y
IF PROD EQ 'CHLOR_A' THEN PER = 'MONTH'
IF PROD EQ 'PPD' THEN PER = 'Y'

IF NONE(YR_RANGE) THEN YR_RANGE = FIX(['1998','2013'])
TS =GET_LME_TS(LME,PROD = PROD,PER = PER,YR_RANGE=YR_RANGE,OTHER=OTHER,PPY=PPY) 
S = STATS_NAN(TS.MEAN)
P

 PERIOD_OF_MIN = TS(S.SUB_MIN).PERIOD
 PERIOD_OF_MAX = TS(S.SUB_MAX).PERIOD
 
 D = CREATE_STRUCT('LME',FIRST(TS.MAP),'PROD',PROD,'PER',PER,'MAX',S.MAX,'PERIOD_OF_MAX',PERIOD_OF_MAX,'MIN',S.MIN,'PERIOD_OF_MIN',PERIOD_OF_MIN)
 IF KEY(OTHER)THEN BEGIN
  OK_TAG = WHERE(TAG_NAMES(TS) EQ OTHER,COUNT_TAG)
  VAL = FIRST(TS.(OK_TAG))
  D = CREATE_STRUCT(D,OTHER,VAL)
 ENDIF;IF KEY(OTHER)THEN BEGIN

 ;===> CHANGE PERIOD INFO TO THE MONTH NAME
 IF PER EQ 'MONTH' THEN BEGIN
   W = WORDS(D.PERIOD_OF_MIN,DELIM='_')
   D.PERIOD_OF_MIN = MONTH_NAMES(W[1])
   W = WORDS(D.PERIOD_OF_MAX,DELIM='_')
   D.PERIOD_OF_MAX = MONTH_NAMES(W[1])  
 ENDIF;IF PER EQ 'MONTH' THEN BEGIN
  
  IF PER EQ 'Y' THEN BEGIN
   W = WORDS(D.PERIOD_OF_MIN,DELIM='_')
   D.PERIOD_OF_MIN = W[1]
   W = WORDS(D.PERIOD_OF_MAX,DELIM='_')
   D.PERIOD_OF_MAX = W[1]
 ENDIF;IF PER EQ 'MONTH' THEN BEGIN

  

 RETURN,D

DONE:          
	END; #####################  END OF ROUTINE ################################
