; $ID:	USEABLE_DATA_TIMESERIES.PRO,	2020-07-08-15,	USER-KJWH	$

	PRO USEABLE_DATA_TIMESERIES, DIR_SAVE=DIR_SAVE, DIR_OUT=DIR_OUT, PROD=PROD, SUBAREA_FILE=SUBAREA_FILE, SUBAREA_CODE=SUBAREA_CODE, $
	                             DATE_RANGE=DATE_RANGE, PERIOD_IN=PERIOD_IN, MAKE_SAVE=MAKE_SAVE, DO_PS_2PNG=DO_PS_2PNG, DO_PLOTS=DO_PLOTS

;+
; NAME:
;		USEABLE_DATA_TIMESERIES
;
; PURPOSE:
;		This procedure finds the amount of useable data in a subarea and creates a timeseries plot of the percent of available pixels
;
; CATEGORY:
;		CATEGORY
;
; CALLING SEQUENCE:
;		Write the calling sequence here. Include only positional parameters
;		(i.e., NO KEYWORDS). For procedures, use the form:
;
;		ROUTINE_NAME, Parameter1, Parameter2, Foobar
;
;		Note that the routine name is ALL CAPS and arguments have Initial
;		Caps.  For functions, use the form:
;
;		Result = FUNCTION_NAME(Parameter1, Parameter2, Foobar)
;
; INPUTS:
;		Parm1:	Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;		Parm2:	Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;		KEY1:	Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
;
; OUTPUTS:
;		This function returns the
;
; OPTIONAL OUTPUTS:  ;
; COMMON BLOCKS:
; SIDE EFFECTS:
; RESTRICTIONS:
;	PROCEDURE:
; EXAMPLE:
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			Written Jul 21, 2008 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'USEABLE_DATA_TIMESERIES'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
  SL = DELIMITER(/SLASH)

  IF N_ELEMENTS(MAKE_SAVE)  EQ 1 THEN _MAKE_SAVE  = MAKE_SAVE  ELSE _MAKE_SAVE  = 1
	IF N_ELEMENTS(DO_PLOTS)   EQ 1 THEN _DO_PLOTS   = DO_PLOTS   ELSE _DO_PLOTS   = 1
	IF N_ELEMENTS(DO_PS_2PNG) EQ 1 THEN _DO_PS_2PNG = DO_PS_2PNG ELSE _DO_PS_2PNG = 0

	SAVEFILE = DIR_OUT + 'VALID_DATA_TIME_SERIES.SAVE'
	PNGFILE  = DIR_OUT + 'VALID_DATA_TIME_SERIES.PNG'
	PSFILE   = DIR_OUT + 'VALID_DATA_TIME_SERIES.PS'
	CSVFILE  = DIR_OUT + 'VALID_DATA_TIME_SERIES_TABLE.CSV'

  IF N_ELEMENTS(DATE_RANGE) NE 2 THEN _DATE_RANGE = ['199801000000',STRMID(DATE_NOW(),0,8)+'1231235959'] ELSE _DATE_RANGE = DATE_RANGE

	IF _MAKE_SAVE EQ 1 THEN BEGIN
		FILES = FILE_SEARCH(DIR_SAVE + PROD + SL + PERIOD_IN + '*' + PROD + '.SAVE')
		IF GET_MTIME(SAVEFILE) GT MAX(GET_MTIME(FILES)) THEN GOTO, SKIP_MAKE_SAVE
    TIMER
		
		FP = PARSE_IT(FILES,/ALL)
		OK = WHERE(FP.DATE_START GE DATE_RANGE[0] AND FP.DATE_START LE DATE_RANGE[1]) & FILES = FILES[OK] & FP = FP[OK]
    
    SUBAREA = READ_PNG(SUBAREA_FILE,R,G,B)
    CODE = WHERE(SUBAREA EQ SUBAREA_CODE, NCODE)

	;	===> Template for TS_SUBAREAS STRUCTURE
		NEW = CREATE_STRUCT('FIRST_NAME','','N_SUBAREA',0L,'N',0L,'PER_VALID',0.0)
	  NEW = STRUCT_2MISSINGS(NEW)
	  NEW = REPLICATE(NEW, N_ELEMENTS(FILES))

		FOR NTH = 0L, N_ELEMENTS(FILES)-1 DO BEGIN
			DATA = STRUCT_SD_READ(FILES[NTH],STRUCT=STRUCT)
			OK = WHERE(DATA(CODE) NE MISSINGS(DATA),COUNT)
			NEW[NTH].FIRST_NAME = FP[NTH].FIRST_NAME
			NEW[NTH].N_SUBAREA  = NCODE
			NEW[NTH].N          = COUNT
			IF COUNT EQ 0 THEN NEW[NTH].PER_VALID = 0.0 ELSE NEW[NTH].PER_VALID  = (FLOAT(COUNT)/FLOAT(NCODE))*100.0
		ENDFOR
		SAVE,FILENAME=SAVEFILE,NEW,/COMPRESS
		TIMER,/STOP
		SKIP_MAKE_SAVE:
	ENDIF


	IF _DO_PLOTS EQ 1 THEN BEGIN

		DATA = IDL_RESTORE(SAVEFILE)
		FA = PARSE_IT(DATA.FIRST_NAME,/ALL)

		YSETS = WHERE_SETS(FA.YEAR_START)
		STRUCT = CREATE_STRUCT('YEAR','','N_FILES',0L,'N_0',0L,'N_GT_0',0L,'N_GE_25',0L, 'N_GE_50',0L, 'N_GE_75',0L,'N_100',0L)
		STRUCT = STRUCT_2MISSINGS(STRUCT)
		STRUCT = REPLICATE(STRUCT,N_ELEMENTS(YSETS)+1)

		STRUCT[0].YEAR = 'ALL'
		STRUCT[0].N_FILES = N_ELEMENTS(DATA)
		OK = WHERE(DATA.PER_VALID EQ 0.0,  COUNT) & STRUCT[0].N_0     = COUNT
		OK = WHERE(DATA.PER_VALID GT 0.0,  COUNT) & STRUCT[0].N_GT_0  = COUNT
		OK = WHERE(DATA.PER_VALID GE 25.0, COUNT) & STRUCT[0].N_GE_25 = COUNT
		OK = WHERE(DATA.PER_VALID GE 50.0, COUNT) & STRUCT[0].N_GE_50 = COUNT
		OK = WHERE(DATA.PER_VALID GE 75.0, COUNT) & STRUCT[0].N_GE_75 = COUNT
		OK = WHERE(DATA.PER_VALID EQ 100.0,COUNT) & STRUCT[0].N_100   = COUNT

		SETS = WHERE_SETS(FA.YEAR_START)
		FOR NTH = 0L, N_ELEMENTS(SETS)-1 DO BEGIN
			SUBS = WHERE_SETS_SUBS(SETS[NTH])
			_DATA = DATA(SUBS)
			STRUCT(NTH+1).YEAR = SETS[NTH].VALUE
			STRUCT(NTH+1).N_FILES = N_ELEMENTS(_DATA)
			OK = WHERE(_DATA.PER_VALID EQ 0.0,  COUNT) & STRUCT(NTH+1).N_0     = COUNT
			OK = WHERE(_DATA.PER_VALID GT 0.0,  COUNT) & STRUCT(NTH+1).N_GT_0  = COUNT
			OK = WHERE(_DATA.PER_VALID GE 25.0, COUNT) & STRUCT(NTH+1).N_GE_25 = COUNT
			OK = WHERE(_DATA.PER_VALID GE 50.0, COUNT) & STRUCT(NTH+1).N_GE_50 = COUNT
			OK = WHERE(_DATA.PER_VALID GE 75.0, COUNT) & STRUCT(NTH+1).N_GE_75 = COUNT
			OK = WHERE(_DATA.PER_VALID EQ 100.0,COUNT) & STRUCT(NTH+1).N_100   = COUNT
		ENDFOR

		STRUCT_2CSV,CSVFILE, STRUCT

		PSPRINT,FILENAME=PSFILE,/COLOR,/Full,/TIMES,/LANDSCAPE

		X = DATE_2JD(_DATE_RANGE)
		AX = DATE_AXIS(X,/MONTH,STEP_SIZE=3)
		MINDATE = '20200101000000'
		MAXDATE = '20210101000000'
		X2 = DATE_2JD([20200101,20210101])
		AX2 = DATE_AXIS(X2, /FYEAR)
		YRANGE = [0,100]
		AY = YRANGE
		AYR = DATE_AXIS(X,/YEAR)
		YTITLE='Percent Valid Pixels (%)'
		YMARGIN = [0.5,0.5]
		XMARGIN = [1,3]
		MAXDEPTH = 1
		DEPTHS = 3
		VRANGE = [0,100]
		CHARSIZE = 1.5


		PERIOD = FA.PERIOD
		JDATE = PERIOD_2JD(PERIOD)
		DATE = JD_2DATE(JDATE)

		OK = WHERE(JDATE GE X[0] AND JDATE LE X[1])
		JDATE = JDATE[OK]
		DATA = DATA[OK]
		FA = FA[OK]
		PER = DATA.PER_VALID

		COLORS = [22,12]
		THICKS = [3,3]
	;	PSYM =   [5,-3]
		LCOLOR = [0,0]
		FONT = 0

		!P.MULTI = [0,1,2]
		PAL_36,R,G,B
		PLOT, AX.JD, AY,YTITLE=YTITLE,YRANGE=YRANGE,/XSTYLE,/YSTYLE,XMARGIN=XMARGIN,YMARGIN=YMARGIN,$
					XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,XTICK_GET=XTICK_GET,CHARSIZE=1.5,/NODATA
		GRIDS,X=AYR.TICKV, /NO_Y
	;	OPLOT, JDATE, PER, COLOR = 32, THICK = 1
		PAL_SW3,R,G,B
		SYMBOL_COLOR= SD_SCALES(PER,PROD='PERCENT',/DATA2BIN)
		FOR YTH = 0L,N_ELEMENTS(PER)-1 DO BEGIN
			CIRCLE,4,FILL=1,COLOR=SYMBOL_COLOR(YTH),THICK=7
			IF PER(YTH) GT 0 THEN PLOTS,JDATE(YTH),PER(YTH),PSYM=8 ,/NOCLIP,SYMSIZE=0.8
		ENDFOR
		BAR=COLOR_BAR_SCALE(PROD='PERCENT',POSITION=[0.96, 0.50, 0.98, 0.99],PAL='PAL_SW3',CHARSIZE=1.5,MINVAL=0,MAXVAL=100,MINCOLOR=1,MAXCOLOR=250,YTICKS=4,/VERTICAL,YTICKV=[0,25,50,75,100],YTICKNAME=['0','25','50','75','100'])

		YSETS = WHERE_SETS(FA.YEAR_START)
		YEARS = YSETS.VALUE
		FOR NTH = 0L, N_ELEMENTS(YSETS)-1 DO BEGIN
			!P.MULTI = [0,1,2]
			SUBS = WHERE_SETS_SUBS(YSETS[NTH])
			YPER = PER(SUBS)
			YEAR = YSETS[NTH].VALUE
			YDATES = JDATE(SUBS)
			AX = DATE_AXIS(MINMAX(YDATES),/MONTH)
			PAL_36,R,G,B
			PLOT, AX.JD, AY,YTITLE=YTITLE,YRANGE=YRANGE,/XSTYLE,/YSTYLE,XMARGIN=XMARGIN,YMARGIN=YMARGIN,$
					XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,XTICK_GET=XTICK_GET,CHARSIZE=1.5,/NODATA ;$
			GRIDS,X=AYR.TICKV, /NO_Y
			OPLOT, YDATES, YPER, COLOR = 34, THICK=1.2
			PAL_SW3,R,G,B
			SYMBOL_COLOR= SD_SCALES(YPER,PROD='PERCENT',/DATA2BIN)
				FOR YTH = 0L,N_ELEMENTS(YPER)-1 DO BEGIN
			    CIRCLE,4,FILL=1,COLOR=SYMBOL_COLOR(YTH),THICK=7
			    IF YPER(YTH) GT 0 THEN PLOTS,YDATES(YTH),YPER(YTH),PSYM=8 ,/NOCLIP,SYMSIZE=1.7
			  ENDFOR
			  OK = WHERE(YPER GT 0,COUNT)
			  COOR = COORD_2PLOT(0.72,-0.16)
			  TXT = 'Number of files with valid data = ' + NUM2STR(COUNT)
			 	XYOUTS, COOR.X,COOR.Y,TXT,/DATA,ALIGN=0.0,COLOR=0,CHARSIZE=1.2
			  BAR=COLOR_BAR_SCALE(PROD='PERCENT',POSITION=[0.97, 0.50, 0.99, 0.99],PAL='PAL_SW3',CHARSIZE=1.5,MINVAL=0,MAXVAL=100,MINCOLOR=1,MAXCOLOR=250,YTICKS=4,/VERTICAL,YTICKV=[0,25,50,75,100],YTICKNAME=['0','25','50','75','100'])
			ENDFOR

			!P.MULTI = [0,1,9]
			FOR NTH = 0L, N_ELEMENTS(YSETS)-1 DO BEGIN
			SUBS = WHERE_SETS_SUBS(YSETS[NTH])
			YPER = PER(SUBS)
			YEAR = YSETS[NTH].VALUE
			YDATES = JDATE(SUBS)
			AX = DATE_AXIS(MINMAX(YDATES),/MONTH)
			IF NTH EQ 0 OR NTH EQ 2 OR NTH EQ 4 OR NTH EQ 6 OR NTH EQ 8 THEN YTITLE='Percent Valid Pixels (%)'	ELSE YTITLE = ' '
			PAL_36,R,G,B
			IF NTH EQ N_ELEMENTS(YSETS)-1 THEN $
				PLOT, AX.JD, AY,YTITLE=YTITLE,YRANGE=YRANGE,/XSTYLE,/YSTYLE,XMARGIN=XMARGIN,YMARGIN=YMARGIN,$
					XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,XTICK_GET=XTICK_GET,CHARSIZE=1.5,/NODATA $
			ELSE $
				PLOT, AX.JD, AY,YTITLE=YTITLE,YRANGE=YRANGE,/XSTYLE,/YSTYLE,XMARGIN=XMARGIN,YMARGIN=YMARGIN,$
					XTICKS=AX.TICKS,XTICKNAME=REPLICATE(' ',N_ELEMENTS(AX.TICKNAME)),XTICKV=AX.TICKV,XTICK_GET=XTICK_GET,CHARSIZE=1.5,/NODATA
			GRIDS,X=AYR.TICKV, /NO_Y
		;	OPLOT, YDATES, YPER, COLOR = 32, THICK=1.5
			PAL_SW3,R,G,B
			SYMBOL_COLOR= SD_SCALES(YPER,PROD='PERCENT',/DATA2BIN)
				FOR YTH = 0L,N_ELEMENTS(YPER)-1 DO BEGIN
			    CIRCLE,4,FILL=1,COLOR=SYMBOL_COLOR(YTH),THICK=7
			    IF YPER(YTH) GT 0 THEN PLOTS,YDATES(YTH),YPER(YTH),PSYM=8 ,/NOCLIP,SYMSIZE=0.8
			  ENDFOR
			 COOR = COORD_2PLOT(0.9,0.7)
			 XYOUTS, COOR.X,COOR.Y,YEAR,/DATA,ALIGN=0.0,COLOR=0,CHARSIZE=2
		ENDFOR

		BAR=COLOR_BAR_SCALE(PROD='PERCENT',POSITION=[0.973, 0.005, 0.993, 0.995],PAL='PAL_SW3',CHARSIZE=2,MINVAL=0,MAXVAL=100,MINCOLOR=1,MAXCOLOR=250,YTICKS=4,/VERTICAL,YTICKV=[0,25,50,75,100],YTICKNAME=['0','25','50','75','100'])

		PSPRINT
	ENDIF


	IF _DO_PS_2PNG EQ 1 THEN BEGIN
		GRACE = [100,100,100,100]
		IF FILE_TEST(PSFILE) EQ 1 THEN IMAGE_TRIM,PSFILE,DIR_OUT=DIR_OUT,GRACE=GRACE,BACKGROUND=215,/OVERWRITE
	ENDIF





	END; #####################  End of Routine ################################
