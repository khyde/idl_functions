; $ID:	DATA_COMPARE.PRO,	2020-07-08-15,	USER-KJWH	$

PRO DATA_COMPARE, AFILES,BFILES,MAP_OUT=MAP_OUT,$
                    ATARGETS=ATARGETS,BTARGETS=BTARGETS, $
                    XLABEL=xlabel, YLABEL=ylable, XTITLE=xtitle, YTITLE=ytitle, $
                    DIR_OUT=dir_out, PAL=pal, PAL_ANOM=pal_anom,HIST2D_MODEL=hist2d_model,$
                  	PS=PS, ISOTROPIC=isotropic,POSITION=position, LOG_FREQ=log_freq, $
										NO_CLOSE=NO_CLOSE,ERROR=ERROR,ERR_MSG=ERR_MSG, _EXTRA=_extra,$
										BUFFER=BUFFER,RESOLUTION=RESOLUTION,$
                  	PS_FILENAME=PS_FILENAME, OVERWRITE=overwrite


;
;	FILEA:	Input file for x axis
;	FILEB:	Input file for y axis
;	DIR_OUT: Directory Pat for output if PS is set
;	PAL:		 Palette to use
;	PS:			 Initialize te Postscript Device
;	ERROR:	 Error code (1=error, 0=ok)


; HISTORY:
;	Nov 02, 2016	Written by:	K.J.W. Hyde, NOAA, 28 Tarzwell Drive, Narragansett, RI 02882
;	              Adapted from SD_COMPARISONS_NG
;	              
;-
; **************************************************************************************
  ROUTINE_NAME='SD_COMPARISONS'
  SL = PATH_SEP(/PATH)
  DASH = DELIMITER(/DASH)
		
	IF NONE(DIR_OUT) THEN DIR = !S.PROJECTS + 'SD_COMPARISONS' + SL ELSE DIR = DIR_OUT
	DIR_TEST, DIR_OUT
		
	; ===> Establish directories and create if they do not exist 
  DIR_PLOTS        = DIR + 'PLOTS'     + SL 
  DIR_ANOM         = DIR + 'RATIO'     + SL + 'SAVE'   + SL
  DIR_ANOM_BROWSE  = DIR + 'RATIO'     + SL + 'BROWSE' + SL 
  DIR_COMPOSITE    = DIR + 'COMPOSITE' + SL
  DIR_ALL = [DIR_PLOTS,DIR_ANOM,DIR_ANOM_BROWSE,DIR_COMPOSITE]
  		
	IF N_ELEMENTS(AFILES) LT 1 OR N_ELEMENTS(BFILES) LT 1 THEN MESSAGE, 'ERROR: Must provide two sets of files'
	FA = PARSE_IT(AFILES,/ALL)
	FB = PARSE_IT(BFILES,/ALL)
	FN = [FA,FB]

	IF NONE(HIST2D_MODEL) THEN MODEL       = 'RMA'       ELSE MODEL       = HIST2D_MODEL
	IF NONE(PAL)          THEN _PAL        = 'PAL_SW3'   ELSE _PAL        = PAL
	IF NONE(PAL_ANOM)     THEN _PAL_ANOM   = 'PAL_ANOMG' ELSE _PAL_ANOM   = PAL_ANOM
	IF NONE(XLABEL)       THEN _XLABEL     = ''          ELSE _XLABEL     = XLABEL
	IF NONE(YLABEL)       THEN _YLABEL     = ''          ELSE _YLABEL     = YLABEL
	IF NONE(LOG_FREQ)     THEN _LOG_FREQ   = 1           ELSE _LOG_FREQ   = LOG_FREQ
	IF NONE(MAP_OUT)      THEN MAP         = FA[0].MAP   ELSE MAP         = MAP_OUT
	IF NONE(RESOLUTION)   THEN _RESOLUTION = 300         ELSE _RESOLUTION = RESOLUTION
	 
	SETS = WHERE_SETS(FN.PERIOD)
	OK = WHERE(SETS.N GE 2,COUNT) 
	IF COUNT GE 1 THEN SETS = SETS[OK] ELSE MESSAGE, 'ERROR: No matching period codes found.'
    
	FOR _SET = 0L, N_ELEMENTS(SETS)-1 DO BEGIN
		SUBS = WHERE_SETS_SUBS(SETS(_SET),GROUPS=GROUPS)
		IF N_ELEMENTS(GROUPS) NE 2 THEN CONTINUE
		OKA = WHERE(GROUPS EQ 0,COUNTA)
		OKB = WHERE(GROUPS EQ 1,COUNTB)
		IF COUNTA + COUNTB LE 1 THEN CONTINUE
		IF COUNTA GE 1 THEN SUBA = SUBS(OKA)
		IF COUNTB GE 1 THEN SUBB = SUBS(OKB)
		
		TARGET_A=FN(SUBA).FULLNAME & NAME_A=FN(SUBA).NAME & PROD_A=FN(SUBA).PROD & ALG_A=FN(SUBA).ALG & PERIOD_A=FN(SUBA).PERIOD & SENSOR_A=FN(SUBA).SENSOR & METHOD_A=FN(SUBA).METHOD & SATELLITE_A=FN(SUBA).SATELLITE & MAP_A=FN(SUBA).MAP & STAT_A=FN(SUBA).STAT
		TARGET_B=FN(SUBB).FULLNAME & NAME_B=FN(SUBB).NAME & PROD_B=FN(SUBB).PROD & ALG_B=FN(SUBB).ALG & PERIOD_B=FN(SUBB).PERIOD & SENSOR_B=FN(SUBB).SENSOR & METHOD_B=FN(SUBB).METHOD & SATELLITE_B=FN(SUBB).SATELLITE & MAP_B=FN(SUBB).MAP & STAT_B=FN(SUBB).STAT
		IF SAME([TARGET_A,TARGET_B])  THEN CONTINUE ; >>> The files are the same, nothing to compare
		
		IF SAME([PERIOD_A,PERIOD_B])       THEN PERIOD    = PERIOD_A    ELSE PERIOD    = STRJOIN([PERIOD_A,PERIOD_B],'_')
		IF SAME([PROD_A,PROD_B])           THEN PROD      = PROD_A      ELSE PROD      = STRJOIN([PROD_A,PROD_B],'_')
		IF SAME([ALG_A,ALG_B])             THEN ALG       = ALG_A       ELSE ALG       = STRJOIN([ALG_A,ALG_B],'_')
		IF SAME([SENSOR_A,SENSOR_B])       THEN SENSOR    = SENSOR_A    ELSE SENSOR    = STRJOIN([SENSOR_A,SENSOR_B],'_')
		IF SAME([METHOD_A,METHOD_B])       THEN METHOD    = METHOD_A    ELSE METHOD    = STRJOIN([METHOD_A,METHOD_B],'_')
    IF SAME([STAT_A,STAT_B])           THEN STAT      = STAT_A      ELSE STAT      = STRJOIN([STAT_A,STAT_B],'_')		
		IF SAME([SATELLITE_A,SATELLITE_B]) THEN SATELLITE = SATELLITE_A ELSE SATELLITE = STRJOIN([SATELLITE_A,SATELLITE_B],'_')
		DATE = JD_2DATE(PERIOD_2JD(PERIOD))
		
		PRA=PRODS_READ(PROD_A,LOG=LOGB)
    PRB=PRODS_READ(PROD_B,LOG=LOGA)
    IF LOGA EQ 1 THEN ANOM = 'RATIO' ELSE ANOM = 'DIF' 		
    
    ANOM_SAVEFILE = PERIOD 
    IF SENSOR    NE '' THEN ANOM_SAVEFILE = ANOM_SAVEFILE + DASH + SENSOR    
    IF SATELLITE NE '' THEN ANOM_SAVEFILE = ANOM_SAVEFILE + DASH + SATELLITE 
    IF METHOD    NE '' THEN ANOM_SAVEFILE = ANOM_SAVEFILE + DASH + METHOD    
    IF MAP       NE '' THEN ANOM_SAVEFILE = ANOM_SAVEFILE + DASH + MAP       
    IF PROD      NE '' THEN ANOM_SAVEFILE = ANOM_SAVEFILE + DASH + PROD      
    IF ALG       NE '' THEN ANOM_SAVEFILE = ANOM_SAVEFILE + DASH + ALG      
    IF STAT      NE '' THEN ANOM_SAVEFILE = ANOM_SAVEFILE + DASH + STAT     
;    ANOM_SAVEFILE = ANOM_SAVEFILE + DASH + ANOM
;    ANOM_PNGFILE  = DIR_COMPOSITE + ANOM_SAVEFILE + '.PNG'
    ANOM_PLOTFILE = DIR_PLOTS + ANOM_SAVEFILE + DASH + 'HIST2D_COMPARISON.PS'
;    ANOM_SAVEFILE = DIR_RATIO_SAVE + ANOM_SAVEFILE + '.SAVE'
    IF ANOM EQ 'RATIO' THEN RTITLE = UNITS(PROD,/NO_UNIT)+ ' Anomaly (ratio)' ELSE RTITLE = UNITS(PROD,/NO_UNIT) + 'Anomaly ' + UNITS(PROD, /NO_NAME)
        
;    IF N_ELEMENTS(PS_FILENAME) EQ 1 THEN ANOM_PLOTFILE = PS_FILENAME    
;    IF FILE_TEST(ANOM_PNGFILE) EQ 1 AND _OVERWRITE EQ 0 AND GET_MTIME(ANOM_PNGFILE) GT MAX(GET_MTIME([TARGET_A,TARGET_B]))THEN CONTINUE
    
		RSTRUCT = MAKE_ANOM_SAVES(FILEA=TARGET_A,FILEB=TARGET_B,DIR_OUT=DIR_ANOM,ANOM=ANOM,MAP_OUT=MAP,/RETURN_STRUCT)

		ADATA = STRUCT_SD_READ(TARGET_A,STRUCT=ASTRUCT) & IF ASTRUCT.MAP NE MAP THEN BEGIN & ASTRUCT = STRUCT_SD_REMAP(STRUCT=ASTRUCT,MAP_IN=ASTRUCT.MAP,MAP_OUT=MAP) & ADATA = STRUCT_SD_2DATA(ASTRUCT) & ENDIF 
		BDATA = STRUCT_SD_READ(TARGET_B,STRUCT=BSTRUCT) & IF BSTRUCT.MAP NE MAP THEN BEGIN & BSTRUCT = STRUCT_SD_REMAP(STRUCT=BSTRUCT,MAP_IN=BSTRUCT.MAP,MAP_OUT=MAP) & BDATA = STRUCT_SD_2DATA(BSTRUCT) & ENDIF
		
		IF N_ELEMENTS(ADATA) NE N_ELEMENTS(BDATA) OR ASTRUCT.MAP NE BSTRUCT.MAP OR ASTRUCT.PX NE BSTRUCT.PX OR ASTRUCT.PY NE BSTRUCT.PY THEN BEGIN
  		ERROR = 1
	  	ERR_MSG ='ERROR: X AND Y MUST HAVE SAME NUMBER OF ELEMENTS AND SAME MAP'
	  	PRINT, ERR_MSG
  		RETURN
  	ENDIF
  	  	  	  	
  	MAPSIZE = MAPS_SIZE(MAP)
		PX = MAPSIZE.PX
		PY = MAPSIZE.PY
		BLANK = BYTARR(PX,PY) & BLANK(*,*) = 0
			
		AV = VALID_DATA(ADATA, PROD=PROD_A, SUBS=SUBA, RANGE=RANGEA, SENSOR=SENSOR_A) & IF MIN(SUBA) GE 0 THEN BLANK(SUBA) = BLANK(SUBA)+1 ELSE CONTINUE
		BV = VALID_DATA(BDATA, PROD=PROD_B, SUBS=SUBB, RANGE=RANGEB, SENSOR=SENSOR_B) & IF MIN(SUBB) GE 0 THEN BLANK(SUBB) = BLANK(SUBB)+1 ELSE CONTINUE
		OK = WHERE(BLANK EQ 2,COUNT)
		IF COUNT GE 1 THEN BEGIN			
			!P.MULTI = [0,1,1]
			IF KEYWORD_SET(LOGA) THEN XX = ALOG10(ADATA[OK]) ELSE XX = ADATA[OK]
			IF KEYWORD_SET(LOGB) THEN YY = ALOG10(BDATA[OK]) ELSE YY = BDATA[OK]
			IF N_ELEMENTS(TITLE) EQ 1 THEN TITLE  = TITLE ELSE TITLE  = PROD + '  ' + DATE_2YEAR(DATE) + '-' + DATE_2MONTH(DATE) + '-' + DATE_2DAY(DATE)
			XSCALE = SD_SCALES([1,250],PROD=PROD_A,/BIN2DATA)
			YSCALE = SD_SCALES([1,250],PROD=PROD_B,/BIN2DATA)
			IF KEYWORD_SET(LOGA) THEN BEGIN
				XRANGE = NICE_RANGE(ALOG10(XSCALE))
				XTITLE = 'Log ' + UNITS(PROD_A) + '  -  ' + METHOD_A + DASH + SENSOR_A + '!C' + PERIOD_FORMAT(PERIOD_A,/YMD)
			ENDIF	ELSE BEGIN
				XRANGE = NICE_RANGE(XSCALE)
				XTITLE = UNITS(PROD_A) + '  -  ' + METHOD_A + DASH + SENSOR_A + '!C' + PERIOD_FORMAT(PERIOD_A,/YMD)
			ENDELSE
			IF KEYWORD_SET(LOGB) THEN BEGIN
				YRANGE = NICE_RANGE(ALOG10(YSCALE))
				YTITLE = 'Log ' + UNITS(PROD_B) + '  -  ' + METHOD_B + DASH + SENSOR_B +  '!C' + PERIOD_FORMAT(PERIOD_B,/YMD)
			ENDIF ELSE BEGIN
				YRANGE = NICE_RANGE(YSCALE)
				YTITLE = UNITS(PROD_B) + '  -  ' + METHOD_B + DASH + SENSOR_B + '!C' + PERIOD_FORMAT(PERIOD_B,/YMD)
			ENDELSE
			BINX=(XRANGE[1]-XRANGE[0])/100.
			BINY=(YRANGE[1]-YRANGE[0])/100.
		
		 PSPRINT,FILENAME=ANOM_PLOTFILE,/COLOR,/FULL
		 PLOT_HIST2D,XX, YY, IMG=IMG, PAL=_PAL, MODEL='RMA', FAST=1,$
            BIN_X=BINX, MIN_X=XRANGE[0], MAX_X=XRANGE[1], $
            BIN_Y=BINY, MIN_Y=YRANGE[0], MAX_Y=YRANGE[1], $
            PX=PX, XTITLE=XTITLE, XLABEL=XLABEL, XTHICK=3, XMARGIN=XMARGIN, $
            PY=PY, YTITLE=YTITLE, YLABEL=YLABEL, YTHICK=3, YMARGIN=YMARGIN, $
            LAB_TXT=LABEL, LAB_CHARSIZE=5, STATS_CHARSIZE=1.25, ISOTROPIC=ISOTROPIC,BKG_COLOR=255, ZERO_COLOR=254, MAX_COLOR=250,$
            REG_COLOR=0,  REG_THICK=5, ONE_COLOR=255,ONE_THICK=8, LOG_FREQ=_LOG_FREQ, POSITION=POSITION, _EXTRA=_EXTRA
		  PSPRINT
		  PS_2PNG, ANOM_PLOTFILE, PAL=PAL
		  HIMAGE = READ_PNG(REPLACE(ANOM_PLOTFILE,'COMPARISON.PS','COMPARISON_PS_001.PNG'),R,G,B)
		  HIMAGE = IMAGE_2TRUE(HIMAGE,R,G,B, PAL=pal)
		
			W = WINDOW(DIMENSIONS=[1024,1024])      
      AIM = STRUCT_SD_2IMAGE_NG(ASTRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SPECIAL_SCALE,/ADD_COLORBAR,PAL=PAL,LAND_COLOR=255,COAST_COLOR=251,BUFFER=BUFFER,/CURRENT,LAYOUT=[2,2,1],WDIMENSIONS=[1024,1024])
      BIM = STRUCT_SD_2IMAGE_NG(BSTRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SPECIAL_SCALE,/ADD_COLORBAR,PAL=PAL,LAND_COLOR=255,COAST_COLOR=251,BUFFER=BUFFER,/CURRENT,LAYOUT=[2,2,3],WDIMENSIONS=[1024,1024])
      RIM = STRUCT_SD_2IMAGE_NG(RSTRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SPECIAL_SCALE,/ADD_COLORBAR,PAL=PAL,LAND_COLOR=255,COAST_COLOR=251,BUFFER=BUFFER,/CURRENT,LAYOUT=[2,2,2],WDIMENSIONS=[1024,1024])
      HIM = IMAGE(HIMAGE,/CURRENT,LAYOUT=[2,2,4])
      
      W.SAVE,DIR_COMPOSITE +  ANOM_SAVEFILE + DASH + '-COMPOSITE.PNG', RESOLUTION=_RESOLUTION
      W.CLOSE
      
      
     
      
       
		ENDIF
	ENDFOR
	
STOP


; Need a program to read the PSFILE and return the image (not write out the PNG)
		

END



