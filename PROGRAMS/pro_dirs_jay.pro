; $ID:	PRO_DIRS_JAY.PRO,	2020-07-08-15,	USER-KJWH	$
; #########################################################################; 
PRO PRO_DIRS
;+
; PURPOSE:  ORGANIZE PROGRAMS INTO DIRECTORIES FOR EACH FAMILY OF PROGRAMS
;
; CATEGORY: 
;   MAIN
;
; INPUTS: 
;   NONE
;
; KEYWORDS:  
;   NONE

; OUTPUTS: 
; Creates a text list of the program names which will be subsequently moved into their family directories
;
; PROCEDURE:
;  1)STEP: DO_UPDATE_OBSOLETE_PROGRAMS - Moves obsolete programs to dir_obsolete 
;  2)STEP: DO_JAY_OBSOLETE - Moves obsolete programs to dir_obsolete
;  3)STEP: MAKE_CSV - Finds all programs by family, ignoring obsolete programs and makes a structure with their first_names and family [dir]and writes it to pro_dirs.csv 
;  4)STEP: ASSIGN_DIRS - Allows interactive assignment of a dir to programs with no dir assignment yet            
;  5)STEP: MOVE_TO_DIRS - Reads pro_dirs.csv, makes family directories and moves all programs to their new family sub-folders
;
; MODIFICATION HISTORY:
;     OCT 13, 2017  WRITTEN BY: J.E. O'REILLY
;     OCT 14, 2017, JEOR : ADDED CASE BLOCK TO STEP MAKE_CSV
;     OCT 15, 2017, JEOR : ADDED STEPS DO_JAY_OBSOLETE,DO_UPDATE_OBSOLETE_PROGRAMS
;     OCT 16, 2017, JEOR : CHANGED LOGIC [NO LONGER WRITING LISTS BUT MAKING A CSV STRUCTURE OF ALL THE FILES -SEE PROCEDURE]
;     OCT 17, 2017, JEOR : ADDED D3_,IS_,WHERE_.BATCH,DEMO,MAIN
;     OCT 18, 2017, JEOR : ADDED MORE TARGETS TO DO_JAY_OBSOLETE
;     OCT 23, 2017, JEOR : ADDED MORE TARGETS TO DO_CV
;     OCT 24, 2017, JEOR : ADDED DIRS TO MATCH TARGETS FOR MAKE_CSV
;     OCT 25, 2017, JEOR : ADDED STEP MOVE_TO_DIRS
;     NOV 04, 2017, JEOR : ADDED SEVERAL HUNDRED FILES TO OBSOLETE_JEOR.TXT [BY ITERATIVELY RUNNING THIS PROGRAM]
;     NOV 16, 2017, JEOR : ADDED STEP ASSIGN_DIRS
;     NOV 26, 2017, JEOR : ADDED STEP MOVE_TO_DIRS
;     DEC 05, 2017, JEOR : ADDED MISSING DIRS TO PROS USING ASSIGN_DIRS AND INTERACTIVELY IN EXCEL
;     DEC 12, 2017, JEOR : CONDENSED SEVERAL DIRS IN RENAME_DIRS
;     DEC 13, 2017, JEOR : ENSURE PROS EXIST BEFOR MOVING THEM TO THEIR DIR
;-
; #########################################################################

  ROUTINE = 'PRO_DIRS'
  COMPILE_OPT IDL2
  
;===> DEFAULTS
  DIR_PRO = !S.IDL_PROGRAMS
  DIR_OBSOLETE = !S.IDL_OBSOLETE + 'PROGRAMS_OBSOLETE' + SL
  DIR_CSV  = !S.MASTER

; ===> SWITCHES  
  DO_UPDATE_OBSOLETE_PROGRAMS    = ''
  DO_JAY_OBSOLETE                = ''
  MAKE_CSV                       = ''
  ASSIGN_DIRS                    = ''
  RENAME_DIRS                    = ''
  COPY_ALL_PROS                  = ''
  MOVE_TO_DIRS                   = 'S'

;||||||||||||||||||||||||||||||||||


;********************************
IF KEY(DO_JAY_OBSOLETE) THEN BEGIN
  ;********************************
  SWITCHES,DO_JAY_OBSOLETE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  TXT_FILE = DIR_OBSOLETE+'OBSOLETE_' + 'JEOR.TXT'
  TARGETS = ['*SD*','MAP_*','FF_','CF_','CATLAS','CG','JUNK','A_','OCL','*GIF*','OC_GLOBAL','*MASS_BAY','FILE_PRO']
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(TARGETS)-1 DO BEGIN
    TARGET = TARGETS[NTH]
    FILES = FS(DIR_PRO + TARGET + '*.PRO',COUNT=COUNT)
    P,COUNT
    IF COUNT EQ 0 OR IDLTYPE(FILES) EQ 'UNDEFINED'  THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>
    ;===> WRITE FIRST NAMES TO A TXT FILE
    NAME =(FILE_PARSE(FILES)).NAME
    PFILE,TARGET,/G
    CASE (TARGET) OF
      '*SD*': BEGIN
        ;===> CONSERVE SPECIFIC NAMES
        OK = WHERE_STRING(STRUPCASE(NAME),'FT_2PSD',COUNT)
        IF COUNT GE 1 THEN BEGIN
          FILES = REMOVE(FILES,OK)
        ENDIF
      END;*SD*
      'FILE_': BEGIN
        ;===> CONSERVE SPECIFIC NAMES
        OK = WHERE_STRING(STRUPCASE(NAME),'FILE_PROJECT',COUNT)
        IF COUNT GE 1 THEN BEGIN
          FILES = REMOVE(FILES,OK)
        ENDIF
      END;FILE_

      ELSE: BEGIN
      END
    ENDCASE
    IF  IDLTYPE(FILES) EQ 'UNDEFINED' THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    IF NOF(FILES) GE 1 AND FILES[0] NE '' THEN BEGIN
      IF VERBOSE THEN BEGIN
        PLIST,NAME
        YN = DIALOG_MESSAGE('MOVE THESE FILES TO OBSOLETE',/QUESTION)
        IF STRUPCASE(YN) EQ 'YES' THEN BEGIN
          FILE_MOVE,FILES,DIR_OBSOLETE,/VERBOSE
        ENDIF;IF STRUPCASE(YN) EQ 'YES' THEN BEGIN
      ENDIF ;IF VERBOSE THEN BEGIN
    ENDIF;IF NOF(FILES) GE 1 THEN BEGIN
    IF NONE(TXT) THEN TXT = NAME ELSE TXT = [TXT,NAME]
    PN,TXT
    IF STOPP THEN STOP
  ENDFOR;FOR NTH = 0,NOF(TARGETS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  WRITE_TXT,TXT_FILE,TXT
ENDIF;IF KEY(DO_JAY_OBSOLETE) THEN BEGIN
;|||||||||||||||||||||||||||||||

;*********************************************
IF KEY(DO_UPDATE_OBSOLETE_PROGRAMS) THEN BEGIN
;*********************************************
  SWITCHES,DO_UPDATE_OBSOLETE_PROGRAMS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'STEP DO_JAY_OBSOLETE ALREADY GOT MOST OF THE OBSOLETE PROGRAMS SO THIS STEP MAY FIND ZERO FILES'
  IF STOPP THEN STOP
  UPDATE_OBSOLETE_PROGRAMS
ENDIF;IF KEY(DO_UPDATE_OBSOLETE_PROGRAMS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||

;*************************
IF KEY(MAKE_CSV) THEN BEGIN
;*************************  is
  SWITCHES,MAKE_CSV,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  ;===> MAJOR FAMILIES OF PROS:
  TARGETS = ['*IMG','*IMAGE','PRO_','MAPS_','STATS_','STRUCT_','STR_','FILE_','PRODS_','D3_','WHERE_','*TOPO*','*SUBAREA*','*SHM*','*SHP*']
  TARGETS = [TARGETS,'CHL_PROFILES_','DATE_','JD_','PAL_','TEMPLATE_','DIR_','MTIME_','MANUSCRIPT_','IS_','PLT_','*PLOT','AREAS','BLEND','*BOA','ARR_','*BATCH*','*FRONT','*DEMO*','*MAIN*','*OPAL*']
  TARGETS = [TARGETS,'AREAS','BLEND','*BOA','ARR_','*BATCH*','*FRONT','*MAIN*','*OPAL*','PRINT','OBSOLETE','*ZIP','*DEMO*']
  DIRS = TARGETS
  DIRS=REPLACE(DIRS,['_','*'],['',''])
  DIRS=REPLACE(DIRS,['PLT','IMG','ARR_'],['PLOT','IMAGE','ARRAY'])
  DIRS = REPLACE(DIRS,'CHLPROFILES','CHL_PROFILES')
   PFILE,TARGETS + '   ' + DIRS,/G 
  IF STOPP THEN STOP
  
  ;===> FIRST GET ALL PRO NAMES AND MAKE A STRUCTURE
  FILES = FILE_SEARCH(DIR_PRO  + '*.PRO')
  NAMES =(FILE_PARSE(FILES)).NAME
  ;===> READ ALL NAMES IN KIM'S AND JAY'S OBSOLETE FILES
  F = FILE_SEARCH(DIR_OBSOLETE,'OBSOLETE*.TXT')
  PLIST,F 
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR N = 0,NOF(F) -1 DO BEGIN
    TXT = READ_TXT(F(N))
    IF NONE(NAMES_OBSOLETE) THEN NAMES_OBSOLETE = TXT ELSE NAMES_OBSOLETE = [NAMES_OBSOLETE,TXT]
  ENDFOR;FOR O = 0,NOF(F) -1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  IF STOPP THEN STOP
  ;===> REMOVE DUPLICATES
S = WHERE_SETS(NAMES_OBSOLETE)
OK =WHERE(S.VALUE NE '', COUNT) 
S = S[OK]
PN,S
ST,S
NAMES_OBSOLETE = S.VALUE
PN,TXT
  OK = WHERE_MATCH(STRUPCASE(NAMES),STRUPCASE(NAMES_OBSOLETE),COUNT)
  PRINT,'REMOVING   ' + ROUNDS(COUNT) + '  OBSOLETE NAMES '  & WAIT,3
  IF COUNT GE 1 THEN BEGIN
    NAMES = REMOVE(NAMES,(OK))
    FILES = REMOVE(FILES,(OK))
  ENDIF;IF COUNT GE 1 THEN BEGIN

  DB =REPLICATE(CREATE_STRUCT('NAME','','DIR',''),NOF(NAMES))
  DB.NAME = NAMES
  ST,DB
  IF STOPP THEN STOP


  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(TARGETS)-1 DO BEGIN
    TARGET = TARGETS[NTH]
    DIR = DIRS[NTH]
    PFILE,TARGET + '   ' + DIR,/G & WAIT,0.5
    FILES = FILE_SEARCH(DIR_PRO  + TARGET + '*.PRO')
    NAME =(FILE_PARSE(FILES)).NAME
    OK = WHERE_MATCH(DB.NAME,NAME,COUNT)
    IF COUNT GE 1 THEN DB[OK].DIR = DIR
    IF KEY(VERBOSE) THEN PRINT,DB[OK].DIR

  ENDFOR;FOR NTH = 0,NOF(TARGETS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  IF STOPP THEN STOP
  DB = SORTED(DB,TAG = 'DIR')
  ;===> SORT BY DIR
  ;
  ;
  ;===> WRITE FIRST NAMES AND DIR TO A CSV FILE
  CSV = !S.MASTER +ROUTINE + '.CSV'
  CSV_WRITE,CSV,DB
ENDIF;IF KEY(MAKE_CSV) THEN BEGIN
;|||||||||||||||||||||||||||||||


;*******************************
IF KEY(ASSIGN_DIRS) THEN BEGIN
  ;******************************
  SWITCHES,ASSIGN_DIRS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  CSV = DIR_CSV +ROUTINE + '.CSV'
  IF EXISTS(CSV) THEN DB  = CSV_READ(CSV)
  ST,DB
  ;===> CLEAN UP NUMBER ERRORS IN DIRS
  OK = WHERE(NUMERIC(DIRS) EQ 1,COUNT) & IF COUNT GE 1 THEN DIRS[OK] = ''
  SETS = WHERE_SETS(DB.DIR)
  ;===> IGNORE BLANK DIRS 
  OK = WHERE(SETS.VALUE EQ '',COUNT)
  IF COUNT EQ 1 THEN BEGIN
    BLANK = SETS[OK]
    SETS = REMOVE(SETS,OK)
    ST,SETS
    P,SETS.VALUE
    IF STOPP THEN STOP

    ;===>INTERACTIVELY ASSIGN A DIR TO EACH PRO HAVING A BLANK DIR IN THE CSV
    SUBS = WHERE_SETS_SUBS(BLANK)
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,NOF(SUBS)-1 DO BEGIN
      POF,NTH,SUBS
      SUB = SUBS[NTH]
      D = DB(SUB)
      NAME = D.NAME
      IF NONE(DIRS) THEN DIRS = SETS.VALUE
      TXT = SINDGEN(NOF(DIRS)) + ':' + DIRS
      PRINT
      PRINT,TXT
      INPUT = []
      READ,INPUT,PROMPT = 'ENTER # OR A NEW DIR FOR PROGRAM ' + NAME + '  >>   '
     ;===> IF NUMBER THEN ASSIGN THE DIR ASSOCIATED WITH THE # TO DIR FOR THIS NAME
     ;##############################################################################
     IF STOPP THEN STOP
     CASE [1] OF
       ;===> IF RESPONSE IS - NEG AND NO NUMBER OR DIR TEXT THEN ...
       SIGN(INPUT) EQ -1: BEGIN
       ;===> STOP ASSIGNMENTS AND SAVE DB IN THE CSVFILE
         GOTO,CSV_DB ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  
       END;SIGN(INPUT EQ -1
       
       IDLTYPE(INPUT) EQ 'STRING': BEGIN
         ;===> ADD NEW DIR TO DIRS
         DIRS = [DIRS,INPUT]
         DB(SUB).DIR = INPUT 
       END; IDLTYPE(INPUT) EQ 'STRING'
       
       IDLTYPE(INPUT) NE 'STRING': BEGIN
       ;===> ASSIGN THE DIRS(INPUT) SEQUENCE # 
       
       DB(SUB).DIR = DIRS(FIX(INPUT))
      IF STOPP THEN STOP
       END;IDLTYPE(INPUT) NE 'STRING'
       
       ELSE: BEGIN
       END
     ENDCASE; CASE (1) OF
     ;||||||||||||||||||||
      
    ENDFOR;FOR NTH = 0,NOF(SUBS)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ENDIF;IF COUNT EQ 1 THEN BEGIN
;===> SAVE THE DB
CSV_DB:
CSV_WRITE,CSV,DB
,'ASSIGN_DIRS'
GOTO,DONE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ENDIF;IF KEY(ASSIGN_DIRS) THEN BEGIN
;||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(RENAME_DIRS) THEN BEGIN
  ;******************************
  SWITCHES,RENAME_DIRS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP RENAMES SELECTED DIRS'
  IF STOPP THEN STOP

  CSV = DIR_CSV +ROUTINE + '.CSV'
  IF EXISTS(CSV) THEN DB  = CSV_READ(CSV)
  ST,DB
  OK = WHERE(DB.DIR EQ 'IS',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'LOGICAL'
  OK = WHERE(DB.DIR EQ 'IMG',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'IMAGE'
  OK = WHERE(DB.DIR EQ 'MTIME',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'DATE'
  OK = WHERE(DB.DIR EQ 'DRAW',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'PLOT'
  OK = WHERE(DB.DIR EQ 'PLT',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'PLOT'
  OK = WHERE(DB.DIR EQ 'OPAL',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'PP'
  OK = WHERE(DB.DIR EQ 'FRONT',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'FRONTS'
  OK = WHERE(DB.DIR EQ 'CONTOUR',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'GRID'
  OK = WHERE(DB.DIR EQ 'L3B',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'BINS'
  OK = WHERE(DB.DIR EQ 'LIGHT',COUNT)  & P,COUNT & IF COUNT GE 1 THEN DB[OK].DIR = 'SOLAR'
  IF STOPP THEN STOP
  CSV_WRITE,CSV,DB

  ,'RENAME_DIRS'
ENDIF;IF KEY(RENAME_DIRS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(COPY_ALL_PROS) THEN BEGIN
  ;******************************
  SWITCHES,COPY_ALL_PROS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
 ;===>  COPY ALL PROS
  PRO_COPY = !S.IDL + 'PROGRAMS_COPY' + PATH_SEP() & DIR_TEST,PRO_COPY
  FILES =FILE_SEARCH(!S.PROGRAMS + '*.pro')
  FILE_COPY,FILES,PRO_COPY,/VERBOSE
  ,'COPY_ALL_PROS'
ENDIF;IF KEY(COPY_ALL_PROS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||




;*******************************
IF KEY(MOVE_TO_DIRS) THEN BEGIN
  ;******************************
  SWITCHES,MOVE_TO_DIRS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  CSV = DIR_CSV +ROUTINE + '.CSV'
  DB  = CSV_READ(CSV)
  ST,DB
  IF STOPP THEN STOP
 
  SETS = WHERE_SETS(DB.DIR)
  ST,SETS
  ;===> IGNORE BLANK DIRS
  OK = WHERE(SETS.VALUE EQ '',COUNT)
  IF COUNT EQ 1 THEN  MESSAGE,'ERROR: CAN NOT HAVE MISSING DIRS'
  IF STOPP THEN STOP

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(SETS)-1 DO BEGIN
    SET = SETS[NTH]
    DIR = SET.VALUE
    SUBS = WHERE_SETS_SUBS(SET)
    PROS = DB(SUBS).NAME
    ;    PLIST,PROS,NOTES = DIR
    ;===> MAKE THE SUBDIRECTORY
    SUBDIR = !S.PROGRAMS + DIR + PATH_SEP()
    IF STOPP THEN STOP
    DIR_TEST,SUBDIR,/VERBOSE
    ;===> MOVE THE PROS [ONE AT A TIME TO MAKE SURE THEY EXIST]
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR _PRO = 0, NOF(PROS) -1 DO BEGIN
      APRO = PROS(_PRO)      
    SOURCE = !S.PROGRAMS + APRO + '.PRO'
     IF EXIST(SOURCE) THEN FILE_MOVE,SOURCE,SUBDIR,/VERBOSE,/NOEXPAND_PATH,/REQUIRE_DIRECTORY
   ENDFOR;FOR _PRO = 0, NOF(PROS) -1 DO BEGIN
   ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  ENDFOR;FOR NTH = 0,NOF(SETS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  IF STOPP THEN STOP
ENDIF;IF KEY(MOVE_TO_DIRS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||

DONE:


END; #####################  END OF ROUTINE ################################
