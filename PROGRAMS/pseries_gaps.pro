; $ID:	PSERIES_GAPS.PRO,	2020-07-01-12,	USER-KJWH	$
;+
;###########################################################################################
PRO PSERIES_GAPS,PSERIES_FILE,CSV_FILE=CSV_FILE,DIR_OUT=DIR_OUT,OVERWRITE=OVERWRITE,FILE_LABEL=FILE_LABEL

;PURPOSE: THIS PROGRAM CALCULATES THE GAPS IN GOOD DATA IN A PSERIES FILE;                      

; OUTPUT:
;   SAVE FILE WITH THE CUMULATIVE FREQUENCY [HISTOGRAM] OF GAPS [SPAN_DAYS]IN THE PSERIES
;   SAVE FILE OF AN SMI IMAGE ARRAY WITH THE MEDIAN SPAN_DAYS

; ARGUMENTS:  PSERIES_FILE,CSV_FILE=CSV_FILE
; 
; KEYWORDS:
;   DIR_OUT:   DIRECTORY FOR SAVE,PS, & PNG FILES
;
; EXAMPLES:
; 
; CATEGORY: PSERIES

;  
      
; MODIFICATION HISTORY:
;  JUL 30,2012 WRITTEN BY: J.E. O'REILLY
;  AUG  2,2012,JOR NOW COMPUTING AND SAVING MEDIAN OF EACH GAPS FROM EVERY PSERIES
;  MAR 2,2013,JOR NOW PROD = SPAN_DAYS
;  MAR 10,2013,JOR:          ARR_MED_GAPS(_PX,_PY)= MEDIAN(GAPS,/EVEN) TO AVOID MISLEADING 1 DAY SPANS
;  MAR 11,2013,JOR CHANGED SPAN TO GAP_DAYS
;  MAR 28,2013,JOR         ARR_MED_GAPS(_PX,_PY)= MEDIAN(GAPS,/EVEN )TO 
;                          ARR_MED_GAPS(_PX,_PY)= MEDIAN(GAPS)
;                          BECAUSE MEDIAN /EVEN GIVES A ZERO WHEN ONLY 2 OBS
;                          MOVED   ARR_MED_GAPS(_PX,_PY)= MEDIAN(GAPS) AFTER GAPS = GAPS(1:*); FIRST GAP IS NEGATIVE
;  APR 2,2013              ARR_MED_GAPS(_PX,_PY)= 10^(MEAN(ALOG10(GAPS))); BASED ON BOX-COX COEFFICIENTS:  1.00000E-006,1.00000
;  FEB 2,2014,JOR REMOVED TEMPLATE_FILE USE NEW MAPS TO GET PX,PY
;  FEB 3,2014,JOR RENAMED TO PSERIES_GAPS 
;                 FULLNAME = REPLACE(FULLNAME,'.FLT','.SAVE')
;  MAY 27,2014,JOR, FIXED ERROR [WAS MEAN] 
;                   :ARR_MED_GAPS(_PX,_PY)= MEDIAN(GAPS); MEDIAN
;  MAY 28,2014,JOR ADDED GMEAN OUTPUT                 
;
;
;
;

;##################################################################################################################
;-

;****************************
  ROUTINE_NAME='PSERIES_GAPS'
;****************************
; PFILE TEMPLATE  STRUCT_SD_WRITE  PSERIES  POF  DATE  32767  STOP  PROD

IF NONE(PSERIES_FILE)  OR NONE(CSV_FILE)  THEN MESSAGE,'ERROR: PSERIES AND CSV FILES REQUIRED'
IF NONE(OVERWRITE)  THEN _OVERWRITE = 0 ELSE _OVERWRITE = OVERWRITE

; ===>CHARACTER CONSTANTS
AS = '*' & UL ='_'& DASH = '-' & CM =',' & COMPUTER=GET_COMPUTER() & DELIM=PATH_SEP()& NOW = LONG(STRMID(DATE_NOW(),0,8))
INFILE = [PSERIES_FILE,CSV_FILE]
PLIST,INFILE

; =======> 
FA_PSERIES  = FILE_ALL(PSERIES_FILE)
IF N_ELEMENTS(DIR_OUT) NE 1 THEN DIR_OUT = FA_PSERIES[0].DIR
FA_CSV      = FILE_ALL(CSV_FILE)

; ===> READ THE CSV FILE (INAME AND FIRST_NAME)
CSV = CSV_READ(FA_CSV.FULLNAME)
;===> REMOVE ! FROM FIRST_NAME AND PERIOD
CSV.FIRST_NAME = REPLACE(CSV.FIRST_NAME,'!','')
CSV.PERIOD = REPLACE(CSV.PERIOD,'!','')
 ;***********************************************************************
  IF FA_PSERIES[0].FULLNAME EQ '' OR FA_CSV[0].FULLNAME EQ ''  THEN BEGIN
  ;**********************************************************************
    PRINT, 'NO FILES TO PROCESS!!!!!, GOTO,DONE'
    PRINT, ' ???????????????????????????????? NO FILES TO PROCESS!!!!!, GOTO,DONE'
    GOTO,DONE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  ENDIF;IF FA_PSERIES[0].FULLNAME EQ '' OR FA_CSV[0].FULLNAME EQ ''  THEN BEGIN
  ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

PROD        = FA_PSERIES[0].PROD
SENSOR      = FA_PSERIES[0].SENSOR
METHOD      = FA_PSERIES[0].METHOD
MAP         = FA_PSERIES[0].MAP
DATA_TYPE   = FA_PSERIES[0].EXT
EDIT_TARGET = FA_PSERIES[0].EDIT
MATH_TARGET = FA_PSERIES[0].MATH
PRINT,FA_PSERIES.NAME +' IS ' +STR_COMMA(FA_PSERIES.SIZE) + '   BYTES'

;===> MAKE THE NAME FOR THE HSERIES FILE
HSERIES_FILE  = PSERIES_FILE
HSERIES_FILE  = REPLACE(HSERIES_FILE,FA_PSERIES[0].DIR,DIR_OUT)
HSERIES_FILE = REPLACE(HSERIES_FILE,'.FLT','.SAV')
HSERIES_FILE  = REPLACE(HSERIES_FILE,'PSERIES','HSERIES-GAPS')
MED_GAPS_FILE=     REPLACE(HSERIES_FILE,'HSERIES-GAPS','HSERIES-MED-GAPS')
GMEAN_GAPS_FILE=REPLACE(MED_GAPS_FILE,'HSERIES-MED-GAPS','HSERIES-GMEAN-GAPS')
;===> REPLACE FLT EXT WITH '.SAVE'
;*******************************************************
IF FILE_TEST(HSERIES_FILE) AND OVERWRITE EQ 0 THEN BEGIN
;*******************************************************
  PRINT,'SKIPPING:  ' + HSERIES_FILE +' - IT ALREADY EXISTS' 
    GOTO,DONE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ENDIF;IF FILE_TEST(HSERIES_FILE) AND OVERWRITE EQ 0 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



;STOP
; ===> CHECK THAT DATA, CSV  BELONG TOGETHER
  LST=['SENSOR','SATELLITE', 'METHOD','COVERAGE','MAP','PROD']
  PSERIES_LABEL = FILE_LABEL_MAKE(FA_PSERIES.NAME,LST=LST)
  CSV_LABEL     = FILE_LABEL_MAKE(FA_CSV.NAME,LST=LST)
  
  
  IF (PSERIES_LABEL NE CSV_LABEL) THEN BEGIN
    PRINT, 'DATA, & CSV  LABELS DO NOT MATCH. GOTO DONE'
    GOTO,DONE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  ENDIF


 
;===> GET MAP FROM PERIES_FILE & PX,PY FROM MAPS_READ
MAP = VALID_MAPS(PSERIES_FILE) & M = MAPS_READ(MAP) & PX = M.PX & PY = M.PY
  N_SERIES = LONG64(PX)*LONG64(PY)
  

  TXT=''
  
; **************************************************************************
; ***  CHECK CONSISTENCY OF PX,PY,N_IMAGES AND DIMENSIONS OF INPUT FILE ***
; **************************************************************************
  N_IMAGES  = N_ELEMENTS(CSV)
  FA_N_IMAGES = LONG(FA_PSERIES.SERIES)
  IF FA_N_IMAGES NE N_IMAGES THEN MESSAGE,'ERROR: SERIES SIZE IS WRONG'
;|||||||||||||||||||||||||||||||||||||

;===> JULIAN FROM THE CSVFILE
JULIAN    = PERIOD_2JD(CSV.PERIOD)


;===> DIMENSION THE SERIES
IF FA_PSERIES.EXT EQ 'INT'  THEN SERIES = INTARR(N_IMAGES)
IF FA_PSERIES.EXT EQ 'FLT'  THEN SERIES = FLTARR(N_IMAGES)
IF FA_PSERIES.EXT EQ 'DOUBLE'   THEN SERIES = DBLARR(N_IMAGES)

CLOSE,/ALL

; #####> OPEN PSERIES FILE FOR READING
OPENR,LUN_IN,FA_PSERIES.FULLNAME,/GET_LUN
PFILE,FA_PSERIES.FULLNAME,/R
PFILE,FA_PSERIES.FULLNAME,/S

; *********************************************************
;  ===>     MAKE ARRAYS TO HOLD CUMULATIVE HISTOGRAM RESULT
; *********************************************************
PRINT,'MAKING MEMORY ARRAYS FOR:'+ROUTINE_NAME

ARR_MED_GAPS = REPLICATE(MISSINGS(0.),PX,PY)
ARR_GMEAN_GAPS = REPLICATE(MISSINGS(0.),PX,PY)
;===> MAKE THE HISTOGRAM  BASE
BASE         = REPLICATE(0UL,N_ELEMENTS(SERIES))


;#########################################################
;   LOOP ON EACH PIXEL'S TIME PSERIES FORMED FROM N_IMAGES
;#########################################################
;   
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;===> FOR EACH PIXEL Y COORDINATE
   FOR _PY = 0L,PY-1L DO BEGIN
     POF,_PY,PY
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 
;===> FOR EACH PIXEL X COORDINATE
     FOR _PX = 0L,PX-1L DO BEGIN     
      READU,LUN_IN,SERIES
      
;===> FIND SUBSCRIPTS FOR NON-MISSING DATA [IGNORE LAND PIXELS]     
      OK = WHERE(SERIES NE MISSINGS(SERIES),COUNT)
;           
      IF COUNT GE 1 THEN BEGIN
      ;===>   APPLY SUBSCRIPTS TO JULIAN
        JD = JULIAN[OK]
        ;===>   SUBTRACT FIRST FROM ALL TO MAKE FIRST ALWAYS ZERO
        JD=JD-FIRST(JD)      
        ;===>   SHIFT JD TO FIND GAPS BETWEEN GOOD DATA [ MEASURED IN UNITS OF DAYS ]
        GAPS = JD-SHIFT(JD,1)  
        ;===>[ IGNORE FIRST GAP BECAUSE IT IS 0 OR NEGATIVE, DUE TO WRAPAROUND ]

        ;===> MUST HAVE AT LEAST TWO SAMPLES TO COMPUTE A GAP 
        IF N_ELEMENTS(GAPS) GE 2 THEN BEGIN
          
        ;===> MEDIAN OF GAPS FOR THIS PSERIES' PIXEL
        GAPS = GAPS(1:*); [FIRST GAP IS NEGATIVE]
        ;===> FILL IN THE ARRAYS
        ARR_MED_GAPS(_PX,_PY)= MEDIAN(GAPS); MEDIAN
        ARR_GMEAN_GAPS(_PX,_PY)= EXP(MEAN(ALOG(GAPS)))
        
        ;===> ACCUMULATE GAPS TO THE BASE
        BASE=ULONG64(HISTOGRAM(GAPS, INPUT=BASE))
        ENDIF;IF N_ELEMENTS(GAPS) GE 2 THEN BEGIN
      ENDIF;IF COUNT GE 1 THEN BEGIN
    ENDFOR ;FOR _PX = 0L,PX-1L DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
  ENDFOR ;  FOR _PY = 0L,PY-1L DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

;*****************************************
;===>>>>>> WRITE THE CUMULATIVE HISTOGRAM 
;*****************************************
      MISSING_CODE=MISSINGS(IMAGE)
      ;===> MAKE ASAVE IN CASE STRUCT_WRITE DOES NOT WORK
STRUCT_WRITE,BASE,FILE=HSERIES_FILE,PROD='GAP_DAYS',STAT= 'FREQ' & PF,HSERIES_FILE
STRUCT_WRITE,ARR_MED_GAPS,FILE=MED_GAPS_FILE,PROD='GAP_DAYS',STAT= 'FREQ' & PF,MED_GAPS_FILE
STRUCT_WRITE,ARR_GMEAN_GAPS,FILE=GMEAN_GAPS_FILE,PROD='GAP_DAYS',STAT= 'FREQ' & PF,GMEAN_GAPS_FILE
 
DONE :
      CLOSE,/ALL

TIMER,/STOP

END   ; #####################  END OF ROUTINE ################################
