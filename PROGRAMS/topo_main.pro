; $ID:	TOPO_MAIN.PRO,	2021-03-15-16,	USER-KJWH	$
;######################################################################
  PRO TOPO_MAIN
; PURPOSE: MAIN FOR THE TOPO FAMILY

; =================>
; N O T E S
; =================>
; SRTM30_PLUS: DATA FUSION OF SRTM LAND TOPOGRAPHY WITH MEASURED AND ESTIMATED SEAFLOOR TOPOGRAPHY

;SRTM30_PLUS V9.0 - DECEMBER 19, 2013
;DAVID T. SANDWELL DSANDWELL@UCSD.EDU
;CHRIS OLSON <CJOLSON@UCSD.EDU>
;AMBER JACKSON <AMBERLEAJACKSON@GMAIL.COM>
;JOSEPH J. BECKER <JOSEPH.BECKER.CTR@NRLSSC.NAVY.MIL>

;BECKER, J. J., D. T. SANDWELL, W. H. F. SMITH, J. BRAUD, B. BINDER, J. DEPNER, D. FABRE, J. FACTOR, S. INGALLS, S-H. KIM, R. LADNER, K. MARKS, S. NELSON, A. PHARAOH, G. SHARMAN, R. TRIMMER, J. VONROSENBURG, G. WALLACE, P. WEATHERALL., GLOBAL BATHYMETRY AND ELEVATION DATA AT 30 ARC SECONDS RESOLUTION: SRTM30_PLUS, MARINE GEODESY, 32:4, 355-371, 2009.
;SMITH, W. H. F., AND D. T. SANDWELL, GLOBAL SEAFLOOR TOPOGRAPHY FROM SATELLITE ALTIMETRY AND SHIP DEPTH SOUNDINGS, SCIENCE, V. 277, P. 1957-1962, 26 SEPT., 1997.

;	DATA - 33 FILES OF SIGNED 2-BYTE INTEGERS FOR GLOBAL ELEVATION(> 0) 
;	AND DEPTH (<0). THE GLOBAL ELEVATIONS ARE AN EXACT
;				 COPY OF THE SRTM30 GRIDS PROVIDED AT THE FOLLOWING LOCATION.  
;				 OUR CONTRIBUTION IS TO FILL THE OCEAN AREAS WITH
;				 SOME ESTIMATE OF DEPTH. FTP://E0SRP01U.ECS.NASA.GOV

;  
; MODIFICATION HISTORY:; 
; WRITTEN BY J.O'REILLY,JAN 25,2016
;            [COPIED SELECTED STEPS FROM TOPO_SRTM30_PLUS_MAIN]
; FEB 08, 2016 - JOR: Now WGET looks for NC files
; MAR 19, 2016 - JOR: LANDMASK in TOPO_MAP now has an -IDL suffix [STEP DO_MAKE_TOPO_FILES] 
; MAR 30, 2016 - KJWH: Added DO_MAKE_TOPO_BROWSE step
; AUG 12, 2016 - JEOR: CHANGED PNGFILE = TO PNG = IN CALL TO IMGR
;                      TITLE=   MAPP + '   '  + UNITS('DEPTH') [FOR COLORBAR TITLE]

;  
;#########################################################################


;*************************
ROUTINE_NAME = 'TOPO_MAIN'
;*************************
	
DIR_LOCAL = !S.IDL_TOPO + 'DATA'+ PATH_SEP()
FILES = FILE_SEARCH(DIR_LOCAL,'*.NC')
PN,FILES,'NC-DATA FILES'

;######### SWITCHES ################
	DO_WGET_NC   							= ''
	DO_TOPO_MASTER 		        = ''
	DO_MAKE_TILE_MAP          = ''
	DO_TOPO_VIEW              = ''
	DO_MAKE_TOPO_BROWSE       = ''
	DO_MAKE_TOPO_FILES        = 'Y'
  DO_TOPO_2DEG              = ''
; ************************************ S W I T C H E S SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS


;******************************
IF KEY(DO_WGET_NC) THEN BEGIN
;******************************
  SWITCHES,DO_WGET_NC,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,R_PRODS=R_PRODS,DATERANGE=DATERANGE
  IF STOPP THEN STOP
  ;FTP://TOPEX.UCSD.EDU/PUB/SRTM30_PLUS/SRTM30/GRD/
  HTML = 'ftp://topex.ucsd.edu/pub/srtm30_plus/srtm30/grd/
  DIR_LOCAL = !S.IDL_TOPO + 'DATA' + PATH_SEP()

  ACCOUNT = 'ANONYMOUS'
  PASSWORD = "JAY.O'REILLY@NOAA.GOV"
  FILES = '*.NC'
  
  WGET, HTML=HTML, FILES=FILES, DIR_HTML=DIR_HTML, DIR_LOCAL=DIR_LOCAL, ACCOUNT=ACCOUNT, PASSWORD=PASSWORD

ENDIF;IF KEY(DO_WGET_NC) THEN BEGIN
;||||||||||||||||||||||||||||||||||




;************************************
IF KEY(DO_TOPO_MASTER) THEN BEGIN
;************************************
  SWITCHES,DO_TOPO_MASTER,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,R_PRODS=R_PRODS,DATERANGE=DATERANGE
  PRINT
  MESSAGE,/INF,'THIS STEP MAKES TOPO_MASTER.CSV  [WHICH MUST BE EDITED IN EXCEL]'
  PRINT
  IF STOPP THEN STOP
		FILES = FILE_SEARCH(!S.IDL_TOPO +'DATA' + PATH_SEP() + '*.NC')
		PN,FILES,'TOPO-FILES'

		FOR _FILES=0,N_ELEMENTS(FILES)-1L DO BEGIN
			AFILE=STRUPCASE(FILES(_FILES))
			FN=FILE_PARSE(AFILE)

	  	T=STRSPLIT(FN.NAME,'EWNS.',/EXTRACT,/PRESERVE_NULL)
		  IF N_ELEMENTS(T) EQ 3 THEN BEGIN
		  	E= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'E',/EXTRACT,/PRESERVE_NULL)) EQ 2
		  	W= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'W',/EXTRACT,/PRESERVE_NULL)) EQ 2
		  	N= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'N',/EXTRACT,/PRESERVE_NULL)) EQ 2
		  	S= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'S',/EXTRACT,/PRESERVE_NULL)) EQ 2
				LEFT = -1.0*W*FLOAT(T[1]) + 1.0*E*FLOAT(T[1])
				TOP  =  1.0*N*FLOAT(T(2)) - 1.0*S*FLOAT(T(2))
				IF TOP EQ -60 THEN BEGIN
					RIGHT = LEFT + 60
					BOTTOM = -90
				ENDIF ELSE BEGIN
					RIGHT = LEFT + 40
					BOTTOM = TOP - 50
				ENDELSE
			ENDIF
			  D= CREATE_STRUCT('TILE',FN.NAME,'COLOR',0,'LATMIN',BOTTOM,'LATMAX',TOP,'LONMIN',LEFT,'LONMAX',RIGHT)
        IF NONE(DB) THEN DB = D ELSE DB = STRUCT_CONCAT(DB,D)
		ENDFOR
		;===> MAKE A DB  
    CSV_WRITE,!S.IDL_TEMP +'TOPO_MASTER.CSV',DB
  IF STOPP THEN STOP
PLINES
MESSAGE,/INF,'NOW DO THESE STEPS USING EXCEL TO EDIT TOPO_MASTER.CSV'
MESSAGE,/INF,'1) SORT LONMIN A>Z [EXPAND SELECTION]'
MESSAGE,/INF,'2) SORT LATMAX Z>A [EXPAND SELECTION]'
MESSAGE,/INF,'3) ADD 1 [TOP] TO 33[BOTTOM] IN COLUMN COLOR '
MESSAGE,/INF,'4) COPY TOPO_MASTER.CSV TO !S.MASTER '

  IF STOPP THEN STOP
	;,'DO_TOPO_MASTER'		
	ENDIF;IF KEY(DO_TOPO_MASTER) THEN BEGIN
; |||||||||||||||||||||||||||||||||||||||||||


;***********************************
IF KEY(DO_MAKE_TILE_MAP) THEN BEGIN
;***********************************
SWITCHES,DO_MAKE_TILE_MAP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,R_PRODS=R_PRODS,DATERANGE=DATERANGE
  PRINT
  MESSAGE,/INF,'THIS STEP MAKES !S.MASTER +TOPO_TILE_MAP.PNG'
  PRINT
  IF STOPP THEN STOP
  
  MSTR =   !S.MASTER +'TOPO_MASTER.CSV

  DB = CSV_READ(MSTR) & PF,MSTR,/R
  DB = STRUCT_2NUM(DB)
  DB.TILE = STRUPCASE(DB.TILE)
  PAL_36,R,G,B
  MAPS_SET,'SMI'
  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(DB)-1 DO BEGIN
    D = DB[NTH]
    POF,NTH,DB    
    X = [D.LONMIN,D.LONMAX,D.LONMAX,D.LONMIN]
    Y = [D.LATMIN,D.LATMIN,D.LATMAX,D.LATMAX]
    XYZ = CONVERT_COORD(X,Y,/DATA,/TO_DEVICE,/DOUBLE)
    X = XYZ(0,*)
    Y = XYZ(1,*)
    COLOR = REPLICATE(FIX(D.COLOR),N_ELEMENTS(X))
    POLYFILL,X,Y,COLOR = COLOR,/DEVICE,NOCLIP = 1
    ;    XYOUTS,MEAN(X),MEAN(Y),STRTRIM(D.COLOR,2),CHARSIZE = 7,COLOR = 0,/DEVICE
  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ;MAP_CONTINENTS,/HIRES,/COASTS,COLOR = 0
  IM = TVRD()
  ZWIN
  PNGFILE = !S.MASTER + 'TOPO_TILE_MAP.PNG'
  WRITE_PNG,PNGFILE,IM,R,G,B
  PFILE, PNGFILE
ENDIF;IF KEY(DO_MAKE_TILE_MAP) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||


;*************************************
IF KEY(DO_MAKE_TOPO_BROWSE) THEN BEGIN
;*************************************
  MESSAGE,/INF,'THIS STEP MAKES BROWSE PNGS OF THE UNMAPPED TOPO FILES'
  PRINT
  SWITCHES,DO_MAKE_TOPO_BROWSE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  
  DIR = !S.IDL_TOPO + 'DATA' + PATH_SEP()
  PDIR = !S.IDL_TOPO + 'PNGS' + PATH_SEP() & DIR_TEST, PDIR
  FILES = FILE_SEARCH(DIR + '*.nc')
  PAL_BR,R,G,B
  PAL_BATHY,RR,GG,BB

  ; ===> LOOP THROUGH TOPO FILES
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES[NTH]
    FP = FILE_PARSE(FILE)
    RFILE = PDIR + 'ALL-'   + FP.NAME + '.PNG'
    TFILE = PDIR + 'TOPO-'  + FP.NAME + '.PNG'
    BFILE = PDIR + 'DEPTH-' + FP.NAME + '.PNG'
    IF FILE_MAKE(FILE,[RFILE,TFILE,BFILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE ; ===>
    POF,NTH,FILES,/NOPRO,TXT=FILE
        
    SD = READ_NC(FILE,PRODS='SD')
    ITOPO = SD.SD.Z.IMAGE
    BYT = PRODS_2BYTE(ITOPO,PROD='TOPO')
    WRITE_PNG, RFILE, BYT, R,G,B
    
    OK = WHERE(ITOPO GT 0 AND ITOPO NE MISSINGS(ITOPO),COMPLEMENT=COMPLEMENT)
    NR = NICE_RANGE(ITOPO[OK])
    BYT = PRODS_2BYTE(ITOPO,PROD='TOPO_'+ROUNDS(NR[0])+'_'+ROUNDS(NR[1]))
    BYT(COMPLEMENT) = 255
    WRITE_PNG, TFILE, BYT, R,G,B
    
    OK = WHERE(ITOPO GT 0,COMPLEMENT=COMPLEMENT)
    BYT = PRODS_2BYTE(-ITOPO,PROD='DEPTH')
    BYT[OK] = 253
    WRITE_PNG, BFILE, BYT, RR,GG,BB
    
  ENDFOR

ENDIF ; DO_MAKE_TOPO_BROWSE

;*************************************
IF KEY(DO_MAKE_TOPO_FILES) THEN BEGIN
;*************************************
  PRINT
  MESSAGE,/INF,'THIS STEP MAKES BATHY SAV AND BATHY PNGS FOR ALL THE MAPS IN MAPS_MAIN'
  PRINT
  SWITCHES,DO_MAKE_TOPO_FILES,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  MAPS = MAPS_READ(/NAMES,/TRUE) & PN,MAPS,' MAPS'
  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(MAPS) -1 DO BEGIN
    MAPP = MAPS[NTH]
    POF,NTH,MAPS
    PFILE,MAPP,/M
    GONE,PX
    GONE,PY
    ; ===> GET MAP INFO
    SZ = MAPS_SIZE(MAPP)
    IF NONE(PX) THEN PX=SZ.PX
    IF NONE(PY) THEN PY=SZ.PY
  
    ; ===> MAKE THE DIRECTORIES & ALL OUTPUT FILE NAMES
    DIR_BROWSE = !S.IDL_TOPO +'BROWSE'+ PATH_SEP()
    DIR_SAV    = !S.IDL_TOPO +'SAV'+ PATH_SEP()
    DIR_TEST,[DIR_SAV,DIR_BROWSE]
    BATHY_PNG     = DIR_BROWSE +'TOPO-'  +MAPP+'-PXY_'+ROUNDS(PX)+'_'+ROUNDS(PY)+'-BATHY.PNG'
    TOPO_SAV      = DIR_SAV    +'TOPO-'  +MAPP+'-PXY_'+ROUNDS(PX)+'_'+ROUNDS(PY)+'-TOPO.SAV'
  
    ; ===> GET THE TOPO FILES FOR THIS MAPP
    TOPO_FILES = TOPO_MAP(MAPP,/TOPO_FILES)
  
    ; ===> SKIP THIS MAPP IF OUTPUT ALREADY EXISTS
   IF FILE_MAKE(TOPO_FILES,[BATHY_PNG,TOPO_SAV],OVERWRITE=OVERWRITE,/VERBOSE) EQ 0 THEN CONTINUE ; >>>>>>>>>
  
    ;###################################################################################
    ; ===> MAKE THE TOPO_SAV ?
    IF FILE_MAKE(TOPO_FILES,TOPO_SAV,OVERWRITE=OVERWRITE,/VERBOSE) EQ 1 THEN BEGIN
      ITOPO = TOPO_MAP(MAPP, PX=PX, PY=PY)
      STRUCT_WRITE, ITOPO, FILE=TOPO_SAV, PROD='TOPO',IMAGE=IMG, MISSING_CODE=MISSINGS(ITOPO), DATA_UNITS='METERS', INFILE=TOPO_FILES,$
        MAP=MAPP, NOTES='SRTM30_PLUS V11.0 - NOVEMBER 29, 2014'
    ENDIF ELSE BEGIN
      ITOPO = STRUCT_READ(TOPO_SAV)
    ENDELSE;IF FILE_MAKE(TOPO_FILES,TOPO_SAV,OVERWRITE=OVERWRITE,/VERBOSE) EQ 1 THEN BEGIN
    ;##############################################################################
    ; ===> MAKE A BATHY_PNG  
    TITLE=   MAPP + '   '  + UNITS('DEPTH')
    IMGR,ITOPO,PROD='DEPTH',TITLE=TITLE,TAG=TAG,MAP=MAPP,COAST_ONLY=COAST_ONLY,$
      EDIT=EDIT,VSTAG=1,PNG=BATHY_PNG,PAL='PAL_BATHY',DELAY=0,$
      BUFFER=1,VERBOSE=1,BIT_DEPTH=BIT_DEPTH,COMMA = 1
      ;||||||||||||||||||||||||||||||||||||||||||||||||
      
        
  ENDFOR;FOR NTH = 0,NOF(MAPS) -1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
 ; ,'DO_MAKE_TOPO_FILES'
ENDIF;IF KEY(DO_MAKE_TOPO_FILES) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||

;***********************
IF KEY(DO_TOPO_VIEW) THEN BEGIN
  ;***********************
  SWITCHES,DO_TOPO_VIEW,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  MESSAGE,/INF,'THIS STEP VIEWS TOPO SAV FILES'
  MESSAGE,/INF,'RUN EACH OF THE EXAMPLES IN TOPO_VIEW TO SEE HOW IT WORKS.'
ENDIF;IF KEY(DO_TOPO_VIEW) THEN BEGIN
;||||||||||||||||||||||||||||||||||||


;******************************
IF KEY(DO_TOPO_2DEG) THEN BEGIN
;******************************
  SWITCHES,DO_TOPO_2DEG,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  MESSAGE,/INF,'THIS STEP MAKES DEG FILES [ISOBATH DATA FOR PLOTTING] FROM THE 43200BY 21600 SMI TOPO DATA'

  TOPO_2DEG

ENDIF;IF KEY(DO_TOPO_2DEG) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||
 

;||||||||||||||||||||||||||||||||||||||||||||||||||
END; #####################  END OF ROUTINE ################################
