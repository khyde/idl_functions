; $ID:	STRUCT_GET.PRO,	2020-06-30-17,	USER-KJWH	$
;+
;;#############################################################################################################
	FUNCTION STRUCT_GET,STRUCT,TAG,LOOK = LOOK
;
;
; PURPOSE:  FINDS AND RETURNS DATA IN A TAG IN THE STRUCTURE
;  
; CATEGORY:	STRUCT		 
;
; CALLING SEQUENCE: RESULT = STRUCT_GET(STRUCT,TAG)
;
;INPUTS: STRUCT A STRUCTURE
;         TAG: TARGET TAGNAME [STRING] TO FIND 
;         [NOTE TAG MAY BE A COMPOUND NAME LIKE 'CHLOR_A.IMAGE']

; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;         LOOK..... LIST ALL THE TAGS IN THE STRUCTURE
;        

; OUTPUTS: THE DATA/INFO IN THE TAG
;		
; EXAMPLES:
;  DB = GET_LME_DB() & PL, STRUCT_GET(DB,/LOOK)
;  DB = GET_LME_DB() & PL, STRUCT_GET(DB,'MAP')
;  DB = MAPS_READ() & PL, STRUCT_GET(DB,'MAP')
;  DB = MAPS_READ() & PL, STRUCT_GET(DB,'PERIOD')
;  DB = MAPS_READ() & PL, STRUCT_GET(DB,'PER'); !NULL
;  DB = PRODS_READ() & PL, STRUCT_GET(DB,'PROD')
;  P,STRUCT_GET(CREATE_STRUCT('DATA',BINDGEN(9),'JUNK','JUNK'),'DATA');= 0   1   2   3   4   5   6   7   8
;  FILE = FLS(!S.FILES + 'S_2009*MODISA-1KM*L2.nc') & SD = READ_NC(FILE) &  HELP,STRUCT_GET(SD,'CHLOR_A.IMAGE')
;  H, STRUCT_GET(CREATE_STRUCT('DATA_UNITS',''),'DATA'); = !NULL

;	NOTES: 
;
; MODIFICATION HISTORY:
;			WRITTEN MAR 5,2015 J.O'REILLY ADAPTED FROM STRUCT_GET
;			AUG 06,2015,JOR:OK = WHERE(TAGNAMES EQ STRUPCASE(TAG),COUNT_TAG)
;     NOV 15,2015,JOR OVERHAULED: NOW USING FANNING'S STRUCT_GETS
;     NOV 16,2015,JOR:IF COUNT EQ 0 THEN OK = WHERE_STRING(T,TAG,COUNT)
;     NOV 17,2015, JOR ADDED LOOK, TEST FOR COMPOUND TAG
;     NOV 18,2015,JOR : OK = WHERE(STRLEN(T[OK]) EQ MIN(STRLEN(T[OK])),COUNT)
;     DEC 07,2015,JOR : OK = WHERE_IN(T,REPLACE(TAG_,'.',''),COUNT)
;                       ADDED DATA_UNITS EXAMPLE
;     DEC 09,2015,JOR : FIXED LOGIC NEEDED TO AUTOMATICALLY GET LIKELY TAGS



;#################################################################################
;-
;*************************
ROUTINE_NAME  = 'STRUCT_GET'
;*************************
;===> DEFAULTS
SPECIAL_TAGS =['IMAGE','DATA','MEAN','ARRAY']
IF IDLTYPE(STRUCT) NE 'STRUCT' THEN RETURN,0
;===> GET ALL THE TAGS
T = GET_TAGS(STRUCT)

;**********************
IF KEY(LOOK) THEN BEGIN
;**********************
  PLIST,T
  GOTO,DONE
ENDIF;IF KEY(LOOK) THEN BEGIN
;||||||||||||||||||||||||||||


IF IDLTYPE(TAG)    NE 'STRING' THEN MESSAGE,'ERROR: NAME MUST BE A STRING'

;===> IS TAG COMPOUND?
P = REPLACE(TAG,'.','.',COUNT=COMPOUND)
OK = WHERE_IN(SPECIAL_TAGS,TAG,SPECIAL)
;===> STRUCT_GET RETURNS THE TAG NAMES WITH DOTS SO PREFIX OUR TAG WITH A DOT
TAG_ = '.'+ STRUPCASE(TAG)

OK = WHERE_IN(T,TAG_,COUNT)
;===> IF TAG IS COMPOUND OR SPECIAL AND COUNT IS ZERO  
;     THEN TRY AGAIN USING WHERE_STRING
;*************************************************
IF (COMPOUND OR SPECIAL) AND COUNT EQ 0 THEN BEGIN
;*************************************************
  OK_TARGETS = WHERE_STRING(T,TAG_,COUNT_TARGETS)   
  IF COUNT_TARGETS GE 1 THEN BEGIN
    TARGETS = T(OK_TARGETS)
    W = WORDS(TARGETS,DELIM = '.',LINE=LINE)
    OK_W = WHERE(W EQ TAG,COUNT_W)
    IF COUNT_W EQ 1 THEN BEGIN
      L = LINE(OK_W)
      TARGET = TARGETS(L) 
      OK = WHERE_IN(T,TARGET,COUNT)
    ENDIF;IF COUNT_W EQ 1 THEN BEGIN
  ENDIF;IF COUNT_TARGETS GE 1 THEN BEGIN
ENDIF;IF (COMPOUND OR SPECIAL) AND COUNT EQ 0 THEN BEGIN
    
IF COUNT GE 1 THEN BEGIN 
  S = T[OK]
  A = EXECUTE('D = STRUCT'+ S[0] )
  IF A EQ 1 THEN RETURN, D ELSE RETURN, []  
ENDIF ELSE BEGIN
  RETURN,[]  
ENDELSE;IF COUNT EQ 1 THEN BEGIN

 
DONE:          
	END; #####################  END OF ROUTINE ################################
