; $ID:	PHYTO_SIZE_PRODUCTIVITY_MAIN.PRO,	2020-07-08-15,	USER-KJWH	$

  PRO PHYTO_SIZE_PRODUCTIVITY_MAIN,DIR_PPD=DIR_PPD,DIR_PHYTO=DIR_PHYTO,DIR_OUT=DIR_OUT,$
        SZ_MODEL=SZ_MODEL,MAP=MAP,REVERSE_DATES=REVERSE_DATES,DATE_RANGE=DATE_RANGE,OVERWRITE=OVERWRITE
; NAME:
;       PHYTO_SIZE_PRODUCTIVITY_MAIN

; PURPOSE:
;       Run phytoplankton size class productivity models 
;
; KEYWORD PARAMETERS:
;				

; OUTPUTS:
;
; MODIFICATION HISTORY:
;       Written by:  K.J.Hyde, Nov 6, 2012

  ROUTINE_NAME = 'PHYTO_SIZE_PRODUCTIVITY_MAIN'
  
;	*********************
;	***** Constants *****
;	*********************
  NOW = LONG(STRMID(DATE_NOW(),0,8))
  SL=DELIMITER(/PATH) & DASH=DELIMITER(/DASH) & UL=DELIMITER(/UL) & CM=DELIMITER(/COMMA) & AS = DELIMITER(/ASTER)
  NOW = NUM2STR(LONG(STRMID(DATE_NOW(),0,8)))
	
	IF N_ELEMENTS(OVERWRITE)   EQ 0 THEN OVERWRITE = 0     ELSE OVERWRITE = OVERWRITE
	IF N_ELEMENTS(PERIOD_CODE) NE 1 THEN _PERIOD_CODE ='M' ELSE _PERIOD_CODE=PERIOD_CODE  
  IF N_ELEMENTS(DIR_OUT)     LT 1 THEN _DIR_OUT = DIR_PPD  ELSE _DIR_OUT = DIR_OUT
  IF N_ELEMENTS(SZ_MODEL)    EQ 0 THEN MODELS = 'MARMAP' ELSE MODELS = PP_MODELS
  
  IF N_ELEMENTS(DIR_PHYTO) NE 1 OR N_ELEMENTS(DIR_PPD) NE 1 THEN STOP
  
  PP_ALG = VALIDS('ALGS',REMOVE_LAST_SLASH(DIR_PPD))
  PH_ALG = VALIDS('ALGS',REMOVE_LAST_SLASH(DIR_PHYTO))
  ALG = MODELS + '_' + PH_ALG + '_' + PP_ALG 
  
  VALID = VALIDS('ALGS',ALG,/VALID)
  OK = WHERE(VALID EQ 0,COUNT)
  IF COUNT GE 1 THEN PRINT, 'ERROR: Invalid SZ_MODELS - ',MODELS[OK]
  OK = WHERE(VALID EQ 1,COUNT)
  IF COUNT GE 1 THEN MODELS = MODELS[OK] ELSE GOTO, DONE
	
;	*******************************************
; ******** Create output directories ********
;	*******************************************
  
  FP = FILE_PARSE(DIR_PPD)  
  DIR_MODELS = [REPLACE(DIR_PPD,FP.SUB,'MICROPP-'   +ALG),$
                REPLACE(DIR_PPD,FP.SUB,'NANOPICOPP-'+ALG),$
                REPLACE(DIR_PPD,FP.SUB,'MICROPP_PERCENTAGE-'   +ALG),$
                REPLACE(DIR_PPD,FP.SUB,'NANOPICOPP_PERCENTAGE-'+ALG)]
  DIR_TEST,DIR_MODELS

; **************************  
; ******* Find files *******
; **************************  
  IF STRPOS(DIR_PHYTO,'STATS') GE 0 THEN MATH = '-MEAN' ELSE MATH = ''
	FA_PP  = PARSE_IT(FILE_SEARCH(DIR_PPD  +_PERIOD_CODE+'_*-PPD-'+PP_ALG         +MATH+'.SAV*'),/ALL)  
  FA_MC  = PARSE_IT(FILE_SEARCH(DIR_PHYTO+_PERIOD_CODE+'_*-MICRO_PERCENTAGE-PAN'+MATH+'.SAV*'),/ALL)
  
	FULLNAMES = [FA_PP[0].FULLNAME,FA_MC[0].FULLNAME]
	IF MIN(WHERE(FULLNAMES EQ '')) GE 0 THEN BEGIN
    PRINT, 'ERROR: Missing one or more input files'
    GOTO,DONE
  ENDIF

  FA_PP =FA_PP[SORT(FA_PP.DATE_START)]
  FA_MC =FA_MC[SORT(FA_MC.DATE_START)]
  
  IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
    DATE_START=DATE_RANGE[0]
    DATE_END=DATE_RANGE[1]    
    OK_PP  = WHERE(FA_PP.DATE_START  GE DATE_START AND FA_PP.DATE_END  LE DATE_END,COUNT_PP)  & IF COUNT_PP  GE 1 THEN FA_PP  = FA_PP(OK_PP)
    OK_MC  = WHERE(FA_MC.DATE_START  GE DATE_START AND FA_MC.DATE_END  LE DATE_END,COUNT_MC)  & IF COUNT_MC  GE 1 THEN FA_MC  = FA_MC(OK_MC) 
    IF COUNT_PP EQ 0 OR COUNT_MC EQ 0 THEN GOTO, DONE
  ENDIF
      
  IF N_ELEMENTS(MAP) NE 1 THEN MAP_OUT=FA_PP[0].MAP ELSE MAP_OUT=MAP
  MAP_IN=FA_PP[0].MAP  
  MAPS_INFO=MAPS_SIZE(MAP_OUT)
  PX_OUT=MAPS_INFO.PX
  PY_OUT=MAPS_INFO.PY
  
  PFILES = FA_PP.FULLNAME
  IF KEYWORD_SET(REVERSE_DATES) THEN PFILES = REVERSE(PFILES)
    
  FOR FTH = 0L,N_ELEMENTS(PFILES)-1L DO BEGIN
    AFILE_PP=PFILES(FTH)
    _FILES = WHERE(FA_PP.FULLNAME EQ AFILE_PP)
    FA = FA_PP(_FILES)
    ADATE = FA.DATE_START
    
    
;   ===> Get matching MICRO for this day
    OK_MC= WHERE(FA_MC.DATE_START EQ ADATE,COUNT_MC)
    IF COUNT_MC NE 1 THEN CONTINUE
    AFILE_MC = FA_MC(OK_MC).FULLNAME    
        
    OUTPRODS   = ['MICROPP','NANOPICOPP','MICROPP_PERCENTAGE','NANOPICOPP_PERCENTAGE']
    PROD_UNITS = ['PPD','PPD','PERCENT','PERCENT'] 
    SAVEFILES  = []
    
    FOR PTH = 0L, N_ELEMENTS(OUTPRODS)-1 DO SAVEFILES = [SAVEFILES,DIR_MODELS(PTH)+REPLACE(FA.FIRST_NAME,[MAP_IN,STRUPCASE('PPD-'+PP_ALG)],[MAP_OUT,OUTPRODS(PTH)+'-'+ALG])+'.SAV']                        
    MTIMES_SAVE  = GET_MTIME(SAVEFILES)
    INFILES      = [AFILE_PP,AFILE_MC]
    MTIMES_IN    = GET_MTIME(INFILES)

    IF NOT KEYWORD_SET(OVERWRITE) AND UPDATE_CHECK(INFILES=INFILES,OUTFILES=SAVEFILES) EQ 0 THEN CONTINUE
        
;   ===> Read the PP file
    DATA_PP=STRUCT_READ(AFILE_PP,STRUCT=STRUCT_PP,MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT,COUNT=COUNT) & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the CHLA file
    DATA_MC=STRUCT_READ(AFILE_MC,STRUCT=STRUCT_MC,MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT,COUNT=COUNT) & IF COUNT EQ 0 THEN CONTINUE   
    
    PRINT, 'Creating percent production data for ' + STRUCT_PP.(0).PERIOD

;   ***** LOOP THROUGH ALGORITHMS *****
    FOR NTH = 0L, N_ELEMENTS(MODELS)-1 DO BEGIN
      MODEL = MODELS[NTH]          
      IF MODEL EQ 'MARMAP' THEN BEGIN      
        STRUCT = PHYTO_PP_MARMAP(PP=DATA_PP,MICRO=DATA_MC,ERROR=ERROR, ERR_MSG=ERR_MSG, MISSING=missing,VERBOSE=verbose)
        IF ERROR EQ 1 AND STRUCT EQ [] THEN STOP
     ENDIF
        
     FOR PTH = 0L, N_ELEMENTS(SAVEFILES)-1 DO BEGIN              
       SAVEFILE = SAVEFILES(PTH)   
       POS = WHERE(TAG_NAMES(STRUCT) EQ OUTPRODS(PTH),COUNT) & IF COUNT EQ 0 THEN STOP             
       STRUCT_WRITE,STRUCT.(POS),FILE=SAVEFILE,PROD=OUTPRODS(PTH),ALG=ALG,IMAGE=STRUCT.(POS),MISSING_CODE=MISSINGS(MICRO),DATA_UNITS=UNITS(PROD_UNITS(PTH)), $
                       PERIOD=FA.PERIOD, SENSOR=FA.SENSOR, SATELLITE=FA.SATELLITE,METHOD=FA.METHOD,$
                       MASK=STRUCT_PP.MASK, COVERAGE=FA.COVERAGE, MAP=FA.MAP,INFILE=INFILES,NOTES='',ERROR=ERROR 
                      
     ENDFOR           
     GONE,STRUCT
    ENDFOR
  ENDFOR
  DONE:  
	PRINT, ROUTINE_NAME+ ' FINISHED'
END; END OF PROGRAM

