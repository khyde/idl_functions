; $ID:	SOOP_CPR_MAIN.PRO,	2021-04-15-17,	USER-KJWH	$

	PRO SOOP_CPR_MAIN

;+
; NAME:
;		SOOP_CPR_MAIN
;
; PURPOSE:;
;		This procedure is the MAIN program for working with the SOOP CPR data
;
; CATEGORY:
;		CATEGORY
;
; CALLING SEQUENCE:
;		NO KEYWORDS
;
; INPUTS:
;
; OPTIONAL INPUTS:
;
; KEYWORD PARAMETERS:
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			Written Mar 24, 2009 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'SOOP_CPR_MAIN'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
	
 	SL = DELIMITER(/PATH)
	DIR_PROJECTS = !S.PROJECTS
	DIR       = DIR_PROJECTS + 'SOOP' + SL
	DIR_DATA  = DIR + 'DATA' + SL
	DIR_PLOTS = DIR + 'PLOTS' + SL
	DIR_SAVE  = DIR + 'SAVE' + SL


	DO_SUBAREA_EXTRACT		= 0
	DO_SUBAREA_MAP				= 0
	DO_DATA_MERGE         = 0
	DO_PLOTS              = 1
	DO_JHARE_EXTRACT      = 1



; *******************************************************
  IF DO_DATA_MERGE GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_DATA_MERGE GE 2
    HEADER    = READALL(DIR_DATA + 'data_columns.txt')
    POLYS     = READALL(DIR_DATA + 'data_polygons.txt')
    REGIONS   = READALL(DIR_DATA + 'data_regions.txt')
    DIATOMS   = READALL(DIR_DATA + 'data_diatoms.csv')
    DINOS     = READALL(DIR_DATA + 'data_dinos.csv')
    PHAEO     = READALL(DIR_DATA + 'data_phaeo.csv')
    
    NEW = CREATE_STRUCT('YEAR','','REGION','','POLYGON','','DYEAR','','NYEAR','','PYEAR','')
    
    FOR NTH=0L, N_ELEMENTS(HEADER)-2 DO BEGIN
      NEW = CREATE_STRUCT(NEW,HEADER[NTH],0.0)
    ENDFOR      
    NEW = REPLICATE(STRUCT_2MISSINGS(NEW),N_ELEMENTS(POLYS))
    NEW.REGION = REGIONS
    NEW.POLYGON = POLYS
    DSTRUCT = NEW
    NSTRUCT = DSTRUCT
    PSTRUCT = NSTRUCT
    NTAGS = STRUPCASE(TAG_NAMES(NEW))
    DTAGS = STRUPCASE(TAG_NAMES(DIATOMS))    
    FOR NTH = 0L, N_ELEMENTS(NTAGS)-1 DO BEGIN
      OK = WHERE(DTAGS EQ NTAGS[NTH],COUNT)
      IF COUNT EQ 1 THEN DSTRUCT.(NTH) = NAN_2INFINITY(FLOAT(DIATOMS.(OK)))
    ENDFOR  
    NEW.YEAR = NUM2STR(FIX(DSTRUCT.YEAR))  
    DSTRUCT.YEAR = NUM2STR(FIX(DSTRUCT.YEAR))& NEW.DYEAR = DSTRUCT.YEAR
    
    DTAGS = STRUPCASE(TAG_NAMES(DINOS))
    NSTRUCT = NEW 
    FOR NTH = 0L, N_ELEMENTS(NTAGS)-1 DO BEGIN
      OK = WHERE(DTAGS EQ NTAGS[NTH],COUNT)
      IF COUNT EQ 1 THEN NSTRUCT.(NTH) = NAN_2INFINITY(FLOAT(DINOS.(OK)))
    ENDFOR  
    NSTRUCT.YEAR = NUM2STR(FIX(NSTRUCT.YEAR)) & NEW.NYEAR = NSTRUCT.YEAR
    
    DTAGS = STRUPCASE(TAG_NAMES(PHAEO))
    PSTRUCT = NEW 
    FOR NTH = 0L, N_ELEMENTS(NTAGS)-1 DO BEGIN
      OK = WHERE(DTAGS EQ NTAGS[NTH],COUNT)
      IF COUNT EQ 1 THEN PSTRUCT.(NTH) = NAN_2INFINITY(FLOAT(PHAEO.(OK)))
    ENDFOR  
    PSTRUCT.YEAR = NUM2STR(FIX(PSTRUCT.YEAR)) & NEW.PYEAR = PSTRUCT.YEAR
    
    STRUCT = REPLICATE(STRUCT_2MISSINGS(CREATE_STRUCT('DATE','','REGION','','POLYGON','','DIATOMS',0.0,'DINOFLAGELLATES',0.0,'PHAEOCYSTIS',0.0,'OTHER',0.0)),N_ELEMENTS(NEW)*12)
    MONTHS = MONTH_NUMBERS()
    COUNTER = 0
    FOR NTH = 0L, N_ELEMENTS(MONTHS)-1 DO BEGIN
      ADD = COUNTER + N_ELEMENTS(NEW)-1
      STRUCT(COUNTER:ADD).DATE = '!M_' + NEW.YEAR + MONTHS[NTH]
      STRUCT(COUNTER:ADD).REGION = NEW.REGION
      STRUCT(COUNTER:ADD).POLYGON = NEW.POLYGON
      OK = WHERE(TAG_NAMES(DSTRUCT)  EQ STRUPCASE(MONTH_NAMES(MONTHS[NTH],/SHORT)),COUNT) & IF COUNT GE 1 THEN STRUCT(COUNTER:ADD).DIATOMS = DSTRUCT.(OK)
      OK = WHERE(TAG_NAMES(NSTRUCT) EQ STRUPCASE(MONTH_NAMES(MONTHS[NTH],/SHORT)),COUNT) & IF COUNT GE 1 THEN STRUCT(COUNTER:ADD).DINOFLAGELLATES = NSTRUCT.(OK)
      OK = WHERE(TAG_NAMES(PSTRUCT)  EQ STRUPCASE(MONTH_NAMES(MONTHS[NTH],/SHORT)),COUNT) & IF COUNT GE 1 THEN STRUCT(COUNTER:ADD).PHAEOCYSTIS = PSTRUCT.(OK) 
      COUNTER = COUNTER + N_ELEMENTS(NEW)
    ENDFOR
    
    OK = WHERE(STRUCT.DIATOMS NE MISSINGS(0.0) AND STRUCT.DINOFLAGELLATES NE MISSINGS(0.0) AND STRUCT.PHAEOCYSTIS NE MISSINGS(0.0))
    STRUCT[OK].OTHER = 1.0 - STRUCT[OK].DIATOMS - STRUCT[OK].DINOFLAGELLATES - STRUCT[OK].PHAEOCYSTIS
    SAVE, FILENAME=DIR_SAVE + 'CPR_SOOP-PHYTOPLANKTON_PERCENT_COMPOSITION.SAVE',STRUCT,/COMPRESS
    STRUCT_2CSV,DIR_SAVE + 'CPR_SOOP-PHYTOPLANKTON_PERCENT_COMPOSITION.CSV',STRUCT
    
stop

  ENDIF   ; DO_DATA_MERGE

; *******************************************************
  IF DO_PLOTS GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_PLOTS GE 2
    
    CPR_CI = READALL(DIR_DATA + 'CPR_COLOR_INDEX.CSV')
    CPR_DD = READALL(DIR_DATA + 'CPR_DIATOMS_DINOFLAGELLATES.CSV')
    ESR_CH = READALL(!S.DATASETS+'OC-SEA_AQU-9_4-NEC'+SL+'TS_SUBAREAS'+SL+'CHL_ANOMALY_FOR_PLANKTON_POSTER.CSV')
    ESR_PP = READALL(!S.DATASETS+'OC-SEA_AQU-9_4-NEC'+SL+'TS_SUBAREAS'+SL+'PP_ANOMALY_FOR_PLANKTON_POSTER.CSV')  
    
    CYEAR = CPR_CI[WHERE(CPR_CI.SUBAREA EQ 'GOM' AND CPR_CI.VALUE NE '')].YEAR
    DIAYR = CPR_DD[WHERE(CPR_DD.SUBAREA EQ 'GOM' AND CPR_DD.VALUE NE '' AND CPR_DD.SERIES EQ 'CPR Diatom')].YEAR
    DINYR = CPR_DD[WHERE(CPR_DD.SUBAREA EQ 'GOM' AND CPR_DD.VALUE NE '' AND CPR_DD.SERIES EQ 'CPR Dinoflagellates')].YEAR
    CHLPR = ESR_CH[WHERE(ESR_CH.SUBAREA_CODE EQ '6' AND ESR_CH.PERIOD_CODE EQ 'A')].PERIOD 
    PPPR  = ESR_CH[WHERE(ESR_CH.SUBAREA_CODE EQ '6' AND ESR_CH.PERIOD_CODE EQ 'A')].PERIOD
    
    CI   = FLOAT(CPR_CI[WHERE(CPR_CI.SUBAREA EQ 'GOM' AND CPR_CI.VALUE NE '')].VALUE)
    DIA  = FLOAT(CPR_DD[WHERE(CPR_DD.SUBAREA EQ 'GOM' AND CPR_DD.VALUE NE '' AND CPR_DD.SERIES EQ 'CPR Diatom')].VALUE)
    DINO = FLOAT(CPR_DD[WHERE(CPR_DD.SUBAREA EQ 'GOM' AND CPR_DD.VALUE NE '' AND CPR_DD.SERIES EQ 'CPR Dinoflagellates')].VALUE)
    CHL  = FLOAT(ESR_CH[WHERE(ESR_CH.SUBAREA_CODE EQ '6' AND ESR_CH.PERIOD_CODE EQ 'A')].MEAN_CHLOR_A_OC)
    PP   = FLOAT(ESR_PP[WHERE(ESR_PP.SUBAREA_CODE EQ '6' AND ESR_PP.PERIOD_CODE EQ 'A')].MEAN_PPD_VGPM2)
    
    
     
    RGB = CPAL_READ('PAL_SW3',PALLIST=PALLIST)
    AX = DATE_AXIS([19980101,20100101],/YEAR, STEP_SIZE=3)
    W1 = WINDOW(DIMENSIONS=[873,300])
    CP = PLOT(AX.JD,[0.8,1.2],YTITLE=UNITS('CHLOROPHYLL'),AXIS_STYLE=1,XSTYLE=1,XRANGE=AX.JD,YRANGE=[0.75,1.25],FONT_SIZE=14,XMAJOR=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,YMAJOR=5,YMINOR=3,/NODATA,/CURRENT)
    C1 = PLOT(PERIOD_2JD(CHLPR),CHL,/CURRENT,AXIS_STYLE=1,XSTYLE=1,XRANGE=AX.JD,YRANGE=[0.75,1.25],FONT_SIZE=14,XMAJOR=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,YMAJOR=5,YMINOR=3,COLOR='LAWN_GREEN',THICK=5,NAME='Satellite Chlorophyll')
    C2 = PLOT(PERIOD_2JD(PPPR), PP, /CURRENT,AXIS_STYLE=0,XSTYLE=1,XRANGE=AX.JD,YRANGE=[0.4,0.8],  FONT_SIZE=14,XMAJOR=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,YMAJOR=5,YMINOR=3,COLOR='RED',       THICK=5,NAME='Satellite Chlorophyll')
    ;C2 = PLOT(DATE_2JD(CYEAR),CI,   /CURRENT,AXIS_STYLE=0,XSTYLE=1,XRANGE=AX.JD,FONT_SIZE=14,XMAJOR=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,YMAJOR=5,YMINOR=3,COLOR='AQUA', YRANGE=[-3,3], THICK=5,NAME='CPR Color Index',LAYOUT=[1,2,1])
   ; D3 = PLOT(AX.JD,         [0,0],/OVERPLOT,COLOR='GREY',        THICK=2,LINESTYLE=2)
    A2 = AXIS('Y',TARGET=C2,LOCATION=[MAX(AX.JD),0,0],TEXTPOS=1,TICKDIR=1,TITLE=UNITS('PRIMARY_PRODUCTION'),MAJOR=5,MINOR=3,TICKFONT_SIZE=14)
    A3 = AXIS('X',TARGET=CP,LOCATION=[MIN(AX.JD),1.4,0],MAJOR=AX.TICKS,MINOR=0,TICKDIR=1,TICKNAME=REPLICATE('',AX.TICKS))
    
    AX = DATE_AXIS([19750101,20100101],/YEAR, STEP_SIZE=5)
    W2 = WINDOW(DIMENSIONS=[873,300])
    D  = PLOT(AX.JD,[-3,3],YTITLE='Abundance Anomaly',XRANGE=AX.JD,YRANGE=[-3,3],FONT_SIZE=14,XMAJOR=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,XMINOR=0,YMAJOR=5,YMINOR=3,/NODATA,/CURRENT)
    D1 = PLOT(DATE_2JD(DIAYR),DIA, /OVERPLOT,COLOR='DARK_BLUE',   THICK=5,NAME='Diatoms')
    D2 = PLOT(DATE_2JD(DINYR),DINO,/OVERPLOT,COLOR='ORANGE_RED',  THICK=5,NAME='Dinoflagellates')
    D3 = PLOT(DATE_2JD(CYEAR),DI,  /OVERPLOT,COLOR='AQUA',        THICK=5,NAME='Color Index')      
    D3 = PLOT(AX.JD,         [0,0],/OVERPLOT,COLOR='GREY',        THICK=2,LINESTYLE=2)
    L = LEGEND(TARGET=[D1,D2,D3],POSITION=[635,80],/DEVICE)
    
    W1.SAVE,DIR_PLOTS + 'SAT_TIMESERIES.PNG'
    W2.SAVE,DIR_PLOTS + 'CPR_TIMESERIES.PNG'
    
    W1.CLOSE
    W2.CLOSE    
   

STOP
  ENDIF   ; DO_PLOTS



;	*******************************************************
	IF DO_SUBAREA_EXTRACT GE 1 THEN BEGIN
;	*******************************************************
		OVERWRITE = DO_SUBAREA_EXTRACT GE 2


	ENDIF		; DO_SUBAREA_EXTRACT



;	*******************************************************
	IF DO_SUBAREA_MAP GE 1 THEN BEGIN
;	*******************************************************
		OVERWRITE = DO_SUBAREA_MAP GE 2

		POLYGONS = ['gb_slp','gb_sof','gb_cen','gb_nof','gb_nec','gom_mb','gom_wb','gom_cl','gom_cb','gom_ss','mab_is','mab_os','mab_isl','mab_osl']

		DIR_PLOTS  = 'D:\PROJECTS\SOOP\PLOTS\'
		DIR_IMAGES = 'D:\IDL\IMAGES\'
		LANDMASK   = 'D:\IDL\IMAGES\MASK_LAND-NEC-PXY_1024_1024.PNG'

		LANDMASK = READ_LANDMASK(MAP='NEC',/STRUCT)
		IMG    = READ_LANDMASK(MAP='NEC')
   	ZWIN, IMG
	  OLDDEVICE= !D.NAME
		MAP_NEC
   	PAL_36,R,G,B

; Georges Bank Polygons
		gb_slp_lon=[ -72.3, -70.4, -69.8, -69.5, -71.8, -72.3]
		gb_slp_lat=[  39.1,  40.1,  40.0,  40.0,  38.8,  39.1]
		IM = MAP_DEG2IMAGE(IMG,gb_slp_lon,gb_slp_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=5, /DEVICE
		gb_sof_lon=[ -70.4, -69.8, -69.5, -68.1597, -68.5769, -70.4]
		gb_sof_lat=[  40.1,  40.0,  40.0,  40.5892,  40.8806,  40.1]
		IM = MAP_DEG2IMAGE(IMG,gb_sof_lon,gb_sof_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=6, /DEVICE
		gb_cen_lon=[ -68.1597, -68.5769, -67.3208, -67.2, -66.7, -68.1597]
		gb_cen_lat=[  40.5892,  40.8806,  41.4414,  41.7,  41.2,  40.5892]
		IM = MAP_DEG2IMAGE(IMG,gb_cen_lon,gb_cen_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=7, /DEVICE
		gb_nof_lon=[ -67.2, -66.7372, -66.4109, -66.0846, -65.8670, -65.7582, -65.9540, -66.7, -67.2]
		gb_nof_lat=[  41.7,  42.2149,  42.2733,  42.2149,  42.0836,  41.8793,  41.5437,  41.2,  41.7]
		IM = MAP_DEG2IMAGE(IMG,gb_nof_lon,gb_nof_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=8, /DEVICE
		gb_nec_lon=[ -66.7372, -66.4109, -66.0846, -65.8670, -65.7582, -65.9540, -65.3584, -65.5400, -65.7915, -66.0080, -66.3922, -66.7372]
		gb_nec_lat=[  42.2149,  42.2733,  42.2149,  42.0836,  41.8793,  41.5437,  41.8295,  42.1950,  42.3105,  42.4933,  42.5798,  42.2149]
		IM = MAP_DEG2IMAGE(IMG,gb_nec_lon,gb_nec_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=9, /DEVICE

;	Gulf of Maine Polygons
		gom_mb_lon=[ -70.8548, -70.1359, -70.1083, -70.8410, -70.8548]
		gom_mb_lat=[  43.0294,  43.1294,  42.3136,  42.1952,  43.0294]
		IM = MAP_DEG2IMAGE(IMG,gom_mb_lon,gom_mb_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=10, /DEVICE
		gom_wb_lon=[ -70.1359, -69.2926, -69.2788, -70.1083, -70.1359]
		gom_wb_lat=[  43.1294,  43.1996,  42.4320,  42.3136,  43.1294]
		IM = MAP_DEG2IMAGE(IMG,gom_wb_lon,gom_wb_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=11, /DEVICE
		gom_cl_lon=[ -69.2926, -68.0346, -68.0622, -69.2788, -69.2926]
		gom_cl_lat=[  43.1996,  43.2873,  42.5943,  42.4320,  43.1996]
		IM = MAP_DEG2IMAGE(IMG,gom_cl_lon,gom_cl_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=12, /DEVICE
		gom_cb_lon=[ -68.0346, -67.0668, -67.0668, -68.0622, -68.0346]
		gom_cb_lat=[  43.2873,  43.2697,  42.7171,  42.5943,  43.2873]
		IM = MAP_DEG2IMAGE(IMG,gom_cb_lon,gom_cb_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=13, /DEVICE
		gom_ss_lon=[ -67.0668, -65.4770, -65.4631, -67.0668, -67.0668]
		gom_ss_lat=[  43.2697,  43.4232,  42.9189,  42.7171,  43.2697]
		IM = MAP_DEG2IMAGE(IMG,gom_ss_lon,gom_ss_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=14, /DEVICE

;	Mid-Atlantic Bight
		mab_is_lon =[-74.3374, -73.5760, -72.6084, -73.4142, -74.3374]
		mab_is_lat =[ 40.5262,  39.6578,  40.4825,  40.9564,  40.5262]
		IM = MAP_DEG2IMAGE(IMG,mab_is_lon,mab_is_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=15, /DEVICE
		mab_os_lon =[-73.5760, -72.9486, -71.7107, -72.6084, -73.5760]
		mab_os_lat =[ 39.6578,  38.8869,  39.8882,  40.4825,  39.6578]
		IM = MAP_DEG2IMAGE(IMG,mab_os_lon,mab_os_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=16, /DEVICE
		mab_isl_lon=[-72.9486, -71.7921, -70.3923, -71.7107, -72.9486]
		mab_isl_lat=[ 38.8869,  37.5066,  39.2039,  39.8882,  38.8869]
		IM = MAP_DEG2IMAGE(IMG,mab_isl_lon,mab_isl_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=17, /DEVICE
		mab_osl_lon=[-71.7921, -70.4263, -68.8364, -70.3923, -71.7921]
		mab_osl_lat=[ 37.5066,  35.8889,  38.3450,  39.2039,  37.5066]
		IM = MAP_DEG2IMAGE(IMG,mab_osl_lon,mab_osl_lat, X=x, Y=y,AROUND=0) & POLYFILL, X, Y, COLOR=18, /DEVICE

		IM_SUBS = tvrd()		
		IM=MAP_ADD_BATHY(IMG,BATHS=[50,200],COLOR=34,MAP='NEC')
		TV,IM
		IM_BATH=TVRD()
		IM=MAP_ADD_BATHY_LABEL(IMG, MAP='NEC', BATHS=[50,200],COLOR=22)
		TV,IM
		IM_LABEL=TVRD()
		ZWIN

    OK_IMAGE = WHERE(IMG NE 0)
    IM_SUBS(OK_IMAGE) = IMG(OK_IMAGE)
		MASK = IM_SUBS
		IMG(LANDMASK.OCEAN) = 36
		OK = WHERE(IM_SUBS NE 0)
		IMG[OK] = IM_SUBS[OK]
		OK = WHERE(IM_BATH NE 0)
		IMG[OK] = IM_BATH[OK]
		OK = WHERE(IM_LABEL NE 0)
		IMG[OK] = 0

		IMG(LANDMASK.LAND)  = 32
		IMG(LANDMASK.COAST) = 0

		OK = WHERE(MASK NE 0)
		IM_SUBS[OK] = MASK[OK]

		EDITFILE = DIR_IMAGES	+ 'MASK_SUBAREA-NEC-PXY_1024_1024-SOOP_POLYGONS-TO_BE_EDITED.PNG' & WRITE_PNG, EDITFILE, IM_SUBS, R,G,B
		MASKFILE = DIR_IMAGES + 'MASK_SUBAREA-NEC-PXY_1024_1024-SOOP_POLYGONS.PNG'
		PNGFILE  = DIR_IMAGES	+ 'MASK_SUBAREA-NEC-PXY_1024_1024-SOOP_POLYGONS-DISPLAY.PNG' & WRITE_PNG, PNGFILE, IMG, R,G,B
  	CSVFILE  = DIR_IMAGES	+ 'MASK_SUBAREA-NEC-PXY_1024_1024-SOOP_POLYGONS.CSV'
  	SAVEFILE = DIR_IMAGES + 'MASK_SUBAREA-NEC-PXY_1024_1024-SOOP_POLYGONS.SAVE'


		STRUCT1=CREATE_STRUCT('SUBAREA_CODE','','SUBAREA_NAME','','NICKNAME','')
		STRUCT1=REPLICATE(STRUCT1,3)
		STRUCT1[0].SUBAREA_CODE =0 	& STRUCT1[0].SUBAREA_NAME = 'OCEAN' 		& STRUCT1[0].NICKNAME='OCEAN'
		STRUCT1[1].SUBAREA_CODE =1 	& STRUCT1[1].SUBAREA_NAME = 'COAST' 		& STRUCT1[1].NICKNAME='COAST'
		STRUCT1(2).SUBAREA_CODE =2 	& STRUCT1(2).SUBAREA_NAME = 'LAND'  		& STRUCT1(2).NICKNAME='LAND'

		STRUCT=CREATE_STRUCT('SUBAREA_CODE','','SUBAREA_NAME','','NICKNAME','')
		STRUCT=REPLICATE(STRUCT,N_ELEMENTS(POLYGONS))
		STRUCT.SUBAREA_CODE = INDGEN(N_ELEMENTS(POLYGONS))+5
		STRUCT.SUBAREA_NAME = STRUPCASE(POLYGONS)
		STRUCT.NICKNAME     = STRUPCASE(POLYGONS)

		CSV = STRUCT_CONCAT(STRUCT1,STRUCT)

		INFILE=MASKFILE
		NOTES='MASK_SUBAREA'

;			===> Write the Struct to a csv
		STRUCT_2CSV,CSVFILE,CSV
		OK=WHERE(CSV.SUBAREA_CODE NE MISSINGS(CSV.SUBAREA_CODE))
		SUBAREA_CODE= CSV[OK].SUBAREA_CODE
		SUBAREA_NAME= CSV[OK].SUBAREA_NAME
		DATA = READ_PNG(MASKFILE) 

  	STRUCT_SD_WRITE,SAVEFILE, IMAGE=DATA, PROD=PROD,  MAP=MAP, $
      MISSING_CODE=missing_code, MISSING_NAME=missing_name, $
      SUBAREA_CODE=SUBAREA_CODE,SUBAREA_NAME=subarea_name,$
      SCALING='LINEAR',  INTERCEPT=0.0,  SLOPE=1.0,TRANSFORMATION=TRANSFORMATION,$
      DATA_UNITS='',PERIOD=PERIOD, $
      INFILE=INFILE,$
      NOTES='MASK_SUBAREA', OVERWRITE=OVERWRITE, ERROR=ERROR

	ENDIF		; DO_SUBAREA_MAP
	
; *******************************************************
  IF DO_JHARE_EXTRACT GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_JHARE_EXTRACT GE 2
    	
    SFILES = FILE_SEARCH(!S.DATASETS + 'SST-AVHRR-4'     + SL + 'NEC' + SL + 'SAVE' + SL + 'SST' + SL + '*SST*.SAVE')
    CFILES = FILE_SEARCH(!S.DATASETS + 'OC-SEAWIFS-MLAC' + SL + 'NEC' + SL + 'SAVE' + SL + 'CHLOR_A-OC4' + SL + '*CHLOR_A-OC4*.SAVE')	
    
    FILES = [SFILES,CFILES]
    
    FOR N=0, N_ELEMENTS(FILES)-1 DO BEGIN
      FC = PARSE_IT(FILES(N))
      PNGFILE = REPLACE(FC.DIR,'SAVE','BROWSE')+FC.NAME+'.PNG'
      FP = PARSE_IT(PNGFILE)
      IF FILE_TEST(FP.DIR) EQ 0 THEN FILE_MKDIR, FP.DIR
      IF FILE_TEST(PNGFILE) EQ 1 AND GET_MTIME(PNGFILE) GT GET_MTIME(FILES(N)) THEN CONTINUE
      DATA = STRUCT_SD_READ(FILES(N),STRUCT=STRUCT)        
      NIMAGE = STRUCT_SD_2IMAGE_NG(STRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SPECIAL_SCALE,/ADD_COLORBAR,PAL=PAL,/ADDDATE,/ADD_BATHY,BATHS=100,BATHY_COLOR=255,/BUFFER)
      PRINT, 'Writing file: ' + PNGFILE
      NIMAGE.SAVE,PNGFILE,RESOLUTION=100,BIT_DEPTH=2
      NIMAGE.CLOSE
    ENDFOR 
    
    FP = PARSE_IT(SFILES)
    DIR_STATS = REPLACE(FP[0].DIR,'SAVE','STATS')
    IF FILE_TEST(DIR_STATS,/DIR) EQ 0 THEN FILE_MKDIR,DIR_STATS
    DATE_RANGE = [20081020,20081027]
    SD_STATS_ALL,SFILES,PROD='SST',STAT_TYPE='MEAN',DATE_RANGE=DATE_RANGE,PERIOD_CODE_IN=FP[0].PERIOD_CODE,PERIOD_CODE_OUT='DD',DIR_STATS=DIR_STATS    
  
    FP = PARSE_IT(CFILES)
    DIR_STATS = REPLACE(FP[0].DIR,'SAVE','STATS')
    IF FILE_TEST(DIR_STATS,/DIR) EQ 0 THEN FILE_MKDIR,DIR_STATS
    DATE_RANGE = [20081020,20081027]
    SD_STATS_ALL,CFILES,PROD='CHLOR_A',STAT_TYPE='MEAN',DATE_RANGE=DATE_RANGE,PERIOD_CODE_IN=FP[0].PERIOD_CODE,PERIOD_CODE_OUT='DD',DIR_STATS=DIR_STATS    
  
    SFILES = FILE_SEARCH(!S.DATASETS + 'SST-AVHRR-4'     + SL + 'NEC' + SL + 'STATS' + SL + 'SST' + SL + 'DD_*SST*MEAN.SAVE')
    CFILES = FILE_SEARCH(!S.DATASETS + 'OC-SEAWIFS-MLAC' + SL + 'NEC' + SL + 'STATS' + SL + 'CHLOR_A-OC4' + SL + 'DD_*CHLOR_A-OC4*MEAN.SAVE') 
    
    FILES = [SFILES,CFILES]
    
    FOR N=0, N_ELEMENTS(FILES)-1 DO BEGIN
      FC = PARSE_IT(FILES(N))
      CSVFILE = REPLACE(FC.DIR,'STATS','EXTRACTS')+FC.NAME+'.CSV'
      FP = PARSE_IT(CSVFILE,/ALL)
      IF FILE_TEST(FP.DIR) EQ 0 THEN FILE_MKDIR, FP.DIR
      IF FILE_TEST(CSVFILE) EQ 0 OR GET_MTIME(CSVFILE) LT GET_MTIME(FILES(N)) THEN DATA = MAKE_DATA_LAT_LON(FILES(N), PROD=FP.PROD,/MAKE_CSV,CSVFILE=CSVFILE,OVERWRITE=OVERWRITE)
      
      PNGFILE = REPLACE(FC.DIR,'STATS','STATS_BROWSE')+FC.NAME+'.PNG'
      FP = PARSE_IT(PNGFILE)
      IF FILE_TEST(FP.DIR) EQ 0 THEN FILE_MKDIR, FP.DIR
      IF FILE_TEST(PNGFILE) EQ 1 AND GET_MTIME(PNGFILE) GT GET_MTIME(FILES(N)) THEN CONTINUE
      DATA = STRUCT_SD_READ(FILES(N),STRUCT=STRUCT)        
      NIMAGE = STRUCT_SD_2IMAGE_NG(STRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SPECIAL_SCALE,/ADD_COLORBAR,PAL=PAL,/ADDDATE,/ADD_BATHY,BATHS=100,BATHY_COLOR=255,BUFFER=0)
      T = TEXT(0.02,0.88,'October 20-27, 2008',COLOR='BLACK',FONT_SIZE=20,/NORMAL,TARGET=NIMAGE)    
      PRINT, 'Writing file: ' + PNGFILE
      NIMAGE.SAVE,PNGFILE,RESOLUTION=100,BIT_DEPTH=2
      NIMAGE.CLOSE
    ENDFOR 
	
  ENDIF ; DO_JHARE_EXTRACT

END; #####################  End of Routine ################################



