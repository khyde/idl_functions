; $ID:	SAVE_MAKE_FRONTS_DEMO.PRO,	2021-04-15-17,	USER-KJWH	$
	PRO SAVE_MAKE_FRONTS_DEMO
;+
; NAME: SAVE_MAKE_FRONTS_DEMO
; 
; PURPOSE: A 'DEMO' ROUTINE FOR THE FRONTS_BOA ALGORITHM
; 
; INPUTS: NONE
; 
; OUTPUTS: SEE FRONTS_BOA.PRO 
; 
; MODIFIED AFTER: BOA_MAIN_20120402
; MODIFICATION HISTORY:
;			WRITTEN FEB 3,2011  J.O'REILLY
;			MAR 14, 2012 - JOR:     Minor edits, Uppercase
;			MAR 16, 2012 - JOR,IMB: Copied from BOA_DEMO and added SWITCHES 
;			MAR 29, 2012 - JOR,IMB: Added switch: DO_STATS_HDF	 
;     MAR 30, 2012 - JOR,IMB: Added switches: DO_BOA_CHLOR_A and DO_BOA_SST      
;     NOV 10, 2015 - KJWH:    Renamed to SAVE_MAKE_BOASNRA_DEMO
;                             Updated SWITCHES
;                             Added DO_LONLATS step to illustrate the differences in the pixel sizes
;                             Added .nc and mapped file examples
;     DEC 31, 2015 - KJWH:    Renamed to SAVE_MAKE_FRONTS_DEMO  
;     MAR 11, 2016 - KJWH:    Cleaned up and added documentation     
;     MAY 12, 2016 - KJWH:    Added FRONTS_SUBSET block to run a handful of files and create pngs       
;     JUN 13. 2016 - KJWH:    Fixed bug in FRONTS_SUBSET regarding !S.SEADAS and !S.MODIS directories
;     JUN 20, 2016 - KJWH:    Updated file searching in FRONTS_SUBSET to hopefully find better test images
;     AUG 12, 2016 - KJWH:    Added DO_FRONTS_NWA block
;     AUG 19, 2016 - KJWH:    Changed !S.MASTER to !S.MAPINFO for map specific files
;                             Changed DO_FRONTS_SUBSET to DO_FRONTS_SAMPLE then added a new block - DO_FRONTS_SUBSET to use a MUR based SUBSET map
;     AUG 22, 2016 - KJWH:    Added DO_FRONTS_STATS block     
;     AUG 23, 2016 - KJWH:    Updated !S.MAPSINFO files                   
;-
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	ROUTINE_NAME = 'SAVE_MAKE_FRONTS_DEMO'

  DO_BOA_GEQ          = ''
  DO_BOA_CHLOR_A_NC   = ''
  DO_WHERE_NOISE_TEST = ''
  DO_FRONTS_TEST      = ''
  DO_CHL_TEST         = ''
  DO_FRONTS_L3B       = ''
  DO_FRONTS_NWA       = ''
  DO_VIIRS_TEST       = 'Y'
  DO_FRONTS_SAMPLE    = ''
  DO_FRONTS_SUBSET    = ''
  DO_FRONTS_STATS     = ''
  DO_BOA_MAPPED       = ''
  DO_LONLATS          = ''   ; Demo of the lons and lats in a file
  
  SL = PATH_SEP()
  DIR_DEMO = !S.DEMO + ROUTINE_NAME + SL & DIR_TEST, DIR_DEMO  

;**************************************
  IF KEY(DO_BOA_GEQ) THEN BEGIN
;**************************************
    STEP = DO_BOA_GEQ
    SWITCHES,STEP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
    
    PROD='CHLOR_A'
    MAP_OUT = 'NEC' ; To subset the GEQ map
    MASK = READ_LANDMASK(MAP_OUT,/STRUCT)
    LAND = MASK.LAND
    
    MAPS_SET,MAP_OUT
    S=MAPS_LL_BOX()
    ZWIN
    LONMIN = S.LONMIN
    LONMAX = S.LONMAX
    LATMIN = S.LATMIN
    LATMAX = S.LATMAX
    
    GEQLL = MAPS_2LONLAT('GEQ')
    GLON = GEQLL.LON(*,0)
    GLAT = GEQLL.LAT(0,*)
    OK = WHERE_ARE(GLON, LONMIN,COUNT_LONMIN) & IF COUNT_LONMIN GE 1 THEN SUB_LONMIN = FIRST[OK]
    OK = WHERE_ARE(GLON, LONMAX,COUNT_LONMAX) & IF COUNT_LONMAX GE 1 THEN SUB_LONMAX = FIRST[OK]
    OK = WHERE_ARE(GLAT, LATMIN,COUNT_LATMIN) & IF COUNT_LATMIN GE 1 THEN SUB_LATMIN = FIRST[OK]
    OK = WHERE_ARE(GLAT, LATMAX,COUNT_LATMAX) & IF COUNT_LATMAX GE 1 THEN SUB_LATMAX = FIRST[OK]

    GEQAREA = MAPS_PIXAREA('GEQ',WIDTHS=WIDTH,HEIGHTS=HEIGHT)
    WIDTH = WIDTH(SUB_LONMIN:SUB_LONMAX,SUB_LATMIN:SUB_LATMAX)
    HEIGHT = HEIGHT(SUB_LONMIN:SUB_LONMAX,SUB_LATMIN:SUB_LATMAX)
    
    FILES = !S.FILES + ['S2006089.L3b_DAY_OC','S2006089.L3b_DAY_CHL.nc','A2006089.L3b_DAY_OC','A2006089.L3b_DAY_CHL.nc']
    MAPS_IN =          ['L3B1',               'L3B9',                   'L3B1',               'L3B4']
    TITLES =           ['SeaWiFS 1KM',        'SeaWiFS 9KM',            'MODIS 1KM',          'MODIS 4KM']

;W = WINDOW(DIMENSIONS=[1200,600])

    FOR N=0, N_ELEMENTS(FILES)-1 DO BEGIN
      D = READ_NC(FILES(N),PROD=['chlor_a'])
      CHL = D.SD.CHLOR_A.DATA
      BINS = D.SD.CHLOR_A.BINS
      GEQ = MAPS_REMAP(CHL,BINS=BINS,MAP_IN=MAPS_IN(N),MAP_OUT='GEQ',INIT=INIT)  ; Uses the latest verion MAPS_REMAP 
      ARRAY = GEQ(SUB_LONMIN:SUB_LONMAX,SUB_LATMIN:SUB_LATMAX) 
      
      BOA = FRONTS_BOA(ARRAY, LOG=1, EPSILON=ALOG(2.0), WIDTH=WIDTH, HEIGHT=HEIGHT, AZIMUTH=1)
      STRUCT_WRITE, BOA, FILE=SAVEFILE, INDATA=ARRAY, PIXEL_WIDTH=WIDTH, PIXEL_HEIGHT=HEIGHT, PROD=PROD, LANDMASK=LAND, INFILE=FILES(N), NOTES=NOTES ; ===> SAVE THE STRUCTURE
      
      FILES=FILE_SEARCH(DIR + 'BOA/SAVE/' + PROD + SL + FP[0].PERIOD + '*LONLAT*BOASNR.SAV')
      PNGS_MAKE_FRONTS, FILES, DIR_OUT=DIR, BUFFER=0, DELAY=15, OVERWRITE=OVERWRITE
      
    ENDFOR
    
  ENDIF ; DO_BOA_GEQ
 

;**************************************
  IF KEY(DO_BOA_CHLOR_A_NC) THEN BEGIN
;**************************************
    STEP = DO_BOA_CHLOR_A_NC
    SWITCHES,STEP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
  
    PROD='CHLOR_A'
    FILES = FILE_SEARCH(!S.FILES+'A2007129*L2_LAC*')   ; New MODIS nc
    DIR_AREAS = DIR + 'MAP_AREAS' + SL
    FP = PARSE_IT(FILES)
   
    SAVE_MAKE_FRONTS,  FILES[0], DIR_OUT=DIR, DIR_AREAS=DIR_AREAS, PROD=PROD, OVERWRITE=OVERWRITE
    
    FILES=FILE_SEARCH(DIR + 'BOA/SAVE/' + PROD + SL + FP[0].PERIOD + '*LONLAT*BOASNR.SAV')
    PNGS_MAKE_FRONTS, FILES, DIR_OUT=DIR, BUFFER=0, DELAY=15, OVERWRITE=OVERWRITE
    
  STOP
  ENDIF;IF KEY(STEP) THEN BEGIN
;||||||||||||||||||||||||||||

;**************************************
  IF KEY(DO_WHERE_NOISE_TEST) THEN BEGIN
;**************************************
    SWITCH_STEP = 'DO_WHERE_NOISE_TEST'
    STEP = DO_WHERE_NOISE_TEST
    SWITCHES,STEP,STOPP=S
  
    BUFFER = 1
    PROD='CHLOR_A'
    LAND_COLOR = 252
    FILE = !S.FILES + 'S1998090165151.L2_MLAC_OC.SAV'
    ARR = STRUCT_READ(FILE,STRUCT=SD)
    STR = SIZEXYZ(ARR)
  
  ; ===> GET LANDMASK
    LANDMASK = SD.LANDMASK & OK_LAND = WHERE(LANDMASK EQ 1,/NULL)
    
    BOXES = [3,4,5,6,7,8,9,10,11]
    W = WINDOW(DIMENSIONS=[STR.PX/2,STR.PY/2])
    FOR N=0, N_ELEMENTS(BOXES)-1 DO BEGIN
      NARR = ARR
      OK_NOISE = WHERE_NOISE(ARR,WIDTH=BOXES(N),COUNT)
      NARR(OK_NOISE) = MISSINGS(ARR)
      NR = PRODS_2BYTE(NARR, PROD=PROD)
      NR(OK_LAND) = LAND_COLOR
      NR = NR(0:STR.PX-1,(STR.PY-1)/2:-1) ; SUBSET TO A SMALLER IMAGE
      IM = IMAGE(NR, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[3,3,N+1],TITLE='Width='+ROUNDS(BOXES(N)) + '!C# Removed=' + ROUNDS(COUNT)) 
    ENDFOR

    W.SAVE, DIR_DEMO + SWITCH_STEP + '.PNG'
    IF STOPP THEN STOP ELSE WAIT, 15
    W.CLOSE
  ENDIF ; DO_WHERE_NOISE_TEST

;**************************************
  IF KEY(DO_FRONTS_TEST) THEN BEGIN
;**************************************
    SWITCH_NAME = 'DO_FRONTS_TEST'
    STEP = DO_FRONTS_TEST
    SWITCHES,STEP,STOPP=STOPP
    
    BUFFER = 0
    PROD='CHLOR_A'
    LAND_COLOR = 252
    FILE = !S.FILES + 'S1998090165151.L2_MLAC_OC.SAV'
    ARR = STRUCT_READ(FILE,STRUCT=SD)
    STR = SIZEXYZ(ARR)
    MASK = BYTARR(STR.PX,STR.PY)              ; Make a blank byte array for the mask
    
    ; ===> GET LANDMASK
    LANDMASK = SD.LANDMASK & OK_LAND = WHERE(LANDMASK EQ 1,/NULL)    
    
    MISSING_INF = !VALUES.F_INFINITY
    MISSING_NAN = !VALUES.F_NAN
    ;===> MAKE KERNEL_X FOR CONVOL
    KERNEL_X = FLTARR(3,3)
    KERNEL_X[0,[0,2]] = -1.;
    KERNEL_X[2,[0,2]] =  1.;
    KERNEL_X[0,1] = -2.;
    KERNEL_X[2,1] =  2.;
    ;===> MAKE KERNEL_Y FOR CONVOL
    KERNEL_Y= ROTATE(TRANSPOSE(KERNEL_X),7)
     
    ; Set up variations
    DO_STEP       = [0,1,1,1]
    FILTER_BEFORE = [0,0,1,1]
    MED_FIL       = [0,1,1,1]
    FILTER_AFTER  = [1,1,1,0]
    NAMES = ['FILTER_ONLY','FILL_FILTER','FILTER_FILL_FILTER','FILTER_FILL']  
  
    FOR N=0, N_ELEMENTS(NAMES)-1 DO BEGIN
      IF DO_STEP(N) EQ 0 THEN CONTINUE
      W = WINDOW(DIMENSIONS=[STR.PX/2,STR.PY/4],BUFFER=BUFFER)
    
      ; ===> MEDIAN FILTER
      IF KEY(FILTER_BEFORE(N)) THEN BARR = EXP(MF3_1D_5PT(ALOG(ARR), EPSILON=ALOG(2.0), ITER=ITER, FILTERED=FILTERED, P5_MAX=P5_MAX, P5_MIN=P5_MIN, DIF_8=DIF_8, ERROR=ERROR)) ELSE BARR = ARR
      
      ; ===> MEDIAN FILL
      IF KEY(MED_FIL(N))       THEN MARR = MEDIAN_FILL(BARR,COUNT,BOX=3,FRACT_GOOD=0.67) ELSE MARR = BARR
            
      ; ===> SECOND MEDIAN FILTER  
      IF KEY(FILTER_AFTER(N))  THEN FARR = MF3_1D_5PT(ALOG(MARR), EPSILON=ALOG(2.0), ITER=ITER, FILTERED=FILTERED, P5_MAX=P5_MAX, P5_MIN=P5_MIN, DIF_8=DIF_8, ERROR=ERROR) ELSE FARR = ALOG(MARR) 
    
      ; ===> MAKE MASK
      OK_MISSING = WHERE(FINITE(FARR) NE 1,/NULL,COUNT_MISSING)       ; Find where array equals INFINITY
      IF COUNT_MISSING GE 1 THEN BEGIN
        MARR(OK_MISSING) = MISSING_NAN                                ; Change INFINITY to NAN
        MASK(OK_MISSING)  = 1                                         ; Change corresponding pixels in the mask to 1
        ARR_OF_ONES = REPLICATE(1B, 3, 3)                             ; Create dialation array
        DMASK = DILATE(MASK, ARR_OF_ONES, /PRESERVE_TYPE)             ; Dilate the mask to remove artifacts at the boundaries of missing data (i.e. clouds)
      ENDIF
       
    ; ===> EDGE DETECTION USING CONVOL
      GRAD_X = CONVOL(FARR, KERNEL_X, INVALID=MISSING_INF, MISSING=MISSING_INF, /NORMALIZE, /EDGE_TRUNCATE, /NAN) & GRAD_X = GRAD_X/SD.WIDTH
      GRAD_Y = CONVOL(FARR, KERNEL_Y, INVALID=MISSING_INF, MISSING=MISSING_INF, /NORMALIZE, /EDGE_TRUNCATE, /NAN) & GRAD_Y = GRAD_Y/SD.HEIGHT
      GRAD_MAG = SQRT(GRAD_X^2 + GRAD_Y^2)

    ; ===> APPLY THE MASK TO THE OUTPUT DATA AND CHANGE NAN BACK TO INFINITY
      OK_MASK=WHERE(MASK EQ 1,COUNT_MASK,COMPLEMENT=GOOD,NCOMPLEMENT=NGOOD)
      FARR(GOOD)     = EXP(FARR(GOOD))
      GRAD_MAG(GOOD) = EXP(GRAD_MAG(GOOD)) & GRAD_MAG(OK_MASK) = MISSINGS(GRAD_MAG)
      
      AR  = PRODS_2BYTE(ARR, PROD=PROD) & AR(OK_LAND) = LAND_COLOR
      IAR = IMAGE(AR(0:STR.PX-1,(STR.PY-1)/2:-1), RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[2,2,1],TITLE='Orginal Data')
  
      MD  = PRODS_2BYTE(FARR, PROD=PROD) & MD(OK_LAND) = LAND_COLOR
      IMD = IMAGE(MD(0:STR.PX-1,(STR.PY-1)/2:-1), RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[2,2,2],TITLE='Median Filtered Data!C('+NAMES(N)+')')
  
      GM  = PRODS_2BYTE(GRAD_MAG, PROD='GRAD_MAG_RATIO') & GM(OK_LAND) = LAND_COLOR
      IGM = IMAGE(GM(0:STR.PX-1,(STR.PY-1)/2:-1), RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[2,2,3],TITLE='Grad Mag - No Dilation')
  
      OK_MASK=WHERE(DMASK EQ 1,COUNT_MASK,COMPLEMENT=GOOD,NCOMPLEMENT=NGOOD)
      GD = PRODS_2BYTE(GRAD_MAG, PROD='GRAD_MAG_RATIO')  & GD(OK_MASK) = 255 & GD(OK_LAND) = LAND_COLOR
      IGD = IMAGE(GD(0:STR.PX-1,(STR.PY-1)/2:-1), RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[2,2,4],TITLE='Grad Mag - With Dilation')
  
      W.SAVE, DIR_DEMO+SWITCH_NAME+'-'+NAMES(N)+'.PNG'
      IF STOPP THEN STOP ELSE WAIT, 5 
      W.CLOSE 
    ENDFOR  

  ENDIF  ; DO_FRONTS_TEST
  
  
  ;**************************************
  IF KEY(DO_CHL_TEST) THEN BEGIN
    ;**************************************
    SWITCH_NAME = 'DO_CHL_TEST'
    STEP = DO_CHL_TEST
    SWITCHES,STEP,STOPP=STOPP

    BUFFER = 0
    PROD='CHLOR_A'
    MAP='NWA'
    LAND_COLOR = 252
    FILE = !S.FILES + 'A2006089.L3B2_DAY_CHL.nc'
    D = READ_NC(FILE,STRUCT=SD)
    CHL = D.SD.CHLOR_A.DATA
    BINS = D.SD.CHLOR_A.BINS
    ARR = MAPS_REMAP(CHL,BINS=BINS,MAP_IN='L3B2',MAP_OUT='NWA',INIT=INIT)  ; Uses the latest verion MAPS_REMAP
    STR = SIZEXYZ(ARR,PX=PX,PY=PY)
    MASK = BYTARR(PX,PY)              ; Make a blank byte array for the mask

    ; ===> GET LANDMASK
    LANDMASK = READ_LANDMASK(MAP,/STRUCT) & LAND = LANDMASK.LAND
    MS = MAPS_SIZE(MAP,PX=PX,PY=PY)
    PA = MAPS_PIXAREA(MAP,WIDTH=WIDTH,HEIGHT=HEIGHT,AZIMUTH=AZIMUTH)

    MISSING_INF = !VALUES.F_INFINITY
    MISSING_NAN = !VALUES.F_NAN
    ;===> MAKE KERNEL_X FOR CONVOL
    KERNEL_X = FLTARR(3,3)
    KERNEL_X[0,[0,2]] = -1.;
    KERNEL_X[2,[0,2]] =  1.;
    KERNEL_X[0,1] = -2.;
    KERNEL_X[2,1] =  2.;
    ;===> MAKE KERNEL_Y FOR CONVOL
    KERNEL_Y= ROTATE(TRANSPOSE(KERNEL_X),7)

    W = WINDOW(DIMENSIONS=[PX/2+100,PY/2+100],BUFFER=BUFFER)
    MARR = MEDIAN_FILL(ARR,COUNT,BOX=3,FRACT_GOOD=0.67) ; ===> MEDIAN FILL
    FARR = MF3_1D_5PT(ALOG(MARR), EPSILON=ALOG(2.0), ITER=ITER, FILTERED=FILTERED, P5_MAX=P5_MAX, P5_MIN=P5_MIN, DIF_8=DIF_8, ERROR=ERROR) 

    ; ===> MAKE MASK
    OK_MISSING = WHERE(FINITE(FARR) NE 1,/NULL,COUNT_MISSING)       ; Find where array equals INFINITY
    IF COUNT_MISSING GE 1 THEN BEGIN
      MARR(OK_MISSING) = MISSING_NAN                                ; Change INFINITY to NAN
      MASK(OK_MISSING)  = 1                                         ; Change corresponding pixels in the mask to 1
      ARR_OF_ONES = REPLICATE(1B, 3, 3)                             ; Create dialation array
      MASK = DILATE(MASK, ARR_OF_ONES, /PRESERVE_TYPE)              ; Dilate the mask to remove artifacts at the boundaries of missing data (i.e. clouds)
    ENDIF

    ; ===> EDGE DETECTION USING CONVOL
    GRAD_X = CONVOL(FARR, KERNEL_X, INVALID=MISSING_INF, MISSING=MISSING_INF, /NORMALIZE, /EDGE_TRUNCATE, /NAN) & GRAD_X = GRAD_X/WIDTH
    GRAD_Y = CONVOL(FARR, KERNEL_Y, INVALID=MISSING_INF, MISSING=MISSING_INF, /NORMALIZE, /EDGE_TRUNCATE, /NAN) & GRAD_Y = GRAD_Y/HEIGHT
    GRAD_MAG = SQRT(GRAD_X^2 + GRAD_Y^2)
    GRAD_MAG_CHL = GRAD_MAG * FARR

    ; ===> APPLY THE MASK TO THE OUTPUT DATA AND CHANGE NAN BACK TO INFINITY
    OK_MASK=WHERE(MASK EQ 1,COUNT_MASK,COMPLEMENT=GOOD,NCOMPLEMENT=NGOOD)
    FARR(GOOD)     = EXP(FARR(GOOD))
    GRAD_MAG(GOOD) = EXP(GRAD_MAG(GOOD)) & GRAD_MAG(OK_MASK) = MISSINGS(GRAD_MAG)
    GRAD_MAG_CHL(GOOD) = EXP(GRAD_MAG_CHL(GOOD)) & GRAD_MAG_CHL(OK_MASK) = MISSINGS(GRAD_MAG_CHL)

    AR  = PRODS_2BYTE(ARR, PROD=PROD) & AR(LAND) = LAND_COLOR
    IAR = IMAGE(AR, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[2,2,1],TITLE='Orginal Data')

    MD  = PRODS_2BYTE(FARR, PROD=PROD) & MD(LAND) = LAND_COLOR
    IMD = IMAGE(MD, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[2,2,2],TITLE='Filtered Data')

    GD = PRODS_2BYTE(GRAD_MAG, PROD='GRAD_MAG_RATIO') & GD(LAND) = LAND_COLOR    
    IGD = IMAGE(GD, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[2,2,3],TITLE='Grad Mag Ratio')

    GMC  = PRODS_2BYTE(ALOG10(GRAD_MAG_CHL), PROD='NUM_-0.1_.05') & GMC(LAND) = LAND_COLOR
    IGM = IMAGE(GMC, RGB_TABLE=CPAL_READ('PAL_BR'), /CURRENT, LAYOUT=[2,2,4],TITLE='Grad Mag Ratio * CHL')

    W.SAVE, DIR_DEMO+SWITCH_NAME+'.PNG'
    IF STOPP THEN STOP ELSE WAIT, 5
    W.CLOSE
    

  ENDIF  ; DO_CHL_TEST
  
  
  

;**************************************
  IF KEY(DO_FRONTS_L3B) THEN BEGIN
;**************************************
    STEP = DO_FRONTS_L3B
    SWITCHES,STEP,STOPP=S,OVERWRITE=OVERWRITE

    MP = 'NWA'
    PROD =    ['CHLOR_A','CHLOR_A','CHLOR_A']
    TYPE =    ['OC',     'OC',     'OC']
    SENSORS = ['SA',     'MODISA','MODISA']
    DIRS    = ['NADATA', 'MODIS', 'MODIS']
    SUBDIR  = ['L3B2_R2015','L3B1_R2015','L3B2_R2015']
    MAPIN   = ['L3B2','L3B1', 'L3B2']
    PREFIX  = ['Z','A',      'A'    ]
    SUFFIX  = ['CHL','CHL',    'CHL']
    
;    LATMIN = 24.0
;    LATMAX = 46.99
;    LONMIN = -84.0
;    LONMAX = -53.01
;    

;    IF TOTAL(FILE_TEST([FRONTS_LAT,FRONTS_LON])) NE 2 THEN BEGIN
;      MASTER_LATS = IDL_RESTORE(!S.MAPINFO + 'MUR-PXY_36000_17999-LAT.SAV')
;      MASTER_LONS = IDL_RESTORE(!S.MAPINFO + 'MUR-PXY_36000_17999-LON.SAV')
;
;      SUBSET_LATS = MAPS_REMAP(MASTER_LATS, MAP_IN='MUR', MAP_OUT=MP, MAP_SUBSET=1, LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX)
;      SUBSET_LONS = MAPS_REMAP(MASTER_LONS, MAP_IN='MUR', MAP_OUT=MP, MAP_SUBSET=1, LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX)
;      SZ = SIZEXYZ(SUBSET_LATS,PX=PX,PY=PY)
;
;      SAVE, SUBSET_LATS, FILENAME=FRONTS_LAT
;      SAVE, SUBSET_LONS,  FILENAME=FRONTS_LON
;    ENDIF ELSE BEGIN
;      SUBSET_LATS = IDL_RESTORE(FRONTS_LAT)
;      SUBSET_LONS = IDL_RESTORE(FRONTS_LON)
;    ENDELSE
;    
    

    FOR N=0, N_ELEMENTS(SENSORS)-1 DO BEGIN
      DIR = ''
      DIR_OUT    = DIR_DEMO + TYPE(N) + '-' + SENSORS(N) + '-1KM' + SL  + MP + SL
      DIR_TEST,[DIR_OUT]

   ;   FILES = FILE_SEARCH(DIR_FILES + SL + PREFIX(N) + '*.*'+SUFFIX+'*', COUNT=COUNT_DEMO)
    ;  IF COUNT_DEMO EQ 0 THEN BEGIN
        IF DIRS(N) EQ 'SEADAS' THEN DIR = !S.SEADAS
        IF DIRS(N) EQ 'MODIS'  THEN DIR = !S.MODIS
        IF DIR EQ '' THEN DIR = !S.DATASETS

        FILES = FILE_SEARCH(DIR + TYPE(N) + '-' + SENSORS(N) + '-1KM' + SL + SUBDIR(N) + SL + PREFIX(N) + '*.*' + SUFFIX(N) +'*', COUNT=COUNT_L2)
        FILES = DATE_SELECT(FILES, ['20030601','20030630'])

     
      SAVE_MAKE_FRONTS, FILES, DIR_OUT=DIR_OUT, MAP_OUT=MP, MAP_SUBSET=0, PROD=PROD(N), OVERWRITE=OVERWRITE
    

      FILES=FILE_SEARCH(DIR_OUT + 'BOA/SAVE/' + PROD(N) + SL + 'D_*'+MP+'*BOASNR.SAV')
      PNGS_MAKE_FRONTS, FILES, BUFFER=1, DELAY=0,  OVERWRITE=OVERWRITE
    ENDFOR
  ENDIF ; DO_FRONTS_L3B    

;**************************************
  IF KEY(DO_FRONTS_NWA) THEN BEGIN
;**************************************
    STEP = DO_FRONTS_NWA
    SWITCHES,STEP,STOPP=S,OVERWRITE=OVERWRITE

    MP = 'NWA'
    
    FILES = FLS(!S.FILES + ['A','S'] + '2010*.L3B2_DAY_CHL.nc')
    
    DIR_OUT = DIR_DEMO
    SAVE_MAKE_FRONTS, FILES, DIR_OUT=DIR_OUT, MAP_OUT=MP, MAP_SUBSET=0, FULL_STRUCT=1, PROD='CHLOR_A', OVERWRITE=1

    FILES=FILE_SEARCH(DIR_OUT + MP + '/SAVE/CHL_BOA' + SL + 'D_2010*'+MP+'*BOA.SAV')
    PNGS_MAKE_FRONTS, FILES, BUFFER=0, DELAY=0,  OVERWRITE=1, COMPOSITE=1
STOP    
  ENDIF ; DO_FRONTS_NWA
  
;**************************************
  IF KEY(DO_VIIRS_TEST) THEN BEGIN
;**************************************
    STEP = DO_VIIRS_TEST
    SWITCHES,STEP,STOPP=S,OVERWRITE=OVERWRITE

    MAPS = ['LONLAT','NWA']
    FOR M=0, N_ELEMENTS(MAPS)-1 DO BEGIN 
      FILES = [!S.FILES + 'V2017091174800.L2_SNPP_OC.nc',FLS(!S.FILES + 'V2017*NPP_SCINIR_L2.nc')]
      SAVE_MAKE_FRONTS, FILES, DIR_OUT=DIR_DEMO, MAP_SUBSET=0, DIR_AREAS=DIR_DEMO, FULL_STRUCT=1, PROD='CHLOR_A', OVERWRITE=0, MAP_OUT=MAPS(M) 
      FILES=FILE_SEARCH(DIR_DEMO + MAPS(M) + '/SAVE/CHL_BOA' + SL + 'S_2017*BOA.SAV')
      PNGS_MAKE_FRONTS, FILES, BUFFER=0, DELAY=0,  OVERWRITE=0, COMPOSITE=1, IMGROT=5
    ENDFOR
    
    MP = 'NWA'
    FILES = FLS(!S.FILES + 'V2017*L3B*.nc')
    SAVE_MAKE_FRONTS, FILES, DIR_OUT=DIR_DEMO, MAP_SUBSET=0, DIR_AREAS=DIR_DEMO, FULL_STRUCT=1, PROD='CHLOR_A', OVERWRITE=0, MAP_OUT=MP
    FILES=FILE_SEARCH(DIR_DEMO + MP + '/SAVE/CHL_BOA' + SL + 'D_2017*BOA.SAV')
    PNGS_MAKE_FRONTS, FILES, BUFFER=0, DELAY=0,  OVERWRITE=0, COMPOSITE=1, IMGROT=5
      
    STOP
  ENDIF ; DO_VIIRS_TEST  


;**************************************
  IF KEY(DO_FRONTS_SAMPLE) THEN BEGIN
;**************************************
    STEP = DO_FRONTS_SAMPLE
    SWITCHES,STEP,STOPP=S,OVERWRITE=OVERWRITE
  
    MAP_IN = 'L3B2'
    MAP_OUT = 'NWA
    PROD    = 'CHLOR_A-OCI'
    SENSORS = ['SEAWIFS','MODISA', 'SA']
    DIRS    = ['SEADAS', 'MODIS',  'NADATA']
    PREFIX  = ['S',      'A',      'Z']
    IMGROT  = [0,         0,        0]
           
    FOR N=0, N_ELEMENTS(SENSORS)-1 DO BEGIN
      DIR = ''
      SUBDIR = 'OC-' + SENSORS(N) + '-1KM' + SL 
      DIR_OUT    = DIR_DEMO + SUBDIR
      DIR_FILES  = DIR_DEMO + SUBDIR + MAP_IN  + '_R2015' + SL + 'NC' + SL                                 
      
      DIR_TEST,[DIR_OUT,DIR_FILES]

      FILES = FILE_SEARCH(DIR_FILES + SL + PREFIX(N) + '*.*', COUNT=COUNT_DEMO)
      IF COUNT_DEMO EQ 0 THEN BEGIN
        IF DIRS(N) EQ 'SEADAS' THEN DIR = !S.SEADAS
        IF DIRS(N) EQ 'MODIS'  THEN DIR = !S.MODIS
        IF DIR EQ '' THEN DIR = !S.DATASETS
        
        FILES = FILE_SEARCH(DIR + SUBDIR + MAP_IN + '_R2015' + SL + 'NC' + SL + PREFIX(N) + '*CHL*.*', COUNT=COUNT_L2)
        JFILES = DATE_SELECT(FILES,['20060601','20060630'])
        FP = PARSE_IT(FILES)
        FP = FILE_INFO(FILES)
        FILES = REVERSE(FILES[SORT(FP.SIZE)])
        FILES = [JFILES,FILES(0:20)]
        FILES = FILES[SORT(FILES)]
        FILES = FILES[UNIQ(FILES)]
                
        FILE_COPY, FILES, DIR_FILES, /VERBOSE

      ENDIF  
      
      SAVE_MAKE_FRONTS, FILES, DIR_OUT=DIR_OUT, MAP_OUT=MAP_OUT, PROD=PROD, OVERWRITE=OVERWRITE
      
     ; FILES=FILE_SEARCH(DIR_OUT + 'BOA/SAVE/' + PROD(N) + SL + 'S_*LONLAT*BOASNR.SAV')
     ; PNGS_MAKE_FRONTS, FILES, BUFFER=1, DELAY=0, IMGROT=IMGROT(N), OVERWRITE=OVERWRITE

    ENDFOR
  ENDIF  ; DO_FRONTS_SAMPLE
  
;**************************************
  IF KEY(DO_FRONTS_SUBSET) THEN BEGIN
;**************************************
    STEP = DO_FRONTS_SUBSET
    SWITCHES,STEP,STOPP=S,OVERWRITE=OVERWRITE

    MP = 'NEC'
    PX = '1640'
    PY = '1174'
    
    LATFILE = !S.MAPINFO + MP + '_SUBSET-PXY_'+PX+'_'+PY+'-LAT.SAV'
    LONFILE = !S.MAPINFO + MP + '_SUBSET-PXY_'+PX+'_'+PY+'-LON.SAV'

    IF TOTAL(FILE_TEST([LATFILE,LONFILE])) NE 2 THEN MAPS_MUR_2LONLAT_SUBSET,MP
    SUBSET_LATS = IDL_RESTORE(LATFILE)
    SUBSET_LONS = IDL_RESTORE(LONFILE)


    FILES = !S.FILES + ['A','S','Z'] + '2006089.L3B2_DAY_CHL.nc

    DIR_OUT = DIR_DEMO + MP+'_SUBSET' + SL & DIR_TEST, DIR_OUT

    SAVE_MAKE_FRONTS, FILES, DIR_OUT=DIR_DEMO, MAP_OUT=MP+'_SUBSET', MAP_SUBSET=1, SUBSET_LONS=SUBSET_LONS, SUBSET_LATS=SUBSET_LATS, PROD='CHLOR_A', OVERWRITE=OVERWRITE

    FILES=FILE_SEARCH(DIR_OUT + 'SAVE/CHLOR_A' + SL + 'D_*'+MP+'*BOA*.SAV')
    PNGS_MAKE_FRONTS, FILES, BUFFER=1, DELAY=0,  OVERWRITE=OVERWRITE, IMGROT=0


  ENDIF ; DO_FRONTS_SUBSET

;**************************************
  IF KEY(DO_FRONTS_STATS) THEN BEGIN
;**************************************
    STEP = DO_FRONTS_STATS
    SWITCHES,STEP,STOPP=S,OVERWRITE=OVERWRITE

    
    MP = 'NWA'
    PROD    = 'CHLOR_A_BOA-OCI'
    SENSORS = ['SEAWIFS','MODISA', 'SA']

    FOR N=0, N_ELEMENTS(SENSORS)-1 DO BEGIN
      DIR = ''     
      SUBDIR = 'OC-' + SENSORS(N) + '-1KM' + SL + MP  + SL
      DIR_SAVE    = DIR_DEMO + SUBDIR + 'SAVE' + SL + PROD + SL
      DIR_STATS   = REPLACE(DIR_SAVE,'/SAVE/','/STATS/')
      DIR_TEST,[DIR_SAVE,DIR_STATS]
      
      FILES=FILE_SEARCH(DIR_SAVE + 'D_*' + PROD + '*.SAV')
      STATS_ARRAYS_FRONTS, FILES, DIR_OUT=DIR_OUT, PERIOD_CODE_OUT='M', OVERWRITE=OVERWRITE

    ENDFOR
  stop
  ENDIF  ; DO_FRONTS_STATS

;**************************************
  IF KEY(DO_BOA_MAPPED) THEN BEGIN
;**************************************
    STEP = DO_BOA_MAPPED
    SWITCHES,STEP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
  
    PROD=['CHLOR_A-OCI','PAR','RRS_412','CHLOR_A-GSM','SST-N_11UM']
    MAP = 'NEC'
    FILES = FILE_SEARCH(!S.FILES,'A2007124*L2_LAC*')
    FILES = FILE_SEARCH(!S.FILES,'A2002*SST.nc')
  
    SAVE_MAKE_L2, FILES, PRODS=PROD, MAP_OUT=MAP, DIR_OUT=!S.FILES
    
    SAVE_MAKE_BOASNRA,  FILES, DIR_OUT=DIR, PROD=PROD, MAP_OUT=MAP_OUT, KM=KM, OVERWRITE=OVERWRITE
    
    FILES = FILE_SEARCH(DIR,'S_20070504*LONLAT*BOASNR.SAV')
    PNGS_MAKE_BOASNRA, FILES, DIR_OUT=DIR, BUFFER=0, DELAY=15, OVERWRITE=OVERWRITE
  
    STOP
  ENDIF;IF KEY(STEP) THEN BEGIN
;||||||||||||||||||||||||||||

;**************************************
  IF KEY(DO_LONLATS) THEN BEGIN
;**************************************
  
    FONT_SIZE = 12
    W = WINDOW(DIMENSIONS=[900,900])
  
    FILE = FILE_SEARCH(!S.DEMO + 'MAPS_PIXAREA_DEMO' + SL + 'LONLAT*.SAV')
    D = IDL_RESTORE(FILE)
    PROD = 'AREA_0.3_30';+ '_' + ROUNDS(MIN(D.DATA),5,/SIG)+ '_' + ROUNDS(MAX(D.DATA),5,/SIG)
    BAREA = PRODS_2BYTE(D.DATA,PROD=PROD,LOG=1)
    IM = IMAGE(BAREA,RGB_TABLE=CPAL_READ('PAL_BR'),/CURRENT,LAYOUT=[3,1,3])
    POS = IM.POSITION
    CB_POS = [POS[0],0.0,POS(2),POS[1]-0.01]
    PRODS_COLORBAR,PROD, IMG=IM, POSITION=CB_POS, LOG=1, FONT_SIZE=FONT_SIZE, TICKNAME=['0.3','1','3','10','30']
  
    FILES = FILE_SEARCH(DIR,'S*L2.hdf')
    SD = READ_HDF_2STRUCT(FILES[0],PRODUCTS=['LONGITUDE','LATITUDE','CHLOR_A'])
    LON = ROTATE(SD.SD.LONGITUDE.IMAGE,7)
    LAT = ROTATE(SD.SD.LATITUDE.IMAGE,7)
    PLON = 'LONGITUDE_-95.0_-30.0'; + '_' + ROUNDS(MIN(LON),5,/SIG)+'_'+ROUNDS(MAX(LON),5,/SIG)
    PLAT = 'LATITUDE_12_64';  + '_' + ROUNDS(MIN(LAT),5,/SIG)+'_'+ROUNDS(MAX(LAT),5,/SIG)
  
    BLON = PRODS_2BYTE(LON,PROD=PLON)
    BLAT = PRODS_2BYTE(LAT,PROD=PLAT)
  
    IMLON = IMAGE(BLON,RGB_TABLE=CPAL_READ('PAL_BR'),/CURRENT,LAYOUT=[3,1,1])
    POS = IMLON.POSITION
    CB_POS = [POS[0],0.0,POS(2),POS[1]-0.01]
    PRODS_COLORBAR,PLON, IMG=IMLON, POSITION=CB_POS, FONT_SIZE=FONT_SIZE, TICKNAME=['-90','-75','-60','-45','-30']
  
    IMLAT = IMAGE(BLAT,RGB_TABLE=CPAL_READ('PAL_BR'),/CURRENT,LAYOUT=[3,1,2])
    POS = IMLAT.POSITION
    CB_POS = [POS[0],0.0,POS(2),POS[1]-0.01]
    PRODS_COLORBAR,PLAT, IMG=IMLAT, POSITION=CB_POS, FONT_SIZE=FONT_SIZE, TICKNAME=['12','24','36','48','60']
  
    W.SAVE, DIR + 'S_20001014-LONLAT_PIXAREA.PNG'
    STOP
    W.CLOSE
  
  ENDIF ; IF KEY(DO_LONLATS) THEN BEGIN


  

END; #####################  END OF PROCEDURE ################################
