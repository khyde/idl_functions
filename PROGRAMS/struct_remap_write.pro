; $ID:	STRUCT_REMAP_WRITE.PRO,	2020-06-30-17,	USER-KJWH	$
;##############################################################################################
PRO STRUCT_REMAP_WRITE, FILES, DIR_OUT=DIR_OUT, MAP_OUT=MAP_OUT, INIT=INIT, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
;+
; PURPOSE:
; THIS FUNCTION READS A SAVE FILE & WRITES OUT AN REMAPED EQUIVALENT STRUCTURE
;
;  KEYWORDS:
;      FILES ......... STRUCTURED SAVE FILES TO REMAP
;      DIR_OUT........ THE DIRECTORY FOR THE OUTPUT REMAPPED SAVEFILE
;      MAP_OUT........ THE STANDARD MAP NAME FOR THE REMAP
;      INIT........... PASSED TO MAPS_REMAP TO INIT OUT THE COMMON_MAPS_REMAP STRUCURE HELD IN COMMON MEMORY
;      OVERWRITE...... OVERWRITE THE REMAPED SAVE IF ALREADY EXISTS
;      VERBOSE........ PRINT PROGRAM PROGRESS
;      
;  OUTPUT: SAV FILE CONTAINING ALL THE TAGS IN THE INPUT FILE BUT WITH ANY 2-D DATA ARRAYS REMAPPED [RESIZED] TO MAP_OUT
;  
;  EXAMPLES: SEE STRUCT_REMAP_DEMO  
;    
;
;   MODIFICATION_HISTORY:
;   JUL 30, 2004 - TD:   ADOPTED FROM STRUCT_SD_2IMAGE AND STRUCT_SD_REMAP.
;		MAR 11, 2014 - KJWH: ADDED RETURN_STRUCT KEYWORD TO RETURN THE STRUCTURE INSTEAD OF SAVING THE FILE
;		NOV 25, 2014 - KJWH: REMOVED LME MAPPING LOGIC
;		FEB 14, 2015 - JEOR: RENAMED FROM STRUCT_SD_REMAP AND UPDATED WITH NEW FUNCTIONS AND PROGRAMS
;		                     REPLACED STRUCT_SD_READ WITH STRUCT_READ
;		                     MADE IT A PRO NOT A FUNCTION
;		                     IF ISTAG(FA_IN(N),'PX') THEN BEGIN
;                        IF HAS(STRUCT,'IMAGE') THEN  IMAGE=STRUCT.IMAGE
;                        IF HAS(STRUCT,'DATA') THEN  IMAGE=STRUCT.DATA
;   FEB 18, 2015 - KJWH: CLEANED UP AND REMOVED UNNEEDED CODE
;                        REMOVED REFRESH KEYWORD (NOT NEEDED BECAUSE IT IS RESET IN THE PROGRAM)
;                        CHANGED KEYWORD RETURN_STRUCT TO REMAP_STRUCT 
;                        IF GET_STRUCT THEN CAN ONLY HAVE ONE MAP
;                        CHANGED HOW THE NEW FILE NAME IS CREATED
;                        CHANGED HOW THE NEW OUTPUT STRUCTURE IS CREATED 
;   MAR  6, 2015 - JEOR: IF WHERE(TAG_NAMES(STRUCT) EQ 'FILE_NAME') NE -1 THEN FA=PARSE_IT(STRUCT.FILE_NAME,/ALL)
;                        IF WHERE(TAG_NAMES(STRUCT) EQ 'NAME') NE -1 THEN FA=PARSE_IT(STRUCT.NAME,/ALL)
;   MAR 31, 2015 - KJWH: CHANGED FILES = STRUCT.NAME TO FILES = FA.FULLNAME BECAUSE NOT ALL STRUCTURES HAVE .NAME AS A TAG
;   APR 14, 2015 - JEOR: ADDED KEY ERROR
;   DEC 09, 2015 - JEOR: REPLACED HAS WITH STRUCT_HAS,GET WITH STRUCT_GET,MAP_REMAP WITH MAPS_REMAP
;                        IF STRUCT_HAS(STRUCT , 'FILE_NAME')
;   MAY 29, 2016 - JEOR: IF NONE(DIR_OUT) THEN DIR_OUT = !S.IDL_TEMP
;   NOV 05, 2016 - JEOR: MAJOR OVERHAUL OF PROGRAM
;   NOV 06, 2016 - JEOR: ADDED CASE,REMOVED ERROR [NOT REALLY USED],INSTEAD RETURN AN INFORMATIVE ERROR STRING
;   NOV 07, 2016 - JEOR: FINAL REVISIONS AND TESTED
;   NOV 08, 2016 - KJWH: ADDED BINS=BINS TO CALL TO MAPS_REMAP
;   JAN 04, 2017 - KJWH: Created STRUCT_REMAP_WRITE from STRUCT_REMAP - This program loops through files and maps and calls STRUCT_REMAP to remap the data in the structure
;   JAN 05, 2017 - KJWH: Added steps to derive the output file name from SUBSET maps
;##############################################################################################
;-
;*********************
  ROUTINE='STRUCT_REMAP'
;*********************
;===> DEFALTS
  IF NONE(MAP_OUT)   THEN MESSAGE,'ERROR: MUST PROVIDE MAP_OUT'
  IF NONE(FILES)     THEN MESSAGE,'ERROR: MUST PROVIDE FILES'
  IF NONE(INIT)      THEN INIT=0 ; INITIALIZES MAPS_REMAP
  
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;===> PARSE ALL FILE INFO TO GET DIRS_OUT
  FA = PARSE_IT(FILES[0],/ALL)  
  DIRS_OUT = [] 
  IF NONE(DIR_OUT) THEN FOR M=0, N_ELEMENTS(MAP_OUT)-1 DO DIRS_OUT  = [DIRS_OUT,REPLACE(FA.DIR,FA.MAP,MAP_OUT(M))] ELSE $
    IF N_ELEMENTS(DIR_OUT) NE N_ELEMENTS(MAP_OUT) THEN DIRS_OUT = REPLICATE(DIR_OUT[0],N_ELEMENTS(MAP_OUT)) ELSE DIRS_OUT = DIR_OUT
  
  DIR_TEST,DIRS_OUT
  
; =====> MAIN, OUTER LOOP ON FILES
; FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR N=0L,N_ELEMENTS(FILES)-1L DO BEGIN			
    AFILE  = FILES(N)
    FP     = PARSE_IT(AFILE,/ALL)
    IMP    = FP.MAP
    IMP_SZ = MAPS_SIZE(IMP)
    IPXY   = 'PXY_'+NUM2STR(IMP_SZ.PX) + '_' + NUM2STR(IMP_SZ.PY)
    IF IMP EQ 'LONLAT' THEN INIT = 1

; =====> INNER LOOP ON MAP_OUT
;	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR M=0, N_ELEMENTS(MAP_OUT)-1 DO BEGIN
    	DOUT = DIRS_OUT(M)
      OMP = STRUPCASE(MAP_OUT(M))
      
      IF HAS(OMP,'SUBSET') THEN BEGIN
        SUBSET_LAT = FILE_SEARCH(!S.MAPINFO + OMP + '-PXY_*-LAT.SAV',COUNT=COUNT_LAT)
        SUBSET_LON = FILE_SEARCH(!S.MAPINFO + OMP + '-PXY_*-LON.SAV',COUNT=COUNT_LON)
        IF COUNT_LAT GT 1 OR COUNT_LON GT 1 THEN MESSAGE, 'ERROR: More than 1 SUBSET coordinate file found'
        IF COUNT_LAT EQ 0 OR COUNT_LON EQ 0 THEN MESSAGE, 'ERROR: Subset files not found'

        SUBSET_LATS = IDL_RESTORE(SUBSET_LAT) ; Read the LAT file to get the PX and PY for the file name
        SZ = SIZEXYZ(SUBSET_LATS,PX=PX,PY=PY)
        OPXY = 'PXY_'+NUM2STR(PX)+'_'+NUM2STR(PY)
      ENDIF ELSE BEGIN     
        OMP_SZ = MAPS_SIZE(OMP)
        OPXY = 'PXY_'+NUM2STR(OMP_SZ.PX) + '_' + NUM2STR(OMP_SZ.PY)      
      ENDELSE  
      
      REMAP_FILE = REPLACE(AFILE,[FP.DIR,IMP,IPXY],[DOUT,OMP,OPXY])
  	  IF FILE_MAKE(AFILE, REMAP_FILE, OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE ; ===>
    
      D = STRUCT_READ(AFILE,STRUCT=S)
      IF IDLTYPE(S) NE 'STRUCT' THEN BEGIN 
  		  PRINT, 'ERROR READING ' + AFILE
  		  CONTINUE ; ===>
  		ENDIF;IF IDLTYPE(DATA) NE 'STRUCT' THEN BEGIN				
		  
			IF IMP NE S.MAP THEN BEGIN
			  PRINT, 'ERROR: FILENAME MAP IS NOT THE SAME AS STRUCTURE MAP'
			  CONTINUE ; ===> 
			ENDIF  
			
			REMAP_STRUCT = STRUCT_REMAP(S, MAP_OUT=OMP, INIT=INIT)
			IF STRUCT_HAS(REMAP_STRUCT,'INFILE')   THEN REMAP_STRUCT.INFILE   = STRJOIN([AFILE,REMAP_STRUCT.INFILE],';')  ; Add file name to the INFILES
			IF STRUCT_HAS(REMAP_STRUCT,'INFILES')  THEN REMAP_STRUCT.INFILES  = STRJOIN([AFILE,REMAP_STRUCT.INFILES],';')
			
			SAVE, FILENAME=REMAP_FILE, REMAP_STRUCT, /COMPRESS
	  	GONE, REMAP_STRUCT
      PFILE,REMAP_FILE      
    ENDFOR ; MAPS		
    GONE, STRUCT
  ENDFOR ; FILES

  DONE:
END; #####################  END OF ROUTINE ################################



