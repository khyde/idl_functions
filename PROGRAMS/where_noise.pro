; $ID:	WHERE_NOISE.PRO,	2020-06-26-15,	USER-KJWH	$
; 
; ##########################################################################
FUNCTION WHERE_NOISE,ARRAY,METHOD=METHOD,WIDTH=WIDTH,NOISE=NOISE,RATIO=RATIO,MED=MED,$
                    FRACT_GOOD=FRACT_GOOD,VERBOSE=VERBOSE,COUNT
                      
;+
;	THIS FUNCTION RETURNS THE SUBSCRIPTS OF PIXELS WHERE THE  
;	     [RATIO OF THE DATUM TO THE MEDIAN OF ADJACENT DATA IN A MOVING WINDOW]
;	     EXCEEDS A SPECIFIED VALUE [NOISE]
;
; INPUTS:
;        ARRAY.... REQUIRED INPUT: A 2-D IMAGE DATA ARRAY
;        NOISE ... THE HIGHEST AND LOWEST (1./HIGHEST) VALUES THAT INDICATE NOISE DEFAULT =[5.0,1/5]
;	
; OUTPUT:		SUBSCRIPTS OF THE INPUT ARRAY WHERE THE RATIO OF THE PIXEL VALUE 
;           TO ITS 3X3 MEDIAN IS LESS THAN [1/NOISE] OR GREATER THAN THE [NOISE] THRESHOLD

;   COUNT:  THE NUMBER OF ARRAY ELEMENTS HAVING NOISE


; KEYWORDS:
;   METHOD.........  'IMASK' OR 'LOOP' [DEFAULT = 'IMASK']
;   WIDTH..........  THE WIDTH OF THE MOVING BOX IN PIXELS [DEFAULT = 3] 
;   VERBOSE........  PRINT PROGRAM PROGRESS
;   NOISE..........  THE VALUE FOR THE RATIO THAT SIGNIFIES NOISE 
;   RATIO..........  THE RATIO OF (ARRAY/MED)
;   MED............  THE MEDIAN OF THE ARRAY 

; EXAMPLE: SEE WHERE_NOISE_DEMO
;		
; MODIFICATION HISTORY:
;	 MAR 4, 2015	WRITTEN BY:	J.E. O'REILLY & KJW HYDE
;  MAR 15,2015,JOR DOCUMENTATION
;  MAR 25,2015,JOR  THE DEFAULT METHOD IS NOW 'IMASK'
;  JUN 30,2016,JOR  IF NONE(WIDTH) THEN WIDTH_ = 3 ELSE WIDTH_ = WIDTH

;-
; ##########################################################################################

;**************************
ROUTINE_NAME='WHERE_NOISE'
;**************************
  ;===> DEFAULTS
IF NONE(METHOD) THEN METHOD = 'IMASK'
IF NONE(NOISE) THEN NOISE = 5.0
LOWER = 1.0/NOISE & UPPER = NOISE
IF NONE(ARRAY) THEN MESSAGE,'ERROR:ARRAY IS REQUIRED'
IF NONE(WIDTH) THEN WIDTH_ = 3 ELSE WIDTH_ = WIDTH
WIDTH_ = WIDTH_ > 3
WIDE = WIDTH_
IF NONE(FRACT_GOOD) THEN FRACT_GOOD = 0.50
AROUND = (WIDTH_-1)/2
BOX = [WIDTH_,WIDTH_]
SZ = SIZEXYZ(ARRAY)  & PX = SZ.PX & PY = SZ.PY
LAST_PX = PX-1L
LAST_PY = PY-1L

;****************************
IF METHOD EQ 'IMASK' THEN BEGIN
  ;===> MAKE A MASK WHERE THE CENTER PIXEL OF THE [WIDTH_ X WIDTH_] BOX IS NAN
  ;     AND THE SURROUNDING PIXELS HAVE ONES
  MASK = IMASK(ARRAY,WIDTH_,SUBS=SUBS,/NAN)
  ;===> CHANGE ANY INF TO NANS SO MEDIAN IGNORES THESE VALUES
  ARRAY = INF_2NAN(ARRAY)
  ;===> MULTIPLY ARRAY TIMES MASK TO SET THE CENTER PIXEL TO NAN 
  ;     AND THE SURROUNDING PIXELS TO 1* DATA
  ;     THIS WAY THE MEDIAN EXCLUDES THE CENTRAL DATA VALUE
  MED = MEDIAN(ARRAY*MASK,WIDTH_)
  RATIO = (ARRAY/MED)
  
  ;===> FIND NOISE
  BELOW = WHERE(FINITE(ARRAY) AND RATIO NE 0 AND FINITE(RATIO) AND RATIO LT LOWER,COUNT_BELOW)
  IF COUNT_BELOW EQ 0 THEN BELOW = []
  ABOVE = WHERE(FINITE(ARRAY) AND RATIO NE 0  AND FINITE(RATIO)  AND RATIO GT UPPER,COUNT_ABOVE)
  IF COUNT_ABOVE EQ 0 THEN ABOVE = []
  ;===> COMBINE AND SORT SUBSCRIPTS
  OK = [BELOW,ABOVE]
  IF NOF[OK] GT 1 THEN OK = OK(SORT[OK])
  COUNT = NOF[OK]
  RETURN,OK
ENDIF;IF METHOD EQ 'IMASK' THEN BEGIN
;||||||||||||||||||||||||||||||||||
;
;******************************
IF METHOD EQ 'LOOP' THEN BEGIN
;******************************

;;;;;;ARR = ARRAY

;===> MAKE ARRAY TO HOLD THE RATIO AND MEDIAN
RATIO  = REPLICATE(MISSINGS(ARRAY),[PX,PY])
MED  = REPLICATE(MISSINGS(ARRAY),[PX,PY])

;FFFFFFFFFFFFFFFFFFFFFFF
FOR YP = 0,LAST_PY DO BEGIN
  IF KEY(VERBOSE) THEN POF,YP,PY
  ;FFFFFFFFFFFFFFFFFFFFFFF
  FOR XP = 0,LAST_PX DO BEGIN
    IF ARRAY(XP,YP) EQ MISSINGS(ARRAY) THEN CONTINUE ; ===> SKIP IF CENTER PIXEL IS MISSINGS

    ;===> GET PIXELS FROM ARRAY FROM A BOX AREA CENTERED AT THE XP,YP LOCATION
    BOXL = (XP - AROUND) > 0
    BOXR = (XP + AROUND) < LAST_PX
    BOXB = (YP - AROUND) > 0
    BOXT = (YP + AROUND) < LAST_PY
    BOX_SET   = ARRAY(BOXL:BOXR, BOXB:BOXT)
    ;===> MUST HAVE FRACT_GOOD TO COMPUTE AVG,STD & CV
    N = TOTAL(FINITE(BOX_SET))
    IF  N/NOF(BOX_SET) LT FRACT_GOOD THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>

    ;===> IGNORE THE ARRAY AT XP,YP WHEN COMPUTING THE MEDIAN BY CHANGING THE VALUE TO NAN
    ;IT DOES NOT MATTER IF WE FIND SEVERAL VALUES IN THE BOX_SET EQUAL TO ARRAY(XP,YP)
    ;AS LONG AS WE CHANGE ONLY ONE OF THEM TO NAN:
    OK = WHERE(BOX_SET EQ ARRAY(XP,YP), COUNT)
    IF COUNT GE 1 THEN BOX_SET(OK[0]) = !VALUES.F_NAN
    
    ;===> IF COUNT IS ONLY ONE THEN WE CAN NOT COMPUTE THE MEDIAN OF A SCALAR SO CONTINUE
    ;????? IF COUNT EQ 1 THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    
    MED(XP,YP)   =  MEDIAN(BOX_SET(WHERE(FINITE(BOX_SET))) )
    RATIO(XP,YP) =  ARRAY(XP,YP)/ MED(XP,YP)
  ENDFOR;FOR XP = 0,PX-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDFOR;FOR YP = 0,PY-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ;===> FIND NOISE
  BELOW = WHERE(FINITE(ARRAY) AND RATIO NE 0 AND FINITE(RATIO) AND RATIO LT LOWER,COUNT_BELOW)
  IF COUNT_BELOW EQ 0 THEN BELOW = []
  ABOVE = WHERE(FINITE(ARRAY) AND RATIO NE 0  AND FINITE(RATIO)  AND RATIO GT UPPER,COUNT_ABOVE)
  IF COUNT_ABOVE EQ 0 THEN ABOVE = []
  ;===> COMBINE AND SORT SUBSCRIPTS
  OK = [BELOW,ABOVE]
  IF NOF[OK] GT 1 THEN OK = OK(SORT[OK])
  COUNT = NOF[OK]
  RETURN,OK
ENDIF;IF METHOD EQ 'LOOP' THEN BEGIN
;|||||||||||||||||||||||||||||||||||


END; #####################  END OF ROUTINE ################################
