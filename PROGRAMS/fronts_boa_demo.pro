; $ID:	FRONTS_BOA_DEMO.PRO,	2020-07-08-15,	USER-KJWH	$
	
	PRO FRONTS_BOA_DEMO
;+
; NAME: FRONTS_BOA_DEMO
; 
; PURPOSE: A 'demo' routine for the BOA fronts algorithm (works with minimal NAR LAB programs)
; 
; INPUTS: NONE
; 
; OUTPUTS: Sample image composite showing the original CHL or SST data, the filtered data, the gradient magnitude (ratio) and gradient direction
; 
; NOTES: Make sure DIR points to the location of the CHL and SST sample files
;   
; Copyright (C) 2015, Department of Commerce, National Oceanic and Atmospheric Administration, National Marine Fisheries Service,
;   Northeast Fisheries Science Center, Narragansett Laboratory.
;   This software may be used, copied, or redistributed as long as it is not sold and this copyright notice is reproduced on each copy made.
;   This routine is provided AS IS without any express or implied warranties whatsoever.
;
; This program was written by Kimberly Hyde, DOC/NOAA/NMFS/NEFSC Narragansett, RI, kimberly.hyde@noaa.gov
; For questions about the code, contact kimberly.hyde@noaa.gov
; For questions regarding the BOA algorithm, contact Igor Belkin (URI) igormbelkin@gmail.com
; 
; MODIFICATION HISTORY:
;			Written: DEC 30, 2015 by K.J.W. Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)  
;			         DEC 31, 2015 - KJWH: Renamed to FRONTS_BOA_DEMO
;			         MAR 11, 2016 - KJWH: Added SWITCHES
;			         MAR 14, 2016 - KJWH: Removed SWITCHES so that it can be used without any NAR LAB specific programs
;			         APR 05, 2016 - KJWH: Added PIXEL dimension example
;              APR 12, 2016 - JEOR: Added STEP DO_CHECK_MATH
;              APR 14, 2016 - KJWH: Added several examples and plots in DO_CHECK_MATH step
;              JUL 15, 2016 - JEOR: Added step DO_CHLOR_A_AZIMUTH [incomplete]
;              JUL 18, 2016 - KJWH: Completed the DO_CHLOR_A_AZIMUTH step
;-
;*********************************
	ROUTINE_NAME = 'FRONTS_BOA_DEMO'
;*********************************

; ===> SWITCHES to turn example block codes on or off.  1 = RUN and 2 = SKIP
  DO_CHLOR_A_EXAMPLE = 0  ; Runs FRONTS_BOA on a CHL image
  DO_SST_EXAMPLE     = 1  ; Runs FRONTS_BOA on a SST image
  DO_PIXEL_EXAMPLE   = 0  ; Runs FRONTS_BOA on a SST image with several different inputs for the pixel WIDTH and HEIGHT values
  DO_CHECK_MATH      = 0  ; RUNS FRONTS_BOA ON A 5X5 SST IMAGE OF 1'S AND THE CENTRAL PIXEL = 2.0
  DO_CHLOR_A_AZIMUTH = 0  ; Runs FRONTS_BOA on a CHL image AND MAKES PNGS OF GRAD_DIR AND AZIMUTH-CORRECTED GRAD_DIR  
  SL = PATH_SEP()
  
  DIR = !S.DEMO + ROUTINE_NAME + SL ; Change the directory to point to the location of the DEMO files 
  
;**********************************************
  IF KEYWORD_SET(DO_CHLOR_A_EXAMPLE) THEN BEGIN
;********************************************** 
    FILE = FILE_SEARCH(DIR + 'S_20001014170737-SEAWIFS-OV2-MLAC-R2010-L2.SAV')  ; FIND DEMO CHLOROPHYLL FILE
    SOBJ = OBJ_NEW('IDL_SAVEFILE',FILENAME=FILE)                 ; READ THE SAVE FILE 
   
    SOBJ->RESTORE,'STRUCT'                                          ; RESTORE THE CHLOROPHYLL ARRAY
    CHL = STRUCT.CHL
    HELP, CHL
    SZ = SIZE(CHL,/DIMENSIONS)
    
    BOA_FRONTS = FRONTS_BOA(CHL, WIDTH=STRUCT.PIXEL_WIDTH, HEIGHT=STRUCT.PIXEL_HEIGHT, LOG=1, EPSILON=ALOG(2.0))
    HELP, BOA_FRONTS, /STRUCTURES
    
    ; ===> OPEN A WINDOW FOR THE COMPOSITE FIGURE
    W = WINDOW(DIMENSIONS=[SZ[0],SZ[1]/2],BUFFER=BUFFER)
    MARGIN = 0.001
    DELAY = 15 ; DELAY (IN SECONDS) BEFORE CLOSING THE IMAGE WINDOW

    ; ===> MAKE MASK
    ORG_MASK = WHERE(CHL EQ !VALUES.F_INFINITY OR STRUCT.LANDMASK EQ 1)
    FIL_MASK = WHERE(FINITE(BOA_FRONTS.MDFIL) EQ 0)
    
    ; ===> ADD ORIGINAL INPUT IMAGE
    BSST = BYTSCL(ALOG10(CHL),MIN=ALOG10(0.01),MAX=ALOG10(30))
    BSST(ORG_MASK) = 0
    OIM = IMAGE(BSST, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[4,1,1])
    POS = OIM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Original CHL Data',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD MEDIAN FILTERED IMAGE
    MDFIL = BYTSCL(ALOG10(BOA_FRONTS.MDFIL),MIN=ALOG10(0.01),MAX=ALOG10(30))
    MDFIL(ORG_MASK) = 0
    MDFIL(FIL_MASK) = 0
    FIM = IMAGE(MDFIL, RGB_TABLE='RAINBOW', /CURRENT,MARGIN=MARGIN,  LAYOUT=[4,1,2])
    POS = FIM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Median Filtered',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_MAG_RATIO IMAGE
    GRAD_MAG = BYTSCL(ALOG10(BOA_FRONTS.GRAD_MAG_RATIO),MIN=ALOG10(1.0),MAX=ALOG10(1.15))
    GRAD_MAG(ORG_MASK) = 0
    GRAD_MAG(FIL_MASK) = 0
    GMM = IMAGE(GRAD_MAG, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[4,1,3])
    POS = GMM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Gradient Magnitude Ratio',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_DIR IMAGE
    GRAD_DIR = BYTSCL(BOA_FRONTS.GRAD_DIR,MIN=0,MAX=360)
    GRAD_DIR(ORG_MASK) = 0
    GRAD_DIR(FIL_MASK) = 0
    GDM = IMAGE(GRAD_DIR, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[4,1,4])
    POS = GDM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Gradient Direction',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    W.SAVE, DIR + 'S_20001014170737-SEAWIFS-L2.PNG'
    WAIT, DELAY
    W.CLOSE 
  ENDIF ; DO_CHLOR_A_EXAMPLE
  
  
  
;*******************************************
  IF KEYWORD_SET(DO_SST_EXAMPLE) THEN BEGIN
;*******************************************
    FILE = FILE_SEARCH(DIR + 'A2002364070500.L2_LAC_SST.SAV') ; FIND DEMO SST FILE
    SOBJ = OBJ_NEW('IDL_SAVEFILE',FILENAME=FILE)              ; READ THE SAVE FILE
    SOBJ->RESTORE,'STRUCT'                                    ; RESTORE THE SST ARRAY
    SST = STRUCT.SST
    HELP, SST
    SZ = SIZE(SST,/DIMENSIONS)

    BOA_FRONTS = FRONTS_BOA(SST, WIDTH=STRUCT.PIXEL_WIDTH, HEIGHT=STRUCT.PIXEL_HEIGHT, LOG=1, EPSILON=1.0)
    HELP, BOA_FRONTS, /STRUCTURES
    
    ; ===> OPEN A WINDOW FOR THE COMPOSITE FIGURE
    W = WINDOW(DIMENSIONS=[SZ[0]/2,SZ[1]/2],BUFFER=BUFFER)
    MARGIN = 0.001
    DELAY = 15 ; DELAY (IN SECONDS) BEFORE CLOSING THE IMAGE WINDOW

    ; ===> MAKE MASK
    ORG_MASK = WHERE(SST EQ !VALUES.F_INFINITY)
    FIL_MASK = WHERE(FINITE(BOA_FRONTS.MDFIL) EQ 0)
    
    ; ===> ADD ORIGINAL INPUT IMAGE
    BSST = BYTSCL(SST,MIN=0.0,MAX=30)
    BSST(ORG_MASK) = 0
    OIM = IMAGE(BSST, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[2,2,1])
    POS = OIM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Original SST Data',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD MEDIAN FILTERED IMAGE
    MDFIL = BYTSCL(BOA_FRONTS.MDFIL,MIN=0.0,MAX=30)
    MDFIL(ORG_MASK) = 0
    MDFIL(FIL_MASK) = 0
    FIM = IMAGE(MDFIL, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[2,2,2])
    POS = FIM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Median Filtered',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_MAG IMAGE
    GRAD_MAG = BYTSCL(ALOG10(BOA_FRONTS.GRAD_MAG),MIN=ALOG10(0.01),MAX=ALOG10(3.0))
    GRAD_MAG(ORG_MASK) = 0
    GRAD_MAG(FIL_MASK) = 0
    GMM = IMAGE(GRAD_MAG, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[2,2,3])
    POS = GMM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Gradient Magnitude',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_DIR IMAGE
    GRAD_DIR = BYTSCL(BOA_FRONTS.GRAD_DIR,MIN=0,MAX=360)
    GRAD_DIR(ORG_MASK) = 0
    GRAD_DIR(FIL_MASK) = 0
    GDM = IMAGE(GRAD_DIR, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[2,2,4])
    POS = GDM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Gradient Direction',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    W.SAVE, DIR + 'A2002364070500_L2_SST.PNG'
    WAIT, DELAY
    W.CLOSE
  ENDIF ; DO_SST_EXAMPLE
  
;*******************************************
  IF KEYWORD_SET(DO_PIXEL_EXAMPLE) THEN BEGIN
;*******************************************
    FILE = FILE_SEARCH(DIR + 'A2002364070500.L2_LAC_SST.SAV') ; FIND DEMO SST FILE
    SOBJ = OBJ_NEW('IDL_SAVEFILE',FILENAME=FILE)              ; READ THE SAVE FILE
    SOBJ->RESTORE,'STRUCT'                                    ; RESTORE THE SST ARRAY
    SST = STRUCT.SST
    HELP, SST
    SZ = SIZE(SST,/DIMENSIONS)

    BOA_FRONTS1  = FRONTS_BOA(SST, LOG=0, WIDTH=1,HEIGHT=1, EPSILON=1.0)
    BOA_FRONTS2  = FRONTS_BOA(SST, LOG=0, WIDTH=2,HEIGHT=2, EPSILON=1.0)
    BOA_FRONTS4  = FRONTS_BOA(SST, LOG=0, WIDTH=4,HEIGHT=4, EPSILON=1.0)
    BOA_FRONTSP1 = FRONTS_BOA(SST, LOG=0, WIDTH=STRUCT.PIXEL_WIDTH,  HEIGHT=STRUCT.PIXEL_HEIGHT,  EPSILON=1.0)
    BOA_FRONTSP2 = FRONTS_BOA(SST, LOG=0, WIDTH=STRUCT.PIXEL_WIDTH*2,HEIGHT=STRUCT.PIXEL_HEIGHT*2, EPSILON=1.0)
    
    ; ===> OPEN A WINDOW FOR THE COMPOSITE FIGURE
    W = WINDOW(DIMENSIONS=[SZ[0]*3/4,SZ[1]*2/4],BUFFER=BUFFER)
    MARGIN = 0.001
    DELAY = 15 ; DELAY (IN SECONDS) BEFORE CLOSING THE IMAGE WINDOW

    ; ===> MAKE MASK
    ORG_MASK = WHERE(SST EQ !VALUES.F_INFINITY)
    FIL_MASK = WHERE(FINITE(BOA_FRONTS1.MDFIL) EQ 0)

    ; ===> ADD ORIGINAL INPUT IMAGE
    BSST = BYTSCL(SST,MIN=0.0,MAX=30)
    BSST(ORG_MASK) = 0
    OIM = IMAGE(BSST, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[3,2,1])
    POS = OIM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Original SST Data',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_MAG IMAGE FOR PIXEL WIDTH AND HEIGHT = 1
    GRAD_MAG = BYTSCL(ALOG10(BOA_FRONTS1.GRAD_MAG),MIN=ALOG10(0.01),MAX=ALOG10(3.0))
    GRAD_MAG(ORG_MASK) = 0
    GRAD_MAG(FIL_MASK) = 0
    GMM = IMAGE(GRAD_MAG, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[3,2,2])
    POS = GMM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Gradient Magnitude!CPixel Distance = 1',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_MAG IMAGE FOR PIXEL WIDTH AND HEIGHT = 2
    GRAD_MAG = BYTSCL(ALOG10(BOA_FRONTS2.GRAD_MAG),MIN=ALOG10(0.01),MAX=ALOG10(3.0))
    GRAD_MAG(ORG_MASK) = 0
    GRAD_MAG(FIL_MASK) = 0
    GMM = IMAGE(GRAD_MAG, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[3,2,3])
    POS = GMM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Gradient Magnitude!CPixel Distance = 2',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_MAG IMAGE FOR PIXEL WIDTH AND HEIGHT = 4
    GRAD_MAG = BYTSCL(ALOG10(BOA_FRONTS4.GRAD_MAG),MIN=ALOG10(0.01),MAX=ALOG10(3.0))
    GRAD_MAG(ORG_MASK) = 0
    GRAD_MAG(FIL_MASK) = 0
    GMM = IMAGE(GRAD_MAG, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[3,2,4])
    POS = GMM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.1-POS(3)),'Gradient Magnitude!CPixel Distance = 4',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_MAG IMAGE FOR PIXEL WIDTH AND HEIGHT = ACTUAL 
    GRAD_MAG = BYTSCL(ALOG10(BOA_FRONTSP1.GRAD_MAG),MIN=ALOG10(0.01),MAX=ALOG10(3.0))
    GRAD_MAG(ORG_MASK) = 0
    GRAD_MAG(FIL_MASK) = 0
    GMM = IMAGE(GRAD_MAG, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[3,2,5])
    POS = GMM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.1-POS(3)),'Gradient Magnitude!CPixel Distance = Actual Distance',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    ; ===> ADD GRAD_MAG IMAGE FOR PIXEL WIDTH AND HEIGHT = ACTUAL * 2
    GRAD_MAG = BYTSCL(ALOG10(BOA_FRONTSP2.GRAD_MAG),MIN=ALOG10(0.01),MAX=ALOG10(3.0))
    GRAD_MAG(ORG_MASK) = 0
    GRAD_MAG(FIL_MASK) = 0
    GMM = IMAGE(GRAD_MAG, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN, LAYOUT=[3,2,6])
    POS = GMM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.1-POS(3)),'Gradient Magnitude!CPixel Distance = Actual Distance * 2',FONT_COLOR='WHITE', FONT_STYLE='BOLD')



    W.SAVE, DIR + 'A2002364070500_L2_SST-PIXEL_EXAMPLE.PNG'
    WAIT, DELAY
    W.CLOSE
  ENDIF ; DO_PIXEL_EXAMPLE
  
  
;********************************************
  IF KEYWORD_SET(DO_CHECK_MATH) THEN BEGIN
;********************************************
    MESSAGE,/INFORM,'THIS STEP COMPUTES THE GRADIENT FOR A DEGREE DIFFERENCE AROUND A SINGLE PIXEL'
    MESSAGE,/INFORM,'USING A SMALL 5X5 ARRAY SO THE RESULTS MAY BE EASILY PRINTED'
    
    EPSILON=1.0
    RGB=33
    
    FOR N=0, 10 DO BEGIN
      SST = REPLICATE(1.0,[5,5]) 
      CASE N OF
        0:  BEGIN & SST(12) = 2 & END
        1:  BEGIN & SST(12) = 3 & END
        2:  BEGIN & SST(10:14) = 3 & END
        3:  BEGIN & SST(2) = 3 & SST(7) = 3 & SST(12) = 3 & SST(17) = 3 & SST(22) = 3 & END
        4:  BEGIN & SST[0] = 3 & SST(6) = 3 & SST(12) = 3 & SST(18) = 3 & SST(24) = 3 & END
        5:  BEGIN & SST(6:8) = 3 & SST(11:13) = 3 & SST(16:18) = 3 & END
        6:  BEGIN & SST(6:8) = 2 & SST(11:13) = 2 & SST(16:18) = 2 & SST(12) = 3 & END
        7:  BEGIN & SST(1,*) = 2 & SST(2,*) = 3 & SST(3,*) = 4 & SST(4,*) = 5 & END
        8:  BEGIN & SST(0,4) = 2 & SST(1,3) = 2 & SST(2,2) = 2 & SST(3,3) = 2 & SST(4,4) = 2 & END
        9:  BEGIN & SST(0,4) = 1 & SST(1,3) = 2 & SST(2,2) = 3 & SST(3,3) = 2 & SST(4,4) = 1 & END
        10: BEGIN & SST(0,4) = 1 & SST(1,3:4) = 2 & SST(2,2:4) = 3 & SST(3,1:4) = 4 & SST(4,*) = 5 & END
      ENDCASE
            
      S  = FRONTS_BOA(SST, LOG=0, WIDTH=1,HEIGHT=1, EPSILON=EPSILON)
      PRINT & PRINT, 'SST:'         & PRINT, SST
      PRINT & PRINT, 'FILTERED SST' & PRINT, S.MDFILTER
      PRINT & PRINT, 'GRAD_MAG:'    & PRINT, S.GRAD_MAG
      PRINT & PRINT, 'GRAD_X:'      & PRINT, S.GRAD_X
      PRINT & PRINT, 'GRAD_Y:'      & PRINT, S.GRAD_Y
      PRINT & PRINT, 'GRAD_DIR:'    & PRINT, S.GRAD_DIR
      
      W = WINDOW(DIMENSIONS=[1000,200],TITLE='Example ' + ROUNDS(N))
      X = 6 & Y = 1
      I1 = IMAGE(SST,       MIN_VALUE=-2,MAX_VALUE=6, TITLE='SST',      RGB_TABLE=RGB, LAYOUT=[X,Y,1],/CURRENT)
      I2 = IMAGE(S.MDFILTER,MIN_VALUE=-2,MAX_VALUE=6, TITLE='FILTERED', RGB_TABLE=RGB, LAYOUT=[X,Y,2],/CURRENT)
      I3 = IMAGE(S.GRAD_MAG,MIN_VALUE=-2,MAX_VALUE=6, TITLE='GRAD MAG', RGB_TABLE=RGB, LAYOUT=[X,Y,3],/CURRENT)
      I4 = IMAGE(S.GRAD_X,  MIN_VALUE=-2,MAX_VALUE=6, TITLE='GRAD X',   RGB_TABLE=RGB, LAYOUT=[X,Y,4],/CURRENT)
      I5 = IMAGE(S.GRAD_Y,  MIN_VALUE=-2,MAX_VALUE=6, TITLE='GRAD Y',   RGB_TABLE=RGB, LAYOUT=[X,Y,5],/CURRENT)
      I6 = IMAGE(S.GRAD_DIR,MIN_VALUE=0,MAX_VALUE=360,TITLE='GRAD DIR', RGB_TABLE=RGB, LAYOUT=[X,Y,6],/CURRENT)

      STOP  
      W.CLOSE
    ENDFOR
  
  ENDIF;IF KEYWORD_SET(DO_CHECK_MATH) THEN BEGIN
  ;||||||||||||||||||||||||||||||||||||||||||||||||||

;*********************************************
  IF KEYWORD_SET(DO_CHLOR_A_AZIMUTH) THEN BEGIN
;*******************************************
    FILE = FILE_SEARCH(DIR + 'S_20001014170737-SEAWIFS-OV2-MLAC-R2010-L2.SAV')  ; FIND DEMO CHLOROPHYLL FILE
 
    SOBJ = OBJ_NEW('IDL_SAVEFILE',FILENAME=FILE)                     ; READ THE SAVE FILE
    SOBJ->RESTORE,'STRUCT'                                           ; RESTORE THE CHLOROPHYLL ARRAY
    CHL = STRUCT.CHL
    HELP, CHL
    SZ = SIZE(CHL,/DIMENSIONS)
 
    BOA_FRONTS = FRONTS_BOA(CHL, WIDTH=STRUCT.PIXEL_WIDTH, HEIGHT=STRUCT.PIXEL_HEIGHT, AZIMUTH=STRUCT.AZIMUTH, LOG=1, EPSILON=ALOG(2.0))
    HELP, BOA_FRONTS, /STRUCTURES

;    ===> MAKE MASK
    ORG_MASK = WHERE(CHL EQ !VALUES.F_INFINITY OR STRUCT.LANDMASK EQ 1)
    FIL_MASK = WHERE(FINITE(BOA_FRONTS.MDFIL) EQ 0)
       
; ===> ORIGINAL GRAD_DIR IMAGE
    GRAD_DIR = BYTSCL(BOA_FRONTS.UNCOR_GRAD_DIR,MIN=0,MAX=360)
    GRAD_DIR(ORG_MASK) = 0
    GRAD_DIR(FIL_MASK) = 0
    GDM = IMAGE(GRAD_DIR, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN)
    POS = GDM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Uncorrected Gradient Direction',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    W.SAVE, DIR + 'S_20001014170737-SEAWIFS-L2-UNCORRECTED_GRAD_DIR.PNG'
    WAIT, DELAY
    W.CLOSE
    
; ===> AZIMUTH CORRECTED GRAD_DIR IMAGE
    GRAD_DIR = BYTSCL(BOA_FRONTS.GRAD_DIR,MIN=0,MAX=360)
    GRAD_DIR(ORG_MASK) = 0
    GRAD_DIR(FIL_MASK) = 0
    GDM = IMAGE(GRAD_DIR, RGB_TABLE='RAINBOW', /CURRENT, MARGIN=MARGIN)
    POS = GDM.POSITION
    T = TEXT(POS[0]*1.05,POS(3)-(POS(3)*1.05-POS(3)),'Azimuth Corrected Gradient Direction',FONT_COLOR='WHITE', FONT_STYLE='BOLD')

    W.SAVE, DIR + 'S_20001014170737-SEAWIFS-L2-AZIMUTH_CORRECTED_GRAD_DIR.PNG'
    WAIT, DELAY
    W.CLOSE   
   
   
  ENDIF ; DO_CHLOR_A_AZIMUTH
;||||||||||||||||||||||||||||





END; #####################  END OF PROCEDURE ################################
