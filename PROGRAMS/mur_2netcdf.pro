; $ID:	MUR_2NETCDF.PRO,	2020-07-08-15,	USER-KJWH	$

 PRO MUR_2NETCDF, FILES, DIR_OUT=DIR_OUT, MAP_OUT=map_out, LONLAT=lonlat, MAP_SUBSET=map_subset, MUR_GLOBAL=mur_global, DIR_GLOBAL=DIR_GLOBAL, $
   LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX, TAGNAMES_GLOBAL=TAGNAMES_GLOBAL, TAGNAMES_IMAGE=TAGNAMES_IMAGE, TAGNAMES_MASK=TAGNAMES_MASK, OVERWRITE=overwrite
;+
; NAME:
;       MUR_2NETCDF
;
; PURPOSE:
;				Read a MUR netcdf and create a subset netcdf
;
; PROCEDURE:
;       
;
;	INPUT KEYWORDS:
;	  FILES: Input files
;	  DIR_OUT: Output directory
;	  MAP_OUT: Output map
;	  
;	OPTIONAL KEYWORDS  
;	  LONLAT: Add the LON and LAT coordinates to the output file
;	  MAP_SUBSET: To subset a map using MAPS_REMAP based on
;	    LONMIN
;	    LONMAX
;	    LATMIN
;	    LATMAX
;	  MUR_GLOBAL: If set, use the GLOBAL info from the original MUR netcdf
;	  DIR_GLOBAL: Directory for the GLOBAL MUR files
;	  TAGNAMES_GLOBAL: Optional GLOBAL tags to add to the netcdf
;	  TAGNAMES_DATE: Optional DATE tags to add to the netcdf
;	  TAGNAMES_MASK: Optional MASK tags to add to the netcdf  
;	  OVERWRITE: Overwrite an existing file 
;
;	RESTRICTIONS:
;		
;
;	EXAMPLE:
;   MUR_2NETCDF, FILES, DIR_OUT=DIR_OUT, MAP_OUT=AMAP, LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX, LONLAT=1, MAP_SUBSET=1, MUR_GLOBAL=1, DIR_GLOBAL=DIR_GLOBAL, OVERWRITE=OVERWRITE
;
; MODIFICATION HISTORY:
;       Written April 25, 2016 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;       JUL 29, 2016 - KJWH: Updated documentation
;       
;-

  ROUTINE_NAME='MUR_2NETCDF'

;	===> Initialize
	SPACE = ' '
	SEMICOLON = ';'
	DASH = '-'
	SL = PATH_SEP()
	
	
	COMMON MUR_2NETCDF_, GLOBAL, SD, MASTER_LONS, MASTER_LATS, SUBSET_LATS, SUBSET_LONS, SUBSET_MAP
	IF NONE(SUBSET_MAP) THEN SUBSET_MAP = '' ; Initialize to ''	
	IF NONE(MASTER_LATS) THEN MASTER_LATS = IDL_RESTORE(!S.MASTER + 'MUR_36000_17999_LAT.SAV')
	IF NONE(MASTER_LONS) THEN MASTER_LONS = IDL_RESTORE(!S.MASTER + 'MUR_36000_17999_LON.SAV')	
	
	FOR _FILES=0,N_ELEMENTS(FILES)-1L DO BEGIN
	  AFILE=FILES(_FILES)
	  FN=PARSE_IT(AFILE,/ALL)
	  IF FN.EXT EQ 'nc' THEN SI = SENSOR_INFO(AFILE) ELSE SI = FN
	  IF NONE(MAP_OUT) THEN _MAP_OUT = FN.MAP ELSE _MAP_OUT = MAP_OUT
	  	    
	  IF N_ELEMENTS(DIR_OUT) NE 1 THEN _DIR_OUT = REPLACE(FN.DIR,'SAVE','NETCDF') ELSE _DIR_OUT = DIR_OUT
	  DIR_TEST, _DIR_OUT

	  NCDF_FILE = _DIR_OUT + SI.PERIOD + DASH + SI.SENSOR + DASH + SI.METHOD + DASH + SI.COVERAGE + DASH + _MAP_OUT + DASH + 'SST' + '.nc'
	  IF FILE_MAKE(AFILE,NCDF_FILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    IF FN.EXT EQ 'nc' THEN BEGIN
      IF SI.SENSOR EQ 'MUR'   THEN SAVE_MAKE_GHRSST, AFILE, MAPS_OUT=MAP_OUT, LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX, RETURN_STRUCT=STRUCT, ANALYSIS_ERROR=ASTRUCT, /SAVE_STD, /DATA_ONLY $
      IF SI.SENSOR EQ 'AVHRR' THEN SAVE_MAKE_AVHRR,  AFILE, MAPS_OUT=MAP_OUT, LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX, RETURN_STRUCT=STRUCT, ANALYSIS_ERROR=ASTRUCT, /SAVE_STD, /DATA_ONLY 
    ENDIF
                      ELSE SDATA = STRUCT_READ(AFILE,STRUCT=STRUCT) 
    PROD=STRLOWCASE(STRUCT.PROD)
    SDATA = STRUCT.DATA

;   ===> Start the SD interface
    IF FILE_TEST(NCDF_FILE) THEN FILE_DELETE, NCDF_FILE
	  SD_ID = NCDF_CREATE(NCDF_FILE,/CLOBBER,/NETCDF4_FORMAT)
    IF SD_ID EQ -1 THEN MESSAGE, 'NCDF_CREATE FAILED' 	
  
;	===> Identify Tagnames for Global Attributes
  	IF NONE(TAGNAMES_GLOBAL) THEN TAGNAMES_GLOBAL  = ['PERIOD','SENSOR','SATELLITE','SAT_EXTRA','METHOD','MAP','STAT','FILE_NAME']
  	IF NONE(TAGNAMES_DATE)   THEN TAGNAMES_DATE    = ['PERIOD','YEAR_START','MONTH_START','DAY_START','YEAR_END','MONTH_END','DAY_END']
  	IF NONE(TAGNAMES_MASK)   THEN TAGNAMES_MASK    = ['MASK','CODE_MASK','CODE_NAME_MASK']


;		*******************************
;		*** Write GLOBAL Attributes ***
;		*******************************
    IF KEY(MUR_GLOBAL) THEN BEGIN
      GFILE = DIR_GLOBAL + SI.PERIOD + DASH + SI.SENSOR + DASH + SI.METHOD + DASH + SI.COVERAGE + DASH + 'GLOBAL.SAV' 
      GSTRUCT = IDL_RESTORE(GFILE)
      TAGNAMES_GLOBAL = TAG_NAMES(GSTRUCT) 
      TAGNAMES = TAGNAMES_GLOBAL
    ENDIF ELSE GSTRUCT = STRUCT  ; For the global attributes if the original GLOBAL file is not used
      
		FOR _TARGET = 0,N_ELEMENTS(TAGNAMES_GLOBAL)-1 DO BEGIN
			NAME = TAGNAMES_GLOBAL(_TARGET)
			OK_POS = WHERE(TAGNAMES EQ NAME,COUNT)
			IF COUNT EQ 1 THEN BEGIN
				VAL = GSTRUCT.(OK_POS)
				SZ = SIZE(VAL,/STRUCT)
				IF SZ.N_ELEMENTS EQ 1 THEN BEGIN
					IF SZ.TYPE EQ 7 AND VAL EQ '' THEN VAL = SEMICOLON
				ENDIF

				IF SZ.N_ELEMENTS GE 2 AND SZ.TYPE EQ 7 THEN VAL = STRJOIN(VAL+SEMICOLON)
				NCDF_ATTPUT, SD_ID, NAME, VAL, /GLOBAL
			ENDIF
		ENDFOR

;   Add data source & date created    
    NCDF_ATTPUT, SD_ID, 'NETCDF_CREATED_BY', 'K. Hyde, NOAA/NMFS/NEFSC Narragansett Laboratory kimberly.hyde@noaa.gov', /GLOBAL
    NCDF_ATTPUT, SD_ID, 'NETCDF_DATE_CREATED', STRMID(DATE_NOW(),0,8), /GLOBAL
	 
		

;		****************************
; 	*** Create an SD dataset ***
;		****************************

;   ===> Create a TIME variable
    TID = NCDF_DIMDEF(SD_ID, 'D', 1)
    TIME_ID = NCDF_VARDEF(SD_ID, 'TIME', TID, /LONG)
    TIME_VAL = STRMID(SI.PERIOD,STRPOS(FN.PERIOD,'_')+1)
    TAGNAMES = TAG_NAMES(FN)
    NCDF_ATTPUT, SD_ID, TIME_ID, 'DATETIME', LONG(TIME_VAL) 
    NCDF_ATTPUT, SD_ID, TIME_ID, 'FORMAT', STRMID('yyyymmddhhmmss',0,STRLEN(TIME_VAL))  
    FOR _TARGET = 0,N_ELEMENTS(TAGNAMES_DATE)-1 DO BEGIN
      NAME = TAGNAMES_DATE(_TARGET)
      OK_POS = WHERE(TAGNAMES EQ NAME,COUNT)
      IF COUNT EQ 1 THEN BEGIN
        VAL = FN.(OK_POS)
        SZ = SIZE(VAL,/STRUCT)
        IF SZ.N_ELEMENTS EQ 1 THEN BEGIN
          IF SZ.TYPE EQ 7 AND VAL EQ '' THEN VAL = SEMICOLON
        ENDIF
        IF SZ.N_ELEMENTS GE 2 AND SZ.TYPE EQ 7 THEN VAL = STRJOIN(VAL+SEMICOLON)
        NCDF_ATTPUT, SD_ID, TIME_ID, NAME, VAL
      ENDIF
    ENDFOR
    NCDF_CONTROL, SD_ID, /ENDEF
    NCDF_VARPUT, SD_ID, TIME_ID, TIME_VAL ; Write the DATE into the dataset
     

;		===> Add the SST DATA product
	  XID = NCDF_DIMDEF(SD_ID, 'X', STRUCT.PX)
	  YID = NCDF_DIMDEF(SD_ID, 'Y', STRUCT.PY)
		PROD_ID = NCDF_VARDEF(SD_ID, PROD, [XID,YID], /FLOAT, GZIP=9)
				
;   ===> Add SST attributes
    NCDF_ATTPUT, SD_ID, PROD_ID, 'LONG_NAME',     STRUCT.LONG_NAME
    NCDF_ATTPUT, SD_ID, PROD_ID, 'STANDARD_NAME', STRUCT.STANDARD_NAME
    NCDF_ATTPUT, SD_ID, PROD_ID, 'XDIM',          STRUCT.PX
    NCDF_ATTPUT, SD_ID, PROD_ID, 'YDIM',          STRUCT.PY
    NCDF_ATTPUT, SD_ID, PROD_ID, '_FILLVALUE',    MISSINGS(LONS)
    NCDF_ATTPUT, SD_ID, PROD_ID, 'ADD_OFFSET',    0.0
    NCDF_ATTPUT, SD_ID, PROD_ID, 'SCALE_FACTOR',  1.0
    NCDF_ATTPUT, SD_ID, PROD_ID, 'UNITS',         'celcius'
    NCDF_ATTPUT, SD_ID, PROD_ID, 'VALID_MIN',     -10.0
    NCDF_ATTPUT, SD_ID, PROD_ID, 'VALID_MAX',     45.0
    NCDF_ATTPUT, SD_ID, PROD_ID, 'INPUT_FILES',   STRUCT.INFILE
    NCDF_ATTPUT, SD_ID, PROD_ID, 'COMMENT',       STRUCT.COMMENT
    NCDF_ATTPUT, SD_ID, PROD_ID, 'NOTES',         STRUCT.NOTES
    NCDF_ATTPUT, SD_ID, PROD_ID, 'SOURCE',        STRUCT.SOURCE
    
    NCDF_CONTROL, SD_ID, /ENDEF
    NCDF_VARPUT, SD_ID, PROD_ID, STRUCT.DATA ; Write the image Data into the dataset

;   ===> Add the ANALYSIS_ERROR product
    IF ASTRUCT NE [] THEN BEGIN
      SZ=SIZE(ASTRUCT.SIMAGE,/STRUCT)
      NCDF_CONTROL, SD_ID, /REDEF
      XID = NCDF_DIMDEF(SD_ID, 'XERR', SZ.DIMENSIONS[0])
      YID = NCDF_DIMDEF(SD_ID, 'YERR', SZ.DIMENSIONS[1])
      ERR_ID = NCDF_VARDEF(SD_ID, 'ANALYSIS_ERROR', [XID,YID], /FLOAT, GZIP=9)
  
;   ===> Add dataset attributes
      NCDF_ATTPUT, SD_ID, ERR_ID, 'LONG_NAME',   ASTRUCT.LONG_NAME
      NCDF_ATTPUT, SD_ID, ERR_ID, 'XDIM',        SZ.DIMENSIONS[0]
      NCDF_ATTPUT, SD_ID, ERR_ID, 'YDIM',        SZ.DIMENSIONS[1]
      NCDF_ATTPUT, SD_ID, ERR_ID, '_FILLVALUE',  ASTRUCT._FILLVALUE
      NCDF_ATTPUT, SD_ID, ERR_ID, 'ADD_OFFSET',  ASTRUCT.ADD_OFFSET
      NCDF_ATTPUT, SD_ID, ERR_ID, 'SCALE_FACTOR',ASTRUCT.SCALE_FACTOR
      NCDF_ATTPUT, SD_ID, ERR_ID, 'UNITS',       ASTRUCT.UNITS
      NCDF_ATTPUT, SD_ID, ERR_ID, 'VALID_MIN',   ASTRUCT.VALID_MIN
      NCDF_ATTPUT, SD_ID, ERR_ID, 'VALID_MAX',   ASTRUCT.VALID_MAX
      NCDF_ATTPUT, SD_ID, ERR_ID, 'COMMENT',     ASTRUCT.COMMENT
    	
    	NCDF_CONTROL, SD_ID, /ENDEF
		  NCDF_VARPUT, SD_ID, ERR_ID, ASTRUCT.SIMAGE ; Write the image Data into the dataset
		ENDIF
		
; ===> Add the LON and LAT data
  	IF KEYWORD_SET(LONLAT) THEN BEGIN
      IF NONE(SUBSET_LATS) AND NONE(SUBSET_LONS) AND SUBSET_MAP NE _MAP_OUT THEN BEGIN
        IF MAP_SUBSET EQ 1 THEN BEGIN
    	    IF NONE(SUBSET_LATS) THEN SUBSET_LATS = MAPS_REMAP(MASTER_LATS, MAP_IN='MUR', MAP_OUT=_MAP_OUT, MAP_SUBSET=1, LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX)
    	    IF NONE(SUBSET_LONS) THEN SUBSET_LONS = MAPS_REMAP(MASTER_LONS, MAP_IN='MUR', MAP_OUT=_MAP_OUT, MAP_SUBSET=1, LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX)
    	  ENDIF ELSE BEGIN
          LL=MAPS_2LONLAT(STRUCT.MAP, PX=STRUCT.PX,PY=STRUCT.PY)
          SUBSET_LATS = LL.LAT
          SUBSET_LONS = LL.LON
    	  ENDELSE
    	  SUBSET_MAP = _MAP_OUT
    	ENDIF  
    
  		PROD = 'longitude'
  		SZ=SIZE(SUBSET_LONS,/STRUCT) 
  		NCDF_CONTROL, SD_ID, /REDEF
      XID = NCDF_DIMDEF(SD_ID, 'XLON', SZ.DIMENSIONS[0])
      YID = NCDF_DIMDEF(SD_ID, 'YLON', SZ.DIMENSIONS[1])
      LON_ID = NCDF_VARDEF(SD_ID, PROD,[XID,YID],/FLOAT, GZIP=9)
      
  ;		===> Add dataset attributes
   		NCDF_ATTPUT, SD_ID, LON_ID, 'XDIM', 			 SZ.DIMENSIONS[0]
   		NCDF_ATTPUT, SD_ID, LON_ID, 'YDIM', 			 SZ.DIMENSIONS[1]
   		NCDF_ATTPUT, SD_ID, LON_ID, '_FILLVALUE',  MISSINGS(SUBSET_LONS)
  	  NCDF_ATTPUT, SD_ID, LON_ID, 'ADD_OFFSET',	 0.0
  	  NCDF_ATTPUT, SD_ID, LON_ID, 'SCALE_FACTOR',1.0
  	  NCDF_ATTPUT, SD_ID, LON_ID, 'UNITS',       'degrees'
  	  NCDF_ATTPUT, SD_ID, LON_ID, 'VALID_MIN',   -180.0
  	  NCDF_ATTPUT, SD_ID, LON_ID, 'VALID_MAX',    180.0

  	  NCDF_CONTROL, SD_ID, /ENDEF
      NCDF_VARPUT, SD_ID, LON_ID, SUBSET_LONS
  	  
  		PROD = 'latitude'
  		SZ=SIZE(SUBSET_LATS,/STRUCT)
  		NCDF_CONTROL, SD_ID, /REDEF
      XID = NCDF_DIMDEF(SD_ID, 'XLAT', SZ.DIMENSIONS[0])
      YID = NCDF_DIMDEF(SD_ID, 'YLAT', SZ.DIMENSIONS[1])
      LAT_ID = NCDF_VARDEF(SD_ID, PROD,[XID,YID],/FLOAT, GZIP=9)
      
  ;		===> Add dataset attributes
   		NCDF_ATTPUT, SD_ID, LAT_ID, 'XDIM',        SZ.DIMENSIONS[0]
      NCDF_ATTPUT, SD_ID, LAT_ID, 'YDIM',        SZ.DIMENSIONS[1]
      NCDF_ATTPUT, SD_ID, LAT_ID, '_FILLVALUE',  MISSINGS(SUBSET_LATS)
      NCDF_ATTPUT, SD_ID, LAT_ID, 'ADD_OFFSET',  0.0
      NCDF_ATTPUT, SD_ID, LAT_ID, 'SCALE_FACTOR',1.0
      NCDF_ATTPUT, SD_ID, LAT_ID, 'UNITS',       'degrees'
      NCDF_ATTPUT, SD_ID, LAT_ID, 'VALID_MIN',   -90.0
      NCDF_ATTPUT, SD_ID, LAT_ID, 'VALID_MAX',    90.0
   		
  	  NCDF_CONTROL, SD_ID, /ENDEF
      NCDF_VARPUT, SD_ID, LAT_ID, SUBSET_LATS
  
  	ENDIF
  
  	NCDF_CLOSE,SD_ID

	ENDFOR ; FOR _FILES=0,N_ELEMENTS(FILES)-1L DO BEGIN


END; #####################  End of Routine ################################
