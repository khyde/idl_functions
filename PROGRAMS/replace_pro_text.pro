; $ID:	REPLACE_PRO_TEXT.PRO,	2020-07-01-12,	USER-KJWH	$
;
	PRO REPLACE_PRO_TEXT, OLD, NEW, DIR_PRO=DIR_PRO, TEST=TEST, VERBOSE=VERBOSE
;
;+
; NAME:
;		PRO_REPLACE
;
; PURPOSE: 
;   SEARCHES THROUGH ALL .pro FILES AND "FINDS AND REPLACES" TEXT WITHIN A PROGRAM
; 
; CATEGORY:	 
;   EDIT
;		
; CALLING SEQUENCE:
;   PRO_REPLACE,OLD,NEW
;   
; INPUTS:
;		OLD: OLD TEXT STRING TO BE REPLACED WITHIN THE PROGRAM
;		NEW: THE NEW TEXT REPLACEMENT STRING
;		
; OPTIONAL INPUTS:
;		DIR_PRO:   Program directory
;
; KEYWORD PARAMETERS:
;		
; OUTPUTS:
;		THIS PROGRAM:
;	    1) OPENS EACH PRO FILE
;	    2) SEARCHES FOR OLD TEST STRING
;	    3) IF FOUND THEN COPIES PRO TO !S.IDL_BACKUP
;	    4) THEN IT PERMANENTLY CHANGES THE PROGRAM FILE IN !S.PROGRAMS
;
; EXAMPLE:
;  REPLACE_PRO_TEXT,'LIST', 'PLIST'
;  REPLACE_PRO_TEXT,'READ_CSV', 'CSV_READ'
;  REPLACE_PRO_TEXT,'JUNK!23', '' ; SHOULD NOT FIND ANY PROGRAMS
;
;	NOTES:
;
; MODIFICATION HISTORY:
;			WRITTEN SEP 25,2011  J.O'REILLY
;			MAR 04, 2014 - JEOR: MAJOR REVISIONS [PFILE, FORMATTING]
;			                     NO LONGER SEPARATING COMMENTS FROM COMMANDS BUT INSTEAD USING REPLACE ON THE ENTIRE PROGRAM TXT
;			                     IF OLD IS FOUND ON A COMMENTED LINE THEN DO NOT REPLACE IT WITH NEW
;                          MAKE A TXT LIST OF ALL PROGRAMS CHANGED IN !S.PROGRAMS:
;                          OUTFILE = !S.PROGRAMS + ROUTINE_NAME + '.TXT.
;     MAR 17, 2014 - KJWH: MODIFIED THE FILE_SEARCH TO INCLUDE '*.pro' SO THAT IT IS COMPATIBLE WITH LINUX AND MAC SYSTEMS
;     MAR 26, 2014 - KJWH: ADDED DIR_PRO AND QUIET KEYWORDS, CHANGED THE LOCATION OF THE OUTPUT TXT FILE AND MADE THE PROGRAM LESS VERBOSE
;     DEC 11, 2014 - KJWH: ADDED LOGIC TO DETERMINE IF THE TXT BEING CHANGED WAS IN THE COMMENTED TEXT (I.E. AFTER THE ;) 
;     NOV 30, 2015 - KJWH: CHANGED LOG DIRECTORY TO BE !S.LOGS + ROUTINE + SL
;     NOV 29, 2017 - KJWH: Major revisions:
;                            Changed the program name from PRO_REPLACE to REPLACE_PRO_TEXT to be more intuitive
;                            Using FILE_DOC to create the backup file
;                            Added STRUPCASE to the OLD and TXT parameters 
;                            Removed QUIET keyword
;                            Added keyword TEST and a block to just find the OLD text and print out number of occurences within each file
;                            Added check for the NEW and OLD text and files in DIR_PRO
;-
;**********************************
  ROUTINE_NAME = 'REPLACE_PRO_TEXT'
;**********************************	
  SL = PATH_SEP()
  
  
  IF KEY(TEST) THEN VERBOSE = 1
  
  OLD = STRUPCASE(OLD)
  IF NONE(NEW) OR NONE(OLD) THEN MESSAGE, 'ERROR: Must provide OLD and NEW text strings'
  
	; ===>  BACKUP AND PROGRAM DIRECTORIES
	BACK = !S.IDL_BACKUP
	LOG  = !S.LOGS + ROUTINE_NAME + SL & DIR_TEST, LOG
	IF NONE(DIR_PRO) THEN PROS = !S.PROGRAMS ELSE PROS = DIR_PRO
	
; ===> FIND ALL PROGRAMS	
	FILES = FLS(PROS+['*.PRO','*.pro'],COUNT=COUNT_FILES) & IF KEY(VERBOSE) THEN PN,FILES,'PROGRAM FILES'
	IF COUNT_FILES EQ 0 THEN MESSAGE, 'ERROR: No .pro files found in ' + PROS
	
; FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	
	EDITED_FILES = []
	FOR NTH=0, N_ELEMENTS(FILES)-1L DO BEGIN
	 POF,NTH,FILES,OUTTXT=POFTXT,/QUIET,/NOPRO
	 AFILE = FILES[NTH]
	 FN = FILE_PARSE(AFILE)  
	 
	 TXT = STRUPCASE(READ_TXT(AFILE))	   	 
	 OK = WHERE_STRING(TXT,OLD,FOUND) 
	 IF FOUND EQ 0 THEN CONTINUE ; >>>>  TEXT NOT FOUND IN PROGRAM
	 
	 IF KEY(VERBOSE) THEN PFILE,FN.NAME_EXT,/R, _POFTXT=POFTXT
	 IF TOTAL(STRPOS(TXT[OK],';')) GE 0 THEN LOOP_TXT = 1 ELSE LOOP_TXT = 0
	 
	 NEW_FILE= PROS + FN.NAME_EXT   
	 IF KEY(TEST) THEN BEGIN
	   PRINT
	   PRINT, 'Found ' + NUM2STR(FOUND) + ' instances of ' + OLD + ' in ' + STRUPCASE(FN.NAME_EXT) + ' to be replaced with ' + NEW
	   CONTINUE
	 ENDIF
	 
	 FILE_DOC,FN.NAME,VERBOSE=VERBOSE  ;###> USE FILE_DOC TO CREATE A COPY OF THE ORIGINAL 
   EDITED_FILES =[EDITED_FILES, AFILE]
   
   IF LOOP_TXT EQ 1 THEN BEGIN ; ONLY WANT TO REPLACE ACTIVE TEXT STRINGS (I.E. WE DON'T WANT TO REPLACE TEXT FOUND IN COMMENTS
     COUNTER = 0
     FOR N=0, N_ELEMENTS(OK)-1 DO BEGIN
       IF STRPOS(TXT(OK(N)),';') GT 0 AND STRPOS(TXT(OK(N)),';') LT STRPOS(TXT(OK(N)),OLD) THEN COUNTER = COUNTER+1 ELSE TXT(OK(N)) = REPLACE(TXT(OK(N)),OLD,NEW)
     ENDFOR
     IF COUNTER EQ N_ELEMENTS(OK) THEN CONTINUE ; >>>>  NO ACTIVE TEXT FOUND IN PROGRAM
   ENDIF ELSE TXT[OK] = REPLACE(TXT[OK],OLD,NEW)  ; IF LOOP_TXT EQ 1 THEN BEGIN
     
   WRITE_TXT,NEW_FILE,TXT & IF KEY(VERBOSE) THEN PFILE,NEW_FILE,/W
   FILE_DOC,FN.NAME,VERBOSE=VERBOSE  ;###> USE FILE_DOC TO TIME STAMP THE EDITED PROGRAM  [PASS JUST THE PROGRAM NAME]
	 
	ENDFOR; FOR NTH = 0, N_ELEMENTS(FILES)-1L DO BEGIN
; FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	
  
  IF N_ELEMENTS(EDITED_FILES) GE 1 THEN BEGIN
    OUTFILE = !S.LOGS + ROUTINE_NAME + SL + OLD + '-' + NEW + '-' + DATE_FORMAT(DATE_NOW(),/HOUR) + '.TXT'
    WRITE_TXT,OUTFILE,EDITED_FILES 
    IF KEY(VERBOSE) THEN PFILE,OUTFILE,/W
  ENDIF ELSE IF ~KEY(TEST) THEN PRINT,'Did not find "' + OLD + '" in any of the .pro files'
   
  IF KEY(VERBOSE) THEN 
END; #####################  END OF ROUTINE ################################
