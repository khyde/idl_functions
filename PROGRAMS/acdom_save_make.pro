; $ID:	ACDOM_SAVE_MAKE.PRO,	2020-07-08-15,	USER-KJWH	$

	PRO ACDOM_SAVE_MAKE,DIR_IN=DIR_IN,DIR_OUT=DIR_OUT,DATE_RANGE=DATE_RANGE,PRODUCTS=PRODUCTS,REVERSE_FILES=REVERSE_FILES,$
	                       PERIOD_CODE=PERIOD_CODE,SENSOR=SENSOR,MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT,OVERWRITE=OVERWRITE

;+
; NAME:
;		ACDOM_SAVE_MAKE
;
; PURPOSE:;
;		This procedure creates phtytoplankton pigment files using the PAN pigment algorithm
;
; CATEGORY:
;		CATEGORY
;
; CALLING SEQUENCE:
;
;		PIGMENTS_SAVE_MAKE, Parameter1, Parameter2
;
; INPUTS:
;		Parm1:	Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;		Parm2:	Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;		KEY1:	Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
;
; OUTPUTS:
;		This procedure creates pigment save files 
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			FEB 7,  2011 WRITTEN by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;		  APR 22, 2013 - KJWH: Adapted program to work with multiple algorithms from A. Mannino
;     JAN 15, 2015 - KJWH: Updated and streamlined code
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'ACDOM_SAVE_MAKE'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
	SL = DELIMITER(/PATH)

  IF N_ELEMENTS(PERIOD_CODE) NE 1 THEN _PERIOD_CODE ='S' ELSE _PERIOD_CODE=PERIOD_CODE
  IF N_ELEMENTS(ALGS)        GE 1 THEN _ALGS        = ALGS      ELSE _ALGS = 'MANNINO'
  IF N_ELEMENTS(SATELLITE)   EQ 1 THEN SENSOR       = SENSOR    ELSE SENSOR = ''
  IF N_ELEMENTS(DIR_OUT)     LT 1 THEN DIR_OUT=DIR_IN 
  IF N_ELEMENTS(DIR_IN) LT 1 THEN STOP
    
  IF SENSOR EQ '' THEN SENSOR = VALID_SENSORS(DIR_IN)
  IF SENSOR EQ '' THEN BEGIN
    PRINT, ERROR = 'Must provide valid SENSOR'
    RETURN
  ENDIF   

  R412 = 'RRS_412'
  R443 = 'RRS_443'
  R555 = 'RRS_555'
  R670 = 'RRS_670'
  A412 = 'ABS_412-QAA'
  A443 = 'ABS_443-QAA'
  IF SENSOR EQ 'MODIS' THEN BEGIN
    R555 = 'RRS_547'
    R670 = 'RRS_667'
  ENDIF  

  FILES = FILE_SEARCH(DIR_IN + R412 + SL + _PERIOD_CODE + '_*' + R412 + '.SAV')
  FILES = DATE_SELECT(FILES,DATE_RANGE)  
  IF FILES EQ [] THEN GOTO,DONE
  IF KEYWORD_SET(REVERSE_FILES) THEN FILES = REVERSE(FILES)
  
  TAGS = ['EX555_A275','EX555_A355','EX555_A380','EX555_A412','EX555_A443',$
          'EX670_A275','EX670_A355','EX670_A380','EX670_A412','EX670_A443',$
          'MLR_A275','MLR_A355','MLR_A380','MLR_A412','MLR_A443','MLR_S275','MLR_S300', $
          'QAA443_A275','QAA443_A355','QAA443_A380','QAA443_A412','QAA443_A443','QAA443_S275','QAA443_S300',$
          'QAA412_A355','QAA412_A380','QAA412_A412','QAA412_A443']

  PRODS = []  
  FOR N=0, N_ELEMENTS(TAGS)-1 DO BEGIN
    PROD = []
    SET = STRSPLIT(TAGS(N),'_',/EXTRACT)
    IF STRMID(SET[1],0,1) EQ 'A' THEN PROD = 'A_CDOM_'  + STRMID(SET[1],1,3)
    IF STRMID(SET[1],0,4) EQ 'S275' THEN PROD = 'S_SLOPE_275_295'
    IF STRMID(SET[1],0,4) EQ 'S300' THEN PROD = 'S_SLOPE_300_600'
    ALG  = 'MAN_' + SET[0]
    PRODS = [PRODS,PROD+'-'+ALG]     
  ENDFOR
  IF N_ELEMENTS(PRODUCTS) GE 1 THEN BEGIN
    OK = WHERE_MATCH(PRODS,PRODUCTS,COUNT,VALID=VALID,COMPLEMENT=COMPLEMENT)
    IF COUNT GE 1 THEN PRODS = PRODUCTS(VALID)    
    IF COUNT GE 1 THEN TAGS  = TAGS[OK]
  ENDIF
  
  DIR_TEST,DIR_OUT+PRODS+SL
    
  FOR NTH = 0L,N_ELEMENTS(FILES)-1L DO BEGIN
    RFILE_412=FILES[NTH]
    FP = PARSE_IT(RFILE_412,/ALL)
    IF NONE(MAP_OUT) THEN MAP_OUT = [] ELSE BEGIN 
      MS  = MAPS_SIZE(MAP_OUT)
      IF NONE(PX_OUT) THEN PX_OUT = MS.PX
      IF NONE(PY_OUT) THEN PY_OUT = MS.PY 
    ENDELSE  
    IF MAP_OUT EQ [] THEN MP = FP.MAP ELSE MP = MAP_OUT
    
    RFILE_443=REPLACE(RFILE_412,R412,R443) ;   ===> Get matching R443 file
    RFILE_555=REPLACE(RFILE_412,R412,R555) ;   ===> Get matching R555 file
    RFILE_670=REPLACE(RFILE_412,R412,R670) ;   ===> Get matching R670 file
    AFILE_412=REPLACE(RFILE_412,R412,A412) ;   ===> Get matching A412 file
    AFILE_443=REPLACE(RFILE_412,R412,A443) ;   ===> Get matching A443 file
                  
    SAVEFILES = []
    FOR PTH = 0L, N_ELEMENTS(PRODS)-1 DO SAVEFILES = [SAVEFILES,DIR_OUT+PRODS(PTH)+SL+REPLACE(FP.FIRST_NAME,[FP.MAP,R412],[MP,PRODS(PTH)])+'.SAV']                                
    INFILES  = [RFILE_412,RFILE_443,RFILE_555,RFILE_670,AFILE_412,AFILE_443]
    IF FILE_MAKE(INFILES,SAVEFILES,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
  
;   ===> Read the 412 file    
    DATA_412=STRUCT_READ(RFILE_412,STRUCT=STRUCT_412)
    IF STRUCT_412 EQ [] THEN GOTO, DONE
    PRINT, 'Creating A_CDOM data for ' + FP.PERIOD
                
    IF FILE_TEST(RFILE_443) EQ 1 THEN DATA_443  = STRUCT_READ(RFILE_443) ELSE DATA_443  = []
    IF FILE_TEST(RFILE_555) EQ 1 THEN DATA_555  = STRUCT_READ(RFILE_555) ELSE DATA_555  = []
    IF FILE_TEST(RFILE_670) EQ 1 THEN DATA_670  = STRUCT_READ(RFILE_670) ELSE DATA_670  = []
    IF FILE_TEST(AFILE_412) EQ 1 THEN DATA_A412 = STRUCT_READ(AFILE_412) ELSE DATA_A412 = []
    IF FILE_TEST(AFILE_443) EQ 1 THEN DATA_A443 = STRUCT_READ(AFILE_443) ELSE DATA_A443 = []    
        
    MISSING=MISSINGS(DATA_412)    
        
    STRUCT = A_CDOM_MANNINO(RRS_412=DATA_412, RRS_443=DATA_443, RRS_555=DATA_555, RRS_670=DATA_670, AT_412=DATA_A412, AT_443=DATA_A443, SATELLITE=SENSOR)
    
    IF STRUCT EQ [] THEN GOTO, DONE  
    GONE,DATA_412
    GONE,DATA_443
    GONE,DATA_555
    GONE,DATA_670
    GONE,DATA_A412
    GONE,DATA_A443    
    
    FA = PARSE_IT(SAVEFILES)  
    FOR PTH = 0L, N_ELEMENTS(PRODS)-1 DO BEGIN              
      OK = WHERE_MATCH(FA.SUB,PRODS(PTH),COUNT) & IF COUNT EQ 0 THEN STOP    
      SAVEFILE = SAVEFILES[OK]
      POS = WHERE(TAG_NAMES(STRUCT) EQ TAGS(PTH),COUNT) & IF COUNT EQ 0 THEN STOP      
      MISS = WHERE(STRUCT.(POS) NE MISSINGS(STRUCT.(POS)),COUNT_MISS)
      IF COUNT_MISS GT 0 THEN $
      STRUCT_WRITE,SAVEFILE,PROD=PROD, ALG=ALG, IMAGE=FLOAT(STRUCT.(POS)),MISSING_CODE=MISSING, $
                      DATA_UNITS=UNITS(PROD),PERIOD=STRUCT_412.PERIOD, SENSOR=STRUCT_412.SENSOR, SATELLITE=STRUCT_412.SATELLITE,$
                      METHOD=STRUCT_412.METHOD, COVERAGE=STRUCT_412.COVERAGE, MAP=MP,INFILE=INFILES,NOTES='',ERROR=ERROR
    ENDFOR
      GONE,STRUCT               
   ENDFOR
   DONE:




	END; #####################  End of Routine ################################
