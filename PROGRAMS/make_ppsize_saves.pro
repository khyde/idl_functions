; $ID:	MAKE_PPSIZE_SAVES.PRO,	2020-07-07-17,	USER-KJWH	$

  PRO MAKE_PPSIZE_SAVES, PHYTO_FILES=PHYTO_FILES, PPD_FILES=PPD_FILES, SZ_MODEL=SZ_MODEL, REVERSE_FILES=REVERSE_FILES,  OVERWRITE=OVERWRITE
; NAME:
;       MAKE_PPSIZE_SAVES

; PURPOSE:
;       Run phytoplankton size class productivity models 
;
; KEYWORD PARAMETERS:
;				

; OUTPUTS:
;
; MODIFICATION HISTORY:
;       Written by: K.J.W. Hyde, Nov 6, 2012
;       Updated:
;       MAR 27, 2015 - KJWH: Changed name to MAKE_PPSIZE_SAVES to be consistent with other MAKE_____SAVE programs
;                            Updated with new code (i.e. STRUCT_READ and STRUCT_WRITE)
;       APR 19, 2017 - KJWH: Updated to be compatible with the L3B files
;-
  ROUTINE_NAME = 'MAKE_PPSIZE_SAVES'
  
;	*********************
;	***** Constants *****
;	*********************
  
	IF NONE(PERIOD_CODE) THEN PERIOD_CODE = 'M'   
	IF NONE(SZ_MODEL)    THEN MODELS = 'MAR' ELSE MODELS = SZ_MODEL
	IF NONE(PHYTO_FILES) OR NONE(PPD_FILES) THEN MESSAGE, 'ERROR: Must provide PHTYO and PPD files' 
		
;	*******************************************
; ******** Create output directories ********
;	*******************************************
  
  FP = FILE_PARSE(PPD_FILES[0])  
  DIR_MODELS = REPLACE(FP.DIR,FP.SUB,'PPD_SIZE-'+MODELS)               
  DIR_TEST,DIR_MODELS
        
  MFP = PARSE_IT(PHYTO_FILES,/ALL)  
  FOR FTH = 0L,N_ELEMENTS(PPD_FILES)-1L DO BEGIN
    FILEP=PPD_FILES(FTH)
    FP = PARSE_IT(FILEP,/ALL)
    MP = FP.MAP
    MS = MAPS_SIZE(MP,PX=PX,PY=PY)
    FILEM = PHYTO_FILES[WHERE(MFP.PERIOD EQ FP.PERIOD AND MFP.MAP EQ MP,COUNT)]
    IF COUNT EQ 0 THEN BEGIN
      MESSAGE, 'NO MATCHING FILE FOR:  ' + FP.NAME, /INFORM
      CONTINUE
    ENDIF
        
    INFILES = [FILEP,FILEM]    
    OUTPRODS   = ['MICROPP','NANOPICOPP','MICROPP_PERCENTAGE','NANOPICOPP_PERCENTAGE']
    PROD_UNITS = ['PPD','PPD','PERCENT','PERCENT']  
    SAVEFILES = DIR_MODELS+REPLACE(FP.FIRST_NAME,STRUPCASE(FP.PROD_ALG),'PPD_SIZE-'+MODELS)+'.SAV'                        
    IF FILE_MAKE(INFILES,SAVEFILES,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE

;   ===> Read the PP & MICRO_PERCETNAGE file
    DATA_PP=STRUCT_READ(FILEP,STRUCT=STRUCTP,COUNT=COUNTP,BINS=PBINS) & IF COUNTP EQ 0 THEN CONTINUE
    DATA_MC=STRUCT_READ(FILEM,STRUCT=STRUCTM,COUNT=COUNTM,BINS=MBINS) & IF COUNTM EQ 0 THEN CONTINUE   
    
    IF STRUCTP.PERIOD NE STRUCTM.PERIOD THEN MESSAGE, 'ERROR: The periods in the input files do not match.'
    PRINT, 'Creating percent production data for ' + STRUCTP.PERIOD
    
    IF ANY(PBINS) THEN IF N_ELEMENTS(PBINS) NE PY THEN DATA_PP = MAPS_L3B_2ARR(DATA_PP,MAPP=MP,BINS=PBINS)
    IF ANY(MBINS) THEN IF N_ELEMENTS(MBINS) NE PY THEN DATA_MC = MAPS_L3B_2ARR(DATA_MC,MAPP=MP,BINS=MBINS)   
    OK_ALL = WHERE(DATA_PP NE MISSINGS(DATA_PP) AND DATA_MC NE MISSINGS(DATA_MC),COUNT_ALL)
    IF COUNT_ALL EQ 0 THEN CONTINUE ; Continue if no valid data
    
;   ***** LOOP THROUGH ALGORITHMS *****
    FOR NTH = 0L, N_ELEMENTS(MODELS)-1 DO BEGIN
      MODEL = MODELS[NTH]   
      IF FILE_MAKE(INFILES,SAVEFILES[NTH],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE       
      OKALL = OK_ALL ; Reset OK_ALL in case it was overwritten by a previous model run (e.g. OPAL has a special OK_ALL = WHERE() statement)
      CASE MODEL OF  
        'MAR': STRUCT = PHYTO_PP_MARMAP(PP=DATA_PP(OKALL),MICRO=DATA_MC(OKALL),ERROR=ERROR, ERR_MSG=ERR_MSG, MISSING=missing,VERBOSE=verbose)
      ENDCASE  
     
     IF IDLTYPE(STRUCT) NE 'STRUCT' THEN MESSAGE, 'ERROR: Creating PPD Size structure'
     
     IF HAS(MP,'L3B') THEN STRUCT = CREATE_STRUCT(STRUCT,'BINS',OK_ALL,'NBINS',COUNT_ALL,'TOTAL_BINS',MS.PY) ELSE BEGIN ; Add BIN info to the PPD structure
       SZ = SIZEXYZ(STRUCT.TOTAL_PP,PX=OPX,PY=OPY)
       IF OPX NE PX OR OPY NE PY THEN BEGIN
         NEW = []
         TAGS = TAG_NAMES(STRUCT)
         FOR N=0, N_TAGS(STRUCT)-1 DO BEGIN ; LOOP THROUGH STRUCTURE TAGS
           TMP = MAPS_BLANK(MP)
           TMP(OKALL) = STRUCT.(N)       ; CONVERT 1D ARRAY BACK TO MAP DIMENSIONS
           NEW = CREATE_STRUCT(NEW,TAGS(N),TMP)
         ENDFOR
         STRUCT = NEW & GONE, NEW & GONE, TMP 
       ENDIF ; IF DIMENSIONS DON'T MATCH
     ENDELSE ; IF MP NE 'L3B'
     
     STRUCT_WRITE, STRUCT, FILE=SAVEFILES[NTH], PROD='PP_SIZE', MISSING_CODE=MISSINGS(PPD), ALG=MODEL, DATA_UNITS=STRJOIN(UNITS(['CHLOR_A','PPD','PPD','PPD','PERCENT','PERCENT']),'; '), INFILE=INFILES, NOTES=NOTES
             
     GONE,STRUCT
    ENDFOR
  ENDFOR
  DONE:  
	PRINT, ROUTINE_NAME+ ' FINISHED'
END; END OF PROGRAM

