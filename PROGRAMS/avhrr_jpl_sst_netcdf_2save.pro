; $ID:	AVHRR_JPL_SST_NETCDF_2SAVE.PRO,	2020-06-30-17,	USER-KJWH	$
;########################################################################################
	PRO AVHRR_JPL_SST_NETCDF_2SAVE,FILES, DIR_OUT=DIR_OUT,REVERSE_FILES=REVERSE_FILES, $
	    DATE_RANGE=DATE_RANGE,QUALITY_CODE=QUALITY_CODE,MAPS_OUT=MAPS_OUT,$
	    OVERWRITE=OVERWRITE,REFRESH=REFRESH,ERROR=ERROR,PX_OUT=PX_OUT,PY_OUT=PY_OUT

; NAME:
;   AVHRR_JPL_SST_HDF_2SAVE
;
; PURPOSE:
;   THIS PROCEDURE CREATES SAVE FILES FROM AVHRR NETCDF DATA
;
; CALLING SEQUENCE:
;
; INPUTS:
;   FILES: COMPLETE FILE NAMES
;   
;
; OPTIONAL INPUTS:
;   MAP - OPTIONAL OUTPUT MAP (DEFAULT IS GEQ)
;
; KEYWORD PARAMETERS:
;   DIR_OUT - OUTPUT SAVE DIRECTORY;
;   QUALITY_CODE - DEFAULT QUALITY LEVEL IS 3
;   MAPS_OUT - STANDARD MAP NAMES [SEE VALID_MAPS]
;   REVERSE_FILES - REVERSE THE ODER OF THE FILES PROVIDED
;   OVERWRITE - OVERWRITES OUTPUT SAVE IF ALREADY EXISTS
;   REFRESH - PASSED TO MAP_REMAP TO INITIALIZE THE COMMON STRUCT_MAP_REMAP STRUCTURE
;   ERROR - ANY ERRORS ENCOUNTERED 
;   PX_OUT - REMAPPED IMAGE WIDTH [WHEN MAPS_OUT IS USED] 
;   PY_OUT - REMAPPED IMAGE HEIGHT[WHEN MAPS_OUT IS USED] 
; OUTPUTS:
;   THIS PROGRAM CREATES AVHRR SST SAVE FILES
;
; NOTES:
; ********************************************************
; DOCUMENTATION ON THE JPL MODIS AQUA  SST NETCDF FILES
; NOTES:
; THE SST IS SCALED FROM THE RAW IMAGE IN THE HDF WITH SLOPE= 0.01 AND INTERCEPT OF -300
; LAND AND OUT_SCAN ARE BOTH CODED AS 0 IN THE RAW IMAGE IN THE HDF FILE ?
; THE BITS IN QUALITY MASK FILE ALSO DO NOT ALLOW TO DISTINGUISH BETWEEN
; OUT OF SCAN AND LAND
; THIS PROGRAM SETS THE MISSING CODE TO MISSINGS(0.0) FOR THE STANDARD OUTPUT STRUCTURE
; SUBSEQUENTLY BY APPLYING A LANDMASK, 
; THE OUT-OF-SCAN PIXELS IN STANDARD STRUCTURE MAY BE REVEALED
; |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
;
; MODIFICATION HISTORY:
;     JUL 15, 2008 - TD:   ADD COVERAGE
;     APR 18, 2011 - KJWH: CHANGE INPUTS TO DIR_IN AND DIR_OUT AND TO LOOP THROUGH THE FILES WITHIN THE PROGRAM    
;     NOV  7, 2013 - KJWH: LOOP ON MAPS_OUT     
;     MAR 27, 2014 - KJWH: FIXED A PROBLEM WITH MAP_OUT
;     MAY 29, 2014 - JOR:  ADDED SOME DOCUMENTATION,UPDATED CODE,FORMATTING,
;                          REMOVED UNUSED KEYWORDS:FILE_TARGET,MASK_TARGET,
;                          NOW USING PATH_SEP()
;                          FIXED BUG - FROM: SPOS = STRPOS(FP.NAME,'_NIGHT')
;                                      TO:   SPOS = STRPOS(STRUPCASE(FP.NAME),'_NIGHT')
;     JAN 13, 2015 - KJWH: CHANGED READ_NETCDF_2STRCUT TO READ_NC                                 
;     

;-
;**************************************
  ROUTINE_NAME='AVHRR_JPL_SST_NETCDF_2SAVE'
;**************************************
;===> DEFINE CONSTANTS 
  DASH=DELIMITER(/DASH)
  SL=PATH_SEP()
  DISK=!S.DATASETS 

;===> CHECK INPUT KEYWORDS
  IF NONE(QUALITY_CODE)         THEN QUALITY_CODE = 3; (SENSITIVITY TESTS INDICATED THAT MASK CODES 1,2 & 3 WILL MASK BAD DATA)
  IF NONE(MAPS_OUT)             THEN MAPS = 'GEQ' ELSE MAPS = MAPS_OUT    
  IF NONE(OVERWRITE)            THEN _OVERWRITE = 0 ELSE _OVERWRITE = OVERWRITE
  IF NONE(FILES)                THEN SST_FILES = DIALOG_PICKFILE(TITLE='PICK Z OR HDF FILES') ELSE SST_FILES = FILES
  IF KEY(REVERSE_FILES)         THEN SST_FILES = REVERSE(SST_FILES)   
  
  FA = PARSE_IT(SST_FILES)

;===> INITIALIZE TO !NULL
  DIRS_SAVE = [] & DIRS_REPORT = []

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _MAP=0, N_ELEMENTS(MAPS)-1 DO BEGIN
    AMAP = MAPS(_MAP)
    IF N_ELEMENTS(DIR_DATASET) NE 1 THEN _DIR_DATASET = DISK+'SST-AVHRR-4' + SL ELSE _DIR_DATASET = DIR_DATASET
    DIRS_SAVE   = [DIRS_SAVE,  _DIR_DATASET + AMAP + SL + 'SAVE'   + SL + 'SST' + SL] 
    DIRS_REPORT = [DIRS_REPORT,_DIR_DATASET + AMAP + SL + 'REPORT' + SL]   
    IF N_ELEMENTS(DIR_OUT) EQ 1 THEN BEGIN
      DIRS_SAVE = DIR_OUT
      DIRS_REPORT = DIR_OUT
    ENDIF;IF N_ELEMENTS(DIR_OUT) EQ 1 THEN BEGIN
  ENDFOR;FOR _MAP=0, N_ELEMENTS(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  DIR_TEST, DIRS_SAVE
  DIR_TEST, DIRS_REPORT
  
  SENSOR='AVHRR'
  PRODUCTS = ['SEA_SURFACE_TEMPERATURE','PATHFINDER_QUALITY_LEVEL','LAT','LON']
  OUTPROD = 'SST'
  COVERAGE = '4' ;  4KM
  SAT_EXTRA = '04D1' ; 4KM DAILY
  METHOD = 'PF5_2'  ; PATHFINDER
  SATELLITE = 'N00'     
  ERROR=0
  NOTES = 'QUALITY_CODE ='+NUM2STR(QUALITY_CODE)
  MAP_SUBS_FILE = !S.DATA + 'MAP_GEQ_MAP2BINS-PXY_8192_4096.SAVE
  
  IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN    
  	SPOS = STRPOS(FA[0].NAME,'_NIGHT')
  	YDOY = STRMID(FA.NAME,SPOS-7,7)
  	DATE = YDOY_2DATE(STRMID(YDOY,0,4),STRMID(YDOY,4,3))
    OK_DATE = WHERE(DATE GE MIN(DATE_RANGE) AND DATE LE MAX(DATE_RANGE),COUNT_DATE)
    IF COUNT_DATE GE 1 THEN FA = FA(OK_DATE) ELSE BEGIN
      PRINT, 'NO FILES WITHIN GIVEN DATE RANGE: ' + NUM2STRING(DATE_RANGE)
      GOTO, DONE
    ENDELSE  
  ENDIF
;===> INITIALIZE TO !NULL
  PXYS = [] & PX_OUTS = [] & PY_OUTS = []
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _MAP=0, N_ELEMENTS(MAPS)-1 DO BEGIN
    AMAP = MAPS(_MAP)
    MS = MAP_SIZE(AMAP)
    IF AMAP NE 'NO_MAP' THEN BEGIN
      IF N_ELEMENTS(PX_OUT) NE 1 THEN PX_OUTS = [PX_OUTS,MS.PX] ELSE PX_OUTS = [PX_OUTS,PX_OUT(_MAP)]
      IF N_ELEMENTS(PY_OUT) NE 1 THEN PY_OUTS = [PY_OUTS,MS.PY] ELSE PY_OUTS = [PY_OUTS,PY_OUT(_MAP)]
      PXYS = [PXYS,AMAP+'-PXY_'+NUM2STR(PX_OUTS(_MAP))+'_'+NUM2STR(PY_OUTS(_MAP))]
    ENDIF ELSE PXYS = 'GEQ-PXY_8640_4320' 
  ENDFOR;FOR _MAP=0, N_ELEMENTS(MAPS)-1 DO BEGIN 
 

  FOR NTH = 0L, N_ELEMENTS(FA)-1 DO BEGIN
    SST_FILE = FA[NTH].FULLNAME
    FP = FA[NTH]
    IF SST_FILE EQ '' THEN CONTINUE
    SPOS = STRPOS(STRUPCASE(FP.NAME),'_NIGHT')
    YDOY = STRMID(FP.NAME,SPOS-7,7)
    DATE = YDOY_2DATE(STRMID(YDOY,0,4),STRMID(YDOY,4,3))
    PERIOD = 'D_' + STRMID(DATE,0,8)
    OUTPUT_LABEL = PERIOD+DASH+SENSOR+DASH+SATELLITE+DASH+METHOD+DASH+'Q'+NUM2STR(QUALITY_CODE)+DASH+COVERAGE+DASH+PXYS+DASH+OUTPROD
    SAVEFILES = DIRS_SAVE + OUTPUT_LABEL +'.SAVE'    
    IF N_ELEMENTS(SAVEFILES) NE N_ELEMENTS(MAPS) THEN STOP
    IF MIN(GET_MTIME(SAVEFILES)) GT GET_MTIME(SST_FILE) AND _OVERWRITE EQ 0 THEN CONTINUE
     
    SD=READ_NC(SST_FILE,PRODS=PRODS)                              ;  ===> READ THE NETCDF FILE
  	IF ERROR EQ 1 THEN BEGIN
  		TXT='ERROR: CAN NOT READ '+SST_FILE+ '; ' + DATE_NOW()
  		REPORT,TXT,DIR=DIR_REPORT
  		PRINT,TXT
  	  GOTO, DONE
  	ENDIF
    
    SD_GLOBAL = SD.GLOBAL
	  SST=SD.SD.SEA_SURFACE_TEMPERATURE
	  MASK = SD.SD.PATHFINDER_QUALITY_LEVEL
	  NOTES = [NOTES,SST.LONG_NAME,SST.COMMENT,MASK.FLAG_MEANINGS,MASK.COMMENT]
	  LAT=SD.SD.LAT.IMAGE & LAT = LAT[SORT(LAT)]
    LON=SD.SD.LON.IMAGE & LON = LON[SORT(LON)]
    GONE, SD
	  FOR _MAP=0, N_ELEMENTS(MAPS)-1 DO BEGIN
      IF GET_MTIME(SAVEFILES(_MAP)) GT GET_MTIME(SST_FILE) AND _OVERWRITE EQ 0 THEN CONTINUE
      AMAP = MAPS(_MAP)
  	  IF AMAP NE 'NO_MAP' THEN BEGIN    	  
    	  SST_IMAGE  = MAP_REMAP(ROTATE(SST.IMAGE,7), MAP_IN='EQUIDISTANT_CYLINDRICAL',MAP_OUT=AMAP,CONTROL_LONS=LON,CONTROL_LATS=LAT,REFRESH=REFRESH,PX_OUT=_PX_OUT,PY_OUT=_PY_OUT)
    	  ;===> TURN OFF REFRESH BECAUSE MASK IS FROM SAME IMAGE
    	  
    	  MASK_IMAGE = MAP_REMAP(ROTATE(MASK.IMAGE,7),MAP_IN='EQUIDISTANT_CYLINDRICAL',MAP_OUT=AMAP,CONTROL_LONS=LON,CONTROL_LATS=LAT,REFRESH=0,PX_OUT=_PX_OUT,PY_OUT=_PY_OUT)        
  	  ENDIF ELSE BEGIN
    	  SST_IMAGE = ROTATE(SST.IMAGE,7) 
        MASK_IMAGE = ROTATE(MASK.IMAGE,7)      
      ENDELSE
      OK_MISSINGS = WHERE(SST_IMAGE EQ SST._FILLVALUE[0])
      SST_IMAGE = SST_IMAGE * FLOAT(SST.SCALE_FACTOR[0])
      OK_MAX = WHERE(SST_IMAGE GT 50) ; REMOVE ANY TEMPERATURE VALUES GREATER THAN 50
      SST_IMAGE(OK_MAX) = MISSINGS(0.0)
      SST_IMAGE(OK_MISSINGS) = MISSINGS(0.0)
      OK_MISSING = WHERE(MASK_IMAGE EQ 255)
      
;     OK_QUAL_0 = WHERE(MASK_IMAGE EQ 0, COUNT_QUAL_0) ; BAD_DATA
;     OK_QUAL_1 = WHERE(MASK_IMAGE EQ 1, COUNT_QUAL_1) ; WORST_QUALITY
;     OK_QUAL_2 = WHERE(MASK_IMAGE EQ 2, COUNT_QUAL_2) ; LOW_QUALITY
;     OK_QUAL_3 = WHERE(MASK_IMAGE EQ 3, COUNT_QUAL_3) ; LOW_QUALITY
;     OK_QUAL_4 = WHERE(MASK_IMAGE EQ 4, COUNT_QUAL_4) ; ACCEPTABLE_QUALITY
;     OK_QUAL_5 = WHERE(MASK_IMAGE EQ 6, COUNT_QUAL_5) ; ACCEPTABLE_QUALITY
;     OK_QUAL_6 = WHERE(MASK_IMAGE EQ 7, COUNT_QUAL_6) ; ACCEPTABLE_QUALITY
;     OK_QUAL_7 = WHERE(MASK_IMAGE EQ 7, COUNT_QUAL_7) ; BEST_QUALITY
      
    	OK_QUAL = WHERE(MASK_IMAGE LE QUALITY_CODE,COUNT_QUAL)
    	CODE_MASK = BINDGEN(8)
    	CODE_NAME_MASK = STRARR(8)
    	CODE_NAME_MASK(0:QUALITY_CODE) = 'MASKED'
    	CODE_NAME_MASK(QUALITY_CODE+1:*) = 'NOT_MASK'
    	
    	SCALING='LINEAR'  	
    	SST_IMAGE(OK_MISSING) = MISSINGS(SST_IMAGE)
    	SLOPE=1
    	INTERCEPT=0
    	DATA_UNITS='DEGREES CELSIUS'
    	
      
      IF AMAP EQ 'L3B' THEN BEGIN
      	COMMON MAP_MAP_SUBS, MAP_SUBS  ;       ===> IF NOT ALREADY IN COMMON THEN READ THE MAP_SUBS
      	IF N_ELEMENTS(MAP_SUBS) EQ 0 OR KEYWORD_SET(REFRESH) THEN BEGIN
        	PRINT, 'READING '+ MAP_SUBS_FILE + ' INTO COMMON MEMORY'
        	MAP_SUBS = ''
        	MAP_SUBS =READALL(MAP_SUBS_FILE)
      	ENDIF
      	PX=1L & PY = 5940423L
    		DATA_BIN  = SST_IMAGE(MAP_SUBS.X,MAP_SUBS.Y)   & SST_IMAGE 	= REFORM(DATA_BIN,PX,PY)
    		MASK_BIN  = MASK_IMAGE(MAP_SUBS.X,MAP_SUBS.Y)  & MASK_IMAGE = REFORM(MASK_BIN,PX,PY)
    	ENDIF
    	
      STRUCT_SD_WRITE,SAVEFILES(_MAP),PROD=OUTPROD,ASTAT='DATA', MAP=AMAP,$
                 IMAGE=SST_IMAGE,     MISSING_CODE=MISSINGS(SST_IMAGE), $
                 MASK=MASK_IMAGE,     CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
                 SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
                 PERIOD=PERIOD, $
                 INFILE= [SST_FILE],$
                 NOTES=NOTES,$
                 GLOBAL=SD_GLOBAL,$
                 ERROR=ERROR
      GONE, SST_IMAGE
      GONE, MASK_IMAGE               
    ENDFOR
    GONE, SST
    GONE, MASK  
    GONE, LAT
    GONE, LON
  ENDFOR

  DONE:


END; #####################  END OF ROUTINE ################################




