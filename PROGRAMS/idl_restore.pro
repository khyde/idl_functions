; $ID:	IDL_RESTORE.PRO,	2020-06-30-17,	USER-KJWH	$
;###################################################################################################################
FUNCTION IDL_RESTORE,FILE, ERROR=ERROR,VERBOSE=VERBOSE
;+
; NAME:
;       IDL_RESTORE
;
; PURPOSE:
;       THIS FUNCTION RESTORES AN IDL SAVE FILE AND RETURNS THE VARIABLE(S) IN THE VARIABLE NAME SPECIFIED BY THE CALLER
;				IF MORE THAN ONE IDL VARIABLE WAS SAVED (SEE EXAMPLES BELOW) THEN A STRUCTURE IS RETURNED WITH THE VARIABLES IDENTIFIED.
;
; CATEGORY:
;     IDL
;
; CALLING SEQUENCE:
;       RESULT = IDL_RESTORE('IDL.SAVE')
;
; INPUTS:
;       FILE:  NAME OF AN IDL SAVE FILE
;
; RESTRICTIONS:
;       WORKS ONLY WITH FILES MADE USING 'SAVE'
;
; EXAMPLES:
;  A=BINDGEN(10)  								& SAVE,FILENAME='J.SAVE', A		 & C = IDL_RESTORE('J.SAVE') & HELP,C
;
;  A=BINDGEN(10) & B=FINDGEN(2,3) & SAVE,FILENAME='J.SAVE', A,B & C = IDL_RESTORE('J.SAVE') & HELP, C & HELP,/STRUCT,C
;
;	 A=CREATE_STRUCT('ITEM',0L) & B=FINDGEN(2,3) & SAVE,FILENAME='J.SAVE', A,B & C = IDL_RESTORE('J.SAVE') & HELP, C & HELP,/STRUCT,C
;
; MODIFICATION HISTORY:
;       WRITTEN BY:  J.E.O'REILLY, JAN, 1995.
;				AUGUST 9, 2006 JOR MODIFIED TO RETURN A STRUCTURE OF VARIABLES IF SEVERAL VARIABLES WERE SAVED FROM ONE SESSION
;				FEB 26,2012,JOR, RETURNS ERROR TEXT IF ERROR [NOT -1]
;				AUG 13,2013,JOR      ERROR=!ERROR_STATE.MSG
;       OCT 2,2013,JOR ADDED KEYWORD VERBOSE
 
;				
;###################################################################################################################
;-
;*******************************************
	ROUTINE_NAME = 'IDL_RESTORE'
;*******************************************
; WHERE_IN
	ERROR = ''

; ===> CHECK IF FILE PROVIDED
  IF N_ELEMENTS(FILE) EQ 0 THEN FILE = DIALOG_PICKFILE(TITLE='PICK A SAVE FILE',FILTER='*.SAVE')
  FILE=FILE[0]
  IF FILE EQ '' THEN BEGIN    
    ERROR = 'ERROR: No input file provided'
    PRINT, ERROR
    RETURN, ERROR
  ENDIF


;	===> ERROR HANDLING FOR RESTORE
	CATCH, ERROR_INDEX
  IF ERROR_INDEX NE 0 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'ERROR INDEX: ', ERROR_INDEX
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'ERROR MESSAGE: ', !ERROR_STATE.MSG
    ERROR=!ERROR_STATE.MSG
    CATCH, /CANCEL
    RETURN,ERROR
   ENDIF

;   ===> DETERMINE VARIABLES PRESENT BEFORE RESTORATION OF SAVE SET
    HELP,NAMES='*',OUTPUT=NAMES_BEFORE
    RESTORE, FILE

;   ===>  DETERMINE VARIABLES PRESENT AFTER RESTORATION OF SAVE SET
    HELP,NAMES='*',OUTPUT=NAMES_AFTER


;   ===> DETERMINE DIFFERENCE BEFORE VS AFTER
    OK = WHERE( STRPOS(NAMES_BEFORE,'UNDEFINED')    LT 0 AND $
                STRPOS(NAMES_BEFORE,'NAMES_BEFORE') LT 0,COUNT)
    IF COUNT GE 1 THEN NAMES_BEFORE = NAMES_BEFORE[OK] ELSE NAMES_BEFORE=''

    OK = WHERE( STRPOS(NAMES_AFTER,'UNDEFINED')     LT 0 AND $
                STRPOS(NAMES_AFTER,'NAMES_AFTER')   LT 0 AND $
                STRPOS(NAMES_AFTER,'NAMES_BEFORE')  LT 0, COUNT)
    IF COUNT GE 1 THEN NAMES_AFTER = NAMES_AFTER[OK] ELSE NAMES_AFTER=''


;		===> FIND THE NAMES_AFTER WHICH ARE NOT PRESENT IN THE NAMES_BEFORE
		OK=WHERE_IN(NAMES_AFTER,NAMES_BEFORE,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT)


;		===> IF FINE SOME
		IF NCOMPLEMENT GE 1 THEN BEGIN
			NAME = NAMES_AFTER(COMPLEMENT)
			IF NCOMPLEMENT EQ 1 THEN BEGIN
				TXT = STRSPLIT(NAME,' ',/EXTRACT)
       _NAME = TXT[0]
       CMD = 'RETURN, '  +   _NAME
       Z = EXECUTE(CMD)
			ENDIF ELSE BEGIN

;				LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
				FOR NTH = 0,NCOMPLEMENT-1 DO BEGIN
				  TXT = STRSPLIT(NAME[NTH],' ',/EXTRACT)
				  _NAME = TXT[0]
				  _NAME_ = "'"+_NAME+"'"
	  			IF NTH EQ 0 THEN BEGIN
				 		CMD = "STRUCT = CREATE_STRUCT(" +_NAME_ +","+ _NAME+')'
				 		Z=EXECUTE(CMD)
		 			 ENDIF ELSE BEGIN
		 			  CMD = "STRUCT = CREATE_STRUCT(STRUCT," +_NAME_ +","+ _NAME+')'
				 		Z=EXECUTE(CMD)
					ENDELSE
				ENDFOR
				RETURN, STRUCT
			ENDELSE
		ENDIF ELSE BEGIN
			ERROR = 'ERROR: CREATING STRUCT'
			RETURN,ERROR
		ENDELSE

END; #####################  END OF ROUTINE ################################
