; $ID:	STATS_FREQ.PRO,	2020-07-01-12,	USER-KJWH	$
;#############################################################################################################
	PRO STATS_FREQ, FILES, PROD=PROD, TAG=TAG, DIR_OUT=DIR_OUT, PERCENTS=PERCENTS, FILE_LABEL=FILE_LABEL, TRANSFORM=TRANSFORM, VERBOSE=VERBOSE, SHOW=SHOW, SAVE_STATS=SAVE_STATS, OVERWRITE=OVERWRITE
	
;  PRO STATS_FREQ
;+
; NAME:
;		STATS_FREQ
;
; PURPOSE: THIS PROGRAM GENERATES A CUMULATIVE FREQUENCY HISTOGRAM FOR DATA VALUES IN SAV FILES.
;
; CATEGORY:
;		STATISTICS
;		 
;
; CALLING SEQUENCE:RESULT =STATS_FREQ(VALUES)
;
; INPUTS:
;		FILES: FULL NAMES OF FILES [SAV'S]
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;        PROD........ THE PROD TO USE WITH PRODS_2RANGE FOR SCALING THE HISTOGRAM
;        TAG......... THE DATA ARRAY TAG TO EXTRACT FROM EACH FILE BY STRUCT_READ
;        DIR_OUT..... DIR FOR OUTPUT SAV FILE
;        FILE_LABEL.. INFORMATION FOR THE OUTPUT SAV FILE
;        VERBOSE..... TO PRINT DETAILS OF THE PROCESSING
;        SHOW........ TO SHOW THE PNGFILE
;		NONE:

; OUTPUTS:
;     A STRUCTURE WITH :
;     1) HISTOGRAM RESULTS:FREQUENCY,OMIN,OMAX, 
;     2) NUMBER OF FILES PROCESSED,
;     3) AN XAXIS ARRAY FOR SUBSEQUENT PLOTTING OF FREQUENCIES
;     4) STATS FOR EACH DATA ARRAY FROM STATS_NAN [TO EXAMINE WHERE HIGH/LOW FREQ VALS CAME FROM]
;
; MODIFICATION HISTORY:
;			WRITTEN APR 29, 2012 J.O'REILLY
;			OCT 03, 2016 - JOR:  RENAMED AND UPDATED TO BE MORE GENERIC
;			OCT 05, 2016 - JOR:  FIXED BINSIZE TO 0.0001D [YIELDS 1,000,000 BINS 
;			OCT 06, 2016 - JOR:  RENAMED FREQ_CUM TO STATS_CUM
;			                     USING PRODS_2RANGE TO GET MIN_X & MAX_X FOR HISTOGRAM
;			OCT 07, 2016 - JOR:  ADDED STATS TO OUTPUT SAV [FROM STATS_NAN
;			OCT 07, 2016 - KJWH: Added keywords VERBOSE, SHOW and FILE_LABEL
;			                     Updated formatting
;			                     Added a PERIOD and FILE_LABEL to the output sav file
;			                     Now saving the PNGFILE 
;			OCT 17, 2016 - KJWH: Added TRANSFORM keyword.  If not provided, will use the LOG keyword from PRODS_READ(TAG)  
;			                     Added OVERWRITE keyword and FILE_MAKE step
;			                     Added SAVE_STATS keyword to save the STATS_NAN info
;			                     If KEY(TRANSFORM) then will transform the RANGE, DATA and XAXIS
;			                     Added PERCENTS keyword
;			OCT 18, 2016 - KJWH: Added percent labels to the plot
;			                     If SAVFILE exists, but not the plot, skip to just make the PNGFILE
;			                     Plot title now includes the period
;			                     Updated file name with the period instead of daterange 
;		  DEC 04, 2016 - JEOR: Added steps to alter the range to encompass possible values in the data files - IF TOTAL(SIGN(RANGE)) EQ -2 THEN BEGIN block                                        
;			                   
;#################################################################################
;
;-
;************************
  ROUTINE_NAME='STATS_FREQ'
;************************
  IF NONE(FILES)    THEN MESSAGE,'ERROR: FILES ARE REQUIRED'
  IF KEY(VERBOSE)   THEN PN,FILES,'   FILES TO BE PROCESSED'
  IF NONE(DIR_OUT)  THEN DIR_OUT = !S.IDL_TEMP
  IF NONE(PERCENTS) THEN PERCENTS = [1,5,95,99]

  FA = PARSE_IT(FILES,/ALL)
  IF NONE(PROD) THEN PROD = FIRST(FA.PROD) 
  IF NONE(TAG)  THEN TAG  = PROD    
  PR = PRODS_READ(TAG)
  IF NONE(TRANSFORM) THEN TRANSFORM = PR.LOG
  IF SAME(FA.MAP) EQ 0 OR SAME(FA.PROD) EQ 0 THEN MESSAGE,'ERROR: MAP AND PROD MUST ALL BE THE SAME'
  IF SAME(FA.PERIOD_CODE) THEN CODE = FIRST(FA.PERIOD_CODE) ELSE CODE = 'X'
  IF NONE(FILE_LABEL) THEN FILE_LABEL=FILE_LABEL_MAKE(FILES[0]) 
  PER = FIRST(FA.PERIOD) + '_' + REPLACE(LAST(FA.PERIOD),CODE+'_','')

;==> SAV FILE
  SAVFILE = DIR_OUT + PER + '-'+ FILE_LABEL + '-' + 'FREQ.SAV'
  PNGFILE = REPLACE(SAVFILE,'SAV','PNG')
  IF FILE_MAKE(FILES,[SAVFILE,PNGFILE],OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, DONE
  IF FILE_MAKE(FILES,SAVFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, MAKE_PNG
  
;===> MAKE AN ARRAY TO HOLD CUMULATIVE FREQUENCIES
  RANGE = PRODS_2RANGE(TAG)
  IF TRANSFORM EQ 1 THEN RANGE = ALOG(RANGE)
  
;===> ALTER RANGE TO ENCOMPASS POSSIBLE VALUES IN DATA FILES
  IF TOTAL(SIGN(RANGE)) EQ -2 THEN BEGIN
    MIN_X = FLOAT(FIRST(RANGE))/10
    MAX_X = FLOAT(LAST(RANGE))/10  
  ENDIF ELSE BEGIN
    MIN_X = FLOAT(FIRST(RANGE))/10
    MAX_X = FLOAT(LAST(RANGE))*10
  ENDELSE;IF TOTAL(SIGN(RANGE)) EQ -2 THEN BEGIN
  BINSIZE = (MAX_X-MIN_X)*0.0001D
  X = INTERVAL([MIN_X,MAX_X],BINSIZE) & IF KEY(VERBOSE) THEN PMM,X   
  FREQ = HISTOGRAM(X, MIN=MIN_X,MAX=MAX_X,BINSIZE =BINSIZE ,/L64,LOCATION = X_AXIS)
  FREQ(*) = 0L ; NULL OUT FREQ

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FILE_STATS = []
  ARRAY = []
  FOR F=0,N_ELEMENTS(FILES)-1 DO BEGIN
    AFILE=FILES(F)
    POF, F, FILES, OUTTXT=OUTTXT,/QUIET
    PFILE, AFILE, /R, _POFTXT=OUTTXT     
    IF HAS(FA(F).EXT,'SAV') THEN DATA=STRUCT_READ(AFILE, TAG=TAG) $
                            ELSE DATA=READ_NC(AFILE,PROD=TAG,/DATA)
    IF KEY(VERBSOE) THEN PRINT, 'TAG:   ',TAG
    IF IDLTYPE(DATA) EQ 'STRING' THEN BEGIN ; BAD DATA
      REPORT, 'BAD FILE   :' + AFILE
      CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    ENDIF ; IF IDLTYPE(DATA) EQ 'STRING' THEN BEGIN
    IF TRANSFORM EQ 1 THEN DATA = ALOG(DATA)
    ARRAY = [ARRAY,DATA[WHERE(DATA NE MISSINGS(DATA),/NULL)]]
    FREQ = HISTOGRAM(DATA, MIN=MIN_X, MAX=MAX_X, BINSIZE=BINSIZE, OMIN=OMIN, OMAX=OMAX, INPUT=FREQ, /NAN, LOCATION= X_AXIS) ;===> ADD TO FREQ FOR EACH FILE
    IF KEY(SAVE_STATS) THEN BEGIN
      S = STATS_NAN(DATA, NAME = (FILE_PARSE(AFILE)).NAME)
      FILE_STATS =[FILE_STATS,S]
    ENDIF ; SAVE_STATS  
  ENDFOR;FOR _FILE = 0,N_ELEMENTS(FILES)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  PERCENT = PERCENTILE(ARRAY,PERCENT=PERCENTS,STRUCT=PSTR)
  PERCENTILES = PSTR.DATA
          
  STRUCT_WRITE, FILE=SAVFILE, PROD=PROD, STAT='FREQ', PERCENTS=PSTR.PERCENTILE, PERCENTILES=PSTR.DATA, TAG=TAG, INFILES=FILES, FILE_STATS=FILE_STATS, NOTES=NOTES, X_AXIS=X_AXIS, DATA=FREQ, MISSING_CODE=MISSINGS(FREQ), BINSIZE=BINSIZE, OMIN=OMIN, OMAX=OMAX

  MAKE_PNG:
  IF NONE(FREQ) THEN BEGIN
    FREQ = STRUCT_READ(SAVFILE,STRUCT=STRUCT,TAG='DATA')
    X_AXIS = STRUCT.X_AXIS
    PERCENTILES = STRUCT.PERCENTILES
  ENDIF
  IF KEY(SHOW) THEN BUFFER = 0 ELSE BUFFER = 1
  XLOG=TRANSFORM
  PF = PLOT(X_AXIS, FREQ, /YLOG, XLOG=XLOG, SYMBOL='*', LINESTYLE=6, COLOR='RED', TITLE=PER+'!C'+FILE_LABEL+'!C', YTITLE='FREQUENCY', XTITLE=TAG, BUFFER=BUFFER)
  FOR P=0, N_ELEMENTS(PERCENTS)-1 DO BEGIN
    P1 = PLOT([PERCENTILES(P),PERCENTILES(P)], PF.YRANGE, /YLOG, XLOG=XLOG, LINESTYLE=2, THICK=3, COLOR='BLUE',/OVERPLOT)
    T1 = TEXT(PERCENTILES(P),MAX(PF.YRANGE),ROUNDS(PERCENTS(P),1)+'%',/DATA,CLIP=0,COLOR='BLUE',ALIGNMENT=0.5)
  ENDFOR
  PLT_GRIDS,P1
  IF KEY(SHOW) THEN WAIT, 15
  P1.SAVE, PNGFILE
  P1.CLOSE
  
  
  DONE:          

END; #####################  END OF ROUTINE ################################
