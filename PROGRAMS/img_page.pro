; $ID:	IMG_PAGE.PRO,	2020-07-01-12,	USER-KJWH	$
;#############################################################################################################
	PRO IMG_PAGE,FILES,DIR_OUT=DIR_OUT,COLS=COLS,ROWS=ROWS,NAME=NAME,$
	              BUFFER=BUFFER,BIT_DEPTH=BIT_DEPTH,OVERWRITE=OVERWRITE,$
	              ORDER=ORDER,ADD_LETTER=ADD_LETTER,SPACE=SPACE
;  PRO IMG_PAGE
;+
; NAME:
;		IMG_PAGE
;
; PURPOSE: MERGE A SET OF IMAGE FILES INTO A SINGLE COMPOSITE IMAGE PAGE
;
; CATEGORY:	IMG;	
;
; CALLING SEQUENCE: IMG_PAGE,FILES,DIR_OUT=DIR_OUT
;
; INPUTS: FILES:  FULLNAMES OF PNG,JPG,ETC. IMAGE FILES 
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;		DIR_OUT... DIRECTORY TO WRITE THE OUTPUT PNGFILE
;   BIT_DEPTH. SEE WINDOW SAVE METHOD OUR DEFAULT = 0 [TRUE COLOR]
;   BUFFER.... USE THE BUFFER [DO NOT DISPLAY THE GRAPHICS WINDOW]
;   ORDER..... THE ORDERING OF FILES [A NUMERIC ARRAY]
;   MARGIN.... MARGIN AROUND EACH IMAGE [DEFAULT = [0,0.1,0,.15] ]
;   COLS...... NUMBER OF COLUMNS [DEFAULT IS TO AUTOMATICALLY DETERMINE]
;   ROWS...... NUMBER OF ROWS [DEFAULT IS TO AUTOMATICALLY DETERMINE]
;   NAME...... FIRST NAME FOR OUTPUT PNGFILE
;   ADD_LETTER ANNOTATE EACH PLOT WITH A,B,C,D ETC.
;

; OUTPUTS: AN IMAGE DISPLAY AND A PNG IMAGE OF THE DATA IN THE FILE
;		
;; EXAMPLES:;
; IMG_PAGE,"C:\IDL\DEMO\ANNUAL-OSTAM-2010_12-SMI-CHLOR_A-MEAN.SAVE",/ADD_NAME,DIR_OUT = !S.IDL_TEMP

;===> MULTIPLE FILES EXAMPLE:
; 1) FILES = FILE_SEARCH('F:\SMI\STATS_PERIODS','M_*SST*.SAVE')
; 2) IMG_PAGE',FILES,DIR_OUT = 'F:\SMI\STATS_BROWSE\',/ADD_NAME

; RESTRICTIONS:

; MODIFICATION HISTORY:
;			APR 18,2014 WRITTEN BY J.O'REILLY
;     OCT 22,JOR ADDED KEYS COLS,ROWS
;     MAY 20,2015,JOR REVISED INPUTS TO FILE_MAKE
;     JUN 21,2015,JOR ADDED KEY ADD_LETTER
;     MAY 15,2017, JOR NOW USING POSITION VIA GET_POS
;     NOV 11,2017,JEOR : RENAMED FROM PLT_MERGE
;                        IF KEY(ROWS) AND KEY(COLS) THEN NUM = ROWS*COLS ELSE NUM = N_FILES
;     MAR 04,2018,JEOR : RENAMED FROM IMG_PAGES
;#################################################################################
;-
;*********************
ROUTINE  = 'IMG_PAGE'
;*********************

;#######  CONSTANTS AND DEFAULTS    #############

BACKGROUND_COLOR = 'WHITE'
BORDER = 0 ; [AROUND PAGE]
IF NONE(BIT_DEPTH) THEN  BIT_DEPTH= 0 ;[TRUE COLOR]
RESOLUTION = 600
MARGIN= 0.15
LETTERS =  ALPHABET(/LOWER)
IF NONE(FILES) THEN MESSAGE,'ERROR: FILES ARE REQUIRED'
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


;===> REODER FILES ACCORDING TO ORDER
IF KEY(ORDER)  THEN FILES = FILES[ORDER]

 PL,FILES 

IF N_ELEMENTS(DIR_OUT) EQ 1 THEN _DIR_OUT = DIR_OUT ELSE _DIR_OUT = !S.IDL_TEMP

IF NONE(NAME) THEN NAME = ROUTINE
PNGFILE = _DIR_OUT + NAME  +'.PNG'
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;################# OVERWRITE ?  #########################
IF FILE_MAKE(FILES,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, DONE; >>>>>>>>>>>>>>
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
N_FILES = N_ELEMENTS(FILES)

IF KEY(ROWS) AND KEY(COLS) THEN BEGIN
  NUM = ROWS*COLS 
  N_BLANKS =  NUM - N_FILES
  ;===> PAD FILES WITH  BLANKS
  IF N_BLANKS GE 1 THEN FILES =[FILES,REPLICATE('',N_BLANKS)]
  NUM = NOF(FILES)
  S = GET_POS(NUM,/VERBOSE)
ENDIF ELSE BEGIN
   NUM = N_FILES
   S = GET_POS(NUM,/VERBOSE)
ENDELSE;IF KEY(ROWS) AND KEY(COLS) THEN BEGIN

; ===> DETERMINE COLUMNS AND ROWS [AUTOMATICALLY]

;#####################  WINDOW     ###################################
W  = WINDOW(BUFFER=BUFFER,BACKGROUND_COLOR=BACKGROUND_COLOR,WINDOW_TITLE = ROUTINE)
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  FILE = FILES[NTH] 
  POSITION = S[NTH].POS
;###########>  READ THE PNG FILE   ###############

;===> THIS ASSUMES THAT AT LEAST ONE FILE WAS SUPPLIED
IF FILE NE '' THEN BEGIN
  BYT = READ_IMAGE(FILE)
ENDIF ELSE BEGIN
  BYT(*) = 254; [THIS DOES NOT WORK WHEN = 255]
ENDELSE;IF FILE NE '' THEN BEGIN

;===>IS TRUE COLOR?           IS THIS NEEDED????????  >>>>
IF IS_TRUE_COLOR(BYT) EQ 0 THEN MESSAGE,'ERROR MUST BE TRUE COLOR TO MERGE'
;||||||||||||||||||||||||||||||||||||||||||||||||||||

;#####################  IMAGE    ######################################
IM = IMAGE(BYT,RGB_TABLE=RGB_TABLE,BACKGROUND_COLOR= BACKGROUND_COLOR,$          
          POSITION = POSITION,/CURRENT)
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;===> ADD LETTER TO PANEL?
IF KEY(ADD_LETTER) AND FILE NE '' THEN BEGIN
  LET = LETTERS[NTH]
  T = TEXT(0.003,0.90,LET,/RELATIVE,TARGET=IM,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18)
ENDIF;IF KEY(ADD_LETTER) AND FILE NE '' THEN BEGIN





ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;
;
;###############  WRITE THE PNGFILE   ###############>

W.SAVE, PNGFILE,RESOLUTION=RESOLUTION,WIDTH = WIDTH,HEIGHT = HEIGHT ,BORDER =BORDER,BIT_DEPTH = BIT_DEPTH
PFILE,PNGFILE
W.CLOSE
;|||||||||||||||||||||||||||||||||||||||||||||||||||||
DONE:

END; #####################  END OF ROUTINE ################################
