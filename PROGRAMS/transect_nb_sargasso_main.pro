; $ID:	TRANSECT_NB_SARGASSO_MAIN.PRO,	2020-07-08-15,	USER-KJWH	$
;+
; This Program is a main routine for the OCL HYDRO DATA
; HISTORY:
;     Dec 4 2004  Written by: J.E. O'Reilly
;-
; *************************************************************************

	PRO TRANSECT_NB_SARGASSO_MAIN

  ROUTINE_NAME='TRANSECT_NB_SARGASSO_MAIN'

	COMPUTER=GET_COMPUTER()
	IF COMPUTER EQ 'LAPSANG' THEN DISK = 'D:'
	IF COMPUTER EQ 'LOLIGO' THEN DISK = 'D:'
	IF COMPUTER EQ 'BURRFISH' THEN DISK = 'G:'
  DELIM=DELIMITER(/PATH)
  DIR_BATHY = 'D:\IDL\BATHY\GEBCO\'
  DIR_IMAGES = 'D:\IDL\IMAGES\'
  DIR_SRTM30_BROWSE 		= 'D:\PROJECTS\SRTM30\BROWSE\'

  PATH = DISK+DELIM + 'PROJECTS\TRANSECT_NB_SARGASSO'+DELIM

; **************************************
; Directories
; Edit these as needed
  DIR_LOG  		= path+'LOG'+delim
	DIR_DATA 		= path+'DATA'+delim
	DIR_DOC 		= path+'DOC'+delim
  DIR_SAVE 		= path+'save'+delim
  DIR_PLOTS 	= path+'PLOTS'+delim
  DIR_BROWSE	= path+'BROWSE'+delim
  DIR_REPORT 	= path+'report'+delim

	DIR_TS_SUBAREAS_SAVE 		= path+'TS_SUBAREAS\save'+delim
	DIR_TS_SUBAREAS_PLOTS 		= path+'TS_SUBAREAS\PLOTS'+delim


	DIR_ALL = [DIR_DATA,DIR_LOG,DIR_DOC,DIR_SAVE,DIR_BROWSE,DIR_PLOTS,DIR_REPORT,DIR_TS_SUBAREAS_SAVE,DIR_TS_SUBAREAS_PLOTS]

; *******************************************
; Set up color system defaults
	SETCOLOR
	PAL_36

;	===> Ploting options
	SHOW_GRIDS = 1


; ********************************************************************************
; ***** U S E R    S W I T C H E S  Controlling which Processing STEPS to do *****
; ********************************************************************************
;	0 (Do not do the step)
;	1 (Do the step)
; 2 (Do the step and OVERWRITE any output if it alread exists)

; ================>
; Switches controlling which Processing STEPS to do:
	DO_CHECK_DIRS = 1 ; GOOD IDEA TO ALWAYS KEEP THIS SWITCH ON



  DO_MAKE_LATLON_SUBAREA							= 0
  DO_TS_SUBAREA_TRANSECT_EXTRACT			= 0
  DO_TRANSECT_PLOT										= 2

;NARR BAY TO 35 DEG N-S


; *********************************************
  IF DO_CHECK_DIRS GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_CHECK_DIRS'
    FOR N=0,N_ELEMENTS(DIR_ALL)-1 DO BEGIN
      AFILE = STRMID(DIR_ALL(N),0,STRLEN(DIR_ALL(N))-1)
      IF FILE_TEST(AFILE,/DIRECTORY) EQ 0L THEN FILE_MKDIR,AFILE
    ENDFOR
  ENDIF ; IF DO_CHECK_DIRS GE 1 THEN BEGIN
; |||||||||||||||||||||||||||||||||||||||||||||||||


;	****************************************
	IF DO_MAKE_LATLON_SUBAREA GE 1 THEN BEGIN
; ***************************************
		OVERWRITE = DO_MAKE_LATLON_SUBAREA GE 2
 		IM=READALL(DIR_DATA+'TRANSECT_NB_SARGASSO-EDIT.PNG')

;;IM=READALL(DIR_DATA+'JUNK2.PNG') ; ROUGH TRANSECT AT HOME

		LATLON_SUBAREA_FILE = DIR_SAVE+'LATLON_SUBAREA-NEC-PXY_1024_1024-TRANSECT_NB_SARGASSO.CSV'
		SW_TRACK_FILE        = DIR_SAVE+'SW_TRACK-NEC-PXY_1024_1024-TRANSECT_NB_SARGASSO.CSV'
		MAP='NEC'
		H=HISTOGRAM(IM)
		OK=WHERE(H GE 1)
		PRINT,OK

	;	===> TARGET = 24
	  OK=WHERE(IM EQ 24,COUNT)

 ;;  OK=WHERE(IM EQ 1,COUNT)

	  PRINT,COUNT
	  XY=IMAGE_PXPY(IM, CENTER=1)

		ZWIN,IM
		MAP_NEC
		XYZ=CONVERT_COORD(XY.X[OK],XY.Y[OK],/DEVICE,/TO_DATA)
		ZWIN
		LON=REFORM(XYZ(0,*))
		LAT=REFORM(XYZ(1,*))

;GOTO,JUMP

	; NB MOUTH IS AT 41 27 MIN NORTH LAT
		OK=WHERE(LAT LT 41.45,COUNT,complement=COMPLEMENT)

		BAY_LON=REVERSE(LON(COMPLEMENT))
		BAY_LAT=REVERSE(LAT(COMPLEMENT))

		OK=WHERE(BAY_LAT EQ MIN(BAY_LAT))
		BAY_LAT=BAY_LAT(OK[0])
		BAY_LON=BAY_LON(OK[0])


		OK=WHERE(LAT EQ MIN(LAT))
		SARGASSO_LAT = LAT(OK[0])
		SARGASSO_LON = LON(OK[0])

		LATS = [BAY_LAT,SARGASSO_LAT]
		LONS = [BAY_LON,SARGASSO_LON+1.25]

;JUMP:
;LATS=LAT
;LONS=LON


;		S=SORT(LATS)
;		LATS=REVERSE(LATS(S))
;		LONS=REVERSE(LONS(S))


		I_TRACK = MAP_TRACK_INTERPOLATE(LONS=LONS, LATS=LATS, MAP=MAP, NAME=NAME)
	 	WIDTH_SWATH  = 11

;		===> Determine swath points that are perpendicular to each interpolated line segment
		SW_TRACK	=	MAP_TRACK_SWATH(LONS=I_TRACK.LON,	LATS=I_TRACK.LAT,MAP=MAP,NAME=NAME,WIDTH=WIDTH_SWATH)
		STRUCT_2CSV,SW_TRACK_FILE,SW_TRACK



;		===> Write the latlon_subarea file
		STRUCT=REPLICATE(CREATE_STRUCT('LON','','LAT','','AROUND','','SUBAREA_CODE','','SUBAREA_NAME','','NICKNAME',''),N_ELEMENTS(I_TRACK))
		STRUCT.LON=SW_TRACK.LON_SWATH
		STRUCT.LAT=SW_TRACK.LAT_SWATH
		STRUCT.AROUND=0
		STRUCT.SUBAREA_CODE=SW_TRACK.POINT
		STRUCT.SUBAREA_NAME= STRTRIM(SW_TRACK.LON,2)+';'+STRTRIM(SW_TRACK.LAT,2)
	 	STRUCT_2CSV,LATLON_SUBAREA_FILE,STRUCT

		PSFILE = DIR_PLOTS+'TRANSECT_NB_SARGASSO.PS'
		PSPRINT,/FULL,/COLOR,FILENAME=PSFILE
		PAL_SW3,R,G,B
;		===> Make a simple map showing the perpendiculars on the transect
 	  MAPIT,LONS,LATS,DEG=20,TITLE=TITLE,CHARSIZE_TITLE=2,COLOR_TITLE=33,MAP=MAP, INCREMENT=1,SYMSIZE=1,THICK=3,POS_TITLE=[0.3,0.2],PSYM=0
			  	BFILE = FILELIST(DIR_BATHY+'gebco*_200.DI6')  & PLOTDEG,FILES=BFILE,COLOR=30,LINESTYLE=0
			   	BFILE = FILELIST(DIR_BATHY+'gebco*_2000.DI6') & PLOTDEG,FILES=BFILE,COLOR=32,LINESTYLE=0
			   	BFILE = FILELIST(DIR_BATHY+'gebco*_3000.DI6') & PLOTDEG,FILES=BFILE,COLOR=33,LINESTYLE=0
			   	BFILE = FILELIST(DIR_BATHY+'gebco*_4000.DI6') & PLOTDEG,FILES=BFILE,COLOR=34,LINESTYLE=0
			    BFILE = FILELIST(DIR_BATHY+'gebco*_5000.DI6') & PLOTDEG,FILES=BFILE,COLOR=35,LINESTYLE=0


;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR NTH=0L,N_ELEMENTS(SW_TRACK)-1L DO BEGIN

;			IF NTH MOD 1 EQ 0 THEN BEGIN
;				PLOTS,[SW_SWATH[NTH].LON_SWATH,SW_SWATH[NTH].LON_INNER],[SW_SWATH[NTH].LAT_SWATH,SW_SWATH[NTH].LAT_INNER],/DATA,COLOR=TC(BYTE[0])

;			ENDIF
			SW_TRACK_LON=WORDS(SW_TRACK[NTH]. LON_SWATH,DELIM=';',/NO_NULL)
			SW_TRACK_LAT=WORDS(SW_TRACK[NTH]. LAT_SWATH,DELIM=';',/NO_NULL)

       PLOTS, SW_TRACK_LON, SW_TRACK_LAT, COLOR= (NTH+1) MOD 250
		  ;PLOTS, SW_INNER_LON, SW_INNER_LAT, COLOR=TC(BYTE(NTH+1))
		  ;PLOTS, SW_OUTER_LON, SW_OUTER_LAT, COLOR=TC(BYTE(NTH+1))

		ENDFOR
		PSPRINT

		BATHY=READ_PNG('D:\PROJECTS\SRTM30\BROWSE\SRTM30-NEC-PXY_1024_1024-BATHY_.PNG',R,G,B)
		TVLCT,R,G,B
		ZWIN,BATHY
		MAP_NEC
	 	TV,BATHY
;		MAP_CONTINENTS,/HIRES,/COAST
		PLOTS,SW_TRACK.LON,SW_TRACK.LAT,COLOR=TC[0]
		IM=TVRD()
		ZWIN
		BATHY_TRANSECT_PNG = DIR_PLOTS+'TRANSECT_NB_SARGASSO.PNG'
		WRITE_PNG,BATHY_TRANSECT_PNG, IM,R,G,B

 	ENDIF
;	|||||||||||||||||||||||||||||||||||||||||||||||||||||||




; *********************************************
  IF DO_TS_SUBAREA_TRANSECT_EXTRACT GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_TS_SUBAREA_TRANSECT_EXTRACT'

     KM= READ_CSV(DIR_SAVE +'SW_TRACK-NEC-PXY_1024_1024-TRANSECT_NB_SARGASSO.CSV')
		 FILE = DIR_SAVE+'LATLON_SUBAREA-NEC-PXY_1024_1024-TRANSECT_NB_SARGASSO-N2AT-SST.CSV'

		 FN=FILE_PARSE(FILE)


			GOTO, SKIP_EXTRACT

      TAGNAMES = ['FIRST_NAME','SUBAREA_CODE','SUBAREA_NAME','MEAN']


			CSV_EXTRACT,FILE,   TAGNAMES=tagnames,  OVERWRITE=0, CRITERIA='Y

			SKIP_EXTRACT:
  		EXTRACT_FILE = DIR_SAVE+ 'LATLON_SUBAREA-NEC-PXY_1024_1024-TRANSECT_NB_SARGASSO-N2AT-SST-EXTRACT.CSV'
		  FN=FILE_PARSE(EXTRACT_FILE)
		  SAVE_FILE = DIR_SAVE+FN[0].FIRST_NAME+'-DATE_KMS_MEAN.SAVE'
		  STOP


		 IF FILE_TEST(SAVE_FILE) EQ 0 OR DO_TS_SUBAREA_TRANSECT_EXTRACT GE 2 THEN BEGIN
     	DB = READ_CSV(FILE)
     	STOP
 		 	NEW=REPLICATE(CREATE_STRUCT('DATE','','KMS',0.0,'MEAN',0.0),N_ELEMENTS(DB))
;		 	LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		 	FOR NTH=0L,N_ELEMENTS(DB)-1L DO BEGIN
		 	 	NEW[NTH].DATE = STRMID(DB[NTH].FIRST_NAME,3,8)
		 	 	NEW[NTH].MEAN = DB[NTH].MEAN
;			 	OK=WHERE(FIX(KM.POINT) EQ DB.SUBAREA_CODE,COUNT)
			 	NEW[NTH].KMS = KM(DB[NTH].SUBAREA_CODE).KMS
		 	ENDFOR
			SAVE,FILENAME=SAVE_FILE,NEW,/COMPRESS
		ENDIF
  ENDIF ; IF DO_TS_SUBAREA_TRANSECT_EXTRACT GE 1 THEN BEGIN
; |||||||||||||||||||||||||||||||||||||||||||||||||



; *********************************************
  IF DO_TRANSECT_PLOT GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_CHECK_DIRS'
    OVERWRITE = DO_TRANSECT_PLOT GE 2

	  FILENAME= 'TRANSECT_NB_SARGASSO-N2AT-SST'
		PS_FILE 				= DIR_TS_SUBAREAS_PLOTS	+FILENAME+'.PS'



	IF FILE_TEST(PS_FILE) AND OVERWRITE EQ 0 THEN GOTO, DONE_DO_TRANSECT_PLOT ; >>>>>>>>>

		SW=READ_CSV(DIR_SAVE+'SW_TRACK-NEC-PXY_1024_1024-TRANSECT_NB_SARGASSO.CSV')
		MAX_KM = ROUND(MAX(FLOAT(SW.KMS)))

		PROD  = 'SST'
		AMETHOD= 'N2AT'

		YEAR_START = 	1985
		YEAR_END   =	2005
		YEARS_TXT  =  '!YY_'+STRTRIM(YEAR_START,2)+'_'+STRTRIM(YEAR_END,2)
		DATE_START =  STRTRIM(YEAR_START,2) + '0101'
		DATE_END   =  STRTRIM(YEAR_END,2)   + '1231'
		MIN_JD = DATE_2JD(DATE_START)
		MAX_JD = DATE_2JD(DATE_END)
		DELTA_JD = MAX_JD -MIN_JD + 1
		DAY_ARRAY = INDGEN(DELTA_JD)
		DATE_ARRAY = STRMID(JD_2DATE(DAY_ARRAY + MIN_JD),0,8)
		AX = DATE_AXIS([DATE_START,DATE_END],/YEAR)

;		===> MID YEAR FOR TICKV
;		AX.TICKV = JD_2JD(AX.TICKV,/YEAR,/MID)
		GRID = REPLICATE(MISSINGS(0.0),N_ELEMENTS(DAY_ARRAY), MAX_KM)


		!P.MULTI = 0

;		===> Get all the yearly files

;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR YEAR = YEAR_START,YEAR_END DO BEGIN

			FILE=DIR_TS_SUBAREAS_SAVE + 'LATLON_SUBAREA-NEC-PXY_1024_1024-TRANSECT_NB_SARGASSO-N2AT-SST-!Y_'+STRTRIM(YEAR,2)+'.SAVE'


			DB=READALL(FILE)
			JD=DATE_2JD(STRMID(DB.FIRST_NAME,3,8))
			NTH_DAY =  JD - MIN_JD
;			===> get km based on SUBAREA CODE AND SW.point
			ok=WHERE_MATCH(FIX(SW.POINT), FIX(DB.SUBAREA_CODE),NCOMPLEMENT=NCOMPLEMENT)

			KMS = ROUND(FLOAT(SW[OK].KMS))

	;		===> Fill in GRID (Necessary to look for non missing because of text '' null imputs can turn to zero
			OK=WHERE(FIX(DB.N) GE 1)

			GRID(NTH_DAY[OK], ROUND(FLOAT(KMS[OK])))= FLOAT(DB[OK].MEAN)


;			===> Change any -Nan Nan TO MISSINGS (RATIOS)
			OK=WHERE(FINITE(GRID) EQ 0,COUNT)
			IF COUNT GE 1 THEN GRID[OK] = MISSINGS(GRID)
			;		===> Write out GRID



		ENDFOR
;		||||||||||||||||||||||||||||||||||||||||


;  ===> FLIP GRID
		GRID = ROTATE(GRID,7)

STOP
			FN=PARSE_IT(FILE)
			GRID_FILE 			= DIR_TS_SUBAREAS_SAVE	+FN.FIRST_NAME+'-GRID.SAVE'
			MAT_FILE_GRID 	= DIR_TS_SUBAREAS_SAVE	+FN.FIRST_NAME+'-GRID.MAT'
			MAT_FILE_KMS 		= DIR_TS_SUBAREAS_SAVE	+FN.FIRST_NAME+'-KMS.MAT'
			MAT_FILE_DATE		= DIR_TS_SUBAREAS_SAVE	+FN.FIRST_NAME+'-DATE.MAT'

			GRID_FILE = REPLACE(GRID_FILE,'LATLON_SUBAREA-NEC-PXY_1024_1024-','')
			MAT_FILE_GRID = REPLACE(MAT_FILE_GRID,'LATLON_SUBAREA-NEC-PXY_1024_1024-','')
			MAT_FILE_KMS = REPLACE(MAT_FILE_KMS,'LATLON_SUBAREA-NEC-PXY_1024_1024-','')
			MAT_FILE_DATE = REPLACE(MAT_FILE_DATE,'LATLON_SUBAREA-NEC-PXY_1024_1024-','')

		SAVE,FILENAME	=GRID_FILE,GRID,/COMPRESS
		WRITE_MATFILE, MAT_FILE_GRID, ARRAY=GRID, NAME='SST', NOTES='N2AT', SWAP=0
		WRITE_MATFILE, MAT_FILE_KMS, 	ARRAY= FLOAT(SW.KMS), NAME='KMS', NOTES='N2AT', SWAP=0
		WRITE_MATFILE, MAT_FILE_DATE, ARRAY=LONG(DATE_ARRAY), NAME='DATE', NOTES='N2AT', SWAP=0


		IMAGE = GRID

		LEG_TITLE=UNITS('SST',/NAME,/UNIT)+' NB-Sargasso Transect'
		PAL='PAL_PETES24J' 	& ENDIF

;				===> Interpolate along the km axis
	  sz=SIZE(IMAGE,/STRUCT)
	  PX = SZ.DIMENSIONS[0]
	  PY = SZ.DIMENSIONS[1]


	;	LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
	;	S M O O T H    EACH TRANSECT SLICE
;		FOR N=0L,PX-1L DO BEGIN & SLICE=REFORM(IMAGE(N,*)) & IMAGE(N,*)=SMOOTH(SLICE,7,/NAN,MISSING=MISSINGS(SLICE))   &  ENDFOR

;		FOR N=0L,PX-1L DO BEGIN & SLICE=REFORM(IMAGE(N,*)) & IMAGE(N,*)=MEDIAN(SLICE,3)   &  ENDFOR

  	FOR N=0L,PX-1L DO BEGIN & SLICE=REFORM(IMAGE(N,*)) & IMAGE(N,*)=MEDIAN_FILL(SLICE,MISSING=MISSINGS(IMAGE),BOX=1	,/QUIET)   &  ENDFOR

		bimage = SD_SCALES(IMAGE,PROD=PROD,/DATA2BIN)
		OK=WHERE(FINITE(IMAGE) EQ 0,count)
		IF COUNT GE 1 THEN BIMAGE[OK] = 254

		;CIMAGE=MEDIAN(BIMAGE,7)

		DEPLOT
		PSPRINT,/HALF,/COLOR,FILENAME=PS_FILE
	 	CALL_PROCEDURE, PAL,R,G,B
		FONT_TIMES
		POS = [0.05,0.8,0.1,0.1]
		IMG_CON,BIMAGE,BIMAGE,/NOCONTOUR
;		IMG_CON,BIMAGE,BIMAGE,/NOCONTOUR
;		PLOT,AX.JD, DB.KMS, XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,YRANGE=[0,MAX_KM],/YSTYLE,$
;			YTITLE = 'Km Along Transect (N-S)',XTHICK=2,YTHICK=2,$
;			/XSTYLE, XTITLE=AX.TITLE,/NODATA, /NOERASE,XTICK_GET=XTICK_GET,YTICK_GET=YTICK_GET


	PLOT,AX.JD, -MINMAX(KMS), XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,YRANGE=[-MAX_KM,0],/YSTYLE,$
			YTITLE = 'Km Along Transect (N-S)',XTHICK=2,YTHICK=2,$
			/XSTYLE, XTITLE=AX.TITLE,/NODATA, /NOERASE,XTICK_GET=XTICK_GET,YTICK_GET=YTICK_GET
STOP
		GRIDS,XX=AX.TICKV,COLOR=251
;		pos=[!x.window[0],(!Y.REGION[0]- 0.119),!x.window[1],(!Y.REGION[0]+.01)- 0.117]
		POS = [0.1,0.2,0.95,0.3]
		POS = [0.1,0.4,0.95,0.5]
		LEG = COLOR_BAR_SCALE(PROD= PROD,POS=POS,XTITLE=  LEG_TITLE,/CUT,PAL=PAL)
	;	TV,LEG,3000,24400,XSIZE=14000,YSIZE=2000
		TV,LEG,4800,12100,XSIZE=10000,YSIZE=1100
		PSPRINT

	 STOP
	 DONE_DO_TRANSECT_PLOT:

;  ENDIF ;
; |||||||||||||||||||||||||||||||||||||||||||||||||

PRINT,'END OF TRANSECT_NB_SARGASSO_MAIN.PRO'

END; #####################  End of Routine ###############################
