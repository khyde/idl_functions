; $ID:	PHYTO_SIZES_SAVE_MAKE.PRO,	2020-07-08-15,	USER-KJWH	$

	PRO PHYTO_SIZES_SAVE_MAKE,DIR_IN=DIR_IN,DIR_OUT=DIR_OUT,DATE_RANGE=DATE_RANGE,PERIOD_CODE=PERIOD_CODE,$
	    MAP=MAP,REVERSE=REVERSE,VERBOSE=VERBOSE,OVERWRITE=OVERWRITE

;+
; NAME:
;		PHYTO_COMMUNITY_SAVE_MAKE
;
; PURPOSE:;
;		This procedure creates phytoplankton community files using the PAN phytoplankton community algorithm
;
; CATEGORY:
;		CATEGORY
;
; CALLING SEQUENCE:
;
;		PIGMENTS_SAVE_MAKE, Parameter1, Parameter2
;
; INPUTS:
;		Parm1:	Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;		Parm2:	Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;		KEY1:	Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
;
; OUTPUTS:
;		This procedure creates pigment save files 
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			Written September 7, 2011 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'PHYTO_COMMUNITY_SAVE_MAKE'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
	SL = DELIMITER(/PATH)

  IF N_ELEMENTS(PERIOD_CODE) NE 1 THEN _PERIOD_CODE ='S' ELSE _PERIOD_CODE=PERIOD_CODE
  IF N_ELEMENTS(ALGS) GE 1 THEN _ALGS = ALGS ELSE _ALGS = 'PAN'
  IF N_ELEMENTS(SATELLITE) EQ 1 THEN SAT = SATELLITE ELSE SAT = ''
  IF N_ELEMENTS(DIR_OUT) LT 1 THEN DIR_OUT=DIR_IN + 'PHYTO_SIZES' + SL
  
  IF N_ELEMENTS(DIR_IN) LT 1 THEN STOP
    
  FA_DIATOM     = PARSE_IT(FILE_SEARCH(DIR_IN+'DIATOM-PAN'                   +SL+_PERIOD_CODE+'_*-DIATOM-PAN.SAVE'),/ALL)  
  FA_DINO       = PARSE_IT(FILE_SEARCH(DIR_IN+'DINOFLAGELLATE-PAN'           +SL+_PERIOD_CODE+'_*-DINOFLAGELLATE-PAN.SAVE'),/ALL)
  FA_GREEN      = PARSE_IT(FILE_SEARCH(DIR_IN+'GREEN_ALGAE-PAN'              +SL+_PERIOD_CODE+'_*-GREEN_ALGAE-PAN.SAVE'),/ALL)    
  FA_CRYPTO     = PARSE_IT(FILE_SEARCH(DIR_IN+'CRYPTOPHYTE-PAN'              +SL+_PERIOD_CODE+'_*-CRYPTOPHYTE-PAN.SAVE'),/ALL)
  FA_BROWN      = PARSE_IT(FILE_SEARCH(DIR_IN+'BROWN_ALGAE-PAN'              +SL+_PERIOD_CODE+'_*-BROWN_ALGAE-PAN.SAVE'),/ALL)
  FA_PICO       = PARSE_IT(FILE_SEARCH(DIR_IN+'PICO-PAN'                     +SL+_PERIOD_CODE+'_*-PICO-PAN.SAVE'),/ALL)
      
  FA_DIATOM_PER = PARSE_IT(FILE_SEARCH(DIR_IN+'DIATOM_PERCENTAGE-PAN'        +SL+_PERIOD_CODE+'_*-DIATOM_PERCENTAGE-PAN.SAVE'),/ALL)  
  FA_DINO_PER   = PARSE_IT(FILE_SEARCH(DIR_IN+'DINOFLAGELLATE_PERCENTAGE-PAN'+SL+_PERIOD_CODE+'_*-DINOFLAGELLATE_PERCENTAGE-PAN.SAVE'),/ALL)
  FA_GREEN_PER  = PARSE_IT(FILE_SEARCH(DIR_IN+'GREEN_PERCENTAGE-PAN'         +SL+_PERIOD_CODE+'_*-GREEN_PERCENTAGE-PAN.SAVE'),/ALL)    
  FA_CRYPTO_PER = PARSE_IT(FILE_SEARCH(DIR_IN+'CRYPTOPHYTE_PERCENTAGE-PAN'   +SL+_PERIOD_CODE+'_*-CRYPTOPHYTE_PERCENTAGE-PAN.SAVE'),/ALL)
  FA_BROWN_PER  = PARSE_IT(FILE_SEARCH(DIR_IN+'BROWN_PERCENTAGE-PAN'         +SL+_PERIOD_CODE+'_*-BROWN_PERCENTAGE-PAN.SAVE'),/ALL)
  FA_PICO_PER   = PARSE_IT(FILE_SEARCH(DIR_IN+'PICO_PERCENTAGE-PAN'          +SL+_PERIOD_CODE+'_*-PICO_PERCENTAGE-PAN.SAVE'),/ALL)
  
  FA_DIATOM     = FA_DIATOM[SORT(FA_DIATOM.DATE_START)]
  FA_DINO       = FA_DINO[SORT(FA_DINO.DATE_START)]
  FA_GREEN      = FA_GREEN[SORT(FA_GREEN.DATE_START)]
  FA_CRYPTO     = FA_CRYPTO[SORT(FA_CRYPTO.DATE_START)]
  FA_BROWN      = FA_BROWN[SORT(FA_BROWN.DATE_START)]
  FA_PICO       = FA_PICO[SORT(FA_PICO.DATE_START)]
  FA_DIATOM_PER = FA_DIATOM_PER[SORT(FA_DIATOM_PER.DATE_START)]
  FA_DINO_PER   = FA_DINO_PER[SORT(FA_DINO_PER.DATE_START)]
  FA_GREEN_PER  = FA_GREEN_PER[SORT(FA_GREEN_PER.DATE_START)]
  FA_CRYPTO_PER = FA_CRYPTO_PER[SORT(FA_CRYPTO_PER.DATE_START)]
  FA_BROWN_PER  = FA_BROWN_PER[SORT(FA_BROWN_PER.DATE_START)]
  FA_PICO_PER   = FA_PICO_PER[SORT(FA_PICO_PER.DATE_START)]
    
  IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
    DATE_START    = DATE_RANGE[0]
    DATE_END      = DATE_RANGE[1]    
    OK_DIATOM     = WHERE(FA_DIATOM.DATE_START     GE DATE_START AND FA_DIATOM.DATE_END     LE DATE_END,COUNT_DIATOM)  & IF COUNT_DIATOM  GE 1 THEN FA_DIATOM  = FA_DIATOM(OK_DIATOM)
    OK_DINO       = WHERE(FA_DINO.DATE_START       GE DATE_START AND FA_DINO.DATE_END       LE DATE_END,COUNT_DINO)  & IF COUNT_DINO  GE 1 THEN FA_DINO  = FA_DINO(OK_DINO) 
    OK_GREEN      = WHERE(FA_GREEN.DATE_START      GE DATE_START AND FA_GREEN.DATE_END      LE DATE_END,COUNT_GREEN)  & IF COUNT_GREEN  GE 1 THEN FA_GREEN  = FA_GREEN(OK_GREEN)     
    OK_CRYPTO     = WHERE(FA_CRYPTO.DATE_START     GE DATE_START AND FA_CRYPTO.DATE_END     LE DATE_END,COUNT_CRYPTO)  & IF COUNT_CRYPTO  GE 1 THEN FA_CRYPTO  = FA_CRYPTO(OK_CRYPTO)
    OK_BROWN      = WHERE(FA_BROWN.DATE_START      GE DATE_START AND FA_BROWN.DATE_END      LE DATE_END,COUNT_BROWN) & IF COUNT_BROWN GE 1 THEN FA_BROWN = FA_BROWN(OK_BROWN)    
    OK_PICO       = WHERE(FA_PICO.DATE_START       GE DATE_START AND FA_PICO.DATE_END       LE DATE_END,COUNT_PICO) & IF COUNT_PICO GE 1 THEN FA_PICO = FA_PICO(OK_PICO)
    OK_DIATOM_PER = WHERE(FA_DIATOM_PER.DATE_START GE DATE_START AND FA_DIATOM_PER.DATE_END LE DATE_END,COUNT_DIATOM_PER)   & IF COUNT_DIATOM_PER   GE 1 THEN FA_DIATOM_PER   = FA_DIATOM_PER(OK_DIATOM_PER) 
    OK_DINO_PER   = WHERE(FA_DINO_PER.DATE_START   GE DATE_START AND FA_DINO_PER.DATE_END   LE DATE_END,COUNT_DINO_PER)  & IF COUNT_DINO_PER  GE 1 THEN FA_DINO_PER  = FA_DINO_PER(OK_DINO_PER)        
    OK_GREEN_PER  = WHERE(FA_GREEN_PER.DATE_START  GE DATE_START AND FA_GREEN_PER.DATE_END  LE DATE_END,COUNT_GREEN_PER)   & IF COUNT_GREEN_PER   GE 1 THEN FA_GREEN_PER   = FA_GREEN_PER(OK_GREEN_PER)    
    OK_CRYPTO_PER = WHERE(FA_CRYPTO_PER.DATE_START GE DATE_START AND FA_CRYPTO_PER.DATE_END LE DATE_END,COUNT_CRYPTO_PER)   & IF COUNT_CRYPTO_PER   GE 1 THEN FA_CRYPTO_PER   = FA_CRYPTO_PER(OK_CRYPTO_PER)
    OK_BROWN_PER  = WHERE(FA_BROWN_PER.DATE_START  GE DATE_START AND FA_BROWN_PER.DATE_END  LE DATE_END,COUNT_BROWN_PER) & IF COUNT_BROWN_PER GE 1 THEN FA_BROWN_PER = FA_BROWN_PER(OK_BROWN_PER)
    OK_PICO_PER   = WHERE(FA_PICO_PER.DATE_START   GE DATE_START AND FA_PICO_PER.DATE_END   LE DATE_END,COUNT_PICO_PER) & IF COUNT_PICO_PER GE 1 THEN FA_PICO_PER = FA_PICO_PER(OK_PICO_PER)
  ENDIF
    
  IF N_ELEMENTS(MAP) NE 1 THEN MAP_OUT=FA_DIATOM[0].MAP ELSE MAP_OUT=MAP
  MAP_IN=FA_DIATOM[0].MAP  
  MAPS_INFO=MAPS_SIZE(MAP_OUT)
  PX_OUT=MAPS_INFO.PX_OUT
  PY_OUT=MAPS_INFO.PY_OUT
  
  CFILES = FA_DIATOM.FULLNAME
  IF KEYWORD_SET(REVERSE) THEN CFILES = REVERSE(CFILES)
    
  FOR FTH = 0L,N_ELEMENTS(CFILES)-1L DO BEGIN
    AFILE_DIATOM=CFILES(FTH)
    _FILES = WHERE(FA_DIATOM.FULLNAME EQ AFILE_DIATOM)
    ADATE = FA_DIATOM(_FILES).DATE_START
    
;   ===> Get matching DIATOM_PER for this day
    OK_DIATOM_PER = WHERE(FA_DIATOM_PER.DATE_START EQ ADATE,COUNT_DIATOM_PER)
    IF COUNT_DIATOM_PER NE 1 THEN CONTINUE
    AFILE_DIATOM_PER = FA_DIATOM_PER(OK_DIATOM_PER).FULLNAME    
    
;   ===> Get matching DINO for this day
    OK_DINO = WHERE(FA_DINO.DATE_START EQ ADATE,COUNT_DINO)
    IF COUNT_DINO NE 1 THEN CONTINUE
    AFILE_DINO = FA_DINO(OK_DINO).FULLNAME

;   ===> Get matching GREEN for this day
    OK_GREEN = WHERE(FA_GREEN.DATE_START EQ ADATE,COUNT_GREEN)
    IF COUNT_GREEN NE 1 THEN CONTINUE
    AFILE_GREEN = FA_GREEN(OK_GREEN).FULLNAME

;   ===> Get matching CRYPTO for this day
    OK_CRYPTO = WHERE(FA_CRYPTO.DATE_START EQ ADATE,COUNT_CRYPTO)
    IF COUNT_CRYPTO NE 1 THEN CONTINUE
    AFILE_CRYPTO = FA_CRYPTO(OK_CRYPTO).FULLNAME

;   ===> Get matching BROWN for this day
    OK_BROWN = WHERE(FA_BROWN.DATE_START EQ ADATE,COUNT_BROWN)
    IF COUNT_BROWN NE 1 THEN CONTINUE
    AFILE_BROWN = FA_BROWN(OK_BROWN).FULLNAME

;   ===> Get matching PICO for this day
    OK_PICO = WHERE(FA_PICO.DATE_START EQ ADATE,COUNT_PICO)
    IF COUNT_PICO NE 1 THEN CONTINUE
    AFILE_PICO = FA_PICO(OK_PICO).FULLNAME

;   ===> Get matching DINO_PER for this day
    OK_DINO_PER = WHERE(FA_DINO_PER.DATE_START EQ ADATE,COUNT_DINO_PER)
    IF COUNT_DINO_PER NE 1 THEN CONTINUE
    AFILE_DINO_PER = FA_DINO_PER(OK_DINO_PER).FULLNAME

;   ===> Get matching GREEN_PER for this day
    OK_GREEN_PER = WHERE(FA_GREEN_PER.DATE_START EQ ADATE,COUNT_GREEN_PER)
    IF COUNT_GREEN_PER NE 1 THEN CONTINUE
    AFILE_GREEN_PER = FA_GREEN_PER(OK_GREEN_PER).FULLNAME

;   ===> Get matching CRYPTO_PER for this day
    OK_CRYPTO_PER = WHERE(FA_CRYPTO_PER.DATE_START EQ ADATE,COUNT_CRYPTO_PER)
    IF COUNT_CRYPTO_PER NE 1 THEN CONTINUE
    AFILE_CRYPTO_PER = FA_CRYPTO_PER(OK_CRYPTO_PER).FULLNAME

;   ===> Get matching BROWN_PER for this day
    OK_BROWN_PER = WHERE(FA_BROWN_PER.DATE_START EQ ADATE,COUNT_BROWN_PER)
    IF COUNT_BROWN_PER NE 1 THEN CONTINUE
    AFILE_BROWN_PER = FA_BROWN_PER(OK_BROWN_PER).FULLNAME
    
;   ===> Get matching PICO_PER for this day
    OK_PICO_PER = WHERE(FA_PICO_PER.DATE_START EQ ADATE,COUNT_PICO_PER)
    IF COUNT_PICO_PER NE 1 THEN CONTINUE
    AFILE_PICO_PER = FA_PICO_PER(OK_PICO_PER).FULLNAME    
    
    PHYTOS = ['MICRO','NANO','MICRO_PERCENTAGE','NANO_PERCENTAGE','NANOPICO','NANOPICO_PERCENTAGE']
    SAVEFILE = []
    FOR PTH = 0L, N_ELEMENTS(PHYTOS)-1 DO IF FILE_TEST(DIR_OUT+PHYTOS(PTH)+'-'+_ALGS+SL,/DIR) EQ 0 THEN FILE_MKDIR,DIR_OUT+PHYTOS(PTH)+'-'+_ALGS+SL
    FOR PTH = 0L, N_ELEMENTS(PHYTOS)-1 DO SAVEFILE = [SAVEFILE,DIR_OUT+PHYTOS(PTH)+'-'+_ALGS+SL+REPLACE(FA_DIATOM(_FILES).FIRST_NAME,[MAP_IN,STRUPCASE('DIATOM-PAN')],[MAP_OUT,PHYTOS(PTH)])+'-'+_ALGS+'.SAVE']                        
    MTIMES_SAVE  = GET_MTIME(SAVEFILE)
    INFILES      = [AFILE_DIATOM,AFILE_DINO,AFILE_DIATOM,AFILE_CRYPTO,AFILE_BROWN,AFILE_PICO,AFILE_DIATOM_PER,AFILE_DINO_PER,AFILE_GREEN_PER,AFILE_CRYPTO_PER,AFILE_BROWN_PER,AFILE_PICO_PER]
    MTIMES_IN    = GET_MTIME(INFILES)
        
    IF NOT KEYWORD_SET(OVERWRITE) AND MIN(MTIMES_SAVE) GT MAX(MTIMES_IN) THEN CONTINUE
        
;   ===> Read the DIATOM file
    STRUCT_DIATOM=READALL(AFILE_DIATOM)
    PRINT, 'Creating phytoplankton data for ' + STRUCT_DIATOM.(0).PERIOD + ' ' + STRUCT_DIATOM.(0).SENSOR + ' ' + STRUCT_DIATOM.(0).MAP   
    IF STRUCT_DIATOM.(0).PX NE PX_OUT OR STRUCT_DIATOM.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_DIATOM=STRUCT_SD_REMAP(STRUCT=STRUCT_DIATOM,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_DIATOM=STRUCT_SD_2DATA(STRUCT_DIATOM)
    ENDIF ELSE DATA_DIATOM=STRUCT_SD_2DATA(STRUCT_DIATOM,COUNT=COUNT) & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the DINO file
    STRUCT_DINO=READALL(AFILE_DINO)
    IF STRUCT_DINO.(0).PX NE PX_OUT OR STRUCT_DINO.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_DINO=STRUCT_SD_REMAP(STRUCT=STRUCT_DINO,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_DINO=STRUCT_SD_2DATA(STRUCT_DINO)
    ENDIF ELSE DATA_DINO=STRUCT_SD_2DATA(STRUCT_DINO,COUNT=COUNT) & GONE, STRUCT_DINO & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the GREEN file
    STRUCT_GREEN=READALL(AFILE_GREEN)
    IF STRUCT_GREEN.(0).PX NE PX_OUT OR STRUCT_GREEN.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_GREEN=STRUCT_SD_REMAP(STRUCT=STRUCT_GREEN,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_GREEN=STRUCT_SD_2DATA(STRUCT_GREEN)
    ENDIF ELSE DATA_GREEN=STRUCT_SD_2DATA(STRUCT_GREEN,COUNT=COUNT) & GONE, STRUCT_GREEN & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the CRYPTO file
    STRUCT_CRYPTO=READALL(AFILE_CRYPTO)
    IF STRUCT_CRYPTO.(0).PX NE PX_OUT OR STRUCT_CRYPTO.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_CRYPTO=STRUCT_SD_REMAP(STRUCT=STRUCT_CRYPTO,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_CRYPTO=STRUCT_SD_2DATA(STRUCT_CRYPTO)
    ENDIF ELSE DATA_CRYPTO=STRUCT_SD_2DATA(STRUCT_CRYPTO,COUNT=COUNT) & GONE, STRUCT_CRYPTO & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the PICO file
    STRUCT_BROWN=READALL(AFILE_BROWN)
    IF STRUCT_BROWN.(0).PX NE PX_OUT OR STRUCT_BROWN.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_BROWN=STRUCT_SD_REMAP(STRUCT=STRUCT_BROWN,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_BROWN=STRUCT_SD_2DATA(STRUCT_BROWN)
    ENDIF ELSE DATA_BROWN=STRUCT_SD_2DATA(STRUCT_BROWN,COUNT=COUNT) & GONE, STRUCT_BROWN & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the PICO file
    STRUCT_PICO=READALL(AFILE_PICO)
    IF STRUCT_PICO.(0).PX NE PX_OUT OR STRUCT_PICO.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_PICO=STRUCT_SD_REMAP(STRUCT=STRUCT_PICO,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_PICO=STRUCT_SD_2DATA(STRUCT_PICO)
    ENDIF ELSE DATA_PICO=STRUCT_SD_2DATA(STRUCT_PICO,COUNT=COUNT) & GONE, STRUCT_PICO & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the DIATOM_PER file
    STRUCT_DIATOM_PER=READALL(AFILE_DIATOM_PER)
    IF STRUCT_DIATOM_PER.(0).PX NE PX_OUT OR STRUCT_DIATOM_PER.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_DIATOM_PER=STRUCT_SD_REMAP(STRUCT=STRUCT_DIATOM_PER,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_DIATOM_PER=STRUCT_SD_2DATA(STRUCT_DIATOM_PER)
    ENDIF ELSE DATA_DIATOM_PER=STRUCT_SD_2DATA(STRUCT_DIATOM_PER,COUNT=COUNT) & GONE, STRUCT_DIATOM_PER & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the DINO_PER file
    STRUCT_DINO_PER=READALL(AFILE_DINO_PER)
    IF STRUCT_DINO_PER.(0).PX NE PX_OUT OR STRUCT_DINO_PER.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_DINO_PER=STRUCT_SD_REMAP(STRUCT=STRUCT_DINO_PER,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_DINO_PER=STRUCT_SD_2DATA(STRUCT_DINO_PER)
    ENDIF ELSE DATA_DINO_PER=STRUCT_SD_2DATA(STRUCT_DINO_PER,COUNT=COUNT) & GONE, STRUCT_DINO_PER & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the CRYPTO_PER file
    STRUCT_CRYPTO_PER=READALL(AFILE_CRYPTO_PER)
    IF STRUCT_CRYPTO_PER.(0).PX NE PX_OUT OR STRUCT_CRYPTO_PER.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_CRYPTO_PER=STRUCT_SD_REMAP(STRUCT=STRUCT_CRYPTO_PER,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_CRYPTO_PER=STRUCT_SD_2DATA(STRUCT_CRYPTO_PER)
    ENDIF ELSE DATA_CRYPTO_PER=STRUCT_SD_2DATA(STRUCT_CRYPTO_PER,COUNT=COUNT) & GONE, STRUCT_CRYPTO_PER & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the GREEN_PER file
    STRUCT_GREEN_PER=READALL(AFILE_GREEN_PER)
    IF STRUCT_GREEN_PER.(0).PX NE PX_OUT OR STRUCT_GREEN_PER.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_GREEN_PER=STRUCT_SD_REMAP(STRUCT=STRUCT_GREEN_PER,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_GREEN_PER=STRUCT_SD_2DATA(STRUCT_GREEN_PER)
    ENDIF ELSE DATA_GREEN_PER=STRUCT_SD_2DATA(STRUCT_GREEN_PER,COUNT=COUNT) & GONE, STRUCT_GREEN_PER & IF COUNT EQ 0 THEN CONTINUE

;   ===> Read the BROWN_PER file
    STRUCT_BROWN_PER=READALL(AFILE_BROWN_PER)
    IF STRUCT_BROWN_PER.(0).PX NE PX_OUT OR STRUCT_BROWN_PER.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_BROWN_PER=STRUCT_SD_REMAP(STRUCT=STRUCT_BROWN_PER,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_BROWN_PER=STRUCT_SD_2DATA(STRUCT_BROWN_PER)
    ENDIF ELSE DATA_BROWN_PER=STRUCT_SD_2DATA(STRUCT_BROWN_PER,COUNT=COUNT) & GONE, STRUCT_BROWN_PER & IF COUNT EQ 0 THEN CONTINUE
    
;   ===> Read the PICO_PER file
    STRUCT_PICO_PER=READALL(AFILE_PICO_PER)
    IF STRUCT_PICO_PER.(0).PX NE PX_OUT OR STRUCT_PICO_PER.(0).PY NE PY_OUT THEN BEGIN
      STRUCT_PICO_PER=STRUCT_SD_REMAP(STRUCT=STRUCT_PICO_PER,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
      DATA_PICO_PER=STRUCT_SD_2DATA(STRUCT_PICO_PER)
    ENDIF ELSE DATA_PICO_PER=STRUCT_SD_2DATA(STRUCT_PICO_PER,COUNT=COUNT) & GONE, STRUCT_PICO_PER & IF COUNT EQ 0 THEN CONTINUE    

    MISSING=MISSINGS(DATA_DIATOM)

;   ***** LOOP THROUGH PHYTOS *****
    PHYTOS = ['MICRO','NANO','MICRO_PERCENTAGE','NANO_PERCENTAGE','NANOPICO','NANOPICO_PERCENTAGE']
    FOR NTH = 0L, N_ELEMENTS(PHYTOS)-1 DO BEGIN
      PHYTO = PHYTOS[NTH]   
      DATA  = DATA_DIATOM
      DATA(*) = MISSINGS(0.0)       
      CASE PHYTO OF
        'MICRO': BEGIN
          OK = WHERE(DATA_DIATOM NE MISSINGS(DATA_DIATOM) AND DATA_DINO NE MISSINGS(DATA_DINO),COUNT)
          IF COUNT GE 1 THEN DATA[OK] = DATA_DIATOM[OK] + DATA_DINO[OK]
        END
        'NANO': BEGIN
          OK = WHERE(DATA_GREEN NE MISSINGS(DATA_GREEN) AND DATA_BROWN NE MISSINGS(DATA_BROWN) AND DATA_CRYPTO NE MISSINGS(DATA_CRYPTO),COUNT)          
          IF COUNT GE 1 THEN DATA[OK] = DATA_GREEN[OK] + DATA_BROWN[OK] + DATA_CRYPTO[OK]
        END
        'NANOPICO': BEGIN
          OK = WHERE(DATA_GREEN NE MISSINGS(DATA_GREEN) AND DATA_BROWN NE MISSINGS(DATA_BROWN) AND DATA_CRYPTO NE MISSINGS(DATA_CRYPTO) AND DATA_PICO NE MISSINGS(DATA_PICO),COUNT)          
          IF COUNT GE 1 THEN DATA[OK] = DATA_GREEN[OK] + DATA_BROWN[OK] + DATA_CRYPTO[OK] + DATA_PICO[OK]
        END
        'MICRO_PERCENTAGE': BEGIN
          OK = WHERE(DATA_DIATOM_PER NE MISSINGS(DATA_DIATOM_PER) AND DATA_DINO_PER NE MISSINGS(DATA_DINO_PER),COUNT)          
          IF COUNT GE 1 THEN DATA[OK] = DATA_DIATOM_PER[OK] + DATA_DINO_PER[OK]
        END
        'NANO_PERCENTAGE': BEGIN
          OK = WHERE(DATA_GREEN_PER NE MISSINGS(DATA_GREEN_PER) AND DATA_BROWN_PER NE MISSINGS(DATA_BROWN_PER) AND DATA_CRYPTO_PER NE MISSINGS(DATA_CRYPTO_PER),COUNT)
          IF COUNT GE 1 THEN DATA[OK] = DATA_GREEN_PER[OK] + DATA_BROWN_PER[OK] + DATA_CRYPTO_PER[OK]
        END
        'NANOPICO_PERCENTAGE': BEGIN
          OK = WHERE(DATA_GREEN_PER NE MISSINGS(DATA_GREEN_PER) AND DATA_BROWN_PER NE MISSINGS(DATA_BROWN_PER) AND DATA_CRYPTO_PER NE MISSINGS(DATA_CRYPTO_PER) AND DATA_PICO_PER NE MISSINGS(DATA_PICO_PER),COUNT)
          IF COUNT GE 1 THEN DATA[OK] = DATA_GREEN_PER[OK] + DATA_BROWN_PER[OK] + DATA_CRYPTO_PER[OK] + DATA_PICO_PER[OK]
        END
      ENDCASE    
      SAVEFILE = DIR_OUT+PHYTOS[NTH]+'-'+_ALGS+SL+REPLACE(FA_DIATOM(_FILES).FIRST_NAME,[MAP_IN,STRUPCASE('DIATOM-PAN')],[MAP_OUT,PHYTOS[NTH]])+'-'+_ALGS+'.SAVE'   
      IF NOT KEYWORD_SET(OVERWRITE) AND GET_MTIME(SAVEFILE) GT MAX(MTIMES_IN) THEN CONTINUE            
      STRUCT_SD_WRITE,SAVEFILE,PROD=PHYTOS[NTH], ALG='PAN',IMAGE=DATA,MISSING_CODE=MISSINGS(DATA), $
                      PERIOD=STRUCT_DIATOM.PERIOD, SENSOR=STRUCT_DIATOM.SENSOR, SATELLITE=STRUCT_DIATOM.SATELLITE,$
                      METHOD=STRUCT_DIATOM.METHOD, COVERAGE=STRUCT_DIATOM.COVERAGE, MAP=STRUCT_DIATOM.MAP,INFILE=INFILES,NOTES='',ERROR=ERROR
      GONE,DATA
      
    ENDFOR    
    GONE,DATA_DIATOM
    GONE,DATA_DINO
    GONE,DATA_GREEN
    GONE,DATA_CRYPTO
    GONE,DATA_BROWN
    GONE,DATA_PICO
    GONE,DATA_DIATOM_PER
    GONE,DATA_DINO_PER
    GONE,DATA_GREEN_PER
    GONE,DATA_CRYPTO_PER
    GONE,DATA_BROWN_PER
    GONE,DATA_PICO_PER
    DONE:          
   ENDFOR
   




	END; #####################  End of Routine ################################
