; $ID:	TOPO_MAP.PRO,	2021-03-15-16,	USER-KJWH	$
;+
;;#############################################################################################################
	FUNCTION TOPO_MAP, MAPP, PX=PX, PY=PY, TOPO_FILES=TOPO_FILES, SHM_FILE = SHM_FILE, VERBOSE=VERBOSE
;
; PURPOSE: THIS FUNCTION RETURNS A SIGNED INTEGER IMAGE OF THE TOPOGRAPHY [ LAND +, WATER - VALUES(IN METERS)]
;          BY USING THE APPROPRIATE SRTM30PLUS FILES FOR A MAP
; 
; 
; CATEGORY:	TOPO_ FAMILY		 
;
; CALLING SEQUENCE: RESULT = TOPO_MAP(MAPP)
;
; INPUTS: 
;      MAPP:  THE NAME OF THE MAP DESIRED
;		
; KEYWORD PARAMETERS:
;   TOPO_FILES. RETURN THE TOPO FILE NAMES APPROPRIATE TO THE MAPP
;   PX......... WIDTH IN PIXELS
;   PY......... HEIGHT IN PIXELS
;   SHM_FILE... THE FULL NAME OF THE SHARED MEMORY FILE FILLED WITH TOPO DATA [OUTPUT]
 

;  OUTPUT: A SIGNED INTEGER ARRAY WITH LAND > 0 AND WATER < 0 
	
;; EXAMPLES:
;  PLIST,TOPO_MAP('NEC',/TOPO_FILES)
;  PLIST,TOPO_MAP('GEQ',/TOPO_FILES)
;  IMGR,TOPO_MAP('NEC'),MAP = 'NEC',PROD = 'DEPTH',PAL = 'PAL_BATHY',BYT=BYT
;  IMGR,TOPO_MAP('NEC',PX = 2048,PY=2048),MAP = 'NEC',PROD = 'DEPTH',PAL = 'PAL_BATHY'
;  IMGR,TOPO_MAP('NEC',PX = 4096,PY=4096),MAP = 'NEC',PROD = 'DEPTH',PAL = 'PAL_BATHY'
;  IMGR,TOPO_MAP('EC'),MAP = 'EC',PROD = 'DEPTH',PAL = 'PAL_BATHY'
;  IMGR,TOPO_MAP('SMI'),MAP = 'SMI',PROD = 'DEPTH',PAL = 'PAL_BATHY' ,PNGFILE=!TEMP + 'SMI_TOPO.PNG'; [USES ALL 33 TILES]
;  IMGR,TOPO_MAP('NEC_ECO'),PROD = 'DEPTH',PAL = 'PAL_BATHY'
;  IMGR,TOPO_MAP('ALASKA'),PROD = 'DEPTH',PAL = 'PAL_BATHY',MAP = 'ALASKA'
;  IMGR, TOPO_MAP('US_ECO'),PROD = 'TOPO',PAL = 'PAL_TOPO'
;  PMM,TOPO_MAP('EC');= -6674    1874
;  PMM, TOPO_MAP('SMI') ;= -10886.0      7253.00[ FOR ALL 33 TILES]
;   
; NOTES:
; VERSION 9.0 
;DATA - 33 FILES OF SIGNED 2-BYTE INTEGERS FOR GLOBAL ELEVATION(> 0)
;AND DEPTH (<0). THE GLOBAL ELEVATIONS ARE AN EXACT COPY OF THE
;SRTM30 GRIDS PROVIDED AT THE FOLLOWING LOCATION.  OUR CONTRIBUTION
;IS TO FILL THE OCEAN AREAS WITH SOME ESTIMATE OF DEPTH.
;FTP://E0SRP01U.ECS.NASA.GOV

;
; MODIFICATION HISTORY:
;			APR 09, 2014 - WRITTEN BY J.O'REILLY
;			APR 10, 2014 - JOR:  ADDED COMMON BLOCK
;			APR 15, 2014 - JOR:  ADDED USE_SAVES KEYWORD
;			DEC 10, 2014 - JOR:  TOPO_LONLATS = !S.MASTER + "SRTM30PLUS-LONLATS.CSV"
;                         TILEMAP_FILE = !S.MASTER + 'SRTM30_TILES.PNG'
;     JAN 7,  2015 - KJWH: CHANGED INPUT FILES TO .nc FILES AND ADDED READ_NC
;                         REMOVED UNNECESSARY CODE
;     NOV 19, 2015 - JEOR: IF COUNT GE 1 THEN ITOPO[OK] = MISSINGS(ITOPO)
;     NOV 24, 2015 - JEOR: NOW USING MAPS_LONLAT_GRID FOR MAPPING ITOPO TO MAPP  INSTEAD OF MAP_REMAP
;     DEC 07, 2015 - JEOR: USING MEDIAN_FILL TO FILL IN THIN GAPS AT TILE SEAMS
;                         RENAMED FILES_ONLY TO ONLY_TOPO_FILES: 
;                         [% AMBIGUOUS KEYWORD ABBREVIATION: FILES.]
;     DEC 24, 2015 - JEOR: STOP TO REMIND KIM TO MOVE DATA FOLDER INTO !S.IDL_TOPO
;     DEC 26, 2015 - JEOR: REMOVED KEY ONLY_FILES [NOW KEY TOPO_FILES RETURNS THE FILE NAMES APPROPRIATE TO THE MAPP]
;     DEC 30, 2015 - JEOR: RENAMED FROM MAPS_TOPO TO TOPO_MAP [TO KEEP IN THE TOPO FAMILY]
;     DEC 31, 2015 - JEOR: IF MAPP EQ MAP_OUT THEN BEGIN  REBIN TO AVOID CONGRID-INTERPOLATION IN MAPS_REMAP
;     JAN 07, 2016 - KJWH: REMOVED FILE_PARSE (NOT NEEDED)
;                          CHANGED VARIABLE NAME "TOPO" TO "TPO" TO AVOID CONFLICT WITH IDL'S TOPO.PRO
;                          FORMATTING
;                          LOOK FOR SD.SD.Z._FILLVALUE IN THE ITOPO IMAGE AND REPLACE THOSE PIXELS WITH MISSINGS(ITOPO)
;     JAN 17, 2016 - JEOR: NOW USING SHARED MEMORY FILE,SHM_WRITE
;     JAN 18, 2016 - JEOR: IF MAPP EQ 'SMI' THEN DIR = !S.IDL_TOPO + 'MEM' + PATH_SEP() ELSE DIR = !S.IDL_TEMP
;     JAN 19, 2016 - JEOR: ADDED KEY SHM_FILE
;     FEB 08, 2016 - JEOR: NOW USING  !S.MASTER + 'TOPO_MASTER.CSV' &
;                          !S.MASTER + 'TOPO_TILE_MAP.PNG'
;     MAR 29, 2016 - KJWH: Added prompt to get the map
;                          Formatting and documentation  
;                          Added VERBOSE keyword       
;     SEP 06, 2017 - KJWH: Now determing the remapped SUBS instead of getting them from MAPS_REMAP (SUBS is an ambiguous keyword in MAPS_REMAP and needs to be fixed)
;                            SUBS = WHERE(PART NE MISSINGS(PART),COUNT)
;                          Added a check for the L3B maps before running MEDIAN_FILL   
;                            IF COUNT GE 1 AND ~IS_L3B(MAPP) THEN SHM_ARRAY = FIX(MEDIAN_FILL(SHM_ARRAY, MISSING=MISSING))                              
;#################################################################################
;-
; **************************
  ROUTINE_NAME  = 'TOPO_MAP'
; **************************
  COMMON _TOPO_MAP, DB, TILES_SMI ; ===> STORE DB AND TILES_SMI IN COMMON MEMORY

  GONE,SHM_ARRAY
  DO_SHM = 0

; ===> GET MAP NAME
  IF NONE(MAPP) THEN MAPP = '' ELSE MAPP = STRUPCASE(MAPP)
  IF VALIDS('MAPS',MAPP) EQ '' THEN READ,MAPP,PROMPT = 'ENTER VALID MAP PROJECTION [NO QUOTES]:  ' 
  IF VALIDS('MAPS',MAPP) EQ '' THEN MESSAGE, 'ERROR: Must provide valid map.

; ===> GET MAP INFO
  SZ = MAPS_SIZE(MAPP)
  IF NONE(PX) THEN PX=SZ.PX
  IF NONE(PY) THEN PY=SZ.PY
  
; ===> READ TOPO_MASTER IF NOT IN COMMON MEMORY  
  IF NONE(DB) THEN BEGIN
    TOPO_LONLATS = !S.MASTER  + 'TOPO_MASTER.CSV'
    DB = CSV_READ(TOPO_LONLATS)
    DB = STRUCT_2NUM(DB)
  ENDIF ; IF NONE(DB) THEN BEGIN

; ===> READ TILE MAP  
  IF NONE(TILES_SMI) THEN BEGIN
    TILEMAP_FILE = !S.MASTER + 'TOPO_TILE_MAP.PNG'
    TILES_SMI = READ_PNG(TILEMAP_FILE,R,G,B)
  ENDIF ; IF NONE(TILES_SMI) THEN BEGIN
  
; ===> REMAP TILES_SMI TO THIS MAPP
  IF MAPP EQ 'SMI' THEN TILE_MAP = REBIN(TILES_SMI,PX,PY,/SAMPLE) $
                   ELSE TILE_MAP = MAPS_REMAP(TILES_SMI,PX_OUT=PX,PY_OUT=PY, MAP_IN='SMI', MAP_OUT=MAPP) 

; ===> FIND WHICH TILES THIS MAP COVERS
  H = HISTOGRAM(TILE_MAP)                                     
  OK_TILES = WHERE(H GT 0,COUNT_TILES)
  IF MAPP EQ 'SMI' AND COUNT_TILES NE 33 THEN STOP
  OK_DB = WHERE_IN(DB.COLOR,OK_TILES)
  TILES = DB(OK_DB).TILE 
  DIR = !S.IDL_TOPO + 'DATA' + PATH_SEP()
  FILES = DIR + TILES + '.nc'
  IF KEY(TOPO_FILES) THEN RETURN, FILES; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

; ===> CONSTRUCT A NAME FOR THE SHM_FILE
  IF MAPP EQ 'SMI' THEN DIR = !S.IDL_TOPO + 'MEM' + PATH_SEP() ELSE DIR = !S.IDL_TEMP
  SHM_FILE = DIR + MAPP + '-TOPO-' +'PXY_'+ ROUNDS(PX) + '_'+ ROUNDS(PY) + '-SH_MEM.INT'
  
; ===> MAKE THE SHARED MEMORY FOR THE SHM_FILE
  IF DO_SHM THEN SHM_MAKE,'SHM_ARRAY',PX=PX,PY=PY,PZ=0,TYPE = 'INT',SHM_NAME=SHM_NAME,FILE = SHM_FILE

; ===> LOOP THROUGH TOPO FILES
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES[NTH]
    IF KEY(VERBOSE) THEN POF,NTH,FILES
    IF KEY(VERBOSE) THEN PFILE,FILE,/R
    TILE = TILES[NTH]
    SD = READ_NC(FILE,PRODS='SD')
    ITOPO  = SD.SD.Z.IMAGE  
    ITOPO(WHERE(ITOPO EQ SD.SD.Z._FILLVALUE,/NULL,COUNT)) =  MISSINGS(ITOPO)
    LON = SD.SD.X.IMAGE
    LAT = SD.SD.Y.IMAGE   

; ===>UPDATE LON LAT BOUNDARIES
    LONMIN =  MIN(LON)
    LONMAX =  MAX(LON)
    LATMIN =  MIN(LAT)
    LATMAX =  MAX(LAT)

; ===> GET SHM_ARRAY
    PART = MAPS_REMAP(ITOPO,MAP_IN ='GEQ_PART',PX_OUT=PX,PY_OUT=PY,LONMIN=LONMIN, LONMAX=LONMAX, LATMIN=LATMIN, LATMAX=LATMAX, MAP_OUT=MAPP, /INIT )
    SUBS = WHERE(PART NE MISSINGS(PART),COUNT)
    IF NTH EQ 0 THEN BEGIN
      IF DO_SHM THEN SHM_ARRAY = SHMVAR('SHM_ARRAY')    
      SHM_ARRAY = PART
    ENDIF ELSE SHM_ARRAY(SUBS) = PART(SUBS)  
  ENDFOR ; FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN

; ===> IF NEEDED USE MEDIAN_FILL TO FILL IN 1 PIXEL THICK GAPS AT THE JUNCTIONS OF THE TILES MAKING THE MAP & CONVERT FLOAT BACK TO INTEGER
  MISSING = MISSINGS(SHM_ARRAY)
  OK = WHERE(SHM_ARRAY EQ MISSING, COUNT)
  IF COUNT GE 1 AND ~IS_L3B(MAPP) THEN SHM_ARRAY = FIX(MEDIAN_FILL(SHM_ARRAY, MISSING=MISSING))
  
 
;###########################################
;===> WRITE SHM_ARRAY TO SHARED MEMORY FILE
;IF KEY(SHM_FILE) THEN BEGIN
;  OPENU,1,SHM_FILE
;  WRITEU,1,SHM_ARRAY
;  CLOSE,1
;  ;===> GET THE SHM_ARRAY
;  SHM_ARRAY = SHMVAR('SHM_ARRAY')
;ENDIF;IF KEY(SHM_FILE) THEN BEGIN
;||||||||||||||||||||||||||||
  IF KEY(VERBOSE) THEN PMM,SHM_ARRAY 

  ARR = SHM_ARRAY
  RETURN, SHM_ARRAY 
  DONE:
            
END; #####################  END OF ROUTINE ################################
