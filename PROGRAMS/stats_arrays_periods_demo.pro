; $ID:	STATS_ARRAYS_PERIODS_DEMO.PRO,	2020-07-08-15,	USER-KJWH	$
;##############################################################################################################
 PRO STATS_ARRAYS_PERIODS_DEMO
;+
; NAME:
; 	STATS_ARRAYS_PERIODS_DEMO

;		THIS PROGRAM IS A DEMO ROUTINE FOR RUNNING STATS_ARRAYS_PERIODS
;  

; MODIFICATION HISTORY:
;		WRITTEN AUG 20,2013 BY J.O'REILLY
;   NOV 7,2013,JOR: FILES PASSED TO STATS_ARRAYS_PERIODS; 
;   ADDED LOOPING ON PERIOD_CODE_IN 

;*****************************************
ROUTINE_NAME  = 'STATS_ARRAYS_PERIODS_DEMO'
;*****************************************
;

;SSSSSSSSSSSSSS  START OF  SWITCHES SSSSSSSSSSSSSS
DO_MAKE_SYN_FILES       = 0
DO_SYN_PERIODS          = 1
DO_FRISK_STATS_PERIOD   = 0
DO_SYN_PERIODS_UPDATE   = 0
;SSSSSSSSSSSSSS  END OF  SWITCHES SSSSSSSSSSSSSSSS
;

;***********************************
IF DO_MAKE_SYN_FILES GE 1 THEN BEGIN
;***********************************
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(2,1) = MISSINGS(ARRAY)
  ;===> MAKE A STATS_ARRAYS STRUCTURE
  STRUCT = STATS_ARRAYS(ARRAY,/START,/CALC,DO_STATS='MEAN')
  DATE_RANGE = ['20000101','20040101']
  JD_RANGE = DATE_2JD(DATE_RANGE)
  JD = INTERVAL(JD_RANGE) & PN,JD
  DATES = JD_2DATE(JD) & P,MM(ULONG64(DATES))
  FILES = 'D_' + DATES + '-SYN.SAVE'
  FILES = !S.DIR_TEMP + FILES
  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    POF,NTH,FILES
    FILE = FILES[NTH]
    SAVE,FILENAME = FILE,STRUCT
  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
 ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDIF;IF DO_MAKE_SYN_FILES GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||



;*****************************
IF DO_SYN_PERIODS GE 1 THEN BEGIN
;***************************
  OVERWRITE = DO_SYN_PERIODS EQ 2  & IF DO_SYN_PERIODS EQ 3 THEN STOP
  ,'DO_SYN_PERIODS'
  DATE_RANGE = ['20000101','20040101']
  
  PRODS = ['SYN']
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _PROD = 0,N_ELEMENTS(PRODS)-1 DO BEGIN   
    PROD = PRODS(_PROD) & PF,PROD,/M  & WAIT,1
  DIR_IN=!S.DIR_TEMP
  DIR_OUT=DIR_IN  + 'OUT\'
  IF FILE_TEST(DIR_IN,/DIRECTORY) EQ 0 THEN FILE_MKDIR, DIR_IN
  IF FILE_TEST(DIR_IN,/DIRECTORY) EQ 0 THEN MESSAGE,'ERROR: DIR NOT FOUND'
  IF FILE_TEST(DIR_OUT,/DIRECTORY) EQ 0 THEN FILE_MKDIR, DIR_OUT
  IF FILE_TEST(DIR_OUT,/DIRECTORY) EQ 0 THEN MESSAGE,'ERROR: DIR NOT FOUND'
  
  ;####### SET UP INPUT,OUTPUT  #####
  IF PROD EQ 'CHLOR_A' THEN STAT_TRANSFORM='ALOG'  ELSE STAT_TRANSFORM = ''
  FILES = FILE_SEARCH(DIR_IN,'*' + PROD + '*') & PN,FILES
  FN = FILE_PARSE(FIRST(FILES)) & TXT = FN.NAME
  
  FILE_LABEL = '-SYN'
  DO_STATS=['MEAN','NUM']
   PERIOD_CODES_IN   = ['D' ,  'M'  ,'M']
   PERIOD_CODES_OUT  = ['M','MONTH','A']
   PERIOD_CODES_IN   = ['M']
   PERIOD_CODES_OUT  = ['A']  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _PERIOD = 0,N_ELEMENTS(PERIOD_CODES_IN)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    PERIOD_CODE_IN = PERIOD_CODES_IN(_PERIOD)
    PERIOD_CODE_OUT = PERIOD_CODES_OUT(_PERIOD)
    TARGET_IN = PERIOD_CODE_IN+'_*'+FILE_LABEL +'*' + '.SAVE'
    TARGET_OUT = PERIOD_CODE_OUT+'_*'+FILE_LABEL +'*' + '.SAVE'    
    FILES= FILE_SEARCH([DIR_IN,DIR_OUT],TARGET_IN) 
    PN,FILES,'FILES IN:   ' + DIR_IN    & WAIT,3 
   IF PERIOD_CODE_OUT EQ 'A' THEN STOP
    IF FILES[0] NE '' AND N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
      JD_RANGE = DATE_2JD(DATE_RANGE)
      FA = FILE_ALL(FILES)
      
      JD =PERIOD_2JD(FA.PERIOD)
      OK = WHERE(JD GE JD_RANGE[0] AND JD LT JD_RANGE[1],COUNT_JD)
      IF COUNT_JD GE 1 THEN BEGIN
        JD = JD[OK]
        FA=FA[OK]
        FILES = FILES[OK]
      ENDIF ELSE BEGIN
        MESSAGE,'ERROR: NO FILES ARE WITHIN THE DATE_RANGE'
      ENDELSE;IF COUNT_JD GE 1 THEN BEGIN
    ENDIF;IF N_ELEMENTS(DATE_RANGE) EQ 2 AND COUNT_IGNORE EQ 0 THEN BEGIN
    PRINT,'AVERAGING PERIOD: '+PERIOD_CODE_IN +' TO    >>>>>>>>>>>>>>>   '+PERIOD_CODE_OUT
  
   STATS_ARRAYS_PERIODS,FILES,PROD=PROD,DIR_OUT=DIR_OUT,PERIOD_CODE_OUT =PERIOD_CODE_OUT, $
                      FILE_LABEL=FILE_LABEL,$
                      DO_STATS=DO_STATS,KEY_STAT=KEY_STAT,$
                      STAT_TRANSFORM=STAT_TRANSFORM,MISSING=MISSING, $
                      OVERWRITE=OVERWRITE

  ENDFOR;FOR _PERIOD = 0,N_ELEMENTS(PERIOD_CODE_IN)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
ENDFOR; FOR _PROD = 0,N_ELEMENTS(PRODS)-1 DO BEGIN 
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF   
    
  ,'DO_SYN_PERIODS'
ENDIF;IF DO_SYN_PERIODS GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||


;***************************************
IF DO_FRISK_STATS_PERIOD GE 1 THEN BEGIN
;***************************************
DIR_IN=!S.DIR_TEMP
DIR_OUT=DIR_IN  + 'OUT\'

PERIOD_CODES_OUT  = ['M','MONTH','A']

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _CODE = 0,N_ELEMENTS(PERIOD_CODES_OUT) -1 DO BEGIN
  PERIOD_CODE = PERIOD_CODES_OUT(_CODE)

FILES = FILE_SEARCH(DIR_OUT,PERIOD_CODE +'_*.SAVE')
PL,FILES
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN  
  FILE = FILES[NTH]
  PF,FILE,/R 
  S=IDL_RESTORE(FILE)
  P,S.MEAN
  P
  P,S.NUM
  WAIT,0.2
ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDFOR;FOR _CODE = 0,N_ELEMENTS(PERIOD_CODES_OUT) -1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

ENDIF;IF DO_FRISK_STATS_PERIOD GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||

;*****************************
IF DO_SYN_PERIODS_UPDATE GE 1 THEN BEGIN
  ;***************************
  OVERWRITE = DO_SYN_PERIODS_UPDATE EQ 2  & IF DO_SYN_PERIODS_UPDATE EQ 3 THEN STOP
  ,'DO_SYN_PERIODS_UPDATE'
  
  
  DATE_RANGE = ['20000101','20040101']
  
  PRODS = ['SYN']
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _PROD = 0,N_ELEMENTS(PRODS)-1 DO BEGIN
    PROD = PRODS(_PROD) & PF,PROD,/M  & WAIT,1
    DIR_IN=!S.DIR_TEMP
    DIR_OUT=DIR_IN  + 'OUT\'
    IF FILE_TEST(DIR_IN,/DIRECTORY) EQ 0 THEN FILE_MKDIR, DIR_IN
    IF FILE_TEST(DIR_IN,/DIRECTORY) EQ 0 THEN MESSAGE,'ERROR: DIR NOT FOUND'
    IF FILE_TEST(DIR_OUT,/DIRECTORY) EQ 0 THEN FILE_MKDIR, DIR_OUT
    IF FILE_TEST(DIR_OUT,/DIRECTORY) EQ 0 THEN MESSAGE,'ERROR: DIR NOT FOUND'
    
    ;####### SET UP INPUT,OUTPUT  #####
    IF PROD EQ 'CHLOR_A' THEN STAT_TRANSFORM='ALOG'  ELSE STAT_TRANSFORM = ''
    FILES = FILE_SEARCH(DIR_IN,'*' + PROD + '*') & PN,FILES
    FN = FILE_PARSE(FIRST(FILES)) & TXT = FN.NAME
    
    FILE_LABEL = '-SYN'
    DO_STATS=['MEAN','NUM']
    PERIOD_CODES_IN   = ['D' ,  'M'  ,'M']
    PERIOD_CODES_OUT  = ['M','MONTH','A']
    
    ;###> READ AND RESAVE THE FIRST M FILE
    FULLNAME = FIRST(FILES)
    S = IDL_RESTORE(FIRST(FILES))
    SAVE,FILENAME = FULLNAME,S,/VERBOSE
    
    
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR _PERIOD = 0,N_ELEMENTS(PERIOD_CODES_IN)-1 DO BEGIN
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
      PERIOD_CODE_IN = PERIOD_CODES_IN(_PERIOD)
      PERIOD_CODE_OUT = PERIOD_CODES_OUT(_PERIOD)
      TARGET_IN = PERIOD_CODE_IN+'_*'+FILE_LABEL +'*' + '.SAVE'
      TARGET_OUT = PERIOD_CODE_OUT+'_*'+FILE_LABEL +'*' + '.SAVE'
      FILES= FILE_SEARCH([DIR_IN,DIR_OUT],TARGET_IN)
      PN,FILES,'FILES IN:   ' + DIR_IN    & WAIT,3
      
      IF FILES[0] NE '' AND N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
        JD_RANGE = DATE_2JD(DATE_RANGE)
        FA = FILE_ALL(FILES)
        
        JD =PERIOD_2JD(FA.PERIOD)
        OK = WHERE(JD GE JD_RANGE[0] AND JD LT JD_RANGE[1],COUNT_JD)
        IF COUNT_JD GE 1 THEN BEGIN
          JD = JD[OK]
          FA=FA[OK]
          FILES = FILES[OK]
        ENDIF ELSE BEGIN
          MESSAGE,'ERROR: NO FILES ARE WITHIN THE DATE_RANGE'
        ENDELSE;IF COUNT_JD GE 1 THEN BEGIN
      ENDIF;IF N_ELEMENTS(DATE_RANGE) EQ 2 AND COUNT_IGNORE EQ 0 THEN BEGIN
      PRINT,'AVERAGING PERIOD: '+PERIOD_CODE_IN +' TO    >>>>>>>>>>>>>>>   '+PERIOD_CODE_OUT
      
      STATS_ARRAYS_PERIODS,FILES,PROD=PROD,DIR_OUT=DIR_OUT,PERIOD_CODE_OUT =PERIOD_CODE_OUT, $
        FILE_LABEL=FILE_LABEL,$
        DO_STATS=DO_STATS,KEY_STAT=KEY_STAT,$
        STAT_TRANSFORM=STAT_TRANSFORM,MISSING=MISSING, $
        OVERWRITE=OVERWRITE
        
    ENDFOR;FOR _PERIOD = 0,N_ELEMENTS(PERIOD_CODE_IN)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    
  ENDFOR; FOR _PROD = 0,N_ELEMENTS(PRODS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  ,'DO_SYN_PERIODS_UPDATE'
ENDIF;IF DO_SYN_PERIODS_UPDATE GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||

END; #####################  END OF ROUTINE ################################



