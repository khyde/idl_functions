; $ID:	POC_SAVE_MAKE.PRO,	2020-07-08-15,	USER-KJWH	$
;
 ; HISTORY:
;		March 26,2002	Written by:	J.E. O'Reilly, NOAA, 28 Tarzwell Drive, Narragansett, RI 02882
;		May 17, 2004 td, MAKE POC_STRAMSKI.PRO work with sd_analyses_main.pro
;   Feb 20, 2007 td, POC_CLARK is the default method for POC
;-
; *************************************************************************

PRO POC_SAVE_MAKE,DIR_IN=DIR_IN,DIR_OUT=DIR_OUT,DATE_RANGE=DATE_RANGE,SATELLITE=SATELLITE,$
									POC_ALGS=POC_ALGS,PERIOD_CODE=PERIOD_CODE,MAP=MAP,OVERWRITE=OVERWRITE,ERROR=ERROR,ERR_MSG=ERR_MSG

  ROUTINE_NAME='POC_SAVE_MAKE'
  ERROR = 0
  ERR_MSG = []
  SL = DELIMITER(/PATH)

	IF N_ELEMENTS(PERIOD_CODE) NE 1 THEN _PERIOD_CODE ='S' ELSE _PERIOD_CODE=PERIOD_CODE
	IF N_ELEMENTS(POC_ALGS) GE 1 THEN _POC_ALGS = POC_ALGS ELSE _POC_ALGS = 'STRAMSKI'
	IF KEYWORD_SET(OVERWRITE) THEN _OVERWRITE = 1 ELSE _OVERWRITE = 0

	IF N_ELEMENTS(DIR_IN) LT 1 THEN STOP

  IF N_ELEMENTS(SATELLITE) EQ 1 THEN SAT = SATELLITE ELSE SAT = VALID_SENSORS(DIR_IN)
  IF SAT EQ '' THEN BEGIN
    ERROR = 1
    ERR_MSG = 'Must provide valid SENSOR'
    PRINT, ERR_MSG
    RETURN
  ENDIF   
    
  IF SAT EQ 'SEAWIFS' THEN BEGIN
    FA_490= FILE_ALL(DIR_IN+'RRS_490'+SL+_PERIOD_CODE+'_*-RRS_490.SAV')  
    FA_555= FILE_ALL(DIR_IN+'RRS_555'+SL+_PERIOD_CODE+'_*-RRS_555.SAV')      
  ENDIF
  IF SAT EQ 'MODIS' THEN BEGIN
    FA_490= FILE_ALL(DIR_IN+'RRS_488'+SL+_PERIOD_CODE+'_*-RRS_488.SAV')  
    FA_555= FILE_ALL(DIR_IN+'RRS_547'+SL+_PERIOD_CODE+'_*-RRS_547.SAV')       
  ENDIF
	
	IF FA_490[0].FULLNAME EQ '' OR FA_555[0].FULLNAME EQ '' THEN BEGIN
		ERR_MSG = 'NEED RRS_490 AND RRS_555 SAVE FILES TO MAKE POC'
		ERROR = 1
		PRINT, ERR_MSG
		GOTO,DONE
	ENDIF

	FA_490=FA_490[SORT(FA_490.DATE_START)]
	FA_555=FA_555[SORT(FA_555.DATE_START)]

	IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
		DATE_START=DATE_RANGE[0]
	  DATE_END=DATE_RANGE[1]
    OK_490= WHERE(FA_490.DATE_START GE DATE_START AND FA_490.DATE_END LE DATE_END,COUNT_490)
    IF COUNT_490 GE 1 THEN FA_490 = FA_490(OK_490)
		OK_555= WHERE(FA_555.DATE_START GE DATE_START AND FA_555.DATE_END LE DATE_END,COUNT_555)
		IF COUNT_555 GE 1 THEN FA_555 = FA_555(OK_555)
	ENDIF

	IF N_ELEMENTS(DIR_OUT) LT 1 THEN DIR_OUT=REPLACE(FA_555[0].DIR,FA_555[0].SUB+SL,'')	
	FOR N=0, N_ELEMENTS(_POC_ALGS)-1 DO IF FILE_TEST(DIR_OUT+'POC-'+_POC_ALGS(N)+SL,/DIR) EQ 0 THEN FILE_MKDIR,DIR_OUT+'POC-'+_POC_ALGS(N)+SL
	IF N_ELEMENTS(MAP) NE 1 THEN MAP_OUT=FA_555[0].MAP ELSE MAP_OUT=MAP
	MAP_IN=FA_555[0].MAP
	MAPS_INFO=MAPS_SIZE(MAP_OUT)
	IF MAP_OUT NE MAP_IN THEN PX_OUT=MAPS_INFO.PX_OUT ELSE PX_OUT = MAPS_INFO.PX
	IF MAP_OUT NE MAP_IN THEN PY_OUT=MAPS_INFO.PY_OUT ELSE PY_OUT = MAPS_INFO.PY

	OK_SON = WHERE(_POC_ALGS EQ 'SON' OR _POC_ALGS EQ 'CLARK',COUNT_SON)
	IF COUNT_SON EQ 1 THEN BEGIN
	  FA_412= FILE_ALL(DIR_IN+'RRS_412'+SL+_PERIOD_CODE+'_*-RRS_412.SAV')
    FA_443= FILE_ALL(DIR_IN+'RRS_443'+SL+_PERIOD_CODE+'_*-RRS_443.SAV')
    FA_412=FA_412[SORT(FA_412.DATE_START)]
    FA_443=FA_443[SORT(FA_443.DATE_START)]
    IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
      DATE_START=DATE_RANGE[0]
      DATE_END=DATE_RANGE[1]
      OK_412= WHERE(FA_412.DATE_START GE DATE_START AND FA_412.DATE_END LE DATE_END,COUNT_412)
      IF COUNT_412 GE 1 THEN FA_412 = FA_490(OK_412)
      OK_443= WHERE(FA_443.DATE_START GE DATE_START AND FA_443.DATE_END LE DATE_END,COUNT_443)
      IF COUNT_443 GE 1 THEN FA_443 = FA_443(OK_443)
    ENDIF
  ENDIF  
  
 	FOR _FILES = 0L,N_ELEMENTS(FA_555)-1L DO BEGIN
	 	AFILE_555=FA_555(_FILES).FULLNAME
	 	ADATE = FA_555(_FILES).DATE_START
	  PERIOD_TXT=FA_555(_FILES).PERIOD
	  AMTIME = FA_555(_FILES).MTIME

		SAVEFILE = FA_555(_FILES).FIRST_NAME
		SAVEFILE = REPLACE(SAVEFILE,STRUPCASE('RRS_555'),STRUPCASE('POC'))
		SAVEFILE = REPLACE(SAVEFILE,STRUPCASE('RRS_547'),STRUPCASE('POC'))
		SAVEFILE = REPLACE(SAVEFILE,MAP_IN,MAP_OUT)

    
		SAVEFILES = DIR_OUT+'POC-'+_POC_ALGS+SL+SAVEFILE+'-'+_POC_ALGS+'.SAV'
		MTIMESAVE	= GET_MTIME(SAVEFILES)
		 
		IF TOTAL(FILE_TEST(SAVEFILES)) EQ N_ELEMENTS(_POC_ALGS) AND MIN(MTIMESAVE) GT AMTIME AND _OVERWRITE EQ 0 THEN CONTINUE

;   ===> Get matching 490 for this day
	  OK_490 = WHERE(FA_490.DATE_START EQ ADATE,COUNT_490)
	  IF COUNT_490 NE 1 THEN CONTINUE
	  AFILE_490 = FA_490(OK_490).FULLNAME

    DATA_490=STRUCT_READ(AFILE_490,STRUCT=STRUCT)
		DATA_555=STRUCT_READ(AFILE_555,STRUCT=STRUCT)
		MISSING=MISSINGS(DATA_555)

;		***** LOOP THROUGH ALGORITHMS *****
		FOR NTH = 0L, N_ELEMENTS(_POC_ALGS)-1 DO BEGIN
			POC_ALG = _POC_ALGS[NTH]
			SAVEFILE = SAVEFILES[NTH]
			IF FILE_TEST(SAVEFILE) EQ 1 AND MTIMESAVE[NTH] GT AMTIME AND _OVERWRITE EQ 0 THEN CONTINUE

			IF POC_ALG EQ 'CLARK' OR POC_ALG EQ 'SON' THEN BEGIN
			  DOY = DATE_2DOY(ADATE)
; 			===> Get Matching 443 for this day
				OK_443 = WHERE(FA_443.DATE_START EQ ADATE,COUNT)
			  IF COUNT NE 1 THEN CONTINUE
			  AFILE_443 = FA_443(OK_443).FULLNAME
				STRUCT=READALL(AFILE_443)
				IF STRUCT.(0).PX NE PX_OUT OR STRUCT.(0).PY NE PY_OUT THEN BEGIN
					STRUCT=STRUCT_SD_REMAP(STRUCT=STRUCT,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
					DATA_443=STRUCT_SD_2DATA(STRUCT)
				ENDIF ELSE DATA_443=STRUCT_SD_2DATA(STRUCT)
				IF POC_ALG EQ 'SON' THEN BEGIN
				  OK_412 = WHERE(FA_412.DATE_START EQ ADATE,COUNT)
          IF COUNT NE 1 THEN CONTINUE
          AFILE_412 = FA_412(OK_412).FULLNAME
          STRUCT=READALL(AFILE_412)
          IF STRUCT.(0).PX NE PX_OUT OR STRUCT.(0).PY NE PY_OUT THEN BEGIN
            STRUCT=STRUCT_SD_REMAP(STRUCT=STRUCT,MAP_IN=MAP_IN,MAP_OUT=MAP_OUT)
            DATA_412=STRUCT_SD_2DATA(STRUCT)
          ENDIF ELSE DATA_412=STRUCT_SD_2DATA(STRUCT)
        ENDIF
			ENDIF

	 		IF POC_ALG EQ 'CLARK' THEN BEGIN
	 			POC = POC_CLARK(NLW442=DATA_443, NLW490=DATA_490, NLW555=DATA_555, DOY=DOY, /RRS, MISSING=missing)
	 		 	INFILE=[AFILE_555,AFILE_443,AFILE_490]
	 		ENDIF
	 		IF POC_ALG EQ 'STRAMSKI' THEN BEGIN
	 			POC = POC_STRAMSKI(Rrs490=DATA_490, Rrs555=DATA_555,SATELLITE=SAT, MISSING=missing)
	 			INFILE=[AFILE_555,AFILE_490]
	 		ENDIF
	 		IF POC_ALG EQ 'MANNINO' THEN BEGIN
	 			POC = POC_MANNINO(Rrs490=DATA_490, Rrs555=DATA_555, MISSING=missing)
	 			INFILE=[AFILE_555,AFILE_490]
	 		ENDIF
	 		IF POC_ALG EQ 'SON' THEN BEGIN
	 		  POC = POC_SON(RRS412=DATA_412,RRS443=DATA_443,RRS490=DATA_490,RRS555=DATA_555)
	 		  INFILE = [AFILE_412,AFILE_443,AFILE_490,AFILE_555]
	 		ENDIF
				    
	    STRUCT_WRITE,POC, FILE=SAVEFILE, DATA_UNITS=UNITS('POC'), INFILE=INFILE, ALG=POC_ALG, PROD='POC', $
	 		  METHOD=STRUCT.METHOD, SATELLITE=STRUCT.SATELLITE, SENSOR=STRUCT.SENSOR, COVERAGE=STRUCT.COVERAGE
	   

		ENDFOR
		GONE,DATA_412
		GONE,DATA_443
		GONE,DATA_490
		GONE,DATA_555
		GONE,STRUCT
   ENDFOR
   DONE:
END; #####################  End of Routine ################################
