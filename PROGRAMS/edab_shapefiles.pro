; $ID:	EDAB_SHAPEFILES.PRO,	2020-06-30-17,	USER-KJWH	$
PRO EDAB_SHAPEFILES

;+
; NAME:
;   EDAB_SHAPEFILES
;
; PURPOSE:;
;   MAIN program for creating shapefiles for EDAB
;
; CATEGORY:
;   MAIN
;
; CALLING SEQUENCE:
;
; ROUTINE_NAME
;
; INPUTS:
;
; OPTIONAL INPUTS:
;
; KEYWORD PARAMETERS:
;
; OUTPUTS:
;   This function works with EDAB shapefiles
;
; NOTES:
;
;
; MODIFICATION HISTORY:
;     Written: November 01, 2019 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;     Modified: 
;     
;-
; ****************************************************************************************************
  ROUTINE_NAME = 'EDAB_SHAPEFILES'


  SL = PATH_SEP()
  DIR_PROJECTS = !S.PROJECTS + 'EDAB' + SL 
  
  BUFFER = 0
  VERBOSE = 0
  
  
  L = READ_LANDMASK('NEC',/STRUCT)
  NLAND = L.LANDMASK
  
  EST_MASK = !S.SUBAREAS + 'TEST_ESTUARIES_EDIT.PNG'
  ;MASK = READ_PNG(EST_MASK)
  MASK = PNG_8BIT(EST_MASK)
  PAL_36, R,G,B
  
  BLK = MAPS_BLANK('NEC')
  COAST = 0
  LAND = 4
  SHELF = 5
  OFF = 8
  MASK_SUBS = WHERE(MASK NE SHELF AND MASK NE OFF, COMPLEMENT=COMP)
  
  OMAPS = ['NEC']
  FOR O=0, N_ELEMENTS(OMAPS)-1 DO BEGIN
    OMAP = OMAPS(O)
    SUBAREA = 'NES_STATISTICAL_AREAS_NAMES'; 'NES_EPU_NOESTUARIES'
    ATT_TAG = 'Id'
    NAMES = ['GOM','GB','MAB','SS']
    SUBTITLES = ['Gulf of Maine','Georges Bank','Mid-Atlantic Bight','Scotian Shelf']
  
  
    STRUCT = READ_SHPFILE(SUBAREA, MAPP=OMAP, ATT_TAG=ATT_TAG, COLOR=COLOR, VERBOSE=VERBOSE, NORMAL=NORMAL, AROUND=AROUND)
    SHPS=STRUCT.(0)
  
    LAND = READ_LANDMASK(OMAP)
  
    GOM = '_'+['500','510','512','513','514','515']
    GB  = '_'+['521','522','523','524','525','526','551','552','561','562']
    MAB = '_'+['537','539','612','613','614','615','616','621','622','625','626','631','632']
    SS  = '_'+['463','464','465','466','467','511']
    ALL = [GOM, GB, MAB, SS]
  
    OUTLINES = []
    GOM_SUBS = []
    GB_SUBS  = []
    MAB_SUBS = []
    SS_SUBS  = []
    SUBS = []
  
    IM = MAPS_BLANK(OMAP)
    CLRS = [180, 10, 100, 240, 210]
    PAL = 'PAL_DEFAULT'
    TAGS = TAG_NAMES(SHPS)
    FOR F=0, N_ELEMENTS(ALL)-1 DO BEGIN
      POS = WHERE(TAGS EQ STRUPCASE(ALL(F)),/NULL,COUNT)
      IF COUNT EQ 0 THEN CONTINUE
      OUTLINES = [OUTLINES,SHPS.(POS).OUTLINE]
      SUBS = [SUBS, SHPS.(POS).SUBS]
      IF WHERE(GOM EQ ALL(F)) GE 0 THEN BEGIN & GOM_SUBS = [GOM_SUBS, SHPS.(POS).SUBS] & ENDIF
      IF WHERE(GB  EQ ALL(F)) GE 0 THEN BEGIN & GB_SUBS  = [GB_SUBS,  SHPS.(POS).SUBS] & ENDIF
      IF WHERE(MAB EQ ALL(F)) GE 0 THEN BEGIN & MAB_SUBS = [MAB_SUBS, SHPS.(POS).SUBS] & ENDIF
      IF WHERE(SS  EQ ALL(F)) GE 0 THEN BEGIN & SS_SUBS  = [SS_SUBS,  SHPS.(POS).SUBS] & ENDIF
    ENDFOR
  
    
    IM(GOM_SUBS) = 1
    IM(GB_SUBS)  = 2
    IM(MAB_SUBS) = 3
    IM(SS_SUBS)  = 4
    OK = WHERE(LAND NE 0) & IM[OK] = 255
    
    SAVEFILE = !S.SUBAREAS + 'MASK_SUBAREA-' + OMAP + '-' + SUBAREA + '_EPUS.SAV'
    PNGFILE  = !S.SUBAREAS + 'MASK_SUBAREA-' + OMAP + '-' + SUBAREA + '_EPUS.PNG'
    OUTFILE  = !S.SUBAREAS + 'MASK_SUBAREA-' + OMAP + '-' + SUBAREA + '_EPUS-OUTLINES.PNG'
    SHPFILE  = 'NES_EPU_STATISTICAL_AREAS'
  
    WRITE_PNG, PNGFILE, IM, R, G, B
    STRUCT_WRITE, IM, FILE=SAVEFILE, PROD='SUBAREA', SUBAREA_CODE=[1,2,3,4],SUBAREA_NAME=NAMES, SUBAREA_FULL_NAMES=SUBTITLES
    IM(OUTLINES) = 180
    WRITE_PNG, OUTFILE, IM, R, G, B
    SUBAREAS_IMAGE_2SHP, SAVEFILE, SHPFILE=SHPFILE, REGION='NORTHEAST_SHELF', DIR_OUT=[], OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
    STRUCT = READ_SHPFILE(SHPFILE, MAPP=OMAP)
  
    IM = READ_PNG(PNGFILE)
    LAND = READ_LANDMASK(MP)
    OK = WHERE(LAND NE 0)
    IM[OK] = 10
    IM(MASK_SUBS) = 255
    
    SUBAREA  = 'NES_STAT_AREAS_EPUS_NOEST'
    SAVEFILE = !S.SUBAREAS + 'MASK_SUBAREA-' + OMAP + '-' + SUBAREA + '.SAV'
    PNGFILE  = !S.SUBAREAS + 'MASK_SUBAREA-' + OMAP + '-' + SUBAREA + '.PNG'
    SHPFILE  = 'NES_EPU_STATISTICAL_AREAS_NOEST'

    WRITE_PNG, PNGFILE, IM, R, G, B
    STRUCT_WRITE, IM, FILE=SAVEFILE, PROD='SUBAREA', SUBAREA_CODE=[1,2,3,4],SUBAREA_NAME=NAMES, SUBAREA_FULL_NAMES=SUBTITLES
    SUBAREAS_IMAGE_2SHP, SAVEFILE, SHPFILE=SHPFILE, REGION='NORTHEAST_SHELF', DIR_OUT=[], OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
    STRUCT = READ_SHPFILE(SHPFILE, MAPP='NEC')
  ENDFOR ; OMAPS
  stop
  
  
  ;  NECEST = !S.SUBAREAS + 'MASK_SUBAREA-NEC-PXY_1024_1024-ESTUARY_SHELF.SAV'
  ;  MAP_ARRAY = STRUCT_READ(NECEST,STRUCT=S)
  ;  ESTUARIES = [4,5,6,7,8,9,10,11,12,13,14,15]
  ;
  ;  RIVER_CODE = 3
  ;  COASTAL_CODE = 2
  ;  ; ===> Look for RIVER pixels that are adjacent to the ESTUARIES (i.e. are missing a coastline) and make them the estuary
  ;  RIVERS = WHERE(MAP_ARRAY EQ RIVER_CODE OR MAP_ARRAY EQ COASTAL_CODE, COUNT_RIVER)
  ;  FOR E=0, N_ELEMENTS(ESTUARIES)-1 DO BEGIN
  ;    ESTCODE = ESTUARIES(E)
  ;    BLK = MAPS_BLANK('NEC',FILL=255)
  ;    BLK(L.LAND) = 32
  ;
  ;    OK = WHERE(MAP_ARRAY EQ ESTCODE)
  ;    BLK(OK) = ESTCODE
  ;    FOR I = 0L, COUNT_RIVER-1 DO BEGIN
  ;      BOX = BOX_AROUND(MAP_ARRAY,RIVERS(I),SUBS=SUBS,AROUND=1)
  ;      OK = WHERE(BOX EQ ESTCODE, COUNT) ; Find LAND pixels next to OCEAN pixels
  ;      IF COUNT GE 1 THEN BEGIN
  ;        MAP_ARRAY(SUBS(OK)) = ESTCODE
  ;        BLK(SUBS(OK)) = 28
  ;      ENDIF
  ;
  ;    BLK(L.COAST) = 0
  ;    BLK(L.COAST_THICK) = 0
  ;
  ;    ENDFOR
  ;    WRITE_PNG, !S.SUBAREAS + 'TEST_ESTUARIES_' + NUM2STR(ESTCODE)+'.PNG',BLK,R,G,B
  ;  ENDFOR
  ;  MAP_ARRAY(L.COAST) = 0
  ;  MAP_ARRAY(L.COAST_THICK) = 0
  ;  OK = WHERE(MAP_ARRAY EQ RIVER_CODE OR MAP_ARRAY EQ COASTAL_CODE,count)
  ;  IF COUNT GE 1 THEN MAP_ARRAY(OK) = 0
  ;  WRITE_PNG, !S.SUBAREAS + 'TEST_ESTUARIES.PNG',MAP_ARRAY,R,G,B
  ;
  ;  FOR E=0, N_ELEMENTS(ESTUARIES)-1 DO BEGIN
  ;    ESTCODE = ESTUARIES(E)
  ;    OK = WHERE(MAP_ARRAY EQ ESTCODE)
  ;    LAND(OK) = ESTCODE+4
  ;  ENDFOR
  ;  LAND(L.COAST_THICK) = L.COAST_THICK_CODE
  ;
  ;  WRITE_PNG, !S.SUBAREAS + 'TEST_ESTUARIES_LAND.PNG',LAND,R,G,B
  ;
  ;
  ;  STOP
  ;
  ;
  ;
  ;
  ;;  WRITE_PNG, !S.SUBAREAS + 'TEST.PNG',MAP_ARRAY,R,G,B
  ;
  ;ESTSHP = 'NES_SHELF_ESTUARIES'
  ;SUBAREAS_IMAGE_2SHP, NECEST, SHPFILE=ESTSHP, SUBAREA_CODES=[2,3,4,5,6,7,8,9,10,11,12,13,14,15], REGION='NORTHEAST_SHELF', DIR_OUT=[], OVERWRITE=1, VERBOSE=VERBOSE
  ;S = READ_SHPFILE(ESTSHP, MAPP='NEC')
  ;
  ;;  STOP
  
END  
