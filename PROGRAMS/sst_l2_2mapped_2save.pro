; $ID:	SST_L2_2MAPPED_2SAVE.PRO,	2020-06-30-17,	USER-KJWH	$

	PRO SST_L2_2MAPPED_2SAVE, FILES=files, DIR_OUT=dir_out, DIR_BROWSE=dir_browse, PRODS=prods, MAPS=maps, $
														NO_REMAP=no_remap,STRUCT_RETURN=struct_return,$
														NO_MASK=no_mask, MAKE_BROWSE=make_browse, NODATA_CSV=NODATA_CSV,$
														KEEP_HDF=keep_hdf, OVERWRITE=overwrite, SENSOR=sensor, PX_OUT=px_out, PY_OUT=py_out, $
														ADD_COVERAGE=add_coverage, _EXTRA=_extra, REVERSE_FILES=reverse_files,ERROR=ERROR

;+
; NAME:
;		L2_2MAPPED_2SAVE
;
; PURPOSE:;
;		This function opens a MODIS L2 file, maps each product and creates saves
;
; CATEGORY:
;
;
; CALLING SEQUENCE:
;		Write the calling sequence here. Include only positional parameters
;		(i.e., NO KEYWORDS). For procedures, use the form:
;
;		ROUTINE_NAME, Parameter1, Parameter2, Foobar
;
;		Note that the routine name is ALL CAPS and arguments have Initial
;		Caps.  For functions, use the form:
;
;		Result = FUNCTION_NAME(Parameter1, Parameter2, Foobar)
;
; INPUTS:
;		Parm1:	Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;		Parm2:	Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;		KEY1:	Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
;
; OUTPUTS:
;		This function returns the
;
; OPTIONAL OUTPUTS:  ;
; COMMON BLOCKS:
; SIDE EFFECTS:
; RESTRICTIONS:
;	PROCEDURE:
; EXAMPLE:
;			FILES = FILE_SEARCH('E:\MODIS_TEST\*SEAWIFS*.hdf') & DIR_OUT = 'E:\MODIS_TEST\SAVE\' & MAPS = 'NEC' & PRODS = 'chlor_a'
;			L2_2MAPPED_2SAVE,FILES=FILES,DIR_OUT=DIR_OUT,MAPS=MAPS,PRODS=PRODS, /OVERWRITE
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			Written May 1, 2007 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;			Feb 2009 T.Ducas ,create exclude browse
;     July 17, 2009, tducas, add STRUCT_RETURN KEYWORD
;	****************************************************************************************************
	ROUTINE_NAME = 'SST_L2_2MAPPED_2SAVE'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
 	DASH = '-'
 	FLAG_BITS = [0]

	ABACKGROUND=252 & ALAND_COLOR=252 & AOUTSCAN_COLOR=253 & AOUTMAP_COLOR=253 & AALGFAIL_COLOR=251
	AFLAG_COLOR=254 & AMISS_COLOR=254 & AHI_LO_COLOR=255 & ACRITERIA_COLOR=253 & ABATHY_COLOR=252

; ***** Find files and set up defaults *****
  IF N_ELEMENTS(FILES) GE 1 THEN _FILES = FILES ELSE _FILES = DIALOG_PICKFILE(filter='*.hdf*')
  IF N_ELEMENTS(MAPS)  GE 1 THEN _MAPS  = MAPS  ELSE _MAPS  = 'NEC'
  IF N_ELEMENTS(PRODS) GE 1 THEN _PRODS = PRODS ELSE _PRODS = ['SST4','SST']

	IF N_ELEMENTS(NODATA_CSV) EQ 0 THEN NODATA_CSV='D:\IDL\INVENTORY\MODIS_1KM_SST_LONLAT_NODATA.CSV'

  IF KEYWORD_SET(NO_REMAP) THEN _MAPS = 'LONLAT'


;	***** Verify that the output maps and products are valid *****
	OK = WHERE(VALID_MAPS(_MAPS,/VALID) EQ 1,COUNT_MAPS)
	IF COUNT_MAPS GE 1 THEN _MAPS=_MAPS[OK]
	OK = WHERE(VALIDS('PRODS',_PRODS,/VALID) EQ 1,COUNT_PRODS)
	IF COUNT_PRODS GE 1 THEN _PRODS=_PRODS[OK]

	NODATA_FILE_NAME=''
	NODATA_MAP=''
	EXIST_NODATA=FILE_TEST(NODATA_CSV)
	IF KEYWORD_SET(EXIST_NODATA) THEN BEGIN
		NODATA=READALL(NODATA_CSV)
		NODATA_FILE_NAME=[NODATA_FILE_NAME,NODATA.FILE_NAME]
		NODATA_MAP=[NODATA_MAP,NODATA.MAP]
	ENDIF

	IF KEYWORD_SET(REVERSE_FILES) THEN _FILES = REVERSE(_FILES)
	FP = FILE_PARSE(_FILES)
  DIR = FP.DIR

  IF N_ELEMENTS(DIR_OUT) EQ 0 THEN DIR_OUT = DIR + '\SAVE\'
  IF N_ELEMENTS(DIR_BROWSE) EQ 0 THEN BEGIN
    DIR_BROWSE = DIR_OUT
    DIR_BROWSE = REPLACE(STRUPCASE(DIR_BROWSE),'\SAVE\','\browse\')
  ENDIF
  DIR_EXCLUDE=DIR_BROWSE
  DIR_EXCLUDE = REPLACE(STRUPCASE(DIR_EXCLUDE),'\BROWSE\','\exclude_browse\')

  IF FILE_TEST(DIR_EXCLUDE,/DIRECTORY) EQ 0L THEN FILE_MKDIR,DIR_EXCLUDE
  IF FILE_TEST(DIR_OUT,/DIRECTORY) EQ 0L THEN FILE_MKDIR,DIR_OUT
  IF FILE_TEST(DIR_BROWSE,/DIRECTORY) EQ 0L THEN FILE_MKDIR,DIR_BROWSE

  EXT = FP.EXT
  EXT_DELIM = FP.EXT_DELIM
  SATDATE = FP.FIRST_NAME
  SAT = STRMID(SATDATE,0,1)
  OK = WHERE(SAT NE 'A' AND SAT NE 'T',COUNT) & IF COUNT GE 1 THEN STOP
  PROD = 'SST'
  PERIOD = '!S_' + SATDATE_2DATE(SATDATE)
  SENSOR = 'MODIS'
  METHOD = 'COLL5'
  COVERAGE = 'LAC'
  MAP = 'LONLAT'
  SATELLITE = REPLICATE('',N_ELEMENTS(FILES))

  _ALG = SATELLITE
  OK = WHERE(SAT EQ 'A',COUNT) & IF COUNT GE 1 THEN SATELLITE[OK] = 'AQU'
  OK = WHERE(SAT EQ 'T',COUNT) & IF COUNT GE 1 THEN SATELLITE[OK] = 'TER'
  OK = WHERE_STRING(FP.NAME_EXT, 'L2_LAC_SST',COUNT) & IF COUNT GE 1 THEN BEGIN & _ALG[OK] = '11UM' & _PROD = 'SST' & ENDIF
  OK = WHERE_STRING(FP.NAME_EXT, 'L2_LAC_SST4', COUNT) & IF COUNT GE 1 THEN BEGIN & _ALG[OK] = '4UM' & _PROD = 'SST4' & ENDIF
  OLDNAME = FP.NAME
  NEWNAME = PERIOD + dash + SENSOR + dash + SATELLITE + dash + COVERAGE + dash + METHOD + dash + MAP + dash + PROD + dash + _ALG


; ***** Loop through files *****
	FOR NTH=0L, N_ELEMENTS(_FILES)-1 DO BEGIN
		AFILE = _FILES[NTH]
		_NAME = NEWNAME[NTH]

		FN = FILE_ALL(_NAME,/ALL)
		INAME = FN.PERIOD + dash + FN.SENSOR + dash + FN.SATELLITE
		FNAME = FP[NTH].NAME
		EXT = FP[NTH].EXT
		DIR = FP[NTH].DIR
		COVERAGE = FN.COVERAGE
		IF N_ELEMENTS(SENSOR) EQ 0 THEN _SENSOR = FN.SENSOR ELSE _SENSOR = SENSOR

;		***** If all output files exist, then skip to next file *****
		SKIP = 0
		FOR MTH = 0L, N_ELEMENTS(_MAPS)-1 DO BEGIN
		; Check NODATA_CSV
			OK_NODATA=WHERE(NODATA_FILE_NAME EQ FN.FIRST_NAME AND NODATA_MAP EQ _MAPS(MTH),COUNT_NODATA)
			IF COUNT_NODATA EQ 1 THEN CONTINUE

			OUTPUT_LABEL = INAME + dash + FN.METHOD + dash + FN.COVERAGE + dash + _MAPS(MTH)
			FOR PTH =0L, N_ELEMENTS(_PRODS)-1 DO BEGIN
				APROD = STRUPCASE(_PRODS(PTH))
				ALG_TEST = VALID_ALG_CHECK(IN_PROD=APROD,OUT_PROD=OUTPROD,SENSOR=_SENSOR,ALG=ALG)
				; check exclude folde
			  IF ALG EQ '' THEN TEST_FILE=DIR_EXCLUDE + OUTPUT_LABEL + dash + OUTPROD + '.PNG' $
      	             ELSE TEST_FILE=DIR_EXCLUDE + OUTPUT_LABEL + dash + OUTPROD + dash + ALG + '.PNG'
   			IF FILE_TEST(TEST_FILE) EQ 1 THEN CONTINUE

      	IF ALG EQ '' THEN TEST_FILE=DIR_OUT + OUTPUT_LABEL + dash + OUTPROD + '.save' $
      	             ELSE TEST_FILE=DIR_OUT + OUTPUT_LABEL + dash + OUTPROD + dash + ALG + '.save'
				IF FILE_TEST(TEST_FILE) EQ 0 THEN SKIP = SKIP + 1
			ENDFOR
		ENDFOR
		IF SKIP EQ 0 AND NOT KEYWORD_SET(OVERWRITE) THEN BEGIN
			IF KEYWORD_SET(NO_REMAP) THEN ERROR='No need to process, already done file: '+afile
			CONTINUE					 ; >>>>>>> Go to next file
		ENDIF

;   ***** If file is zipped, then upzip *****
		PRINT,'WORKING ON FILE:  ',AFILE
		REMOVE_FILE = ''
    IF STRUPCASE(EXT) EQ 'GZ' OR STRUPCASE(EXT) EQ 'BZ2' THEN BEGIN
			ZIP,FILES=AFILE,DIR_OUT=DIR
    	AFILE = DIR + FNAME                                              ; Make the unzipped file AFILE
   	 	;FN = PARSE_IT(AFILE,/ALL)
   	 	REMOVE_FILE = AFILE
    ENDIF
    FI_IN=FILE_INFO(AFILE)
    IF NOT FI_IN[0].SIZE GT 0L THEN CONTINUE

;		***** Read the L2 HDF file *****
    PRINT,'Reading: '+ AFILE
    STRUCT = READ_HDF_2STRUCT(AFILE,ERROR=ERROR,ERR_MSG=ERR_MSG)
    IF ERR_MSG NE '' OR ERROR NE '' THEN BEGIN
    	ERROR='ERROR :'+ERR_MSG
    	PRINT, ERROR
     CONTINUE
    ENDIF
    NAMES = STRUPCASE(TAG_NAMES(STRUCT.SD))

;		***** Get tagnames *****
		TAGS = TAG_NAMES(STRUCT.SD)

;   ***** Retrieve the LATITUDE/LONGITUDE *****
    PRINT, 'Retrieving latitude, longitude and control points'
    IN_LONS = STRUCT.SD.LONGITUDE.IMAGE
    IN_LATS = STRUCT.SD.LATITUDE.IMAGE
    CTL_LONS = STRUCT.SD.CNTL_PT_COLS.IMAGE
    CTL_LATS = STRUCT.SD.CNTL_PT_ROWS.IMAGE


;		***** Loop through each map *****
		FOR MTH = 0L, N_ELEMENTS(_MAPS)-1 DO BEGIN
			_MAP = _MAPS(MTH)
			OUTPUT_LABEL = INAME + dash + FN.METHOD + dash + FN.COVERAGE + dash + _MAP
			SZ = MAPS_SIZE(_MAP)
			IF N_ELEMENTS(PX_OUT) EQ 0 THEN _PX_OUT = SZ.PX ELSE _PX_OUT = PX_OUT
			IF N_ELEMENTS(PY_OUT) EQ 0 THEN _PY_OUT = SZ.PY ELSE _PY_OUT = PY_OUT

;			***** Read the standard landmask for this map *****
			STRUCT_LANDMASK = READ_LANDMASK(MAP=_MAP,/STRUCT,ERROR=ERROR)

;			***** IF ERROR then no landmask exists *****
			IF ERROR EQ 0 AND NOT KEYWORD_SET(NO_REMAP) THEN BEGIN
	  		OK_LAND = STRUCT_LANDMASK.LAND
	  		COUNT_LAND = STRUCT_LANDMASK.COUNT_LAND
	  		GONE, STRUCT_LANDMASK
			ENDIF ELSE COUNT_LAND = 0

		  REFRESH = 1
;			***** Loop through each product *****
			FOR PTH = 0L, N_ELEMENTS(_PRODS)-1 DO BEGIN
				APROD = STRUPCASE(_PRODS(PTH))
				OK_PROD = WHERE(STRUPCASE(NAMES) EQ APROD, COUNT_PROD)
				ALG_TEST = VALID_ALG_CHECK(IN_PROD=APROD,OUT_PROD=OUTPROD,SENSOR=_SENSOR,ALG=ALG)
      	IF ALG EQ '' THEN SAVEFILE=DIR_OUT + OUTPUT_LABEL + dash + OUTPROD + '.save' $
      	             ELSE SAVEFILE=DIR_OUT + OUTPUT_LABEL + dash + OUTPROD + dash + ALG + '.save'

				IF ALG NE _ALG[NTH] THEN CONTINUE

;	  		***** Check which PRODs need saves made *****
				FI_OUT = FILE_INFO(SAVEFILE)
	      IF FI_OUT.MTIME GT FI_IN.MTIME AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE

				OK_NODATA=WHERE(NODATA_FILE_NAME EQ FN.FIRST_NAME AND NODATA_MAP EQ _MAPS(MTH),COUNT_NODATA)
				IF COUNT_NODATA EQ 1 THEN CONTINUE


;       ***** Read the SST product *****
				OK = WHERE(TAGS EQ APROD,COUNT)
				IF COUNT EQ 0 THEN CONTINUE

				SST_IMAGE = STRUCT.SD.(OK_PROD).IMAGE
				IF NOT KEYWORD_SET(NO_REMAP) THEN $
				  SST_IMAGE = MAP_REMAP(STRUCT.SD.(OK_PROD).IMAGE,MAP_IN='LONLAT',MAP_OUT=_MAP,CONTROL_LONS=IN_LONS,CONTROL_LATS=IN_LATS,REFRESH=REFRESH,CONTROL_SUBS_LON=CTL_LONS,CONTROL_SUBS_LAT=CTL_LATS)
				                             ;ELSE SST_IMAGE = ROTATE(STRUCT.SD.(OK_PROD).IMAGE,7)

	      REFRESH = 0

				; check to see if all values are missing values
				;OK=WHERE(SST_IMAGE EQ 32767,COUNT)
				OK=WHERE(SST_IMAGE EQ 32767 OR SST_IMAGE EQ -32767,COUNT)
				WRITE_NEW_NODATA_CSV = 0
				IF COUNT GT N_ELEMENTS(SST_IMAGE)- 100L THEN BEGIN
					NODATA_FILE_NAME=[NODATA_FILE_NAME,FN.FIRST_NAME]
					NODATA_MAP=[NODATA_MAP,_MAPS(MTH)]
					WRITE_NEW_NODATA_CSV = 1
					_NODATA_FILE_NAME=NODATA_FILE_NAME(1:*)
					_NODATA_MAP=NODATA_MAP(1:*)
			  	temp   = CREATE_STRUCT('FILE_NAME','','MAP','')
			    temp=REPLICATE(temp,N_ELEMENTS(_NODATA_FILE_NAME))
			    TEMP.FILE_NAME=_NODATA_FILE_NAME
			    TEMP.MAP = _NODATA_MAP
			    STRUCT_2CSV,NODATA_CSV,TEMP
			    TEMP = ''
			    ; Write out exclude browse
			    SST_IMAGE(0:*)=AMISS_COLOR
			    IF COUNT_LAND GE 1 THEN SST_IMAGE(OK_LAND) = ALAND_COLOR
					BROWSE_LABEL= FN.SENSOR + dash + FN.SATELLITE+dash+FN.METHOD+dash+FN.COVERAGE+dash+_MAP+dash+OUTPROD
    			IF ALG NE '' THEN BROWSE_LABEL=BROWSE_LABEL+dash+ALG
    			DT= PERIOD_FORMAT(FN.PERIOD,/NAME,/SHORT)
    			exclude_browse = DIR_EXCLUDE+FN.PERIOD+dash+BROWSE_LABEL+'.PNG'
    			SST_IMAGE=SD_ADD_COLORBAR(SST_IMAGE,MAP=_MAP,PROD='SST')
      	 	SST_IMAGE = MAP_ADD_TXT(SST_IMAGE,0.01,0.90,DT, COLOR=0,charsize=2.0,CHARTHICK=3)
        	SST_IMAGE = MAP_ADD_TXT(SST_IMAGE,0.01,0.85,BROWSE_LABEL, COLOR=0,charsize=2.0,CHARTHICK=3)
					CALL_PROCEDURE,'PAL_SW3',R,G,B
    			WRITE_PNG,exclude_browse, SST_IMAGE,R,G,B
					SST_IMAGE=''
					CONTINUE
				ENDIF


;  			***** Get QUAL information *****
				IF ALG EQ '4UM' THEN QUAL = 'QUAL_SST4' ELSE QUAL = 'QUAL_SST'
				OK = WHERE(TAGS EQ QUAL,COUNT)
				IF COUNT GE 1 THEN BEGIN
					IF ALG EQ '4UM' THEN IMAGE = STRUCT.SD.QUAL_SST4.IMAGE ELSE IMAGE = STRUCT.SD.QUAL_SST.IMAGE
					QUAL_IMAGE = IMAGE
	        IF NOT KEYWORD_SET(NO_REMAP) THEN $
	          QUAL_IMAGE = MAP_REMAP(IMAGE,MAP_IN='LONLAT',MAP_OUT=_MAP,CONTROL_LONS=IN_LONS,CONTROL_LATS=IN_LATS,CONTROL_SUBS_LON=CTL_LONS,CONTROL_SUBS_LAT=CTL_LATS,REFRESH=REFRESH,PX_OUT=_PX_OUT,PY_OUT=_PY_OUT)
	        ;ELSE QUAL_IMAGE = ROTATE(IMAGE,7)

	       	OK_QUAL_0 = WHERE(QUAL_IMAGE EQ 0, COUNT_QUAL_0)
	       	OK_QUAL_1 = WHERE(QUAL_IMAGE EQ 1, COUNT_QUAL_1)
	       	OK_QUAL_2 = WHERE(QUAL_IMAGE EQ 2, COUNT_QUAL_2)
	       	OK_QUAL_3 = WHERE(QUAL_IMAGE EQ 3, COUNT_QUAL_3)
	       	OK_QUAL_4 = WHERE(QUAL_IMAGE EQ 4, COUNT_QUAL_4)
		    ENDIF

;				***** Get FLAG information *****
				OK = WHERE(TAGS EQ 'L2_FLAGS',COUNT)
				IF COUNT GE 1 THEN BEGIN
					FLAGS_IMAGE = STRUCT.SD.L2_FLAGS.IMAGE
				  IF NOT KEYWORD_SET(NO_REMAP) THEN $
					  FLAGS_IMAGE = MAP_REMAP(FLAGS_IMAGE,MAP_IN='LONLAT',MAP_OUT=_MAP,CONTROL_LONS=IN_LONS,CONTROL_LATS=IN_LATS,CONTROL_SUBS_LON=CTL_LONS,CONTROL_SUBS_LAT=CTL_LATS,REFRESH=REFRESH,PX_OUT=_PX_OUT,PY_OUT=_PY_OUT)
						;ELSE FLAGS_IMAGE = ROTATE(STRUCT.SD.L2_FLAGS.IMAGE,7)

		      FLAGS_NAMES = SD_FLAGS(FLAGS_IMAGE,SENSOR=_SENSOR,/NAMES)
		  		MASK_FLAG = SD_FLAGS_COMBO(FLAGS_IMAGE,FLAG_BITS)
		      OK_L2_FLAGS =WHERE(MASK_FLAG NE 0, COUNT_L2_FLAGS)
;		      ZEN_FLAG = SD_FLAGS_COMBO(FLAGS_IMAGE,[13])
;		      OK_ZENITH = WHERE(ZEN_FLAG NE 0, COUNT_ZEN)
		      GONE, FLAGS_IMAGE
		      REFRESH = 0
		    ENDIF

;    		*****  Make Mask for STRUCT_SD  *****
				MASK=BYTE(SST_IMAGE) & MASK(*,*)=0B

;    		===> NOT_MASK (good data , 0b)
    		CODE_NAME = 'NOT_MASK'
    		CODE_MASK = 0B
    		CODE_NAME_MASK=[CODE_NAME]

        CODE_NAME = 'NOT_MASK'
        ACODE = 1B
        CODE_MASK = [CODE_MASK,ACODE]
        CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
        IF COUNT_QUAL_1 GE 1 THEN MASK(OK_QUAL_1) = ACODE

				CODE_NAME = 'SUSPECT_SST'
        ACODE = 2B
        CODE_MASK = [CODE_MASK,ACODE]
        CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
        IF COUNT_QUAL_2 GE 1 THEN MASK(OK_QUAL_2) = ACODE
        NOTES = 'Quality code 2 masked as SUSPECT_SST'

				CODE_NAME = 'BAD_SST'
        ACODE = 3B
        CODE_MASK = [CODE_MASK,ACODE]
        CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
        IF COUNT_QUAL_3 GE 1 THEN MASK(OK_QUAL_3) = ACODE

				CODE_NAME = 'SST_FAIL'
        ACODE = 4B
        CODE_MASK = [CODE_MASK,ACODE]
        CODE_NAME_MASK = [CODE_NAME_MASK, CODE_NAME]
        IF COUNT_QUAL_4 GE 1 THEN MASK(OK_QUAL_4) = ACODE

;    		===> L2_FLAGS
    		CODE_NAME = 'L2_FLAGS'
    		ACODE = 5B
    		CODE_MASK     =[CODE_MASK,ACODE]
    		CODE_NAME_MASK=[CODE_NAME_MASK,CODE_NAME]
    		IF COUNT_L2_FLAGS GE 1 THEN MASK(OK_L2_FLAGS) = ACODE

;    		===> LAND
    		CODE_NAME = 'LAND'
    		ACODE = 6B
    		CODE_MASK     =[CODE_MASK,ACODE]
    		CODE_NAME_MASK=[CODE_NAME_MASK,CODE_NAME]
    		IF COUNT_LAND GE 1 THEN MASK(OK_LAND) = ACODE

    		MISSING_CODES=[-32767]

;				***** Check to see if SCALING, SLOPE, INTERCEPT AND UNITS are present, if  not defaults are assumed *****

				PROD_TAGS = TAG_NAMES(STRUCT.SD.(OK_PROD))
				OK = WHERE(STRUPCASE(PROD_TAGS) EQ 'SCALING',COUNT_SCALING)
				IF COUNT_SCALING EQ 1 THEN SCALING=STRUCT.SD.(OK_PROD).SCALING ELSE SCALING = 'Linear'
				OK = WHERE(STRUPCASE(PROD_TAGS) EQ 'SLOPE',COUNT_SLOPE)
				IF COUNT_SLOPE EQ 1 THEN SLOPE=STRUCT.SD.(OK_PROD).SLOPE ELSE SLOPE = 1.0
				OK = WHERE(STRUPCASE(PROD_TAGS) EQ 'INTERCEPT',COUNT_INTERCEPT)
				IF COUNT_INTERCEPT EQ 1 THEN INTERCEPT=STRUCT.SD.(OK_PROD).INTERCEPT ELSE INTERCEPT = 0.0
				OK = WHERE(STRUPCASE(PROD_TAGS) EQ 'UNITS',COUNT_DATA_UNITS)
				IF COUNT_DATA_UNITS EQ 1 THEN DATA_UNITS=STRUCT.SD.(OK_PROD).UNITS ELSE DATA_UNITS = 'UNKNOWN'

				ASTAT='DATA'
				IF N_ELEMENTS(MISSING_CODES) NE N_ELEMENTS(MISSING_NAMES) THEN MISSING_NAMES=REPLICATE('',N_ELEMENTS(MISSING_CODES))

				_GLOBAL=''
				_L2_INPUT_FILES=''
				_INPUT_PARAMETERS=''
				OK=WHERE(STRUPCASE(TAG_NAMES(STRUCT)) EQ 'GLOBAL',COUNT)
				IF COUNT EQ 1 THEN BEGIN
					_GLOBAL=STRUCT.GLOBAL
					_INPUT_PARAMETERS=STRSPLIT(_GLOBAL.INPUT_PARAMETERS,BYTE(10),/EXTRACT)
					_L2_INPUT_FILES= STRSPLIT(_GLOBAL.INPUT_FILES,',',/EXTRACT)
				ENDIF

       	IF KEYWORD_SET(NO_REMAP) THEN BEGIN
          STRUCT_RETURN=STRUCT_SD_MAKE(SST_IMAGE,FILE_NAME=SAVEFILE,PROD=OUTPROD, ASTAT=ASTAT,GLOBAL=_GLOBAL,$
          				 INPUT_PARAMETERS=_INPUT_PARAMETERS, 	L2_INPUT_FILES=_L2_INPUT_FILES,$
                   MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
                   MASK=MASK,     CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
                   PERIOD=FN.PERIOD, ALG=ALG,$
                   SENSOR=SENSOR,    SATELLITE=SATELLITE, SAT_EXTRA=SAT_EXTRA,$
                   METHOD=METHOD,   SUITE=SUITE,          MAP=_MAP, $
                   INFILE=FN.FULLNAME,$
                   NOTES=NOTES, STATUS=STATUS,  ERROR=ERROR, $
                   IN_LONS=IN_LONS, IN_LATS=IN_LATS,CTL_LONS=CTL_LONS,CTL_LATS=CTL_LATS)

					IF N_ELEMENTS(FILES) EQ 1 AND KEYWORD_SET(STRUCT_RETURN) THEN BEGIN
						IF NOT KEYWORD_SET(KEEP_HDF) AND REMOVE_FILE NE '' THEN FILE_DELETE,REMOVE_FILE
					 	GOTO,DONE
					ENDIF

  				PRINT, 'Writing ' + SAVEFILE
  				SAVE,FILENAME=SAVEFILE,STRUCT_RETURN,/COMPRESS

         ENDIF ELSE BEGIN
           STRUCT_SD_WRITE,SAVEFILE,PROD=OUTPROD, ASTAT=ASTAT,GLOBAL=_GLOBAL,$
          				 INPUT_PARAMETERS=_INPUT_PARAMETERS, 	L2_INPUT_FILES=_L2_INPUT_FILES,$
                   IMAGE=SST_IMAGE,     MISSING_CODE=missing_codes,MISSING_NAME=missing_names, $
                   MASK=MASK,     CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
                   SCALING=SCALING, INTERCEPT=INTERCEPT,    SLOPE=SLOPE,       DATA_UNITS=DATA_UNITS,$
                   PERIOD=FN.PERIOD, ALG=ALG,$
                   SENSOR=SENSOR,    SATELLITE=SATELLITE, SAT_EXTRA=SAT_EXTRA,$
                   METHOD=METHOD,   SUITE=SUITE,          MAP=_MAP, $
                   INFILE=FN.FULLNAME,$
                   NOTES=NOTES, STATUS=STATUS,  ERROR=ERROR
				ENDELSE



				IF KEYWORD_SET(ADD_COVERAGE) THEN ADD_EXTRA = COVERAGE
				IF KEYWORD_SET(MAKE_BROWSE) AND APROD NE 'L2_FLAGS' THEN $
					STRUCT_SD_2PNG, SAVEFILE, DIR_OUT=DIR_BROWSE, $
													/ADD_COLORBAR, /ADDDATE,/ADD_SENSOR,/ADD_PROD,/ADD_METHOD,$
  												/ADD_LAND,/ADD_COAST,BACKGROUND=ABACKGROUND, /ADD_ALG,$
												  LAND_COLOR=ALAND_COLOR,FLAG_COLOR=AFLAG_COLOR,OUTSCAN_COLOR=aoutscan_color,$
												  ALGFAIL_COLOR=AALGFAIL_COLOR,HI_LO_COLOR=AHI_LO_COLOR,PAL=PAL,FLAGS=_FLAGS,SOLO=SOLO ,$
												  OVERWRITE=overwrite,/QUIET,NO_MASK=NO_MASK,ADD_EXTRA=ADD_EXTRA


				GONE, IMAGE
				GONE, MASK

    	ENDFOR	; End PROD loop
		ENDFOR 		; End MAP loop
		IF NOT KEYWORD_SET(KEEP_HDF) AND REMOVE_FILE NE '' THEN FILE_DELETE,REMOVE_FILE
		IF KEYWORD_SET(WRITE_NEW_NODATA_CSV) THEN BEGIN
			_NODATA_FILE_NAME=NODATA_FILE_NAME(1:*)
			_NODATA_MAP=NODATA_MAP(1:*)
	  	temp   = CREATE_STRUCT('FILE_NAME','','MAP','')
	    temp=REPLICATE(temp,N_ELEMENTS(_NODATA_FILE_NAME))
	    TEMP.FILE_NAME=_NODATA_FILE_NAME
	    TEMP.MAP = _NODATA_MAP

	    STRUCT_2CSV,NODATA_CSV,TEMP
	    TEMP = ''
	    WRITE_NEW_NODATA_CSV=0
		ENDIF
		GONE, STRUCT
		GONE, IN_LONS
    GONE, IN_LATS
    GONE, CTL_LONS
    GONE, CTL_LATS
	ENDFOR			; End FILE loop

	DONE:
END; #####################  End of Routine ################################
