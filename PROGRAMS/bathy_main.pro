; $ID:	BATHY_MAIN.PRO,	2021-04-15-17,	USER-KJWH	$
;######################################################################
  PRO BATHY_MAIN

;
;	Reference, gravity data: Sandwell, D. T., and W. H. F. Smith, Global marine gravity from retracked Geosat and ERS-1
;	altimetry: Ridge Segmentation versus spreading rate, J. Geophys. Res., 114, B01411, doi:10.1029/2008JB006008, 2009
;
; WRITTEN BY J.O'REILLY, NOAA,NMFS,NARRAGANSETT,RI
;	MODIFIED BY K. HYDE: UPDATED TO NEW VERSION SRTM30 PLUS, RELEASED SEPTEMBER 16, 2008
; OCT 21, 2011 - JOR:  NOW USING FILE_FOLDERS.PRO, ADDED SWITCH DO_TOPO30_GRD
; MAR 19, 2012 - JOR:  REPLACED PARSE_IT WITH FILE_PARSE;LIST WITH PLIST
; APR 13, 2012 - JOR:  OVERHAULED TO SELECT FILES BASED ON LAT,LONS IN CSV FILE :D:\IDL\SRTM30_PLUS\SRTM30_PLUS.CSV
; DEC 11, 2014 - JOR:  SWITCH DO_MAKE_TILE_MAP COPIED FROM POLYFILL_DEMO
; DEC 15, 2014 - KJWH: RENAMED BATHY_MAIN AND UPDATED PROGRAM WITH NEW STEPS
;                      NOW USING VERSION 11

; =================>
; N O T E S
; =================>
;	SRTM30_PLUS: SRTM30, COASTAL & RIDGE MULTIBEAM, ESTIMATED TOPOGRAPHY
;
;	SRTM30_PLUS V11.0: NOVEMBER 29, 2014
;
;	SCRIPPS INSTITUDE OF OCEANOGRAPHY, UNIVERSITY OF CALIFORNIA SAN DIEGO, 9500 GILMAN DRIVE, LA JOLLA, 92093-0225
;	http://topex.ucsd.edu/WWW_html/srtm30_plus.html
;
;	JOSEPH J. BECKER JJBECKER@UCSD.EDU
;	DAVID T. SANDWELL DSANDWELL@UCSD.EDU
;
;_______________________________________________________________________
;__________________
; INTRODUCTION - HTTP://TOPEX.UCSD.EDU/WWW_HTML/SRTM30_PLUS.HTML
;
;	THIS DATA CONSISTS OF 33 FILES OF GLOBAL TOPOGRAPHY IN THE SAME FORMAT AS THE SRTM30 PRODUCTS DISTRIBUTED BY THE USGS EROS DATA CENTER. 
;	THE GRID RESOLUTION IS 30 SECOND WHICH IS ROUGHLY ONE KILOMETER. IN ADDITION THE GLOBAL DATA ARE ALSO AVAILABLE IN A SINGLE LARGE FILE READY FOR GMT.
;
; LAND DATA ARE BASED ON THE 1-KM AVERAGES OF TOPOGRAPHY DERIVED FROM THE USGS SRTM30 GRIDED DEM DATA PRODUCT CREATED WITH DATA FROM THE NASA SHUTTLE RADAR TOPOGRAPHY MISSION. 
; GTOPO30 DATA ARE USED FOR HIGH LATITUDES WHERE SRTM DATA ARE NOT AVAILABLE.
;
; OCEAN DATA ARE BASED ON THE SMITH AND SANDWELL GLOBAL 1-MINUTE GRID BETWEEN LATITUDES +/- 81 DEGREES. 
; HIGHER RESOLUTION GRIDS HAVE BEEN ADDED FROM THE LDEO RIDGE MULTIBEAM SYNTHESIS PROJECT, THE JAMSTEC DATA SITE FOR RESEARCH CRUISES, AND THE NGDC COASTAL RELIEF MODEL. 
; ARCTIC BATHYMETRY IS FROM THE INTERNATIONAL BATHYMETRIC CHART OF THE OCEANS (IBCAO) [JAKOBSSON ET AL., 2003].
;
; THE PIXEL-REGISTERED DATA ARE STORED IN 33 FILES WITH NAMES CORRESPONDING TO THE UPPER LEFT CORNER OF THE ARRAY SHOWN BELOW. 
; THE DATA ARE ALSO MERGED INTO A SINGLE LARGE (1.9 GBYTE, 2-BYTE INTEGER) FILE AS WELL AS SMALLER 1-MINUTE AND 2-MINUTE NETCDF VERSIONS. 
; MATCHING FILES OF SOURCE IDENTIFICATION NUMBER ARE AVAILABLE FOR DETERMINING THE DATA SOURCE FOR EVERY PIXEL.
;	
;	REFERENCE, SOUNDING DATA: BECKER, J. J., D. T. SANDWELL, W. H. F. SMITH, J. BRAUD, B. BINDER, 
;	  J. DEPNER, D. FABRE, J. FACTOR, S. INGALLS, S-H. KIM, R. LADNER, K. MARKS, S. NELSON, A. PHARAOH, R. TRIMMER, J. VON ROSENBERG, G. WALLACE, P. WEATHERALL., 
;	  GLOBAL BATHYMETRY AND ELEVATION DATA AT 30 ARC SECONDS RESOLUTION: SRTM30_PLUS, MARINE GEODESY, 32:4, 355-371, 2009.
;
; REFERENCE, GRAVITY DATA: SANDWELL, D. T., R. D. MÃœLLER, W. H. F. SMITH, E. GARCIA, R. FRANCIS, 
;   NEW GLOBAL MARINE GRAVITY MODEL FROM CRYOSAT-2 AND JASON-1 REVEALS BURIED TECTONIC STRUCTURE, SCIENCE, VOL. 346, NO. 6205, PP. 65-67, DOI: 10.1126/SCIENCE.1258213, 2014.
;
;
;	STRM30_PLUS README FILE IS AVAILABLE AT: ftp://topex.ucsd.edu/pub/srtm30_plus/README.V11.txt
;	
;	THE SRTM30_PLUS ARE NOW AVAILABLE IN 2 FORMATS.
;
;	1) TOPO30 FORMAT
;	THE  SUBDIRECTORY CALLED TOPO30 HAS THE DATA STORED IN A SINGLE LARGE FILE OF 2-BYTE INTEGERS IN MSB FORMAT (I.E. BIG-ENDIAN).
;	THE GRID SPANS 0 TO 360 IN LONGITUDE AND -90 TO 90 IN LATITUDE. THE UPPER LEFT CORNER OF THE UPPER LEFT GRID CELL
;	HAS LATITUDE 90 AND LONGITUDE 0.  THERE ARE 43200 COLUMNS AND 21600 ROWS.
;
;	2) SRTM30 FORMAT
;	THE DIRECTORY CALLED SRTM30 HAS THE SAME DATA IN ORIGINAL SRTM30 FORMAT 
;	  CONSISTING OF 33 TILES IS DESCRIBED BELOW.
;
;	DIRECTORIES
;	DATA - 33 FILES OF SIGNED 2-BYTE INTEGERS FOR GLOBAL ELEVATION(> 0) 
;	AND DEPTH (<0). THE GLOBAL ELEVATIONS ARE AN EXACT
;				 COPY OF THE SRTM30 GRIDS PROVIDED AT THE FOLLOWING LOCATION.  
;				 OUR CONTRIBUTION IS TO FILL THE OCEAN AREAS WITH
;				 SOME ESTIMATE OF DEPTH. FTP://E0SRP01U.ECS.NASA.GOV
;
;	SID  - 33 FILES OF UNSIGNED 2-BYTE INTEGERS REPRESENTING THE SOURCE IDENTIFICATION NUMBER FOR THE DATA (0 - PREDICTED DEPTH).
;	       SOON WE WILL MAKE THESE DATA FILES AVAILABLE IN AN ASCII FORMAT.
;
;	GRD  - SHELL SCRIPTS TO CONVERT THE SRTM30_PLUS TIMES TO GMT FORMAT
;
;	ERM -  ASCII HEADERS FOR USING THE DATA IN ERMAPPER SOFTWARE
;
;	KMZ -  33 KMZ FILES FOR USE IN GOOGLE EARTH
;
;	1) OCEAN DATA
;	THE OCEAN DATA ARE BASED ON V9.1 OF OUR GLOBAL PREDICTED DEPTH. THIS 1-MINUTE GRID INCLUDES A SIGNIFICANT NUMBER OF NEW DEPTH
;	SOUNDINGS, ESPECIALLY FOR DEPTHS BETWEEN 0 AND -300 M.	A MORE COMPLETE DESCRIPTION OF THE NEW DATA AND PROCESSING	WILL BE
;	PREPARED FOR PUBLICATION IN EARLY 2008.  THIS	IS A COLLABORATIVE EFFORT BETWEEN NGA, NOAA, NAVO AND SIO.	THE PREDICTED DEPTHS
;	ARE BASED ON THE V16.1 GRAVITY ANOMALY MODEL IN AN ADJACENT DIRECTORY.  PLEASE SEND COMMENTS TO	DSANDWELL@UCSD.EDU.
;
;	2) ANTARCTICA
;	THE LAND ADAT ON ANTARCTICA ARE FROM DIGITAL ELEVATION MODELS OF THE ANTARCTIC AND GREENLAND ICE SHEETS USING DATA FROM ICESAT
;	JOHN P. DIMARZIO12, ANITA C. BRENNER23, HELEN A. FRICKER4, JACK L. SABA23, BOB E. SCHUTZ5, CHRISTOPHER A. SHUMAN2, H. JAY ZWALLY2
;	2007 JAN 5
;	DESCRIPTION OF THE DIGITAL ELEVATION MODELS
;	THE ICESAT/GLAS ANTARCTIC AND GREENLAND DIGITAL ELEVATION MODELS (DEMS) ARE POLAR-STEREOGRAPHIC PROJECTION OF THE ICESAT/GLAS
;	ELEVATION DATA IN RASTER FORMAT. THE ELEVATION GRIDS WERE USED TO COMPUTE THE SLOPE AND SLOPE AZIMUTH GRIDS.
;
;	THE USGS SRTM30 DATA AND DOCUMENTATION IS AVAILABLE AT FTP://EDCSGS9.CR.USGS.GOV/PUB/DATA/SRTM/SRTM30
;
;	THE US CONTINENTAL COASTAL MULTIBEAM DATA IS AVAILABLE AT WWW.NGDC.NOAA.GOV/MGG/COASTAL/COASTAL.HTML
;	DATA FROM PUERTO RICO AND HAWAII IS -NOT- PRESENTLY INCLUDED.
;
;	THE OCEAN RIDGE MULTIBEAM DATA IS AVAILABLE AT WWW.OCEAN-RIDGE.LDEO.COLUMBIA.EDU/GENERAL/HTML/HOME.HTML
;
;	THE ARTIC OCEAN BATHYMETRY IS FROM HTTP://WWW.NGDC.NOAA.GOV/MGG/BATHYMETRY/ARCTIC/ARCTIC.HTML
;
; FTP://TOPEX.UCSD.EDU/PUB/SRTM30_PLUS/SRTM30/DATA/
;
; NOTE ALL THE FILES ARE 57600000 AND DATA ARE INTEGER (2BYTES) 
;  AND COVER A 40DEG BY 50N DEG SPAN
;  PRINT, 57600000./(40*50*(120*120.)); = 2 (BYTES)
;#########################################################################


; ************************************
  ROUTINE_NAME = 'BATHY_MAIN'
; ************************************


; ************************************ S W I T C H E S SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
	DO_SRTM30_WGET   							= 0
	DO_SRTM30_UNZIP   						= 0

	DO_SRTM30_LIST_BOUNDARIES 		= 2
	DO_MAKE_TILE_MAP              = 0

	DO_SRTM30_2SAVE 							= 1 

	
	DO_SRTM30_2MAP   							= 0
	 ; READ THE ORIGINAL STRM30 DAT FILES AND MAKE A SAVE FOR A PARTICULAR MAP
	DO_MAKE_MAP_PNG      					= 0 ; READ THE SAVE MAP FILE AND MAKE A PNG BROWSE
	DO_MAKE_MAP_PNG_PLUS_ISOBATHS = 0 ;

	DO_SRTM30_LANDMASK    				= 0
	DO_SRTM30_LANDMASK_ECS 				= 0
	DO_SRTM30_LANDMASK_RENUMBER 	= 0

	DO_SRTM30_LANDMASK_REMAP 			= 0
	DO_SRTM30_LANDMASK_QC					= 0

	DO_BATHY_PERCENTILE 					= 0
	DO_BATHY_FREQUENCY 						= 0

	DO_REMAP_NWA_2NWA_N						= 0
	DO_REMAP_NEC_2MAB_GS					= 0

	DO_SRTMV1_VS_SRTMV5						= 0
	
	DO_TOPO30_GRD                 = 0
	
	DO_TOPO30_2PNG                = 0
	
; ************************************ S W I T C H E S SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

  SL = GET_PATH()
  DIR_BATHY = !S.IDL +'BATHY' + SL + 'SRTM30PLUS' + SL
;  DIR = FILE_FOLDERS(DIR_BATHY,FOLDERS=['SAVE','Z'])


;	********************************************
	IF DO_SRTM30_LIST_BOUNDARIES GE 1 THEN BEGIN
;	********************************************
		OVERWRITE = DO_SRTM30_LIST_BOUNDARIES > 1
		FILES = FILE_SEARCH(DIR.Z + SL + '*.nc*')
		LONLAT_MASTER = !S.MASTER+'SRTM30PLUS-LONLATS.CSV'
		IF UPDATE_CHECK(INFILES=FILES,OUTFILE=LONLAT_MASTER,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, DONE_BOUNDARIES
		IF FILE_TEST(LONLAT_MASTER) EQ 1 THEN FILE_MOVE, LONLAT_MASTER, !S.MASTER + 'REPLACED' + SL + 'SRTM30PLUS_LATLONS-' + DATE_NOW() + '.CSV'

    STR = REPLICATE(CREATE_STRUCT('TILE','','COLOR',0L,'PX',0L, 'PY',0L, 'LATMIN',0L,'LATMAX',0L,'LONMIN',0L,'LONMAX',0L),N_ELEMENTS(FILES))
		FOR NTH=0,N_ELEMENTS(FILES)-1L DO BEGIN
			AFILE=FILES[NTH]
			FP=FILE_PARSE(AFILE)
      EXT = STRUPCASE(FP.EXT)
			IF EXT EQ 'Z' OR EXT EQ 'GZ' OR EXT EQ 'BZ2' THEN BEGIN  ;     =====> Check if compressed file
			  PRINT,'# '+ NUM2STR[NTH], ' Uncompressing: '+FP[NTH].NAME_EXT
			  UNZIP,FILES=AFILE,DIR_OUT=DIR.Z,ERROR=ERROR,ERR_MSG=ERR_RESULT
			  AFILE = DIR.Z + FP[NTH].NAME
			  REMOVE_UNZIPPED = 1 
			ENDIF ELSE BEGIN
			  AFILE = FP.FULLNAME
			  REMOVE_UNZIPPED = 0
			ENDELSE ; IF EXT EQ 'Z' OR EXT EQ 'GZ' OR EXT EQ 'BZ2' THEN BEGIN

      D = READ_NC(AFILE,PRODUCTS='SD',/LOOK,ERROR=ERROR, ERR_MSG=ERR_MSG) 

	  	STR[NTH].TILE=FP.FIRST_NAME
	  	STR[NTH].COLOR=NTH+1
	  	STR[NTH].LATMIN = MIN(D.SD.Y.ACTUAL_RANGE)
	  	STR[NTH].LATMAX = MAX(D.SD.Y.ACTUAL_RANGE)
	  	STR[NTH].LONMIN = MIN(D.SD.X.ACTUAL_RANGE)
	  	STR[NTH].LONMAX = MAX(D.SD.X.ACTUAL_RANGE)
		  	
			IF KEYWORD_SET(REMOVE_UNZIPPED) AND FILE_TEST(AFILE) EQ 1 THEN BEGIN
			  PRINT, 'Deleting: ', AFILE
			  FILE_DELETE, AFILE
			ENDIF		
		ENDFOR
	  STRUCT_2CSV,LONLAT_MASTER,STR	
		DONE_BOUNDARIES:
	ENDIF
	
	
;***********************************
	IF DO_MAKE_TILE_MAP GE 1 THEN BEGIN
;***********************************

	  DIR = REPLACE(!S.BATHY,'SAVE','DATA')
	  LONLATS_FILE = !S.MASTER + 'SRTM30PLUS-LONLATS.CSV'
	  DB = CSV_READ(LONLATS_FILE) & PF,LONLATS_FILE,/R
	  DB = STRUCT_2NUM(DB)
	  DB.TILE = STRUPCASE(DB.TILE)
	  PAL_36,R,G,B
	  MAPS = ['GEQ','SMI']
    
    
    FOR N=0L, N_ELEMENTS(MAPS)-1 DO BEGIN
	    AMAP = MAPS(N)
	    PNGFILE = !S.MASTER + 'SRTM30_TILES-'+AMAP+'.PNG'
	    IF UPDATE_CHECK(INFILES=LONLATS_FILE,OUTFILES=PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
	    IF FILE_TEST(PNGFILE) EQ 1 THEN FILE_MOVE, PNGFILE, !S.MASTER + 'REPLACED' + SL + PNGFILE + '-' + DATE_NOW() + '.CSV'

  	  MAPS_SET,AMAP
  	  
  	  FOR NTH = 0,N_ELEMENTS(DB)-1 DO BEGIN
  	    D = DB[NTH]
  	    X = [D.LONMIN,D.LONMAX,D.LONMAX,D.LONMIN]
  	    Y = [D.LATMIN,D.LATMIN,D.LATMAX,D.LATMAX]
  	    XYZ = CONVERT_COORD(X,Y,/DATA,/TO_DEVICE)
  	    X = XYZ(0,*)
  	    Y = XYZ(1,*)
  	    COLOR = REPLICATE(FIX(D.COLOR),N_ELEMENTS(X))
  	    POLYFILL,X,Y,COLOR = COLOR,/DEVICE,NOCLIP = 1
  	  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  	   
	    IM = TVRD()
	    ZWIN
	    WRITE_PNG,PNGFILE,IM,R,G,B
	    PF, PNGFILE
    ENDFOR
	ENDIF;IF DO_MAKE_TILE_MAP GE 1 THEN BEGIN


;	*******************************
	IF DO_SRTM30_2SAVE GE 1 THEN BEGIN
;	*******************************
    OVERWRITE= DO_SRTM30_2SAVE GE 2

		FILES = FILE_SEARCH(DIR.DATA + SL + '*.nc*')
    LONLAT_MASTER = !S.MASTER+'SRTM30PLUS-LONLATS.CSV'

		DO_LATLON = 1
		DO_SAVE   = 1
		
		FOR NTH=0,N_ELEMENTS(FILES)-1L DO BEGIN
      AFILE=FILES[NTH]
      FN=FILE_PARSE(AFILE)
         
      TOPO_FILE =  DIR.SAVE + STRUPCASE(FN.NAME) + '.SAVE'
			LON_FILE 	=  DIR.SAVE + STRUPCASE(FN.NAME) + '-LON' + '.SAVE'
			LAT_FILE 	=  DIR.SAVE + STRUPCASE(FN.NAME) + '-LAT' + '.SAVE'

			IF FILE_MAKE(AFILE,[TOPO_FILE,LON_FILE,LAT_FILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE ; >>>>>>>

			EXT = STRUPCASE(FN.EXT)
			IF EXT EQ 'Z' OR EXT EQ 'GZ' OR EXT EQ 'BZ2' THEN BEGIN  ;     =====> Check if compressed file
			  PRINT,'# '+ NUM2STR[NTH], ' Uncompressing: '+FP[NTH].NAME_EXT
			  UNZIP,FILES=AFILE,DIR_OUT=DIR.Z,ERROR=ERROR,ERR_MSG=ERR_RESULT
			  AFILE = DIR.Z + FP[NTH].NAME
			  REMOVE_UNZIPPED = 1
			ENDIF ELSE BEGIN
			  AFILE = FN.FULLNAME
			  REMOVE_UNZIPPED = 0
			ENDELSE ; IF EXT EQ 'Z' OR EXT EQ 'GZ' OR EXT EQ 'BZ2' THEN BEGIN

      D = READ_NC(AFILE,PRODS='SD')  ; REPLACE WITH READ_NCDF WHEN PROGRAM IS READY

      ITOPO = D.SD.Z.IMAGE
		  SZ = SIZEXYZ(ITOPO)
		  PX = SZ.PX
		  PY = SZ.PY
		  PXPY = ULONG64(PX)*PY

      BOT   = MIN(D.SD.Y.ACTUAL_RANGE)
		  TOP   = MAX(D.SD.Y.ACTUAL_RANGE)
		  LEFT  = MIN(D.SD.X.ACTUAL_RANGE)
		  RIGHT = MAX(D.SD.X.ACTUAL_RANGE)
		  LIMIT = [BOT, LEFT, TOP, RIGHT] 

;			===> MAKE BINARY
			OK_LAND=WHERE(ITOPO GE 0,COUNT_LAND)
			OK_WATER=WHERE(ITOPO LT 0,COUNT_WATER)
			OK_SHALLOW = WHERE(ITOPO GT -2 AND ITOPO LT 0)

			BATHY = ITOPO	& BATHY(OK_LAND)= 0 & BATHY(OK_WATER) = -1.0* BATHY(OK_WATER)
			TIMAGE = PRODS_2BYTE(ITOPO,PROD='TOPO')   ; How do I modify the scaling (i.e. special scale) using PRODS_2BYTE
			BIMAGE = PRODS_2BYTE(BATHY,PROD='BATHY')
	  	BIMAGE(OK_LAND) = 254
	  	BIMAGE(OK_SHALLOW) = 6

 			PAL_BATHY,RR,GG,BB
 			RGB_TABLE = CPAL_READ('PAL_BATHY')
 			BIMG = IMAGE(BIMAGE,RGB_TABLE=RGB_TABLE)
	  	TIMG = IMAGE(ITOPO, RGB_TABLE=RGB_TABLE)
	
	  	ZWIN,BIMAGE
	 	  MAP_SET,0.0, 0.0, 0.0,/CYLINDRICAL,LIMIT=LIMIT,/WHOLE_MAP,POSITION=[0.0, 0.0, 1.0, 1.0],/NOBORDER
			TV,BIMAGE
			MAP_CONTINENTS,/COASTS,COLOR=0,/HIRES
			COPY=TVRD()
			CIMG = IMAGE(COPY,RGB_TABLE=RGB_TABLE)
STOP
;			===> GET LAT, LON
			IF DO_LATLON THEN BEGIN
				XY = IMG_XPYP(BIMAGE, /CENTER)
				LON = FLTARR(PX,PY)
				LAT = FLTARR(PX,PY)
				
					XYZ = CONVERT_COORD(XY.X,XY.Y,/DEVICE,/TO_DATA)
					LON = REFORM(XYZ(0,*))
					LAT = REFORM(XYZ(1,*))
	STOP			
				GONE, XY
				SAVE,FILENAME=LAT_FILE,LAT,/COMPRESS
 				SAVE,FILENAME=LON_FILE,LON,/COMPRESS
 				GONE,LON
				GONE,LAT
			ENDIF
			ZWIN

			PAL_SW3,R,G,B

;			===> MAKE PNG BROWSE
			PAL_SW3,R,G,B
			PNGFILE= REPLACE(TOPO_FILE,'.SAVE','.PNG')
			PNGFILE= REPLACE(PNGFILE,DIR.SAVE,DIR.BROWSE)
			PFILE,PNGFILE,/W
			WRITE_PNG,PNGFILE,BIMAGE,RRR,GGG,BBB

	;		===> MAKE PNG BROWSE
			PAL_SW3,R,G,B
			PNGFILE = REPLACE(TOPO_FILE,'.SAVE','-COAST.PNG')
			PNGFILE= REPLACE(PNGFILE,DIR.SAVE,DIR.BROWSE)
			WRITE_PNG,PNGFILE,COPY,RRR,GGG,BBB

		  
      IF KEYWORD_SET(REMOVE_UNZIPPED) AND FILE_TEST(AFILE) EQ 1 THEN BEGIN
        PRINT, 'Deleting: ', AFILE
        FILE_DELETE, AFILE
      ENDIF   
    ENDFOR
	ENDIF
; |||||||||||||||||||||||||||||||||||||||||||||||||||





;	*********************************
 	IF DO_SRTM30_2MAP GE 1 THEN BEGIN
;	*********************************

		MAPS = 'GEQ'
		MAPS = ['NEC','EQ_NATL','CH_NFL','SEC','EC','MED_SEA','BERING_SEA','LIS','RAR_BAY','ECS','MABC','MAB','MAB_GS','MAB_EXT',$
						'GOM','GOMN','MASS_BAY','NWA','NWA_N','NARR_BAY','DEL_BAY','BI_SOUND']
    MAPS = 'ROBINSON'
    MAPS = 'NEC'
    STOP
 ;   MAPS='FALKLANDS'
		SMOOTH_WIDTHS = [3,5]
		STOP
;   LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
        FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
          AFILE = FILES[NTH]
          PFILE,AFILE,/R
          FN=FILE_PARSE(AFILE)
          T=STRSPLIT(FN.FIRST_NAME,'ewns.',/EXTRACT,/PRESERVE_NULL)
          IF N_ELEMENTS(T) EQ 3 THEN BEGIN
            e= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'e',/extract,/preserve_null)) EQ 2
            w= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'w',/extract,/preserve_null)) EQ 2
            n= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'n',/extract,/preserve_null)) EQ 2
            s= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'s',/extract,/preserve_null)) EQ 2
            LONMIN = -1.0*w*FLOAT(T[1]) + 1.0*e*FLOAT(T[1])
            LATMAX  =  1.0*n*FLOAT(T(2)) - 1.0*s*FLOAT(T(2))
            IF LATMAX EQ -60 THEN BEGIN
              LONMAX = LONMIN + 60
              LATMIN = -90
            ENDIF ELSE BEGIN
              LONMAX = LONMIN + 40
              LATMIN = LATMAX - 50
            ENDELSE
          ENDIF
          PRINT,LATMIN,LONMAX
          STOP
        ENDFOR
;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _MAPS=0,N_ELEMENTS(MAPS)-1 DO BEGIN
			MAP=MAPS(_MAPS)

			S=MAP_SIZE(MAP)
			PX_OUT=S.PX_OUT
			PY_OUT=S.PY_OUT
			PRINT, MAP, PX_OUT,PY_OUT


; ===> FIND APPROPRIATE SRTM FILE BASED ON MAP DOMAIN
    M=MAP_INFO(MAP)
    MIN_LON =M.LOWER_LEFT[0]
    MAX_LON =M.UPPER_RIGHT[0]
    MIN_LAT =M.LOWER_LEFT[1]
    MAX_LAT =M.UPPER_RIGHT[1];    M.UPPER_RIGHT
   
   
    OK=WHERE(DB.MIN_LON LE MIN_LON AND DB.MAX_LON LE MAX_LON  ) & SPREAD,DB[OK]
   


;STOP


			IF MAP EQ 'NEC' OR MAP EQ 'SEC' THEN BEGIN
			  INFILE = DIR.SAVE+ ['w100n40.Bathymetry.srtm.save','w100n90.Bathymetry.srtm.save']
			  PX_OUT =  [1024L,2048L,4096L]
				PY_OUT =  [1024L,2048L,4096L]
				FILES = INFILE
				PLIST,FILES
			ENDIF

			IF MAP EQ 'LIS' OR $
				 MAP EQ 'RAR_BAY' OR $
				 MAP EQ 'CHES_BAY' OR $
				 MAP EQ 'NARR_BAY' OR $.
				 MAP EQ 'DEL_BAY'  OR $
				 MAP EQ 'MASS_BAY' OR $
				 MAP EQ 'BI_SOUND' OR $
				 MAP EQ 'MAB_EXT' OR $
				 MAP EQ 'MABC' OR $
				 MAP EQ 'MAB_GS' OR $
				 MAP EQ 'MAB' OR $
				 MAP EQ 'GOM' OR $				 
				 MAP EQ 'GOMN' THEN BEGIN
			  INFILE = DIR.SAVE+ ['w100n40.Bathymetry.srtm.save','w100n90.Bathymetry.srtm.save']
 				IF S.PX NE S.PX_OUT THEN PX_OUT =  [S.PX,S.PX_OUT] ELSE PX_OUT = S.PX_OUT
 				IF S.PY NE S.PY_OUT THEN PY_OUT =  [S.PY,S.PY_OUT] ELSE PY_OUT = S.PY_OUT				
			ENDIF

			IF MAP EQ 'EC'   THEN BEGIN
		  	INFILE = DIR.SAVE+ ['w100n40.Bathymetry.srtm.save','w060n40.Bathymetry.srtm.save','w100n90.Bathymetry.srtm.save','w060n90.Bathymetry.srtm.save']
		  	PX_OUT =  [1024L,2048L,4096L]
				PY_OUT =  [1024L,2048L,4096L]
		  ENDIF

			IF MAP EQ 'NWA_N'   THEN BEGIN
				INFILE = DIR.SAVE+ ['w100n40.Bathymetry.srtm.save','w060n40.Bathymetry.srtm.save','w100n90.Bathymetry.srtm.save','w060n90.Bathymetry.srtm.save','w020n90.Bathymetry.srtm.save']
		  	PX_OUT =  800L*4
				PY_OUT =  800L*4
		  ENDIF		

			IF MAP EQ 'ECS' THEN BEGIN
		  	INFILE = DIR.SAVE+ ['w100n40.Bathymetry.srtm.save','w060n40.Bathymetry.srtm.save','w100n90.Bathymetry.srtm.save','w060n90.Bathymetry.srtm.save']
		  	PX_OUT = 256UL *8
				PY_OUT = 680UL * 8
		  ENDIF

			IF MAP  EQ 'NWA' THEN BEGIN
		  	INFILE = DIR.SAVE+ ['w100n40.Bathymetry.srtm.save','w060n40.Bathymetry.srtm.save','w100n90.Bathymetry.srtm.save','w060n90.Bathymetry.srtm.save']
		  	PX_OUT = 1040 *4
				PY_OUT =  720*4
		  ENDIF

			IF MAP EQ 'CH_NFL' OR  MAP EQ 'EC' THEN BEGIN
		  	INFILE = DIR.SAVE+ ['w100n40.Bathymetry.srtm.save','w060n40.Bathymetry.srtm.save','w100n90.Bathymetry.srtm.save','w060n90.Bathymetry.srtm.save']
		  ENDIF

			IF MAP EQ 'MED_SEA' THEN BEGIN
		  	INFILE = DIR.SAVE+ ['w020n40.Bathymetry.srtm.save','e020n40.Bathymetry.srtm.save','w020n90.Bathymetry.srtm.save','e020n90.Bathymetry.srtm.save']
		  	PX_OUT =  4096L*2
				PY_OUT =  1856L*2
		  ENDIF

			IF MAP EQ 'BERING_SEA' THEN BEGIN
		  	INFILE = DIR.SAVE+ ['e140n90.Bathymetry.srtm.save','w180n90.Bathymetry.srtm.save']
				PX_OUT =  2048L*2
				PY_OUT =  1600L*2
		  ENDIF

			IF MAP EQ 'EQ_NATL' THEN BEGIN
		  	INFILE = DIR.SAVE+ ['w100n40.Bathymetry.srtm.save','w060n40.Bathymetry.srtm.save','w020n40.Bathymetry.srtm.save',$
		  											'w100n90.Bathymetry.srtm.save','w060n90.Bathymetry.srtm.save','w020n90.Bathymetry.srtm.save']
		  ENDIF

			IF MAP EQ 'GEQ' THEN BEGIN
				INFILE = FILE_SEARCH(DIR.SAVE + '*.Bathymetry.srtm.SAVE')
;				2 MINUTE PER GRID 10800 BY 5400 PIXELS
;				===> 2KM GEQ, 4KM GEQ, 8KM GEQ
				PX_OUT =  [10800L,8192L,4096L]
				PY_OUT =  [5400L,4096L,2048L]

			ENDIF ; IF MAP EQ 'GEQ' THEN BEGIN

      IF MAP EQ 'ROBINSON' THEN BEGIN
        INFILE = FILE_SEARCH(DIR.SAVE + '*.Bathymetry.srtm.SAVE')
;       2 MINUTE PER GRID 10800 BY 5400 PIXELS
;       ===> 2KM GEQ, 4KM GEQ, 8KM GEQ
        PX_OUT =  4096
        PY_OUT =  2048

      ENDIF ; IF MAP EQ 'ROBINSON' THEN BEGIN

			IF MAP  EQ 'L3B9' THEN BEGIN
				INFILE = FILE_SEARCH(DIR.SAVE + '*.Bathymetry.srtm.SAVE')
				PX_OUT=S.PX
				PY_OUT=S.PY
			ENDIF;IF MAP  EQ 'L3B9' THEN BEGIN
			
			
			
			
      IF MAP EQ 'FALKLANDS' THEN BEGIN
 ;     STOP
      FILES = FILE_SEARCH(DIR.DATA + '*.BATHYMETRY.SRTM')
      PLIST,FILES
 ;       file = FILE_SEARCH(DIR.SAVE + '*.Bathymetry.srtm.SAVE')
        FN=FILE_PARSE(FILES)
        NAME=STRUPCASE(FN.NAME)
   ;;     OK=WHERE(STRMID(NAME,4,1) EQ 'S',COUNT)
    ;;    IF COUNT GE 1 THEN FILES=FILES(OK)
        PLIST,FILES
      
      ENDIF;IF MAP EQ 'FALKLANDS' THEN BEGIN
        
        
			FOR _PX = 0L, N_ELEMENTS(PX_OUT)-1 DO BEGIN
				_PX_OUT = PX_OUT(_PX)
				_PY_OUT = PY_OUT(_PX)

      TOPO_FILE = DIR.SAVE + 'SRTM30PLUS-'+ MAP+'-PXY_'+STRTRIM(_PX_OUT,2)+'_'+STRTRIM(_PY_OUT,2) + '-TOPO.SAVE'
;				IF FILE_TEST(topo_file) EQ 1 AND DO_SRTM30_2MAP LT 2 THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;STOP
		;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
				FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
					AFILE = FILES[NTH]
					PFILE,AFILE,/R
					FN=FILE_PARSE(AFILE)
					T=STRSPLIT(FN.FIRST_NAME,'ewns.',/EXTRACT,/PRESERVE_NULL)
				  IF N_ELEMENTS(T) EQ 3 THEN BEGIN
				  	e= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'e',/extract,/preserve_null)) EQ 2
				  	w= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'w',/extract,/preserve_null)) EQ 2
				  	n= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'n',/extract,/preserve_null)) EQ 2
				  	s= N_ELEMENTS(STRSPLIT(FN.FIRST_NAME,'s',/extract,/preserve_null)) EQ 2
						LONMIN = -1.0*w*FLOAT(T[1]) + 1.0*e*FLOAT(T[1])
						LATMAX  =  1.0*n*FLOAT(T(2)) - 1.0*s*FLOAT(T(2))
						IF LATMAX EQ -60 THEN BEGIN
							LONMAX = LONMIN + 60
							LATMIN = -90
						ENDIF ELSE BEGIN
							LONMAX = LONMIN + 40
							LATMIN = LATMAX - 50
						ENDELSE
					ENDIF
					PRINT,LATMIN,LONMAX
	;STOP				
      ITOPO = TOPO_SRTM30_READ(AFILE)
					 
					IMAGE = MAP_REMAP(ITOPO, MAP_IN='GEQ_PART', LATMIN=LATMIN,LATMAX=LATMAX,LONMIN=LONMIN,LONMAX=LONMAX,MAP_OUT=MAP,PX_OUT=_PX_OUT,PY_OUT=_PY_OUT,SUBS=SUBS)
					GONE, ITOPO
					IF NTH EQ 0 THEN MAP_ARRAY = IMAGE ELSE IF SUBS[0] NE -1 THEN MAP_ARRAY(SUBS) = IMAGE(SUBS)
					;STOP
				ENDFOR

				missing_code = MISSINGS(MAP_ARRAY)

		  	OK=WHERE(MAP_ARRAY EQ MISSINGS(MAP_ARRAY),COUNT)
		  	PRINT,MAP
		  	PRINT,'MISSING DATA: '+ STRTRIM(COUNT,2)
		  	MM=MINMAX(MAP_ARRAY)
		  	PRINT, 'MINMAX TOPO: '+ STRJOIN(MM)


		;			===> Save topo + land - water
		;  		topo_file = DIR.SAVE + 'SRTM30-'+ MAP+'-PXY_'+STRTRIM(_PX_OUT,2)+'_'+STRTRIM(_PY_OUT,2) + '-TOPO.SAVE'
			  	FULLNAME=topo_file & PROD='TOPO' & ASTAT='DATA' & MISSING_CODE=MISSINGS(IMAGE) & MISSING_NAME=''
			  	SCALING='LINEAR' & INTERCEPT=0.0 & SLOPE = 1.0 & DATA_UNITS = 'Meters'
			  	NOTES = 'SRTM30_PLUS V5.0 September 16, 2008'

					STRUCT_SD_WRITE,  FULLNAME,           PROD=PROD, 										ASTAT='DATA', $
		                        IMAGE=MAP_ARRAY,    MISSING_CODE=MISSING_CODE,		MISSING_NAME=missing_NAME,$
		                        MASK=MASK,          CODE_MASK=CODE_MASK,  				CODE_NAME_MASK=CODE_NAME_MASK, $
		                        SCALING=SCALING,    INTERCEPT=INTERCEPT,  				SLOPE=SLOPE, DATA_UNITS=DATA_UNITS,$
		                        TRANSFORMATION=TRANSFORMATION, $
		                        METHOD=METHOD,$
		                        INFILE=INFILE,$
		                        NOTES=NOTES,        ERROR=ERROR


		;			===> Save bathy + water
					BATHY_SAVE = DIR.SAVE + 'SRTM30PLUS-'+ MAP+'-PXY_'+STRTRIM(_PX_OUT,2)+'_'+STRTRIM(_PY_OUT,2) + '-BATHY.SAVE'
					OK_LAND=WHERE(MAP_ARRAY GE 0)
					OK_WATER=WHERE(MAP_ARRAY LT 0)
					BATHY=MAP_ARRAY
					BATHY(OK_LAND) = 0
					BATHY(OK_WATER) = -1* BATHY(OK_WATER) ;

					FULLNAME=BATHY_SAVE & PROD='BATHY' & ASTAT='DATA' & MISSING_CODE=0 & MISSING_NAME=''
			  	SCALING='LINEAR' & INTERCEPT=0.0 & SLOPE = 1.0 & DATA_UNITS = 'Meters'
			  	MASK= BYTE(BATHY) & MASK(*) = 0B & OK=WHERE(BATHY EQ 0) & MASK[OK]=1 & CODE_MASK = '1' & CODE_NAME_MASK='LAND'
			  	NOTES = 'SRTM30_PLUS V5.0 September 16, 2008'

			  	STRUCT_SD_WRITE,  FULLNAME,           PROD=PROD, 										ASTAT='DATA', $
		                        IMAGE=BATHY,    		MISSING_CODE=MISSING_CODE,	 MISSING_NAME=missing_NAME,$
		                        MASK=MASK,          CODE_MASK=CODE_MASK,  				CODE_NAME_MASK=CODE_NAME_MASK, $
		                        SCALING=SCALING,    INTERCEPT=INTERCEPT,  				SLOPE=SLOPE, DATA_UNITS=DATA_UNITS,$
		                        TRANSFORMATION=TRANSFORMATION, $
		                        METHOD=METHOD,$
		                        INFILE=INFILE,$
		                        NOTES=NOTES,        ERROR=ERROR

		;			===> Save bathy + water  SMOOTH VERSION
		      OK_LAND=WHERE(MAP_ARRAY GE 0)
          OK_WATER=WHERE(MAP_ARRAY LT 0)          
		      FOR STH = 0L, N_ELEMENTS(SMOOTH_WIDTHS)-1 DO BEGIN
  		      SMOOTH_WIDTH = SMOOTH_WIDTHS(STH)
  					BATHY_SAVE = DIR.SAVE + 'SRTM30PLUS-'+ MAP+'-PXY_'+STRTRIM(_PX_OUT,2)+'_'+STRTRIM(_PY_OUT,2) + '-BATHY-SMOOTH_'+STRTRIM(SMOOTH_WIDTH,2)+'.SAVE'
  					SBATHY= FLOAT(MAP_ARRAY)          
            SBATHY(OK_LAND) = MISSINGS(SBATHY)  					  				
  					SBATHY = SMOOTH(SBATHY,SMOOTH_WIDTH,/NAN)
  					SBATHY(OK_LAND) = 0
  					SBATHY= FIX(ROUND(SBATHY))
  					SBATHY(OK_WATER) = -1* SBATHY(OK_WATER) ;
  					FULLNAME=BATHY_SAVE & PROD='BATHY' & ASTAT='DATA' & MISSING_CODE=0 & MISSING_NAME=''
  			  	SCALING='LINEAR' & INTERCEPT=0.0 & SLOPE = 1.0 & DATA_UNITS = 'Meters'
  			  	MASK= BYTE(BATHY) & MASK(*) = 0B & OK=WHERE(BATHY EQ 0) & MASK[OK]=1 & CODE_MASK = '1' & CODE_NAME_MASK='LAND'
  			  	NOTES = 'SRTM30_PLUS V5.0 September 16, 2008; MED_'+STRTRIM(SMOOTH_WIDTH,2)
  
  			  	STRUCT_SD_WRITE,  FULLNAME,           PROD=PROD, 										ASTAT='DATA', $
  		                        IMAGE=SBATHY,    		MISSING_CODE=MISSING_CODE,	 MISSING_NAME=missing_NAME,$
  		                        MASK=MASK,          CODE_MASK=CODE_MASK,  				CODE_NAME_MASK=CODE_NAME_MASK, $
  		                        SCALING=SCALING,    INTERCEPT=INTERCEPT,  				SLOPE=SLOPE, DATA_UNITS=DATA_UNITS,$
  		                        TRANSFORMATION=TRANSFORMATION, $
  		                        METHOD=METHOD,$
  		                        INFILE=INFILE,$
  		                        NOTES=NOTES,        ERROR=ERROR
  		  ENDFOR                      
		    GONE, IMAGE
		    GONE, BATHY
		    GONE, SBATHY
		    GONE, MAP_ARRAY
			ENDFOR	; PX_OUT
		ENDFOR ; MAPS
    ,'DO_SRTM30_2MAP'
	ENDIF;IF DO_SRTM30_2MAP GE 1 THEN BEGIN
; |||||||||||||||||||||||||||||||||||||||||||||||||||




;	*********************************
 	IF DO_MAKE_MAP_PNG GE 1 THEN BEGIN
;	*********************************
		OVERWRITE=DO_MAKE_MAP_PNG GE 2
    FILES = FILE_SEARCH(DIR.SAVE + 'SRTM30PLUS-'+'*'+'-PXY_*-BATHY*.SAVE')
		STRUCT_SD_2PNG,FILES,DIR_OUT=DIR.BROWSE,/ADD_COLORBAR,PAL='PAL_BATHY',OVERWRITE=OVERWRITE
	ENDIF
; |||||||||||||||||||||||||||||||||||||||||||||||||||


;	*********************************
 	IF DO_MAKE_MAP_PNG_PLUS_ISOBATHS GE 1 THEN BEGIN
;	*********************************
		OVERWRITE=DO_MAKE_MAP_PNG_PLUS_ISOBATHS GE 2
    FILES = FILE_SEARCH(DIR.SAVE + 'SRTM30PLUS-'+'*'+'-PXY_*-BATHY*.SAVE')
    PLIST,FILES

    LEVELS 	= 	[10,	20,	30,		40,	 	50,		60,		80,		100, 200, 	500,	1000, 2000, 3000, 4000, 5000]
	  C_colors  =	[251, 251,252, 	252,	253,	253,  252,	252, 253,  	253, 	255 ,	255, 	255,	255, 	255]
		MIN_PTS		= [5,  5,	25,  	25,		25,  	25,		25,  	25,		25,  	25,		25,  	25,		25,  	100,	100]

		INDEX = [1,3,5,7,9]
		INDEX = [4,7,8,9]
 		LEVELS=LEVELS(INDEX)
 		C_COLORS = C_COLORS(INDEX)

 	  C_ANNOTATION = NUM2STR(LEVELS,TRIM=2)

	  MIN_PTS=50
	  C_THICK=1.5

	  MED = 3
	  MIN_VALUE = 1 ; METER
;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _FILE=0L,N_ELEMENTS(FILES)-1 DO BEGIN
			AFILE=FILES(_FILE)
			FN=FILE_PARSE(AFILE)
			IF N_ELEMENTS(MED) EQ 1 THEN MED_TXT = '-MED_'+STRTRIM(MED,2) ELSE MED_TXT = ''
;			LLLLLLLLLLLLLLLLLLLLL

			PNGFILE = DIR.BROWSE+FN.FIRST_NAME+'-LEG-CONTOUR.PNG'
				IF FILE_TEST(PNGFILE) EQ 1 AND DO_MAKE_MAP_PNG_PLUS_ISOBATHS LT 2 THEN CONTINUE ; >>>>>>>>>>>>
	    	ADD_EXTRA=  'SRTM30PLUS Bathymetry'+'!C'+ 'Isobaths: '+STRJOIN(STRTRIM(LEVELS(0:3),2),',')   + ' (m)'

	    	CONFILE=1
	    	ADD_COLORBAR = 1
	    	CON=STRUCT_SD_CONTOUR(AFILE,LEVELS=levels,C_colors=C_colors, C_thick=C_thick,C_ANNOTATION=c_annotation,MIN_VALUE=MIN_VALUE, MIN_PTS=MIN_PTS,$
	    												/ADD_LAND,/ADD_COAST,/ADD_LAKES,/ADD_COLORBAR,ADD_EXTRA=ADD_EXTRA,/CONFILE,MED=MED,C_CHARSIZE=0.75,PAL='PAL_BATHY')
	    	PAL_BATHY,R,G,B
;				ALTER 255 COLORS TO BE OFF WHITE
				R(255)=224 & B(255) = 224 & G(255) = 224
				WRITE_PNG,PNGFILE,CON,R,G,B
;			ENDFOR ; MINPTS
		ENDFOR ; FILES
	ENDIF
; |||||||||||||||||||||||||||||||||||||||||||||||||||





;	**************************************
 	IF DO_SRTMV1_VS_SRTMV5 GE 1 THEN BEGIN
;	**************************************
		_OVERWRITE = DO_SRTMV1_VS_SRTMV5 GE 2

		PAL_ANOM = 'PAL_ANOMW'

		MAPS = ['NEC'];,'EC']
		PXS  = ['1024','2048']
		PYS  = ['1024','2048']

		DIRV1   = 'D:\IDL\BATHY\SRTM30\SAVE\'
		DIRV5   = 'D:\IDL\BATHY\SRTM30PLUS\SAVE\'
		DIR_OUT = 'D:\IDL\BATHY\V1V5_PLOTS\'

		FOR NTH = 0L, N_ELEMENTS(MAPS)-1 DO BEGIN
			MAP = MAPS[NTH]
			PXY = '-PXY_' + PXS[NTH] + '_' + PYS[NTH]
			APROD = 'BATHY'

			V1SAVE = FILE_SEARCH(DIRV1 + 'SRTM30-'     + MAP + PXY + '-BATHY.SAVE')
			V5SAVE = FILE_SEARCH(DIRV5 + 'SRTM30PLUS-' + MAP + PXY + '-BATHY.SAVE')

			FPV1   = FILE_PARSE(V1SAVE)
			FPV5   = FILE_PARSE(V5SAVE)

			V1PNG = DIR_OUT + FPV1.NAME + '.PNG'
			V5PNG = DIR_OUT + FPV5.NAME + '.PNG'

			V1DATA = STRUCT_SD_READ(V1SAVE,STRUCT=STRUCTV1)
			V5DATA = STRUCT_SD_READ(V5SAVE,STRUCT=STRUCTV5)

			STRUCT_SD_2PNG, V1SAVE,DIR_OUT=DIR_OUT,COLORBAR_TITLE='SRTM30_v1 - Depth (m)',/ADD_COLORBAR,/ADD_PROD,/ADD_LAND, /ADD_COAST,OVERWRITE=_OVERWRITE,SPECIAL_SCALE='5000',PAL='PAL_BATHY'
			STRUCT_SD_2PNG, V5SAVE,DIR_OUT=DIR_OUT,COLORBAR_TITLE='SRTM30PLUS_v5 - Depth (m)',/ADD_COLORBAR,/ADD_PROD,/ADD_LAND, /ADD_COAST,OVERWRITE=_OVERWRITE,SPECIAL_SCALE='5000',PAL='PAL_BATHY'

			RATIO_SAVEFILE = DIR_OUT + 'SRTM30V1-SRTM30PLUSV5-'+ MAP + PXY + '-BATHY-RATIO.SAVE'
			RATIO_PNG 		 = DIR_OUT + 'SRTM30V1-SRTM30PLUSV5-'+ MAP + PXY + '-BATHY-RATIO.PNG'
		  MAKE_ANOM_SAVES,DIR_OUT=DIR_OUT,SAVEFILE=RATIO_SAVEFILE,FILEA=FPV1.FULLNAME,FILEB=FPV5.FULLNAME,ANOM='DIF',OVERWRITE=_OVERWRITE
			USE_PROD = 'DIF'
			SPECIAL_SCALE = '30'
			COLORBAR_TITLE = 'Bathy V1-V5 Difference'
			STRUCT_SD_2PNG, RATIO_SAVEFILE,USE_PROD=USE_PROD,/ADD_COLORBAR,/ADD_PROD,$
			 								COLORBAR_TITLE=COLORBAR_TITLE,SPECIAL_SCALE=SPECIAL_SCALE,/ADD_LAND, /ADD_COAST, $
               				PAL=PAL_ANOM,	OVERWRITE=_overwrite,/QUIET ,ADD_EXTRA=ADD_EXTRA
			!P.MULTI=[0,0,1]
			PSFILE = DIR_OUT+'SRTM30V1-SRTM30PLUSV5-'+ MAP + PXY + '-BATHY-HIST2D.PS'
			PSPRINT,FILENAME=PSFILE,/COLOR,/TIMES
			XSCALE = SD_SCALES([1,250],PROD=APROD,/BIN2DATA)
			YSCALE = SD_SCALES([1,250],PROD=APROD,/BIN2DATA)
			OK = WHERE(V1DATA NE MISSINGS(V1DATA) AND V5DATA NE MISSINGS(V5DATA))
			XX = ALOG10(V1DATA[OK])
			YY = ALOG10(V5DATA[OK])

			PROD_TITLE = 'Bathymetry (m)'
			ALG_X  = 'SRTM30_v1'
			ALG_Y  = 'SRTM30PLUS_v5'
			TITLE  = MAP + '!C' + PROD_TITLE
			ALOGX  = 'ALOG10'
			ALOGY  = 'ALOG10'
			XRANGE = ALOG10([1,10000])
			YRANGE = ALOG10([1,10000])
			XTITLE = ALG_X + '  -  ' + UNITS(APROD)
			YTITLE = ALG_Y + '  -  ' + UNITS(APROD)
			!Y.OMARGIN=[2,2]
			!X.OMARGIN=[12.5,12]
			STATS_PARAMS = [2,3,4,8,10]

			PLOT_HIST2D, XX, YY, IMAGE=HIST_IMAGE, PAL=PAL, MODEL='RMA', FAST=1, CHARSIZE=1.5,$
	          BIN_X=BINX, MIN_X=XRANGE[0], MAX_X=XRANGE[1], $
	          BIN_Y=BINY, MIN_Y=YRANGE[0], MAX_Y=YRANGE[1], $
	          PX=PX, XTITLE=XTITLE, XLABEL=XLABEL, XTHICK=3, XMARGIN=XMARGIN, TITLE=TITLE, $
	          PY=PY, YTITLE=YTITLE, YLABEL=YLABEL, YTHICK=3, YMARGIN=YMARGIN, $
	          LAB_TXT=LABEL, LAB_CHARSIZE=5, STATS_CHARSIZE=1.25, ISOTROPIC=ISOTROPIC,$
	          BKG_COLOR=255, ZERO_COLOR=254, MAX_COLOR=250,$
	          REG_COLOR=0,  REG_THICK=5, ONE_COLOR=255,ONE_THICK=8, $
	          ALOGX=ALOGX,ALOGY=ALOGY,$
	          LOG_FREQ=1, POSITION=POSITION,STATS_PARAMS=STATS_PARAMS, _EXTRA=_EXTRA
			PSPRINT

			FP = FILE_PARSE(PSFILE)
			GRACE = [100,100,100,100]
			DPI = 600
			PS_PNG = DIR_OUT + 'TRIM\'+FP.NAME+'-PS_1-trim.PNG'
			IF FILE_TEST(PS_PNG) EQ 0 OR _OVERWRITE EQ 1 THEN $
				IMAGE_TRIM, PSFILE,DIR_OUT=DIR_OUT,DPI=DPI,BACKGROUND=BACKGROUND,GRACE=GRACE,OVERWRITE=_overwrite

			DIR_HIST2D_PNG=DIR_OUT+'TRIM\'
			DIRS  = [DIRV1,DIRV5,DIR_OUT,DIR_HIST2D_PNG]
			NAMES = ['PRODV1','PRODV5','DIF','HIST2D']

			FILES = [V1PNG,V5PNG,RATIO_PNG,PS_PNG]
			FN = FILE_PARSE(FILES,/ALL)
			FOR FTH = 0L, N_ELEMENTS(FILES)-1 DO BEGIN
				PNGFILE = DIR_OUT+FN(FTH).NAME+'-TRUE.PNG'
				EXIST = FILE_TEST(PNGFILE)
				IF EXIST EQ 0 OR _OVERWRITE EQ 1 THEN BEGIN
					IMAGE = READ_PNG(FILES(FTH),R,G,B)
					TRUE = IMAGE_2TRUE(IMAGE,R,G,B)
					WRITE_PNG,PNGFILE ,TRUE,R,G,B
				ENDIF
				IF FTH EQ 0 THEN PNGFILES = PNGFILE ELSE PNGFILES = [PNGFILES,PNGFILE]
			ENDFOR

			BACKGROUND = 255
			PNGFILE = DIR_OUT+'SRTM30v1-SRTM30PLUSv5-'+ MAP + PXY + '-BATHY-COMPOSITE.PNG'
			IF FILE_TEST(PNGFILE) EQ 0  OR _OVERWRITE EQ 1 THEN $
				IMAGE_WELD_PAGE,FILES=PNGFILES,ROWS=2,COLS=2,PNGFILE=pngfile,SPACE=SPACE,PX=1024,py=1024,BACKGROUND=BACKGROUND,/NOTRIM

		ENDFOR
	ENDIF ; DO_SRTMV1_VS_SRTMV5
; ||||||||||||||||||||||||||||


;*******************************
IF DO_TOPO30_GRD GE 1 THEN BEGIN
;*******************************
; ===> CODES IN THE LANDMASK
OCEAN_CODE      = 0
COAST_CODE      = 1
LAND_CODE       = 2
LAKESIDE_CODE   = 3
LAKE_CODE       = 4
; ===> READ GLOBAL TOPO30.GRD
  FILE = DIR.DATA +'TOPO30.GRD'
;   FILE = DIR.DATA +'TOPO30_GEQ.BIN'
  PFILE,FILE,/X
  TIMER
;===> DID FOLLOWING AND SAVED/COMPRESS THE DATA TO:
FILE = "C:\IDL\PROGRAMS\SRTM_GRD.SAVE"
PF,FILE,/X
DATA = IDL_RESTORE(FILE)
;GRD = TOPO_SRTM30_PLUS_READ(FILE)
TIMER,/STOP
;im =SD_SCALES(GRD,/DATA2BIN,PROD = 'TOPO')
;PAL_SW3,R,G,B
PNGFILE=DIR.BROWSE +'TOPO30_GEQ.PNG'
PFILE,PNGFILE,/W
WRITE_PNG,PNGFILE,IM,R,G,B
STOP
ENDIF;IF DO_TOPO30_GRD GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||
;
;  

;**********************************
IF DO_TOPO30_2PNG GE 1 THEN BEGIN
;**********************************
  TOPO_FILE=!S.BATHY+'SRTM30PLUS-GEQ-PXY_10800_5400-TOPO.SAVE'   
  S = IDL_RESTORE(TOPO_FILE)
  TOPO = S.TOPO.IMAGE
  BYT= PRODS_2BYTE('TOPO',TOPO)
 
  
  OCEAN_CODE      = 0
  COAST_CODE      = 1
  LAND_CODE       = 2
  LAKESIDE_CODE   = 3
  LAKE_CODE       = 4
  OK_LAND = WHERE(TOPO GE 0,COUNT_LAND,NCOMPLEMENT = COUNT_OCEAN,COMPLEMENT = OK_OCEAN)
  IF COUNT_LAND GE 1 THEN BYT(OK_LAND) = LAND_CODE
  IF COUNT_OCEAN GE 1 THEN BYT(OK_OCEAN) = OCEAN_CODE
  PAL_LANDMASK,R,G,B
  DIR_OUT = REPLACE(!S.BATHY,'SAVE','BROWSE')
  PNGFILE = DIR_OUT+'SRTM30PLUS-GEQ-PXY_10800_5400-TOPO.PNG'

  WRITE_PNG,PNGFILE,BYT,R,G,B
  PFILE,PNGFILE
  STOP

ENDIF;IF DO_TOPO30_2PNG GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||
  

;||||||||||||||||||||||||||||||||||||||||

 

;||||||||||||||||||||||||||||||||||||||||||||||||||
  END; #####################  End of Routine ################################
