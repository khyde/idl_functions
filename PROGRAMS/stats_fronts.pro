; $ID:	STATS_FRONTS.PRO,	2020-06-30-17,	USER-KJWH	$
; #########################################################################; 
PRO STATS_FRONTS, FILES, VERBOSE=VERBOSE, OVERWRITE=OVERWRITE, OUTFILE=OUTFILE
;+
; PURPOSE:  COMPUTE STATISTICS OF FRONTS FROM MULTIPLE FILES
;
; CATEGORY: STATS_ FAMILY;
;
;
; INPUTS: 
;        FILES..... FILES GENERATED WITH FRONTS_BOA EACH CONTAINING A NESTED STRUCTURE WITH:
;          GRAD_MAG (GRADIENT MAGNITUDE);
;          GRAD_X (GRADIENT IN HORIZONTAL DIRECTION);
;          GRAD_Y (GRADIENT IN VERTICAL DIRECTION);
;          GRAD_DIR (GRADIENT DIRECTION, IN DEGREES); 
;          FILTERED_PIXELS (PIXELS REMOVED BY MF3_1D_5PT).
;
;
; KEYWORDS: 
;        VERBOSE..... PRINT PROGRAM PROGRESS
;        OVERWRITE... OVERWRITE OUTPUT SAV FILES
;        OUTFILE..... FULL NAME OF THE OUTPUT AVERAGE FILE 

; OUTPUTS: A SAV FILE WITH THE STATISTICS IN A NESTED STRUCTURE
;

;
; MODIFICATION HISTORY:
;     MAY 12,2016 WRITTEN BY: J.E. O'REILLY
;                         CODE EXTRACTED FROM LEGACY PROGRAM SD_STATS_ALL AND UPDATED 
;     JUL 26,2016,JOR, USE STRUCT_READ,STRUCT_WRITE 
;     AUG 17,2016,JOR, AZIMUTH CORRECTION OF GRAD_DIR
;-
; #########################################################################

;*****************************
ROUTINE_NAME  = 'STATS_FRONTS'
;*****************************
;;===> DEFAULTS
DO_STATS = ['NUM','MEAN']
; TEMP > FOR TESTING
DIR = !S.DATASETS +'\FRONTS'+ PATH_SEP()
VERBOSE = 1
FILES = FLS(DIR,'D_200306*-2KM-NWA-CHLOR_A-BOASNR.SAV')
;ERROR WITH D_20030627
OK = WHERE_STRING(FILES,'D_20030627',COUNT)
IF COUNT EQ 1 THEN FILES = REMOVE(FILES,OK)
OUTFILE = !S.IDL_TEMP  + ROUTINE_NAME + '.SAV'
;||||||||||||||||||||||||||||||||||||||||||ABOVE FOR TESTING


IF NONE(FILES) THEN MESSAGE,'ERROR: MUST PROVIDE FILES'
IF NONE (OUTFILE) THEN MESSAGE,'ERROR: MUST PROVIDE OUTFILE'
;===> ENSURE ALL FILES HAVE THE SAME PERIOD
FA = FILE_ALL(FILES)
IF SAME(FA.PERIOD_CODE) EQ 0 THEN MESSAGE,'ERROR: PERIOD CODE OF INPUT FILES NOT THE SAME'
;

TIC
;===> STATS FOR GRAD_X
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0L,N_ELEMENTS(FILES) - 1L DO BEGIN
  FILE = FILES[NTH]
  IF KEY(VERBOSE) THEN POF,NTH,FILES
  IF KEY(VERBOSE) THEN PFILE,FILE,/R
  GRAD_X = STRUCT_READ(FILE,TAG = 'GRAD_X')
  IF NTH EQ 0 THEN START = 1 ELSE START = 0
  IF NTH EQ NOF(FILES) -1 THEN CALC = 1 ELSE CALC = 0
  GRADX = STATS_ARRAYS(GRAD_X,DO_STATS=DO_STATS,START=START,CALC = CALC,ERROR = ERROR) 
 IF ERROR NE '' THEN REPORT,FILE 
ENDFOR;FOR NTH = 0L,N_ELEMENTS(FILES) - 1L DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


;===> STATS FOR GRAD_Y
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0L,N_ELEMENTS(FILES) - 1L DO BEGIN
  FILE = FILES[NTH]
  IF KEY(VERBOSE) THEN POF,NTH,FILES
  IF KEY(VERBOSE) THEN PFILE,FILE,/R
  GRAD_Y = STRUCT_READ(FILE,TAG = 'GRAD_Y')
  IF NTH EQ 0 THEN START = 1 ELSE START = 0
  IF NTH EQ NOF(FILES) -1 THEN CALC = 1 ELSE CALC = 0
  GRADY = STATS_ARRAYS(GRAD_Y,DO_STATS=DO_STATS,START=START,CALC = CALC,ERROR = ERROR)
  IF ERROR NE '' THEN REPORT,FILE
ENDFOR;FOR NTH = 0L,N_ELEMENTS(FILES) - 1L DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ST,GRADX
ST,GRADY
MEAN_GRAD_X = GRADX.MEAN
MEAN_GRAD_Y = GRADY.MEAN
TOC


  ;     ************************************
  ;     *** CALCULATE GRADIENT MAGNITUDE ***
  ;     ************************************
  GRAD_MAG = SQRT(MEAN_GRAD_X^2 + MEAN_GRAD_Y^2)

  ;     ************************************
  ;     *** CALCULATE GRADIENT DIRECTION ***
  ;     ************************************
GRAD_DIR = ATAN(INFINITY_2NAN(MEAN_GRAD_Y), INFINITY_2NAN(MEAN_GRAD_X))

;     ===> CHANGE RADIANS TO DEGREES
GRAD_DIR = (GRAD_DIR)*!RADEG

;     ===> ADJUST TO 0-360 SCHEME ( MAKE NEGATIVE DEGREES POSITIVE)
OK=WHERE(GRAD_DIR LT 0,COUNT)
IF COUNT GE 1 THEN GRAD_DIR[OK] = 360 - ABS(GRAD_DIR[OK])

;===> CONVERT DEGREES SO THAT 0 DEGREES IS NORTH AND EAST IS 90 DEGREES
GRAD_DIR = (360 - GRAD_DIR + 90) MOD 360
MAPP = FIRST(FA.MAP)

;===>AZIMUTH CORRECTION OF GRAD_DIR
AZ_FILE = FLS(!S.MAPINFO ,MAPP +'*AZIMUTH.SAV') 
IF FILE_TEST(AZ_FILE)THEN BEGIN
  AZIMUTH = STRUCT_READ(AZ_FILE,TAG = 'AZIMUTH')
  GRAD_DIR = GRAD_DIR -AZIMUTH
ENDIF ELSE BEGIN
  REPORT,'NO AZIMUTH FILE FOR  ' + MAPP  
ENDELSE;IF FILE_TEST(AZ_FILE)THEN BEGIN


; ===> CREATE A STRUCTURE
 STRUCT = CREATE_STRUCT('GRAD_X',MEAN_GRAD_X,'GRAD_Y',MEAN_GRAD_Y,'GRAD_MAG', GRAD_MAG,  'GRAD_DIR',GRAD_DIR)
;===> WRITE STRUCT TO A SAV FILE
STRUCT_WRITE, STRUCT, FILE=OUTFILE, PROD=FIRST(FA.PROD),  INFILE=FILES, NOTES=NOTES


  
END; #####################  END OF ROUTINE ################################
