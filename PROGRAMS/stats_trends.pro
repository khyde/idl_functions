; $ID:	STATS_TRENDS.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;#############################################################################################################
	PRO STATS_TRENDS,JD,DATA,STRUCT=STRUCT,DATE_RANGE = DATE_RANGE,VERBOSE=VERBOSE,ALPHA = ALPHA,_EXTRA=_EXTRA

;
; PURPOSE: COMPUTE TRENDS AFTER GREGG,CASEY AND MCCLAIN 2005
;
; CATEGORY:	
;
; CALLING SEQUENCE: STATS_TRENDS
;
; INPUTS: JD: JULIAN DAY
;         DATA: DATA ARRAY MATCHING JD
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;      VERBOSE: PRINT PROGRESS AND SHOW PLOTS
;		   STRUCT: THE STRUCTURE FROM STATS2 LIN REGRESSION
;      DATE_RANGE: ARRAY OF 2 DATES

; OUTPUTS: 
;		
; EXAMPLES: 
; 
;
; MODIFICATION HISTORY:
;			AUG 30,2014,  WRITTEN BY J.O'REILLY 
;			SEP 1,2014,JOR ;===> ADD PCT_CHANGE VALUE TO THE STRUCTURE
;     SEP 2,2014,JOR ADDED DATE_RANGE [NORTH SEA PROBLEM]

;			
;			
;			
;#################################################################################
;-
;********************************
ROUTINE_NAME  = 'STATS_TRENDS'
;********************************
;===> DEFAULTS
IF NONE(ALPHA) THEN ALPHA = 0.05D
IF NONE(DATE_RANGE) THEN MESSAGE,'ERROR:DATE_RANGE REQUIRED'
;####################################################################

;===> FIND WITHIN DATE_RANGE
JDS = DATE_2JD(DATE_RANGE)


;OK = WHERE(JD GE JDS[0] AND JD LE JDS[1],COUNT)
;IF COUNT GE 1 THEN BEGIN
;  JD = JD[OK]
;  DATA = DATA[OK]
;  
;ENDIF ELSE BEGIN
;  GOTO, DONE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;ENDELSE;IF COUNT GE 1 THEN BEGIN

;######################################################################3
;===> DO SIMPLE LINEAR REGRESSION ON RAW DATA AFTER AVERAGING PER YEAR
PER_Y     =STATS_PERIOD(JD,DATA,  PERIOD_CODE='Y',    /QUIET)
;===> GET JD FROM PER_Y PERIOD
PER_Y_JD = PERIOD_2JD(PER_Y.PERIOD)

;===> FIND PER_Y_JD WITHIN DATE_RANGE
OK = WHERE(PER_Y_JD GE JDS[0] AND PER_Y_JD LE JDS[1],COUNT)
IF COUNT GE 1 THEN BEGIN
  PER_Y = PER_Y[OK]
  PER_Y_JD = PER_Y_JD[OK]
  X = JD_2DYEAR(PER_Y_JD)
  Y = PER_Y.MEAN
  ANNUAL_MEAN = MEAN(Y,/NAN)
  S = STATS2(X,Y,MODEL = 'LSY',ALPHA = ALPHA)
  PRED =  S.INT + X*S.SLOPE 
  PCT_CHANGE = 100*(LAST(PRED)-FIRST(PRED))/FIRST(PRED)
ENDIF;
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



;##################################################################
;1) "SUBTRACTING MONTHLY CLIMATOLOGICAL MEAN VALUES FROM EACH MONTH 
;   TO REMOVE THE BACKGROUND (PRODUCING MONTHLY ANOMALIES)"
PER_M     =STATS_PERIOD(JD,DATA,  PERIOD_CODE='M',    /QUIET)
IF KEY(VERBOSE) THEN PN,PER_M,' MONTHS IN PER_M'
; ===> M > MONTH
PER_MONTH =STATS_PERIOD(PER_M.JD,PER_M.MEAN,        PERIOD_CODE='MONTH',/STD,/QUIET)
IF KEY(VERBOSE) THEN BEGIN
  PN,PER_MONTH,' MONTHS IN PER_MONTH'
  ST,PER_MONTH
  PL,PER_MONTH.PERIOD
  PL,PER_MONTH.MEAN
ENDIF;IF KEY(VERBOSE) THEN BEGIN

;===> CKECK THE MONTH MEANS FROM STATS_PERIOD FOR ALL OF JULY
;FFFFFFFFFFFFFFFFFFFFFF
FOR M = 1,12 DO BEGIN
  OK_WHERE = WHERE(FIX(DATE_2MONTH(JD_2DATE(JD))) EQ M,COUNT_WHERE) 
  MEAN_WHERE= DOUBLE(MEAN(DATA(OK_WHERE),/NAN)) 
  IF NOT FINITE(MEAN_WHERE) THEN MEAN_WHERE= MISSINGS(MEAN_WHERE)
  OK_STATS_PERIOD = WHERE(FIX(DATE_2MONTH(PERIOD_2DATE(PER_MONTH.PERIOD))) EQ M,COUNT)
  MEAN_STATS_PERIOD = PER_MONTH(OK_STATS_PERIOD).MEAN
  IF MEAN_WHERE NE MEAN_STATS_PERIOD THEN BEGIN
    MESSAGE,'ERROR: MEANS DISAGREE'
  ENDIF ELSE BEGIN
  IF KEY(VERBOSE) THEN  P, + ' MEANS FROM STATS_PERIOD & WHERE(N=' +  ROUNDS(COUNT_WHERE)+ ')'+ '  FOR   '+ MONTH_NAMES(M) + '  AGREE'
  ENDELSE;IF MEAN_WHERE NE MEAN_STATS_PERIOD THEN BEGIN
ENDFOR;FOR M = 1,12 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFF
;
;########################################################################
; ===> ANOMALY (M - MONTH)
TEMP=CREATE_STRUCT('PERIOD_ANOM','','PERIOD_N',0L,'PERIOD_MEAN',MISSINGS(PER_M.MEAN),'ANOM',MISSINGS(PER_M.MEAN))
S=REPLICATE(TEMP,N_ELEMENTS(PER_M))
PER_M = STRUCT_MERGE(PER_M,S)
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _MONTH = 0,N_ELEMENTS(PER_MONTH)-1  DO BEGIN
  SUBS=WHERE_SETS_SUBS(PER_MONTH(_MONTH))
  PER_M(SUBS).PERIOD_ANOM = PER_MONTH(_MONTH).PERIOD
  PER_M(SUBS).PERIOD_N    = PER_MONTH(_MONTH).N
  PER_M(SUBS).PERIOD_MEAN = PER_MONTH(_MONTH).MEAN
  PER_M(SUBS).ANOM = PER_M(SUBS).MEAN - PER_MONTH(_MONTH).MEAN
ENDFOR;FOR _MONTH = 0,N_ELEMENTS(PER_MONTH)-1  DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

X = DATE_2JD(PERIOD_2DATE(PER_M.PERIOD))
Y = PER_M.ANOM
IF KEY(VERBOSE) THEN BEGIN
  XA = DATE_AXIS(X,/YEAR)

  PLT_XY,X,Y,XTICKV = XA.TICKV,XTICKNAME=XA.TICKNAME,XRANGE = MINMAX(X),AXES_FONT_SIZE = 8,$
  SYM_COLOR = 'RED',SYM_THICK = 5,FILE = !S.IDL_TEMP + 'PER_M_ANOM.PNG',/GRID_ADD
  WAIT,4
  CSV_WRITE,!S.IDL_TEMP + 'PER_M.CSV',PER_M

ENDIF;IF KEY(VERBOSE) THEN BEGIN

IF KEY(VERBOSE) THEN PRINT,'MEAN OF ALL MONTHLY ANOMALIES SHOULD BE ZERO =  '+ROUNDS(MEAN(PER_M.ANOM,/NAN),4)
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;===> CHECK MONTHLY ANOMALY FOR JUNE
OK = WHERE(FIX(DATE_2MONTH(PERIOD_2DATE(PER_M.PERIOD))) EQ 6,COUNT) 
ANOM = PER_M[OK].ANOM
OK_MONTH = WHERE(FIX(DATE_2MONTH(PERIOD_2DATE(PER_MONTH.PERIOD))) EQ 6,COUNT) 
MEAN_MONTH = PER_MONTH(OK_MONTH).MEAN
OK_M = WHERE(FIX(DATE_2MONTH(PERIOD_2DATE(PER_M.PERIOD))) EQ 6,COUNT) 
DATA_M = PER_M(OK_M).MEAN
ANOM_M = DATA_M -MEAN_MONTH
ANOM_STATS_PERIOD = PER_M(OK_M).ANOM
JD_ANOM_STATS_PERIOD = PER_M(OK_M).JD
ANOM_DIF = MEAN(ANOM_STATS_PERIOD-ANOM_M,/NAN)

IF FINITE(ANOM_DIF) AND ANOM_DIF NE 0.0 THEN BEGIN
    MESSAGE,'ERROR: ANOMS DISAGREE' 
 ENDIF   ELSE BEGIN  
 IF KEY(VERBOSE) THEN PRINT,'ANOMS FOR JUNE AGREE'
 ENDELSE;IF FINITE(ANOM_DIF) AND ANOM_DIF NE 0.0 THEN BEGIN


;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
;#############################################################
;2) AVERAGING THE 12 MONTHLY ANOMALIES OF EACH YEAR 
;   TO REMOVE THE SEASONAL SIGNAL 
;   (PRODUCING ANNUAL MEAN ANOMALIES)
;   
;   ;===> JD IS JD_ANOM_STATS_PERIOD [SEE ABOVE]
PER_Y_ANOM     =STATS_PERIOD(JD_ANOM_STATS_PERIOD,ANOM_STATS_PERIOD,  PERIOD_CODE='Y',    /QUIET)
IF KEY(VERBOSE) THEN PN,PER_Y_ANOM,'  YEARS IN PER_Y_ANOM'
IF KEY(VERBOSE) THEN CSV_WRITE,!S.IDL_TEMP + 'PER_Y_ANOM.CSV',PER_Y_ANOM
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

X = JD_ANOM_STATS_PERIOD
Y = PER_Y_ANOM.MEAN
IF KEY(VERBOSE) THEN BEGIN
  XA = DATE_AXIS(X,/YEAR)
  PLT_XY,X,Y,XTICKV = XA.TICKV,XTICKNAME=XA.TICKNAME,XRANGE = MINMAX(X),AXES_FONT_SIZE = 8,$
  SYM_COLOR = 'GREEN',SYM_THICK = 5,FILE = !S.IDL_TEMP + 'PER_Y_ANOM.PNG',/GRID_ADD,$
  TITLE = 'PER_Y_ANOM',YTITLE = 'PER_Y_ANOM.MEAN',/STATS_ADD,/REG_ADD
ENDIF;IF KEY(VERBOSE) THEN BEGIN
 
;#################################################################
;  3) COMPUTING BEST-FIT LINEAR TRENDS USING REGRESSION ANALYSIS
;  4) ASSESSING STATISTICAL SIGNIFICANCE OF THE TRENDS
STRUCT=STATS2(X,Y,MODEL = 'LSY',ALPHA=ALPHA)
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;===> ADD PCT_CHANGE VALUE TO THE STRUCTURE
STRUCT = CREATE_STRUCT(STRUCT,'ANNUAL_MEAN',ANNUAL_MEAN,'PCT_CHANGE',PCT_CHANGE)

DONE:


END; #####################  END OF ROUTINE ################################
