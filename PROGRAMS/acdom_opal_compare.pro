; $ID:	ACDOM_OPAL_COMPARE.PRO,	2020-07-01-12,	USER-KJWH	$
;+
; ######################################################################### 
  PRO ACDOM_OPAL_COMPARE

; PURPOSE:  THIS IS A MAIN ROUTINE TO COMPARE ACDOM PRODUCTS AND THE OPAL PP OUTPUT

; CATEGORY: 
  
; 

; NOTES:
; 
;
; HAS CONTROLLING WHICH PROCESSING STEPS TO DO AND WHAT TO DO IN THE STEP

; '' NULL STRING   = (DO NOT DO THE STEP)
; ANY ONE OR COMBINATION OF THESE LETTERS[IN ANY ORDER] :  Y, O, V, R, S, E, F
; WHERE:
; ANY LETTER WILL DO THE STEP
; Y = YES DO THE STEP
; O = OVERWRITE ANY OUTPUT
; V = VERBOSE [ALLOW PRINT STATEMENTS]
; R = REVERSE THE PROCESSING ORDER OF FILES IN THE STEP
; S = STOP AT THE BEGINNING OF THE STEP AND STEP THROUGH EACH COMMAND IN THE STEP
; E = STOP THE AT THE END OF THE STEP
; F = PROCESS ONLY THE FIRST FOUR FILES
;###################################################################################


; MODIFICATION HISTORY:
;     JAN 21, 2015 WRITTEN BY: K.J.W. Hyde, NOAA, Narragnsett, RI 02882 kimberly.hyde@noaa.gov
;     
; #########################################################################

;*****************************
  ROUTINE_NAME  = 'ACDOM_OPAL_COMPARE'
;*****************************


;===> #####   SWITCHES 
  DO_REMAP_ACDOM_KM				=	''
  DO_COPY_FILES           = ''
  DO_SUBAREAS             = ''
  DO_NEC_COMPARE          = 'Y'
  DO_STEP_3       = ''
  
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  SL = GET_PATH()
  DIR_PROJECTS = !S.PROJECTS + 'ACDOM' + SL
  DIR_DATA     = DIR_PROJECTS + 'DATA' + SL
  DIR_PLOTS    = DIR_PROJECTS + 'PLOTS' + SL
  DIR_TEST,[DIR_DATA,DIR_PLOTS]


;***************************
IF KEY(DO_REMAP_ACDOM_KM) THEN BEGIN
;***************************
  , 'DO_REMAP_ACDOM_KM'
  IF HAS(DO_REMAP_ACDOM_KM,'S')  THEN STOP,DO_REMAP_ACDOM_KM
  OVERWRITE = HAS(DO_REMAP_ACDOM_KM,'O') 
  VERBOSE = HAS(DO_REMAP_ACDOM_KM,'V')
  FILES = FLS(DIR_DATA + 'SMI' + SL + '*.*'); FILL IN THE BLANKS
  IF KEY(FILES) AND HAS(DO_REMAP_ACDOM_KM,'R') THEN FILES = REVERSE(FILES)
  IF KEY(FILES) AND HAS(DO_REMAP_ACDOM_KM,'F') THEN FILES = FILES(0:3)
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  MAPS = ['GEQ','NEC']
  FOR MTH = 0, N_ELEMENTS(MAPS)-1 DO BEGIN
    MS = MAPS_SIZE(MAPS(MTH))
    DIR_OUT = DIR_DATA + MAPS(MTH) + SL + 'A_CDOM_443-KM' + SL & DIR_TEST, DIR_OUT
    FOR NTH = 0, N_ELEMENTS(FILES)-1 DO BEGIN
       FILE = FILES[NTH] 
       FP = PARSE_IT(FILE)
       OUTFILE = DIR_OUT + FP.PERIOD + '-SA-' + MAPS(MTH) + '-A_CDOM_443-KM-MEAN.SAVE'
       IF FILE_MAKE(FILE,OUTFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
       IF KEY(V) THEN PFILE,FILE,/U
       IF KEY(V) THEN POF,NTH,FILES
       D = STATS_READ(FILE)
       D = A_CDOM_300_2_A_CDOM_443(D)
       DD = MAP_REMAP(D,MAP_IN='SMI',MAP_OUT=MAPS(MTH))
       STRUCT_SD_WRITE,OUTFILE,IMAGE=DD,PROD='A_CDOM_443',ALG='KM',MAP=MS.MAP,ASTAT='MEAN',INFILE=FILE
    ENDFOR ; FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ENDFOR
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  IF HAS(DO_STEP_1,'E')  THEN STOP,DO_STEP_1
  , 'DO_REMAP_ACDOM_KM'
ENDIF ; IF DO_REMAP_ACDOM_KM GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||
; 

;
;***************************
IF KEY(DO_COPY_FILES) THEN BEGIN
;***************************
  , 'DO_COPY_FILES'
  IF HAS(DO_COPY_FILES,'S')  THEN STOP,DO_COPY_FILES
  OVERWRITE = HAS(DO_COPY_FILES,'O') 
  V = HAS(DO_COPY_FILES,'V')
  FILES = FLS(' '); FILL IN THE BLANKS
  IF KEY(FILES) AND HAS(DO_COPY_FILES,'R') THEN FILES = REVERSE(FILES)
  IF KEY(FILES) AND HAS(DO_COPY_FILES,'F') THEN FILES = FILES(0:3)
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  DIRS = !S.DATASETS + ['OC-MODIS-4/GEQ/STATS/','OC-MODIS-LAC/NEC/STATS/']
  OUTS = DIR_DATA + ['GEQ','NEC'] + SL 
  PRODS = LIST(['A_CDOM_443-GSM','A_CDOM_443-GIOP'],['A_CDOM_443-MAN_MLR'])
  REMAPS = [1,0]
  FOR MTH = 0, N_ELEMENTS(DIRS)-1 DO BEGIN
    APRODS = PRODS(MTH)
    FOR PTH = 0, N_ELEMENTS(APRODS)-1 DO BEGIN  
      DIR_OUT = OUTS(MTH) + APRODS(PTH) + SL & DIR_TEST,DIR_OUT
      FILES = FLS(DIRS(MTH) + APRODS(PTH) + SL + ['M_2003*','A_*'] + APRODS(PTH) + '*MEAN.SAVE')
    ;  FILE_COPY,FILES,DIR_OUT,/VERBOSE,/ALLOW_SAME
      IF REMAPS(MTH) EQ 0 THEN CONTINUE
      FOR NTH = 0, N_ELEMENTS(FILES)-1 DO BEGIN
        FILE = FILES[NTH] 
        FP = PARSE_IT(FILE)
        DIROUT = REPLACE(DIR_OUT,'GEQ','NEC') & DIR_TEST,DIROUT
        OUTFILE = DIROUT + REPLACE(FP.NAME_EXT,'GEQ','NEC')
        IF FILE_MAKE(FILE,OUTFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
        IF KEY(V) THEN PFILE,FILE,/U
        IF KEY(V) THEN POF,NTH,FILES
        D = STRUCT_SD_READ(FILE)
        DD = MAP_REMAP(D,MAP_IN='GEQ',MAP_OUT='NEC')
        STRUCT_SD_WRITE,OUTFILE,IMAGE=DD,PROD='ACDOM_443',ALG=VALIDS('ALGS',APRODS(PTH)),MAP='NEC',ASTAT='MEAN',INFILE=FILE
      ENDFOR ; FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    ENDFOR   
  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  IF HAS(DO_COPY_FILES,'E')  THEN STOP,DO_COPY_FILES
  , 'DO_COPY_FILES'
ENDIF ; IF DO_COPY_FILES GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(DO_SUBAREAS) THEN BEGIN
  ;*******************************
  , 'DO_SUBAREAS'
  IF HAS(DO_SUBAREAS,'S') THEN STOP,DO_SUBAREAS & OVERWRITE = HAS(DO_SUBAREAS,'O') & VERBOSE = HAS(DO_SUBAREAS,'V')
  MAPS = ['GEQ','NEC']
  PRODS = ['A_CDOM_443','A_CDOM_443']
  ALGS = LIST(['KM','GIOP','GSM'],['KM','GIOP','GSM','MAN_MLR'])

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR MTH=0, N_ELEMENTS(MAPS)-1 DO BEGIN
    AMAP = MAPS(MTH)
    CASE AMAP OF
      'NEC':  BEGIN & SUBAREAS = 'MASK_SUBAREA-NEC-PXY_1024_1024-' + ['ECOREGIONS_FULL_NO_ESTUARIES','ESTUARY_SHELF_LME'] & CODES = ['5,6,7,8','32','1,2'] & END 
      'GEQ':  BEGIN & SUBAREAS = 'MASK_SUBAREA-GEQ-PXY_4096_2048-LME_TOTAL' & CODES = [] & END
    ENDCASE

    APROD = PRODS(MTH)  
    ALG = ALGS(MTH)
    FILES = []
    FOR N=0, N_ELEMENTS(ALG)-1 DO FILES = [FILES,FLS(DIR_DATA + AMAP + SL + APROD + '-' + ALG(N) + SL + '*' + APROD + '-' + ALG(N) + '*MEAN.SAVE')]  
    DIR_OUT = DIR_DATA + AMAP + SL + 'SUBAREAS' + SL & DIR_TEST,DIR_OUT
    
   ; SUBAREAS_EXTRACT,FILES,MAPS=AMAP,DIR_SHP=DIR_SHP,DIR_OUT=DIR_OUT,AROUND=AROUND
   FOR STH=0, N_ELEMENTS(SUBAREAS)-1 DO BEGIN
     OUT = DIR_OUT + 'SUBAREAS_EXTRACT-' + SUBAREAS(STH) + '.CSV'
     IF FILE_MAKE(FILES,OUT,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
     SUBAREA_FILE  = !S.SUBAREAS + SUBAREAS(STH) +'.SAVE'
     IF CODES NE [] THEN SUBAREA_CODES = FIX(STRSPLIT(CODES(STH),',',/EXTRACT)) ELSE SUBAREAS_CODES = []
     TS_SUBAREAS, FILES, SUBAREA_FILE=SUBAREA_FILE,SAVEFILE=OUT,SUBAREA_CODES=SUBAREA_CODES,DIR_OUT=DIR_OUT,/CSV,OVERWRITE=OVERWRITE,PROD_LABEL=PROD_LABEL
   ENDFOR
  
   ; SUBAREAS_PLOT;,FILES,MAPS=MAPS,DIR_SHP=DIR_SHP,DIR_OUT=DIR_OUT,AROUND=AROUND
  
    ENDFOR;FOR NTH = 0,N_ELEMENTS(DATASETS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDIF;IF KEY(DO_SUBAREAS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||

; *******************************************************
 IF KEY(DO_NEC_COMPARE) THEN BEGIN
; *******************************************************
  , 'DO_NEC_COMPARE'
  IF HAS(DO_NEC_COMPARE,'S') THEN STOP,DO_NEC_COMPARE & OVERWRITE = HAS(DO_NEC_COMPARE,'O') & VERBOSE = HAS(DO_NEC_COMPARE,'V')
  BUFFER = 0

  DIR_DATA  = DIR_DATA + 'NEC'
  DIR_SUBS  = DIR_DATA + SL + 'SUBAREAS' + SL
  DIR_PLOTS = DIR_DATA + SL + 'PLOTS'    + SL & DIR_TEST,DIR_PLOTS

  DATE_RANGE = DATE_2JD(['19970101','20131231'])
  SUBAREAS   = ['ESTUARY_SHELF_LME','ECOREGIONS_FULL_NO_ESTUARIES']
  PROD       = 'A_CDOM_443' 
  ALGS       = ['KM','MAN_MLR','GIOP','GSM']
  COLORS     = ['RED','BLUE','ORANGE','GREEN']
  PERIODS    = ['M','A']
  CODES      = ['NE US Shelf (0-200m)','MID-ATLANTIC BIGHT','GEORGES BANK','GULF OF MAINE','SCOTIAN SHELF']
  DATES      = ['2003']

  PY = [0,100]
  WIDTH = 6

  S1 = CSV_READ(DIR_SUBS + 'SUBAREAS_EXTRACT-MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_FULL_NO_ESTUARIES.CSV')
  S2 = CSV_READ(DIR_SUBS + 'SUBAREAS_EXTRACT-MASK_SUBAREA-NEC-PXY_1024_1024-ESTUARY_SHELF_LME.CSV')
  SS = STRUCT_CONCAT(S1,S2)
  TAGS = TAG_NAMES(SS)
  
  PNGFILE = FIX_PATH(DIR_PLOTS+'A_CDOM_443-NEC-TIMESERIES.PNG')
  W = WINDOW(DIMENSIONS=[1400,1000])
  FOR N=0, N_ELEMENTS(CODES)-1 DO BEGIN
    
   ; D = TEXT(0.5,0.96,DATES(0)+'!C'+CODES(N),FONT_SIZE=14,ALIGNMENT=0.5)

    AXM = DATE_AXIS([20030101,20031231],/MONTH,/MID,/NO_MONTH_YEAR) 
    AXA = DATE_AXIS([20020101,20140101],/YEAR,/YY)
    YRANGE = [0,0.25]

    TOP    = [0.99, 0.79, 0.59,.39,.19]
    LEFT   = 0.06
    RIGHT  = 0.47
    PLDIF  = 0.16
    SPACE  = 0.05

    YTITLE = UNITS('A_CDOM_443')
    FOR P=0, N_ELEMENTS(CODES)-1 DO BEGIN
     
      MPOS = [LEFT, TOP(P)-PLDIF,RIGHT, TOP(P)]
      APOS = [LEFT+.5, TOP(P)-PLDIF,RIGHT+.5, TOP(P)]

      OKM = WHERE(SS.PERIOD_CODE EQ 'M' AND SS.SUBAREA_NAME EQ CODES(N))
      FOR A=0, N_ELEMENTS(ALGS)-1 DO BEGIN
        POS = WHERE(TAGS EQ 'MEAN_A_CDOM_443_'+ALGS(A))
        IF A EQ 0 THEN PLT = BARPLOT(JD_ADD(PERIOD_2JD(SS(OKM).PERIOD),15,/DAY),FLOAT(SS(OKM).(POS)),INDEX=0,NBARS=N_ELEMENTS(ALGS),YMINOR=2,YTICKLEN=0.01,YRANGE=YRANGE,POSITION=MPOS,$
                             YTITLE=YTITLE,FILL_COLOR=COLORS(A), BUFFER=BUFFER,/CURRENT,XRANGE=AXM.JD,XTICKVALUES=AXM.TICKV,XTICKNAME=AXM.TICKNAME,XMINOR=3) ELSE $
                       PLT = BARPLOT(JD_ADD(PERIOD_2JD(SS(OKM).PERIOD),15,/DAY),FLOAT(SS(OKM).(POS)),INDEX=A,NBARS=N_ELEMENTS(ALGS),FILL_COLOR=COLORS(A),POSITION=MPOS,/OVERPLOT,/CURRENT)
       LEG = TEXT(LEFT+0.01,TOP(P)-0.02-(A*0.018),ALGS(A),COLOR=COLORS(A),FONT_SIZE=12,TARGET=PLT) 
      ENDFOR
      LAB = TEXT(RIGHT-0.01,TOP(P)-0.02,CODES(P),FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='BLACK',TARGET=PLT,ALIGNMENT=1)
      
      OKA = WHERE(SS.PERIOD_CODE EQ 'A' AND SS.SUBAREA_NAME EQ CODES(N))
      FOR A=0, N_ELEMENTS(ALGS)-1 DO BEGIN
        POS = WHERE(TAGS EQ 'MEAN_A_CDOM_443_'+ALGS(A))
        IF A EQ 0 THEN PLT = BARPLOT(PERIOD_2JD(SS(OKA).PERIOD),FLOAT(SS(OKA).(POS)),INDEX=0,NBARS=N_ELEMENTS(ALGS),YMINOR=2,YTICKLEN=0.01,YRANGE=YRANGE,POSITION=APOS,$
          YTITLE=YTITLE,FILL_COLOR=COLORS(A), BUFFER=BUFFER,/CURRENT,XRANGE=AXA.JD,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XMINOR=3) ELSE $
          PLT = BARPLOT(PERIOD_2JD(SS(OKA).PERIOD),FLOAT(SS(OKA).(POS)),INDEX=A,NBARS=N_ELEMENTS(ALGS),FILL_COLOR=COLORS(A),POSITION=APOS,/OVERPLOT,/CURRENT)
        LEG = TEXT(LEFT+0.51,TOP(P)-0.02-(A*0.018),ALGS(A),COLOR=COLORS(A),FONT_SIZE=12,TARGET=PLT) 
      ENDFOR
      LAB = TEXT(RIGHT+0.49,TOP(P)-0.02,CODES(P),FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='BLACK',TARGET=PLT,ALIGNMENT=1)
         
      
    ENDFOR
    W.SAVE,PNGFILE,RESOLUTION=300
    W.CLOSE
  ENDFOR
  STOP
ENDIF ; DO_NEC_COMPARE

;***************************
IF KEY(DO_STEP_3) THEN BEGIN
  ;***************************
  , 'DO_STEP_3'
  IF HAS(DO_STEP_3,'S')  THEN STOP,DO_STEP_3
  OVERWRITE = HAS(DO_STEP_3,'O')
  V = HAS(DO_STEP_3,'V')
  FILES = FLS(' '); FILL IN THE BLANKS
  IF KEY(FILES) AND HAS(DO_STEP_3,'R') THEN FILES = REVERSE(FILES)
  IF KEY(FILES) AND HAS(DO_STEP_3,'F') THEN FILES = FILES(0:3)
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES[NTH]
    IF KEY(V) THEN PFILE,FILE,/U
    IF KEY(V) THEN POF,NTH,FILES
  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  IF HAS(DO_STEP_3,'E')  THEN STOP,DO_STEP_3
  , 'DO_STEP_3'
ENDIF ; IF DO_STEP_3 GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||


END; #####################  END OF ROUTINE ################################
