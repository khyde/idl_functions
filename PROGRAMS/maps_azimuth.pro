; $ID:	MAPS_AZIMUTH.PRO,	2020-07-08-15,	USER-KJWH	$
	FUNCTION MAPS_AZIMUTH, MP, LONS=LONS, LATS=LATS, PNG=PNG, OUTFILE=OUTFILE, DIR_OUT=DIR_OUT, OVERWRITE=OVERWRITE
;+
; NAME:
;		MAPS_AZIMUTH
;
; PURPOSE:
;		THIS FUNCTION CALCULATES THE AZIMUTH IN DEGREES EAST OF NORTH FOR EACH PIXEL 
;		IN A STANDARD NARRAGANSETT MAP.
;
; CATEGORY:
;		MAPS
;
; CALLING SEQUENCE:
;		RESULT = MAPS_AZIMUTH(MP)
;
; INPUTS:
;
; KEYWORD PARAMETERS:
;   MP: THE NAME OF A NARR STANDARD MAP (E.G. NEC, EC, GEQ)
;   LONS: LONGITUDE VALUES FOR UNMAPPED ARRAY (OPTIONAL)
;   LATS: LATIITUDE VALUES FOR UNMAPPED ARRAY (OPTIONAL)
;   OUTFILE: OPTIONAL OUTPUT
;   DIROUT: OPTIONAL LOCATION TO SAVE THE FILE
;   OVERWRITE: OVERWRITE SAVED PIXEL AREA MAP IF EXISTS
;   PNG: WRITE THE AZIMUTH IMAGE TO A PNGFILE USING IMGR
;
; OUTPUTS:
;		DOUBLE PRECISION IMAGE ARRAY WITH THE AZIMUTHS FOR EACH PIXEL
;
; EXAMPLE:
;		AZIMUTH = MAPS_AZIMUTH('NEC',/PNG)
;
; MODIFICATION HISTORY:
;			WRITTEN JAN 28, 2007 BY J.O'REILLY, 28 TARZWELL DRIVE, NMFS, NOAA 02882 (JAY.O'REILLY@NOAA.GOV)
;			JUN 20, 2016 - JOR:  Updated functions
;			                     Removed key DOUBLE and made DOUBLE the default
;			                     Renamed to MAPS_AZIMUTH
;			JUN 21, 2016 - KJWH: Made to work with input LONS and LATS 
;			                     Removed IMG keyword (never used)
;			                     Changed MAP to MP to avoid conflicts with IDL's MAP
;			                     Removed the COMMON block and INIT & SAV keywords - now saving the structure to !S.MAPAREAS and will read it if available 
;			                     Added LON/LAT constants
;			                     Changed MAPS_IMAGE_2LONLAT to MAPS_2LONLAT  
;			                     Removed /METERS from the MAPS_2POINTS call because it will only return the distance and not the angle when /METERS is provided
;			                     Added /COAST_ONLY to the output PNG  
;			                     Added a check to make sure the image is correctly orinetated North/South - needs to verified
;     JUL 09, 2016 - JEOR: Removed STOP and question
;     JUL 09, 2016 - JEOR: Added PRINT AZIMUTH and LONS LATS
;     JUL 19, 2016 - KJWH: Changed !S.MAPAREAS to !S.MAPINFO
;                          Removed PRINT and LONLAT checks
;     JUL 10, 2019 - KJWH: Added steps to create a L3B version from the corresponding GS file                     
;-
;****************************
ROUTINE_NAME = 'MAPS_AZIMUTH'
;****************************

; ===> CONSTANTS
  LATMAX = 90.0
  LATMIN = -90.0
  LONMAX = 180.0
  LONMIN = -180.0

 	IF NONE(MP) THEN MP = 'LONLAT'  ELSE  MP = STRUPCASE(MP)
 	IF MP EQ 'LONLAT' AND NONE(LONS) THEN MESSAGE,'ERROR: IF MAP IS NOT SPECIFIED, MUST PROVIDE LONS'
  IF MP EQ 'LONLAT' AND NONE(LATS) THEN MESSAGE,'ERROR: IF MAP IS NOT SPECIFIED, MUST PROVIDE LATS'

; ===> IF PX, PY NOT PROVIDED GET DEFAULT SIZES FOR THIS MAP
  MS = MAPS_SIZE(MP) 
  IF MS.ERROR EQ 1 THEN MS = SIZEXYZ(LONS)
  PX = MS.PX
  PY = MS.PY
    
; ===> MAKE THE NAME FOR THE SAVEFILE
  IF NONE(DIR_OUT) THEN DIR_OUT = !S.MAPINFO
  IF NONE(OUTFILE) AND MP NE 'LONLAT' THEN OUTFILE = DIR_OUT + STRUPCASE(MP) + '-PXY_' + ROUNDS(PX) + '_' + ROUNDS(PY) + '-AZIMUTH.SAV'    
  
; ===> IF MAPS_AZIMUTH-MAP FILE ALREADY EXISTS THEN READ AND RETURN
  IF MP NE 'LONLAT' THEN IF FILE_TEST(OUTFILE) EQ 1 AND ~KEY(OVERWRITE) THEN BEGIN
    D = STRUCT_READ(OUTFILE,STRUCT=STRUCT)
    RETURN, D
  ENDIF
  
; ===> IF MP is L3B THEN LOOK FOR GS SAVEFILE  
  IF IS_L3B(MP) THEN BEGIN
    GS = MAPS_L3B_GET_GS(MP)
    MS = MAPS_SIZE(GS,PX=GPX,PY=GPY)
    GSOUT = DIR_OUT + STRUPCASE(GS) + '-PXY_' + ROUNDS(GPX) + '_' + ROUNDS(GPY) + '-AZIMUTH.SAV'  
    IF EXISTS(GSOUT) AND ~KEY(OVERWRITE) THEN BEGIN
      D = STRUCT_READ(GSOUT,STRUCT=STRUCT,MAP_OUT=MP)
      STRUCT_WRITE, STRUCT, FILE=OUTFILE, PROD='AZIMUTH', DATA_UNITS='DEGREES (EAST OF NORTH)',/OVERWRITE
      RETURN, D     
    ENDIF
  ENDIF
  
; ===> GET THE LONS AND LATS FOR THE CENTER OF EACH MAP PIXEL
  IF MP NE 'LONLAT' AND VALIDS('MAPS',MP) NE '' THEN BEGIN
    LL = MAPS_2LONLAT(MP)
    LONS = LL.LONS
    LATS = LL.LATS
    GONE, LL
  ENDIF
  
; ===> CHECK THAT LATS ARE ALIGNED NORTH TO SOUTH
  LATS_TOP = LATS(*,-1)
  LATS_BOT = LATS(*,0)
  OK = WHERE(LATS_BOT GT LATS_TOP, COUNT_LATS)

;  IF COUNT_LATS GT 0 THEN MESSAGE, 'CHECK ORIENTATION OF INPUT COORDINATES TO MAKE SURE THE TOP OF THE IMAGE IS NORTH'
  
; ===> FILL IN ANY MISSING LON/LAT PIXELS
  OK = WHERE(LONS LT LONMIN OR LONS GT LONMAX, COUNT)
  IF COUNT GE 1 THEN BEGIN
    FOR L=0, PX-1 DO BEGIN
      OK = WHERE(LONS(L,*) GE LONMIN AND LONS(L,*) LE LONMAX, COUNT,COMPLEMENT=COMPLEMENT,NCOMPLEMENT=NCOMPLEMENT)
      IF NCOMPLEMENT GE 1 THEN BEGIN
        LON = REFORM(LONS(L,*))
        XX = FINDGEN(PY)
        _X = XX[OK]
        _Y = LON[OK]
        LONS(L,*) = INTERPOL(_Y,_X,XX)
      ENDIF
      OK = WHERE(LATS(L,*) GE LATMIN AND LATS(L,*) LE LATMAX, COUNT,COMPLEMENT=COMPLEMENT,NCOMPLEMENT=NCOMPLEMENT)
      IF NCOMPLEMENT GE 1 THEN BEGIN
        LAT = REFORM(LATS(L,*))
        XX = FINDGEN(PY)
        _X = XX[OK]
        _Y = LAT[OK]
        LATS(L,*) = INTERPOL(_Y,_X,XX)
      ENDIF
    ENDFOR
  ENDIF
    
; ===> CREATE AZIMUTH ARRAY    
	AZIMUTH = DBLARR(PX,PY)

; ===> REFORM THE LONS AND LATS	
	LON=REFORM(LONS, PX, PY)
	LAT=REFORM(LATS, PX, PY)
	
	FIRST_PY 	= 0L
	LAST_PY 	= PY-1L ;

; ===> LOOP THROUGH THE PY'S
  COUNTER = 0 & COUNT_ERROR = 0
	FOR _PY = 0L,PY-1L DO BEGIN
		BOT = FIRST_PY > (_PY-1L) < LAST_PY
		TOP = FIRST_PY > (_PY+1L) < LAST_PY

; ===> LOOP THROUGH THE PX'S
		FOR _PX = 0L,PX-1L DO BEGIN
		  LON0=LON(_PX,BOT)
		  LAT0=LAT(_PX,BOT)
		  LON1=LON(_PX,TOP)
		  LAT1=LAT(_PX,TOP)
			A = MAP_2POINTS(LON0, LAT0, LON1, LAT1,/RHUMB) ; A IS THE DISTANCE[A0] AND AZIMUTH[A1] OF THE RHUMB LINE CONNECTING THE TWO POINTS
			AZIMUTH(_PX,_PY) = A[1]
		ENDFOR
	ENDFOR
  
;	===> REFORM AZIMUTH TO IMAGE DIMENSIONS
	AZIMUTH = REFORM(AZIMUTH,PX,PY)

;	===> MAKE A STANDARD NARR SAV FILE?
	IF MP NE 'LONLAT' THEN  STRUCT_WRITE, AZIMUTH, FILE=OUTFILE, PROD='AZIMUTH', DATA_UNITS='DEGREES (EAST OF NORTH)',/OVERWRITE
	;===> IF RANGE OF DATA IS ZERO THEN 
	IF KEY(PNG) THEN IMGR,AZIMUTH,MAP=MP,/COAST_ONLY,PNGFILE=REPLACE(OUTFILE,'.SAV','.PNG')	
	
	RETURN, AZIMUTH


END; #####################  END OF ROUTINE ################################
