; $ID:	STRUCT_WRITE.PRO,	2020-06-30-17,	USER-KJWH	$
;+
;#############################################################################################################
	PRO STRUCT_WRITE, STRUCTURE, FILE=FILE, RETURN_STRUCT=RETURN_STRUCT, ERROR=ERROR,CHECK=CHECK, _EXTRA=_EXTRA, LOGLUN=LOGLUN
;
; PURPOSE: WRITES THE INPUT STRUCTURE TO A SAVE FILE
;
; CATEGORY:	STRUCT FAMILY
;
; CALLING SEQUENCE: STRUCT_WRITE,STRUCTURE
;
; INPUTS: USUALLY A STRUCTURE[BUT MAY ALSO BE A DATA ARRAY] 
;		
; OPTIONAL INPUTS:
;		_EXTRA:	ANY KEYWORDS PROVIDED WILL BE ADDED TO THE STRUCTURE AND WRITTEN TO THE SAVEFILE
;		
; KEYWORD PARAMETERS:
;		FILE........... Full filename for the savefile
;		RETURN_STRUCT.. To just return the structure without making the save the file
;   ERROR.......... Text string with any error message
;   CHECK.......... Check that the written sav file is readable [not a text error string] 
;   LOGLUN......... If provided, then LUN for the log file

; OUTPUTS: A .SAV  FILE 
;		
; EXAMPLES: SEE STRUCT_WRITE_DEMO
; 
; NOTES:
;  THE SAV FILE NOW HAS A .SAV EXTENSION 
;  [SO YOU MAY CLICK ON THE FILE AN AUTOMATICALLY RESTORE ITS CONTENTS]
;  THE NAME OF THE STRUCTURE IN THE SAV FILE IS ALWAYS STRUCT
;
; MODIFICATION HISTORY:
;			MAY 23,2014,  WRITTEN BY J.O'REILLY 
;			CHANGE DATE TO DATE_NOW() -WITHOUT FORMATTING
;			IF TYPE NE 'SPREAD' THEN STRUCT = CREATE_STRUCT(STRUCT,'COMPUTER',COMPUTER,'DATE',THE_DATE)
;     JUL 24,2014,JOR,COMPLETELY OVERHAULED TO DEAL WITH VARIOUS INPUT TYPES
;     DEC 6,2014, JOR, CHANGED TO STRUCT_ TO AVOID CORRUPTING INPUT WITH OUTPUT:
;                  STRUCT_ = CREATE_STRUCT('DATA',STRUCT)
;     DEC 10,2014,JOR :IF ANY(STRUCT) AND IDLTYPE(STRUCT) EQ 'STRUCT' THEN BEGIN
;     JAN 27,2015,JOR ADDED ROUTINE TO OUTPUT STRUCT
;     FEB 13,2015,JOR ;===> ANY INFO IN _EXTRA PREEMPTS INFO ALREADY PRESENT IN  THE STRUCT
;                     IF N_TAGS(STRUCT) EQ 1 THEN STRUCT = STRUCT.(0);UNNEST
;     FEB 14,2015, ADDED FILE_NAME
;     FEB 18,2015,JOR:;===> COPY STRUCT_ TO STRUCT TO STANDARDIZE THE NAME 
;                           WHEN RESTORING THE STRUCTURE
;     MAR 28,2015,JOR,STRUCTURE IS ALWAYS SAVED AS STRUCT
;     APR 15,2015,JOR ADDED KEY ERROR,CATCH ERROR HANDLER, KEY TAGS SAME AS IN STATS_WRITE
;     JUL 15,2015,JOR CHANGED DEFINITION OF TYPE SPREAD [ NEED ONLY 2 OR MORE TAGS]:
;                     IF N_TAGS(STRUCTURE) GE 2 AND N_ELEMENTS(STRUCTURE) GE 5 THEN BEGIN
;     AUG 21, 2015 - KJWH: ADDED "IF COUNT_TAG GE 1 THEN VALUE = FA.(OK_TAG)" BECAUSE THE PROGRAM WAS CRASHING WHEN OK_TAG = -1  
;     SEP 01, 2015 - KJWH: ADDED, "PRINT ERROR" IN CATCH STATEMENT AND UPDATED THE "IF TYPE NE 'SPREAD' THEN BEGIN" BLOCK
;     SEP 17, 2015 - KJWH: CHANGED "HAS(STRUCT, 'COMPUTER')" TO "HAS(TAG_NAMES(STRUCT), 'COMPUTER')".  BY DOING SO, IT REDUCES THE PROGRAM'S RUNTIME BY ALMOST 3 MINUTES WHEN SAVING L3B4 FILES.
;     OCT 19, 2015 - KJWH: CHANGED FILE_ALL TO PARSE_IT BECAUSE WE DO NOT NEED ANY OF THE INFO FROM FILE_ALL AND BY USING PARSE_IT, IT WILL SAVE SOME TIME.
;                          CHANGED 'STAT' TO 'STATS' WHEN DEFINING THE NAMES = ['NAME','PERIOD','PERIOD_CODE','SENSOR','SATELLITE','METHOD','MAP','STATS','PROD','ALG']
;     MAY 26, 2016 - KJWH: ADDED AN OPTION [RETURN_STRUCT] TO JUST RETURN THE STRUCTURE WITHOUT MAKING THE SAVE THE FILE
;     MAY 26, 2016 - JEOR: CHANGED LOGIC TO CONSERVE AND OUTPUT ANY STRUCTURES THAT ARE IN _EXTRA
;     MAY 29, 2016 - JEOR: ONLY ADD TAG IF IT IS NOT ALREADY PRESENT IN _STRUCT			
;     AUG 02, 2016 - KJWH: Using CALLER() to determine the ROUTINE_NAME that called STRUCT_WRITE (it is more informative to know which program generated the data than which one was used to write the file)
;     SEP 12, 2016 - KJWH&JEOR: ADDED KEY CHECK-TO READ THE FILE JUST WRITTEN BY STRUCT_WRITE TO DETECT ERRORS 
;     SEP 13, 2016 - KJWH: Updated the CHECK block so that it STOPS the programs and we can evaluate what went wrong.
;     SEP 26, 2016 - KJWH: Removed the STOP when double checking that the file was written properly.  Now it will rewrite the SAVE and recheck without stopping.
;     FEB 21, 2017 - KJWH: Added DIR_TEST, FA.DIR to make sure the output directory exists
;     NOV 15, 2018 - KJWH: Changed the PRINT commands to PLUN so that they can be captured in a log file if provided
;                          Added LOGLUN keyword
;     DEC 13, 2018 - KJWH: Now deleting a file if it was not properly written [IF EXISTS(FILE) THEN FILE_DELETE, FILE, /VERBOSE]                     
;########################################################################################################################################################################
;-
;******************************
  ROUTINE_NAME  = 'STRUCT_WRITE'
;******************************
  IF NONE(LOGLUN)    THEN LOG_LUN = [] ELSE LOG_LUN = LOGLUN

;===> DEFAULTS
  TYPE = ''
  ERROR = []
  IF NONE(CHECK) THEN CHECK = 1 ; SET CHECK TO 0 IF NEEDED
  READ_WRITE_COUNTER = 0; IF EXCEEDS 3 THEN ERROR MESSAGE STOPS PROGRAM
;#################################################
;===> ERROR HANDLER [WHEN CAN NOT WRITE FILE] ETC.
;  CATCH, ERRORSTATUS
;  IF (ERRORSTATUS NE 0) THEN BEGIN
;    CATCH, /CANCEL
;    ERROR = !ERROR_STATE.MSG
;    PLUN,LOG_LUN, ERROR, 1
;    RETURN
;  ENDIF;IF (ERRORSTATUS NE 0) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||


  IF NONE(FILE) THEN FILE = !S.IDL_TEMP + ROUTINE_NAME + '.SAV'
;IF N_TAGS(STRUCT) EQ 1 THEN STRUCT = STRUCT.(0);UNNEST

;*******************************************
  IF IDLTYPE(STRUCTURE) EQ 'UNDEFINED' THEN BEGIN
;*******************************************
    STRUCT = CREATE_STRUCT('NULL','')
    TYPE = 'NULL'
  ENDIF;IF IDLTYPE(STRUCTURE) EQ 'UNDEFINED' THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||

;*********************************
  IF ISA(STRUCTURE,/NUMBER) THEN BEGIN
;*********************************
    IF IDLTYPE(STRUCTURE) NE 'UNDEFINED' THEN STRUCT = CREATE_STRUCT('DATA',STRUCTURE)
    TYPE = 'DATA' 
  ENDIF;IF ISA(STRUCTURE,/NUMBER) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||


;******************************************************************
  IF N_TAGS(STRUCTURE) GE 2 AND N_ELEMENTS(STRUCTURE) GE 3 THEN BEGIN
;******************************************************************
  ;IF SPREADSHEET TYPE THEN CONSERVE IT
    TYPE = 'SPREAD'
    STRUCT = STRUCTURE
    GOTO,WRITE_STRUCT
  ENDIF;IF NTAGS(STRUCTURE) GE 5 AND N_ELEMENTS(STRUCTURE) GE 5 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;********************************************************
  IF IDLTYPE(STRUCTURE) EQ 'STRUCT' THEN BEGIN
  ;********************************************************
  ;;;;;;;;STRUCT = STRUCT
  ;===> IF STRUCTURE IS NESTED THEN 'UNNEST' IT
    IF N_TAGS(STRUCTURE) EQ 1 THEN STRUCT=STRUCTURE.(0) ELSE STRUCT=STRUCTURE
    TYPE = 'STRUCT'
    IF N_ELEMENTS(STRUCT) EQ 1 THEN BEGIN
      FA = PARSE_IT(FILE,/ALL)    
      NAMES = ['NAME','PERIOD','PERIOD_CODE','SENSOR','SATELLITE','METHOD','MAP','STATS','PROD','ALG']
      DIR_TEST, FA.DIR
      FOR NTH = 0L, NOF(NAMES)-1 DO BEGIN
        NAME = NAMES[NTH]
        OK_TAG = WHERE(TAG_NAMES(FA) EQ NAME,COUNT_TAG)
        IF COUNT_TAG GE 1 THEN VALUE = FA.(OK_TAG)
        IF WHERE_IN(TAG_NAMES(STRUCT),NAME) EQ [] THEN STRUCT = CREATE_STRUCT(STRUCT,NAME,VALUE)
      ENDFOR;FOR NTH = 0L, N_ELEMENTS(NAMES)-1 DO BEGIN
    ENDIF
  ENDIF  
  
  ADD_EXTRA:

;===> ANY INFO IN _EXTRA PREEMPTS INFO ALREADY PRESENT IN _STRUCT
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0L, N_TAGS(_EXTRA)-1 DO BEGIN
    NAMES = TAG_NAMES(_EXTRA) & NAME = NAMES[NTH]
    VALUE = _EXTRA.(NTH)
    IF IDLTYPE(VALUE) EQ 'STRUCT' THEN BEGIN
    ;===> ONLY ADD TAG IF IT IS NOT ALREADY PRESENT IN _STRUCT
    IF WHERE_IN(TAG_NAMES(STRUCT),_NAME) EQ [] THEN  STRUCT = CREATE_STRUCT(STRUCT,NAME,VALUE)
     
; ===> OLD CODE|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||      
;      FOR _NTH = 0L,N_ELEMENTS(VALUE)-1 DO BEGIN
;        _NAMES = TAG_NAMES(VALUE) & _NAME = _NAMES(_NTH)
;        _VALUE = VALUE.(_NTH)
;    ;===> ONLY ADD TAG IF IT IS NOT ALREADY PRESENT IN _STRUCT 
;        IF WHERE_IN(TAG_NAMES(STRUCT),_NAME) EQ [] THEN STRUCT = CREATE_STRUCT(STRUCT,_NAME,_VALUE)
;      ENDFOR;FOR_NTH = 0L,N_ELEMENTS(VALUE)-1 DO BEGIN
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 
; ===> OLD CODE|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||      
    ENDIF ELSE BEGIN
       IF WHERE_IN(TAG_NAMES(STRUCT),NAME) EQ [] THEN BEGIN      
        STRUCT = CREATE_STRUCT(STRUCT,NAME,VALUE)
       ENDIF ELSE BEGIN
         ;===> REPLACE TAG WITH INFO FROM _EXTRA IF THE TAG IS ALREADY PRESENT IN _STRUCT
         OK_TAG = WHERE_IN(TAG_NAMES(STRUCT),NAME,COUNT_TAG)
         IF COUNT_TAG EQ 1 THEN STRUCT.(OK_TAG)= VALUE
       ENDELSE
    ENDELSE;IF IDLTYPE(VALUE) EQ 'STRUCT' THEN BEGIN
  ENDFOR;FOR NTH = 0L, N_ELEMENTS(_EXTRA)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  ADD_SIZEXYZ:
;===> IF THERE IS A  2 OR 3D ARRAY PRESENT IN STRUCT THEN ADD ITS DIMENSIONS TO STRUCT
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_TAGS(STRUCT)-1 DO BEGIN
    S= SIZEXYZ(STRUCT.(NTH))
    IF S.N_DIMENSIONS GE 2  AND WHERE_IN(TAG_NAMES(STRUCT),['PX','PY','PZ']) EQ [] THEN BEGIN
      STRUCT = CREATE_STRUCT(STRUCT,'PX',S.PX,'PY',S.PY,'PZ',S.PZ)
      GOTO, WRITE_STRUCT
    ENDIF;IF S.N_DIMENSIONS GE 2  AND WHERE_IN(TAG_NAMES(STRUCT),['PX','PY','PZ']) EQ [] THEN BEGIN
  ENDFOR ;FOR NTH = 0,N_TAGS(STRUCT)-1 DO BEGIN
 ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  WRITE_STRUCT:

;*****************************
  IF TYPE NE 'SPREAD' THEN BEGIN
;*****************************
    IF HAS(TAG_NAMES(STRUCT), 'COMPUTER') EQ 0 THEN STRUCT = CREATE_STRUCT(STRUCT,'COMPUTER',!S.COMPUTER)
    IF HAS(TAG_NAMES(STRUCT), 'DATE')     EQ 0 THEN STRUCT = CREATE_STRUCT(STRUCT,'DATE',DATE_NOW())
    IF HAS(TAG_NAMES(STRUCT), 'ROUTINE')  EQ 0 THEN STRUCT = CREATE_STRUCT(STRUCT,'ROUTINE',CALLER(2))
  ENDIF;IF TYPE NE 'SPREAD' THEN BEGIN
;|||||||||||||||||||||||||||||||||||

  IF KEY(RETURN_STRUCT) THEN BEGIN ; SKIPS THE SAVE STEP
    RETURN_STRUCT = STRUCT
    GOTO, DONE
  ENDIF  
  
  REWRITE_SAVE:  ; ===> COME HERE TO WRITE THE STRUCTURE AGAIN
  SAVE, FILENAME=FILE, STRUCT, /COMPRESS
  
;===> CHECK IF FILE WAS WRITTEN
  IF FILE_TEST(FILE) EQ 0 THEN MESSAGE,'ERROR: '+FILE + ' NOT WRITTEN' ELSE PFILE, FILE, LOGLUN=LOG_LUN
    
;===> TRY TO READ THE FILE JUST SAVED "MESSAGE" WILL STOP THE PROGRAM BUT LEAVE ALL VARIABLES INTACT FOR EXAMINATION
  READ_WRITE_COUNTER = READ_WRITE_COUNTER + 1
  IF READ_WRITE_COUNTER GE 3 THEN BEGIN
    MESSAGE,'ERROR: ' + FILE + ' NOT WRITTEN PROPERLY- '  + STRTRIM(READ_WRITE_COUNTER,2) + ' TIMES'  
    IF EXISTS(FILE) THEN FILE_DELETE, FILE, /VERBOSE
  ENDIF  
  IF KEY(CHECK) THEN IF IDLTYPE(STRUCT_READ(FILE)) EQ 'STRING' THEN GOTO, REWRITE_SAVE
    
  
  DONE:
END; #####################  END OF ROUTINE ################################
