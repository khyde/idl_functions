; $ID:	CUTOUT.PRO,	2020-07-08-15,	USER-KJWH	$
FUNCTION CUTOUT,IMAGE_ARRAY,BKG=BKG,GRACE=GRACE, PX=PX,PY=PY,LEFT=LEFT,RIGHT=RIGHT,BOTTOM=BOTTOM,TOP=TOP
;	THIS FUNCTION EXTRACTS FROM AN IMAGE THE RETANGULAR REGION CONTAINING NON-BKG VALUES
; SYNTAX:
;	RESULT= CUTOUT(IMAGE,BKG=255,GRACE=4)
; OUTPUT:
;		AN IMAGE ARRAY
; ARGUMENTS:
; 	IMAGE:			A 2D ARRAY

; KEYWORDS:
; 	BKG:	THE VALUE OF THE BACKGROUND
;		GRACE:			AN ARRAY [LEFT,RIGHT,BOTTOM,TOP] WHERE LEFT,RIGHT,BOTTOM,TOP ARE NUMBER OF PIXELS FOR MARGIN
;		PX:					THE X SIZE (PIXELS) TO USE FOR THE FINAL IMAGE
;		PY:					THE Y SIZE (PIXELS) TO USE FOR THE FINAL IMAGE
; EXAMPLE:

; NOTES:

; HISTORY:
;	JAN 1,1998	WRITTEN BY:	J.E. O'REILLY, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;	SEP 15,2011, JOR MODIFIED TO HANDLE 3 COLOR PLANES(DIMENSIONS)
;	             NOW USING SIZEXYZ
;	NOV 17,2011, JOR, FIXED BUG WITH TRUE COLOR VS. ONE PLANE  
;	APR 17,2012,JOR, CHANGED 'IMAGE' TO 'IMAGE_ARRAY' TO AVOID CONFLICT WITH IDLS 'IMAGE FUNCTION 
;	JUL 23,2013,JOR ADDED KEYWORDS   LEFT,RIGHT,BOTTOM,TOP       
;-
;######################################################################################

;**************************************
  ROUTINE_NAME  = 'CUTOUT'
;**************************************

; ====================>
; CHECK THAT IMAGE_ARRAY IS 2D
  SZ=SIZEXYZ(IMAGE_ARRAY)
  IF SZ.N_DIMENSIONS EQ 2 THEN N_PLANES = 1
  IF SZ.N_DIMENSIONS EQ 3 THEN N_PLANES = 3
 ; IF SZ.N_DIMENSIONS NE 2 THEN MESSAGE,'ERROR: MUST PROVIDE 2-D IMAGE_ARRAY'
  IF SZ.TYPE LT 1 OR SZ.TYPE GT 5 THEN MESSAGE,'ERROR: IMAGE_ARRAY MUST BE BYTE,INTEGER,LONG,FLOAT,OR DOUBLE'

; ====================>
  IF N_ELEMENTS(BKG) EQ 0 THEN BEGIN
  	H=HISTOGRAM(IMAGE_ARRAY,MIN=0)
  	M=MAX(H,BKG)
  ENDIF;IF N_ELEMENTS(BKG) EQ 0 THEN BEGIN

; ====================>
  IF N_ELEMENTS(GRACE)EQ 0 THEN GRACE = [0]
  IF N_ELEMENTS(GRACE)EQ 1 THEN GRACE = [GRACE,GRACE,GRACE,GRACE]
  IF N_ELEMENTS(GRACE)EQ 2 THEN GRACE = [GRACE[0],GRACE[0],GRACE[1],GRACE[1]]
  IF N_ELEMENTS(GRACE)GT 4 THEN GRACE = 0

; ====================> INITIALIZE SOME VARIABLES DEFINING
; THE LEFT,RIGHT,BOTTOM, AND TOP SIDE OF THE BOX
  LEFT  = SZ.PX -1
  RIGHT = 0
  TOP   = 0
  BOTTOM= SZ.PY-1
  
; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
FOR PLANE = 0,N_PLANES-1 DO BEGIN
; ===> EXTRACT IM
  IF N_PLANES EQ 3 THEN IM = REFORM(IMAGE_ARRAY(PLANE,*))
  IF N_PLANES EQ 1 THEN IM = IMAGE_ARRAY
; ====================>
; NOW LOOK AT EACH LINE OF IM AND GET IMAGE_ARRAY SUBSCRIPTS CONTAINING NON-BKG DATA
  FOR _ROW = 0,SZ.DIMENSIONS[1]-1 DO BEGIN
    OK=WHERE(IM(*,_ROW) NE BKG ,COUNT)
;===> REVISE VALUES FOR SIDES
    IF COUNT GE 1 THEN BEGIN                 
      BOTTOM= BOTTOM < _ROW
      TOP = TOP > _ROW
      SCANMIN=MIN(OK,MAX=SCANMAX)
      LEFT=   SCANMIN < LEFT
      RIGHT =  RIGHT > SCANMAX
    ENDIF;IF COUNT GE 1 THEN BEGIN 
  ENDFOR;FOR _ROW = 0,SZ.DIMENSIONS(1)-1 DO BEGIN

  CUTIMAGE = IM(LEFT:RIGHT,BOTTOM:TOP)
  ;;IMAGE_ARRAY=''

; ===> ADD GRACE (BKG) AROUND CUTOUT
  IF N_ELEMENTS(GRACE) EQ 4 THEN BEGIN
    SZ=SIZE(CUTIMAGE)
    COPY = BYTARR(SZ[1]+GRACE[0]+GRACE[1],SZ(2)+GRACE(2)+GRACE(3))
    COPY(*,*) = BKG
    COPY(GRACE[0],GRACE(2)) = CUTIMAGE
    CUTIMAGE = COPY
    COPY = ''
  ENDIF

;	===> PASTE CUTIMAGE ONTO A PAGE
  IF N_ELEMENTS(PX) EQ 1 AND N_ELEMENTS(PY) EQ 1 THEN BEGIN
  	SZ=SIZE(CUTIMAGE,/STRUCT)
    IMAGE_PX=SZ.DIMENSIONS[0]
    IMAGE_PY=SZ.DIMENSIONS[1]
    IF IMAGE_PX LE PX AND IMAGE_PY LE PY THEN BEGIN
    	COPY=BYTARR(PX,PY)
    	COPY(*,*) = BKG
    	LEFT 		= (PX-IMAGE_PX)/2
    	BOTTOM 	= (PY-IMAGE_PY)/2
    	COPY(LEFT,BOTTOM) = CUTIMAGE
    	CUTIMAGE=COPY
    ENDIF
	ENDIF
ENDFOR;	FOR PLANE = 0,N_PLANES-1 DO BEGIN
; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL

;
; ===> RETURN THE BOX CUTOUT FROM THE IMAGE_ARRAY
  RETURN, CUTIMAGE


END; #####################  END OF ROUTINE ################################
