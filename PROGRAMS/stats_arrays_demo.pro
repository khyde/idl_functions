; $ID:	STATS_ARRAYS_DEMO.PRO,	2020-07-01-12,	USER-KJWH	$
;##############################################################################################################
 PRO STATS_ARRAYS_DEMO
;+
; NAME:
; 	STATS_ARRAYS_DEMO

;		THIS PROGRAM DEMONSTRATES STATS_ARRAYS
;   NOTE: THE INPUT DATA ARRAY MUST BE REDEFINED EACH TIME BEFORE STATS_ARRAYS IS CALLED 
;         BECAUSE STATS_ARRAYS NULLS THE ARRAY (USING GONE)

; MODIFICATION HISTORY:
;		WRITTEN JAN 31, 2005 BY J.O'REILLY, 28 TARZWELL DRIVE, NMFS, NOAA 02882 (JAY.O'REILLY@NOAA.GOV)
;		SEP 28,2011, JOR REMOVED 'DO_SH' FROM CALL TO STATS_ARRAYS
;		OCT 5,2011, JOR, MAJOR REVISION
;               DATA (ARR) ARE ALWAYS PROVIDED TO STATS_ARRAYS	
;               AUG 10,2013,JOR ADDED STEP DO_TEST_SPAN	
;   MAR 21,2014,JOR ADDED STEP DO_STATS_NULL   
;   OCT 05,2015,JOR OVERHAULED, ADDED SWITCHES AND KEY,ADDED LOOP TO STEP DO_SEE_STATS
;   OCT 05, 2015 - KJWH: MODIFIED THE DO_ALOG AND DO_STD BLOCKS TO INCLUDE A SECOND ARRAY
;   OCT 06, 2015 - JOR : ADDED AND RENAMED KIM'S DO_ALOG TO ALOG_B, DO_STD TO DO_STD_B       
;-
; ********************************
ROUTINE_NAME  = 'STATS_ARRAYS_DEMO'
; ********************************

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
STAT_TYPES = ['NUM','MIN','MAX','SPAN','NEG','WTS','SUM','SSQ','MEAN','STD','GMEAN','GSTD','CV']
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;SSSSSSSSSSSSSS  START OF  SWITCHES SSSSSSSSSSSSSS
DO_N_CALLS      = ''
DO_SEE_STATS    = ''
DO_ONLY_MEAN    = ''
DO_STATS_NULL   = ''
DO_MEAN_NUM_SUM = ''
DO_NEG          = ''
DO_ALOG10       = ''
DO_ALOG         = ''
DO_ALOG_DIF     = ''
DO_ERRORS       = ''
DO_STD          = ''
DO_STD_B        = ''
DO_TEST_SPAN    = ''
DO_SMI_ONES     = ''
DO_MEAN_COMPARE = 'Y'

;SSSSSSSSSSSSSS  END OF  SWITCHES SSSSSSSSSSSSSSSS
;
  ARRAY = FINDGEN(3,3)&ARRAY(0,0) = MISSINGS(ARRAY)&ARRAY(1,1) = MISSINGS(ARRAY)&ARRAY(2,2) = MISSINGS(ARRAY)

;****************************
IF KEY(DO_N_CALLS) THEN BEGIN
;****************************
  SWITCHES,DO_N_CALLS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  ;CLEAR
  ARR = ARRAY
  PRINT,ARR
  PRINT,' ===> USE  /START WITH THE FIRST CALL THEN  S WILL BE 1, INDICATING CUMULATIVE NUMBER OF CALLS'
  S = STATS_ARRAYS(ARR,/START)
  PRINT,' ===>  NOW S WILL BE 1, INDICATING CUMULATIVE NUMBER OF CALLS  S = ' ,S 
  IF STOPP THEN STOP
  ARR = ARRAY & S = STATS_ARRAYS(ARR-2)
  PRINT,' ===>  NOW S WILL BE 2, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  IF STOPP THEN STOP
  ARR = ARRAY & S = STATS_ARRAYS(ARR+2)  
  PRINT,' ===>  NOW S WILL BE 3, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  IF STOPP THEN STOP
  ARR = ARRAY & S = STATS_ARRAYS(ARR-4)  
  PRINT,' ===>  NOW S WILL BE 4, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  IF STOPP THEN STOP
  ARR = ARRAY & S = STATS_ARRAYS(ARR+4)  
  PRINT,' ===>  NOW S WILL BE 5, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  IF STOPP THEN STOP
  PRINT,' ===> NOW USE   /CALC TO SEE STATS AFTER THE SIXTH CALL [S IS NOW A STRUCTURE] '
  ARR = ARRAY
  S = STATS_ARRAYS(ARR,/CALC)
  PRINT,'NUM SHOULD BE 6 :'
  PRINT,S.NUM 
 ; ST,S
  TAGS = TAG_NAMES(S)
  ARR = ARRAY
  FOR N=0L, N_TAGS(S)-1 DO BEGIN
    PRINT, TAGS(N)
  ;  PRINT, S.(N)
    FOR B=0, N_ELEMENTS(ARR)-1 DO BEGIN
      T = NUM2STR(B)
      IF ARR(B) EQ MISSINGS(ARR) THEN CONTINUE
      TARR = [ARR(B),ARR(B)-2,ARR(B)+2,ARR(B)-4,ARR(B)+4,ARR(B)]
      LARR = ALOG(TARR[WHERE(TARR GT 0,/NULL)])
      CASE TAGS(N) OF
        'MIN':   PRINT, S.MIN(B),   MIN(TARR)
        'MAX':   PRINT, S.MAX(B),   MAX(TARR)
        'NEG':   PRINT, S.NEG(B),   N_ELEMENTS(WHERE(TARR LT 0.0,/NULL))
        'SUM':   PRINT, S.SUM(B),   TOTAL(TARR)
        'LSUM':  PRINT, S.LSUM(B),  EXP(TOTAL(LARR))
        'SSQ':   PRINT, S.SSQ(B),   TOTAL(TARR*TARR)
        'LSSQ':  PRINT, S.LSSQ(B),  EXP(TOTAL(LARR*LARR))
        'MEAN':  PRINT, S.MEAN(B),  MEAN(TARR)
        'GMEAN': PRINT, S.GMEAN(B), GEOMEAN(TARR), EXP(MEAN(LARR))
        'STD':   PRINT, S.STD(B),   STDDEV(TARR)
        'GSTD':  PRINT, S.GSTD(B), GEOSTDEV(TARR), EXP(STDDEV(LARR))
        'CV':    PRINT, S.CV(B), 100.0*STDDEV(TARR)/MEAN(TARR)
        ELSE: MATCH = ''
      ENDCASE  
    ENDFOR
    WAIT, 0
  ENDFOR
  IF STOPP THEN STOP
  ,'DO_N_CALLS'  
   
 ENDIF;IF KEY(DO_N_CALLS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



;*******************************
IF KEY(DO_SEE_STATS) THEN BEGIN
;*******************************
  SWITCHES,DO_SEE_STATS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  ;FFFFFFFFFFFFFFFFFFFFFF
  FOR CALL = 1,6 DO BEGIN
    ARR =ARRAY
    IF CALL EQ 1 THEN BEGIN
      START = 1
      TXT = 'USE START TO INITIALIZE MEMORY AND /CALC
    ENDIF ELSE BEGIN
     START = 0
     TXT = ' USE  /CALC '
    ENDELSE;IF CALL EQ 1 THEN BEGIN
    PRINT,TXT + ' TO SEE STATS AFTER CALL # ' + ROUNDS(CALL)
    ARR = ARRAY   
    S = STATS_ARRAYS(ARR,START=START,/CALC)
    PRINT,'NUM: '
    PRINT,S.NUM
    PRINT,'MEAN: '
    PRINT,S.MEAN
    PRINT
  ENDFOR;FOR CALL = 1,6 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  
  IF STOPP THEN STOP
 
 ENDIF; IF KEY(DO_SEE_STATS) THEN BEGIN
 ;|||||||||||||||||||||||||||||||||||||||||||

;*******************************
IF KEY(DO_ONLY_MEAN) THEN BEGIN
;*******************************
  SWITCHES,DO_ONLY_MEAN,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
 IF STOPP THEN STOP
  CLEAR
  PRINT,'THIS STEP SHOWS HOW TO REQUEST JUST THE MEAN 
  PRINT, 'NOTE THAT WHILE NUM AND SUM ARE USED TO CALCULATE THE MEAN '
  PRINT,'THEY ARE NOT RETURNED IN THE STRUCTURE'
  PRINT,'[TO SPEED UP WRITING AND READING OF LARGE GLOBAL ARRAYS]'
  DO_STATS='MEAN'
  
  ;FFFFFFFFFFFFFFFFFFFFFF
  FOR CALL = 1,6 DO BEGIN
    IF CALL EQ 1 THEN BEGIN
      START = 1
      TXT = 'USE START TO INITIALIZE MEMORY AND /CALC
    ENDIF ELSE BEGIN
     START = 0
     TXT = ' USE  /CALC '
    ENDELSE;IF CALL EQ 1 THEN BEGIN
    PRINT,TXT + ' TO SEE STATS AFTER CALL # ' + ROUNDS(CALL)
    ARR = ARRAY   
    S = STATS_ARRAYS(ARR,START=START,/CALC,DO_STATS='MEAN')
    PRINT,'MEAN: '& PRINT,S.MEAN
    PRINT
  ENDFOR;FOR CALL = 1,6 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  
  ST,S
  PRINT,'MEAN: '& PRINT,S.MEAN
  IF STOPP THEN STOP

  ,'DO_ONLY_MEAN'
ENDIF;IF KEY(DO_ONLY_MEAN) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
;
;;*******************************
IF KEY(DO_STATS_NULL) THEN BEGIN
;********************************
  SWITCHES,DO_STATS_NULL,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  IF STOPP THEN STOP
  CLEAR
  PRINT,"THIS STEP SHOWS DO_STATS = ''  [NULL]"
  PRINT,'THIS GIVES AN ERROR' 
 
  DO_STATS=''
  PRINT
  
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = MISSINGS(ARRAY) & ARRAY(1,1) = MISSINGS(ARRAY) & ARRAY(2,2) = MISSINGS(ARRAY)
  ARR = ARRAY
  PRINT,ARR
  
  S = STATS_ARRAYS(ARR,/START,/CALC,DO_STATS=DO_STATS)
 
  ST,S 
  PRINT
  IF STOPP THEN STOP
  ,'DO_STATS_NULL'
ENDIF ;IF KEY(DO_STATS_NULL) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
;
;***********************************
IF KEY(DO_MEAN_NUM_SUM) THEN BEGIN
;***********************************
SWITCHES,DO_MEAN_NUM_SUM,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE

  IF STOPP THEN STOP
  CLEAR
  DO_STATS=['MEAN','NUM','SUM']
  PRINT,'THIS STEP SHOWS HOW TO REQUEST THE MEAN NUM AND SUM '
  PRINT
  ARR = ARRAY
  PRINT,ARR
  S = STATS_ARRAYS(ARR,/START,/CALC,DO_STATS=DO_STATS)
  ARR = ARRAY
  S = STATS_ARRAYS(ARR,/START,/CALC,DO_STATS=DO_STATS)
  ARR = ARRAY & S = STATS_ARRAYS(ARR,/CALC,DO_STATS=DO_STATS)
  ARR = ARRAY & S = STATS_ARRAYS(ARR,/CALC,DO_STATS=DO_STATS)
  ARR = ARRAY & S = STATS_ARRAYS(ARR,/CALC,DO_STATS=DO_STATS)
  ARR = ARRAY & S = STATS_ARRAYS(ARR,/CALC,DO_STATS=DO_STATS)
  ST,S
  PRINT,'NUM: ',S.NUM
  PRINT,'MEAN: ',S.MEAN
  PRINT,'SUM: ',S.SUM
  PRINT
  IF STOPP THEN STOP
  ,'DO_MEAN_NUM_SUM'
ENDIF ;IF KEY(DO_MEAN_NUM_SUM) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;;
;
 ;*************************
IF KEY(DO_NEG) THEN BEGIN  
;**************************
SWITCHES,DO_NEG,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  
  CLEAR
  PRINT,' 2 DIAGONAL ELEMENTS MISSING AND A NEG ON THE LAST DIAGONAL'
  ARR=ARRAY
  ARR(8) = -9
  PRINT,ARR
  IF STOPP THEN STOP
  S = STATS_ARRAYS(ARR,/START)
  ARR=ARRAY
  S = STATS_ARRAYS(ARR)
  ARR=ARRAY
  S = STATS_ARRAYS(ARR,/CALC)  
  PRINT
  PRINT,'NUM',S.NUM
  PRINT
  PRINT,'MEAN',S.MEAN
  PRINT
  PRINT,'STD'
  PRINT,S.STD
  PRINT
  PRINT,'NUMBER OF NEGATIVES:'
  PRINT,S.NEG
  
  IF STOPP THEN STOP
   ,'DO_NEG'  
ENDIF;IF KEY(DO_NEG) THEN BEGIN  
; |||||||||||||||||||||||||||||
 
;***************************
IF KEY(DO_ALOG10) THEN BEGIN
;***************************
SWITCHES,DO_ALOG10,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
  PRINT
  PRINT,'THIS STEP SHOWS THE USE OF THE ALOG10 TRANSFORM '
  PRINT,' IS ONLY NEEDED ON FIRST CALL WITH /START'
  PRINT,' AND THAT STATS_ARRAYS RETURNS ANTILOGED RESULTS '
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100
  ARR=ARRAY
  
  PRINT,'INPUT ARRAY: '
  PRINT,ARR
  IF STOPP THEN STOP
  S = STATS_ARRAYS(ARR,/START,TRANSFORM= 'ALOG10',/CALC)
  PRINT,'AFTER FIRST CALL TO STATS_ARRAYS:' 
  P,'TRANSFORM: ',S.TRANSFORM 
  PRINT,'NUM:'
  PRINT,S.NUM
  PRINT
  PRINT,'MEAN:  '
  PRINT,S.MEAN
  PRINT
  PRINT,'GMEAN: '
  PRINT, S.GMEAN
  IF STOPP THEN STOP
  ARR=ARRAY+1
  S = STATS_ARRAYS(ARR,TRANSFORM= 'ALOG10',/CALC) 
  PRINT,'AFTER SECOND CALL TO STATS_ARRAYS:' 
  PRINT,'NUM:' 
  PRINT,S.NUM
  PRINT,'MEAN:  ' 
  PRINT,S.MEAN
  PRINT
  PRINT
  PRINT,'GMEAN: '
  PRINT, S.GMEAN
  IF STOPP THEN STOP
 ,'DO_ALOG10'

ENDIF ;IF KEY(DO_ALOG10) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||| 
;
;

;***************************
IF KEY(DO_ALOG) THEN BEGIN
;***************************
  SWITCHES,DO_ALOG,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
  PRINT
  PRINT,'THIS STEP SHOWS THE USE OF THE ALOG TRANSFORM '
  PRINT,' IS ONLY NEEDED ON FIRST CALL WITH /START'
  PRINT,' AND THAT STATS_ARRAYS RETURNS ANTILOGED RESULTS '
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100
  ARR=ARRAY
  
  PRINT,'INPUT ARRAY: '
  PRINT,ARR
  IF STOPP THEN STOP
  S = STATS_ARRAYS(ARR,/START,TRANSFORM= 'ALOG',/CALC)
  PRINT,'AFTER FIRST CALL TO STATS_ARRAYS:' 
  P,'TRANSFORM: ',S.TRANSFORM 
  PRINT,'NUM:'
  PRINT,S.NUM
  PRINT
  PRINT,'MEAN:  '
  PRINT,S.MEAN
  PRINT
  PRINT,'GMEAN:  '
  PRINT,S.GMEAN
  PRINT
  IF STOPP THEN STOP
  ARR=ARRAY+1
  S = STATS_ARRAYS(ARR,TRANSFORM= 'ALOG',/CALC) 
  PRINT,'AFTER SECOND CALL TO STATS_ARRAYS:' 
  PRINT,'NUM:' 
  PRINT,S.NUM
  PRINT,'MEAN:  ' 
  PRINT,S.MEAN
  PRINT
  PRINT,'GMEAN:  '
  PRINT,S.GMEAN
  PRINT
  IF STOPP THEN STOP
 ,'DO_ALOG'
ENDIF ;IF KEY(DO_ALOG) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||| 
;
;;***************************
IF KEY(DO_ALOG_DIF) THEN BEGIN
;***************************
  SWITCHES,DO_ALOG_DIF,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
  ARRAY = FINDGEN(3,3)&ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10& ARRAY(2,2) = 100

  ARR=ARRAY & ARRAY2 = ARRAY
  ARRAY2(0,0) = 3 & ARRAY2(1,1) = 30 & ARRAY2(2,2) = 300
  ARR2 = ARRAY2
  PRINT,'INPUT ARRAY: '& PRINT,ARR & PRINT & PRINT,ARR2
    IF STOPP THEN STOP

  PRINT
  S = STATS_ARRAYS(ARR,/START,TRANSFORM= '')
  S = STATS_ARRAYS(ARR2,TRANSFORM= '',/CALC)
  PRINT,'NO TRANSFORMATION MEAN:  ' 
  PRINT,S.MEAN
  PRINT
  IF STOPP THEN STOP
  ARR = ARRAY
  ARR2 = ARRAY2
  PRINT
  S = STATS_ARRAYS(ARR,/START,TRANSFORM= 'ALOG')
  S = STATS_ARRAYS(ARR2,TRANSFORM= 'ALOG',/CALC)
  PRINT,'ALOG GMEAN:  ' & PRINT,S.GMEAN
  PRINT
  PRINT, 'DIFFERENCE'
  PRINT, S.GMEAN - EXP((ALOG(ARRAY)+ALOG(ARRAY2))/2)
    IF STOPP THEN STOP

  ARR = ARRAY
  ARR2 = ARRAY2
  PRINT
  S = STATS_ARRAYS(ARR,/START,TRANSFORM= 'ALOG10')
  S = STATS_ARRAYS(ARR2,TRANSFORM= 'ALOG10',/CALC)
  PRINT,'ALOG10 GMEAN:  ' 
  PRINT,S.GMEAN
  PRINT
  PRINT, 'DIFFERENCE'
  PRINT, S.GMEAN - 10^((ALOG10(ARRAY)+ALOG10(ARRAY2))/2)
    IF STOPP THEN STOP
  ,'DO_ALOG_B'

ENDIF ;IF KEY(DO_ALOG_DIF) THEN BEGIN
;||||||||||||||||||||||||||||||||||
;**********************************************
  IF KEY(DO_ERRORS) THEN BEGIN
;**********************************************
  SWITCHES,DO_ERRORS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
  PRINT,'GENERATES ERROR BECAUSE THE INPUT DATA ARE NOT 2 DIMENSIONAL
  S = STATS_ARRAYS([1,2,3],/START)
  PRINT,S
  PRINT
  IF STOPP THEN STOP
  PRINT,'GENERATE ERROR BECAUSE /START MUST BE USED WITH FIRST CALL WHEN ARRAYS CHANGE'
  ARR=ARRAY
  S = STATS_ARRAYS(ARR)
  PRINT,S
  PRINT 
  IF STOPP THEN STOP

;
  PRINT,' GENERATE ERROR BECAUSE DATA ARRAY MUST ALWAYS BE PROVIDED'
  ARR = ARRAY
  S = STATS_ARRAYS()
  PRINT,S
  PRINT
  IF STOPP THEN STOP


  PRINT,' GENERATE ERROR BECAUSE THE REQUESTED STATS IN DO_STATS ARE NOT AVAILABLE'
  ARR = ARRAY
  S = STATS_ARRAYS(ARR,DO_STATS = 'HELLO',MISSING=MISSING,/START)
  PRINT,S
  PRINT 
  IF STOPP THEN STOP
  ,'DO_ERRORS'
ENDIF;   IF KEY(DO_ERRORS) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||

;*************************
IF KEY(DO_STD) THEN BEGIN
;*************************
  SWITCHES,DO_STD,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
	PRINT,'THIS STEP HAS DIAGONAL ELEMENTS MISSING FOR TESTING STD'
  PRINT,'STD SHOULD BE ZERO SINCE THE SAME ARRAY IS PROCESSED TWICE'
	ARR = ARRAY
  S = STATS_ARRAYS(ARR,/START)
  ARR = ARRAY
  S = STATS_ARRAYS(ARR,/CALC)
  PRINT
  PRINT,'NUM : ' 
  PRINT,S.NUM
  PRINT
  PRINT,'STD : ' 
  PRINT,S.STD
,'DO_STD'  
ENDIF; IF KEY(DO_STD) THEN BEGIN
;||||||||||||||||||||||||||||||||
;
;***************************
IF KEY(DO_STD_B) THEN BEGIN
;***************************
  SWITCHES,DO_STD_B,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
  PRINT,'THIS STEP COMPARES STD BETWEEN UNTRANSFORMED AND TRANSFORMED DATA'
  ARRAY = FINDGEN(3,3)&ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10& ARRAY(2,2) = 100

  ARR=ARRAY & ARRAY2 = ARRAY
  ARRAY2(0,0) = 3 & ARRAY2(1,1) = 30 & ARRAY2(2,2) = 300
  ARR2 = ARRAY2
  PRINT,'INPUT ARRAYS: '& PRINT,ARR & PRINT & PRINT,ARR2
  IF STOPP THEN STOP

  PRINT
  S = STATS_ARRAYS(ARR,/START,TRANSFORM= '')
  S = STATS_ARRAYS(ARR2,TRANSFORM= '',/CALC)
  PRINT,'NO TRANSFORMATION STD:  ' & PRINT,S.STD
  PRINT
  IF STOPP THEN STOP

  ARR = ARRAY
  ARR2 = ARRAY2
  PRINT
  S = STATS_ARRAYS(ARR,/START,TRANSFORM= 'ALOG')
  S = STATS_ARRAYS(ARR2,TRANSFORM= 'ALOG',/CALC)
  PRINT,'ALOG GSTD:  ' & PRINT,S.GSTD
  IF STOPP THEN STOP

  ARR = ARRAY
  ARR2 = ARRAY2
  PRINT
  S = STATS_ARRAYS(ARR,/START,TRANSFORM= 'ALOG10')
  S = STATS_ARRAYS(ARR2,TRANSFORM= 'ALOG10',/CALC)
  PRINT,'ALOG10 GSTD:  ' & PRINT,S.GSTD
  IF STOPP THEN STOP

  ,'DO_STD_B'
ENDIF;IF KEY(DO_STD_B) THEN BEGIN
;||||||||||||||||||||||||||||||||



;*******************************
IF KEY(DO_TEST_SPAN) THEN BEGIN
;*******************************
  ,'DO_TEST_SPAN'
  SWITCHES,DO_TEST_SPAN,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
  DO_STATS=['SPAN','MEAN','MIN','MAX','NUM']
  PRINT,' DOING:  '+ ARR_2STR(DO_STATS)
  PRINT
  ARRAY = FINDGEN(3,3) &  ARRAY(0,0) = MISSINGS(ARRAY) & ARRAY(1,1) = MISSINGS(ARRAY)&ARRAY(2,2) = MISSINGS(ARRAY)
  ARR =ARRAY & S = STATS_ARRAYS(ARR,/START,DO_STATS=DO_STATS)
  PRINT,S 
  IF STOPP THEN STOP
  ARR = ARRAY+1E3 
  S = STATS_ARRAYS(ARR,/CALC,DO_STATS=DO_STATS)
  PLINES
  PRINT,'NUM:  ',S.NUM,'MIN: ',S.MIN,'MAX: ',S.MAX,'MEAN:  ',S.MEAN,'SPAN:  ',S.SPAN
  PRINT
  IF STOPP THEN STOP
  PRINT,'CHECK SPAN USING ALTERNATE METHOD BY SUBTRACTING STRUCT MIN FROM MAX'
  PRINT,S.MAX -S.MIN
  ,'DO_TEST_SPAN'
ENDIF;IF KEY(DO_TEST_SPAN) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;

;******************************
IF KEY(DO_SMI_ONES) THEN BEGIN
;******************************
  SWITCHES,DO_SMI_ONES,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
  PRINT, 'THIS STEP TESTS STATS WITH A LARGE SMI ARRAY OF ONES'
  ARRAY = REPLICATE(1.0,[4320,2160])
  PRINT,'MINMAX :',MM(ARRAY)
  
  NUM = INDGEN(3)+1
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(NUM)-0 DO BEGIN
   
    IF NTH EQ 4 THEN STOP
    ARR = ARRAY
    IF NTH EQ 0 THEN START = 1  ELSE START = 0
    IF NTH EQ 3 THEN CALC = 1  ELSE CALC = 0
    PRINT,'NTH   ',NTH,'   START  ',START,'  CALC   ',CALC
    S=STATS_ARRAYS(ARR,START=START,CALC = CALC,TRANSFORM = 'ALOG')
    IF NTH EQ 3 THEN BEGIN  
      PRINT,'NUM: ',MM(S.NUM)
      PRINT,'MIN: ',MM(S.MIN)
      PRINT,'MAX: ',MM(S.MAX)
      PRINT,'SUM: ',MM(S.SUM)
      PRINT,'MEAN: ',MM(S.MEAN)
      PRINT,'SSQ: ',MM(S.SSQ)
      PRINT,'SPAN: ',MM(S.SPAN)
    ENDIF ELSE BEGIN
    ENDELSE;IF NTH) THEN BEGIN
  ENDFOR;FOR NTH = 0,3 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  ST,S
  IF STOPP THEN STOP
ENDIF;IF KEY(DO_SMI_ONES) THEN BEGIN
  
  
;******************************
IF KEY(DO_MEAN_COMPARE) THEN BEGIN
  ;******************************
  SWITCHES,DO_MEAN_COMPARE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  CLEAR
  PRINT, 'THIS STEP COMPARES THE OUTPUT DEPENDING ON WHETHER A PREVIOUSLY CALCULATED AMEAN AND GMEAN IS USED AS INPUT DATA.'  
  
  ARRAY = FINDGEN(3,3)&ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10& ARRAY(2,2) = 100
  FOR N=0, 4 DO BEGIN
    ARR = ARRAY*(N+1)
    IF N EQ 0 THEN START = 1 ELSE START = 0
    IF N EQ 4 THEN CALC  = 1 ELSE CALC  = 0
    S1 = STATS_ARRAYS(ARR,START=START,CALC=CALC,DO_STATS=['MEAN','GMEAN'],TRANSFORM='ALOG')
  ENDFOR
  FOR N=0, 4 DO BEGIN
    ARR = ARRAY*(N+2)
    IF N EQ 0 THEN START = 1 ELSE START = 0
    IF N EQ 4 THEN CALC  = 1 ELSE CALC  = 0
    S2 = STATS_ARRAYS(ARR,START=START,CALC=CALC,DO_STATS=['MEAN','GMEAN'],TRANSFORM='ALOG')
  ENDFOR
  
  SA = STATS_ARRAYS(S1.MEAN,START=1,TRANSFORM='ALOG')
  SA = STATS_ARRAYS(S2.MEAN,CALC=1,TRANSFORM='ALOG')
  
  SG = STATS_ARRAYS(S1.GMEAN,START=1,TRANSFORM='ALOG')
  SG = STATS_ARRAYS(S2.GMEAN,CALC=1,TRANSFORM='ALOG')
  
  PRINT, 'MEAN comparison'
  PRINT, 'MEAN input:'
  PRINT, SA.MEAN
  PRINT, 'GMEAN input:'
  PRINT, SG.MEAN
  
  PLINES
  PRINT, 'GMEAN comparison'
  PRINT, 'MEAN input:'
  PRINT, SA.GMEAN
  PRINT, 'GMEAN input:'
  PRINT, SG.GMEAN
  
  
  
  
  
 stop
  
  
ENDIF ; DO_MEAN_COMPARE  
;||||||||||||||||||||||||||||||||||||





END; #####################  END OF ROUTINE ################################



