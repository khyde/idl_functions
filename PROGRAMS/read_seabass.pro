; $ID:	READ_SEABASS.PRO,	2020-07-08-15,	USER-KJWH	$
;+
; ######################################################################### 
  FUNCTION READ_SEABASS,FILE,DIR_OUT=DIR_OUT,VERBOSE=VERBOSE

;  PURPOSE:   READ A SEABASS DATA FILE AND RETURN ALL ITS INFO IN A STRUCTURE

; CATEGORY: READ
  
; KEYWORDS:
;          DIR_OUT..... IF DIR_OUT IS PROVIDED THEN ALSO WRITE THE STRUCTURE TO DIR_OUT
;          VERBOSE..... DISPLAY PROGRESS

;                    
; MODIFICATION HISTORY:
;     JUL 27,2015 WRITTEN BY: J.E. O'REILLY
;     JUL 28,2015,JOR: IF STRUPCASE(STRING(B)) EQ '/BEGIN_HEADER' THEN CLOSE,1  ELSE GOTO,DONE
 
; #########################################################################
;-

;*******************************
ROUTINE_NAME  = 'READ_SEABASS'
;*******************************
IF KEY(VERBOSE) THEN 
CLOSE,/ALL
IF NONE(FILE) THEN MESSAGE,'ERROR: FILE IS REQUIRED'
;===> CAN NOT BE A DOCUMENT FILE
IF STRPOS(STRUPCASE(FILE),'DOC') GE 0 THEN RETURN,'ERROR: CAN NOT BE A DOCUMENT FILE'
;===> CHECK FIRST 13 BYTES FOR '/BEGIN_HEADER'
B=BYTARR(13)
OPENR,1,FILE
READU,1,B
IF STRUPCASE(STRING(B)) EQ '/BEGIN_HEADER' THEN BEGIN
ENDIF ELSE BEGIN
  GOTO,DONE;>>>>>>>>>>>>>>>
ENDELSE;IF STRUPCASE(STRING(B)) EQ '/BEGIN_HEADER' THEN BEGIN
  CLOSE,1 
PFILE,FILE,/R
TXT = STRUPCASE(READ_TXT(FILE))
;
; ;===> GET DATA >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 OK_HEADER = WHERE_STRING(TXT,['BEGIN_HEADER','/END_HEADER'],COUNT_HEADER)
 IF COUNT_HEADER NE 2 THEN RETURN,'ERROR: /END_HEADER NOT FOUND IN THE FILE-CHECK THE FILE'

 HEADER =TXT(OK_HEADER[0]+1:OK_HEADER[1]-1)
 ;===> GET TAGS
OK = WHERE_STRING(HEADER,'/',COUNT)
IF COUNT GE 1 THEN INFO = HEADER[OK]
;===> REMOVE SLASH
INFO = REPLACE(INFO,'/','')
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,NOF(INFO)-1 DO BEGIN
  T = STR_SEP(INFO[NTH],'=')
  ;===> IF T IS NOT TWO ELEMENTS THEN SKIP BECAUSE INPUT DATA ARE NOT PROPERLY FORMATTED
  IF NOF(T) NE 2 THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  NAME  = IDL_VALIDNAME(T[0],/CONVERT_ALL)
  VALUE = T[1]
  ;===> REMOVE ANY QUALIFIERS INSIDE BRACKETS [DEG,GMT]
  BEG = STRPOS(VALUE,'[')
  IF BEG NE -1 THEN VALUE = STRMID(VALUE,0,BEG)
  IF NOF(T) EQ 2 THEN S = CREATE_STRUCT(NAME,VALUE)
  IF NTH EQ 0 THEN BEGIN
    STRUCT = S 
  ENDIF ELSE BEGIN
    ;===> SKIP IF TAG IS ALREADY PRESENT IN STRUCT [NECESSARY]
    IF STRUCT_HAS(STRUCT,NAME) THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    STRUCT = CREATE_STRUCT(STRUCT,S)
  ENDELSE;IF NTH EQ 0 THEN BEGIN
    
ENDFOR;FOR NTH = 0,NOF(INFO)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


DAT = TXT(OK_HEADER[1]+1:*)
;===> REMOVE ANY SPACES AT THE BEGINNING OR END OF THE DAT STRINGS
DAT = STRTRIM(DAT,2)
;===> STRCOMPRESS WILL REMOVE TABS AND SPACES, LEAVING ONE SPACE BETWEEN DATA ELEMENTS
DAT = STRCOMPRESS(DAT)
;===> NOW REPLACE SPACES WITH COMMAS
DAT = REPLACE(DAT,' ',',')
;===> GET THE TAGNAMES  FROM FIELDS
TAGNAMES = STR_SEP(STRUCT.FIELDS,',')
TAGNAMES = IDL_VALIDNAME(TAGNAMES,/CONVERT_ALL)

;===> ADD EACH DATA COLUMN TO THE STRUCT
D = TXT_2STRUCT(DAT,DELIM = ',',TAGNAMES = TAGNAMES)
;===> REPLACE MISSING DATA WITH THE NARRAGANSETT STANDARD MISSING CODE FOR STRINGS['']
SEABASS_MISS = STRUCT[0].MISSING

D = REPLACE(D,SEABASS_MISS,'')

;==> REPLICATE STRUCT TO MATCH NUM OF RECORDS IN D
STRUCT = REPLICATE(STRUCT,NOF(D))
;===> COMBINE D WITH STRUCT
STRUCT = STRUCT_MERGE(STRUCT,D)
;===> IF DIR_OUT IS PROVIDED THEN ALSO WRITE THE STRUCTURE TO DIR_OUT
;*************************
IF KEY(DIR_OUT) THEN BEGIN
;*************************
  NAME = STRUPCASE((FILE_PARSE(FILE)).NAME)
  OUT = DIR_OUT + NAME + '.SAV'
  STRUCT_WRITE,STRUCT,FILE = OUT 
ENDIF;IF KEY(DIR_OUT) THEN BEGIN
;|||||||||||||||||||||||||||||||

RETURN,STRUCT
 IF KEY(VERBOSE) THEN 
DONE:; COME HERE WHEN FILE NOT A SEABASS DATA FILE
END; #####################  END OF ROUTINE ################################
