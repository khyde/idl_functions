; $ID:	EC_SUBAREAS_DEMO.PRO,	2020-07-08-15,	USER-KJWH	$

	PRO EC_SUBAREAS_DEMO

;+
; NAME:
;		EC_SUBAREAS_DEMO
;
; PURPOSE:;
;		This procedure is a DEMO to make a new subarea map for the EC map projection
;
; CATEGORY:
;		CATEGORY
;
; CALLING SEQUENCE:
;		NO KEYWORDS
;
; INPUTS:
;
; OPTIONAL INPUTS:
;
; KEYWORD PARAMETERS:
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			Written May 1, 2014 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'EC_SUBAREAS'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
	PAL_36,R,G,B

; 	SL = DELIMITER(/PATH)
;	DIR_DEMO = !S.DEMO + 'EC' + SL  & DIR_TEST, DIR_DEMO
	
;	LANDMASK = READ_LANDMASK(MAP='EC',/STRUCT)
;	IMG      = LANDMASK.LANDMASK
  ZWIN, [1024,1024]
	  MAP_EC
 	
;   Polygon 1
    LATS = [39.17, 39.16, 39.25, 39.36, 39.17] ; Need to repeat the first coordinate in order to close the box.
    LONS = [-72.35,-72.23,-72.23,-72.34,-72.35]
  	IM = MAP_DEG2IMAGE(IMG,LONS,LATS, X=x, Y=y,AROUND=0)
  	POLYFILL, X, Y, COLOR=22, /DEVICE
		
		IM_SUBS = tvrd()		
		TV,IM
  ZWIN

    OK_IMAGE = WHERE(IMG NE 0)
    IM_SUBS(OK_IMAGE) = IMG(OK_IMAGE)
		MASK = IM_SUBS
		IMG(LANDMASK.OCEAN) = 36
		OK = WHERE(IM_SUBS NE 0)
		IMG[OK] = IM_SUBS[OK]
		
		IMG(LANDMASK.LAND)  = 32
		IMG(LANDMASK.COAST) = 0

		OK = WHERE(MASK NE 0)
		IM_SUBS[OK] = MASK[OK]

		EDITFILE = DIR_DEMO	+ 'MASK_SUBAREA-EC-PXY_1024_1024-DEMO_POLYGONS-TO_BE_EDITED.PNG' & WRITE_PNG, EDITFILE, IM_SUBS, R,G,B
		MASKFILE = DIR_DEMO + 'MASK_SUBAREA-EC-PXY_1024_1024-SOOP_POLYGONS.PNG'
		PNGFILE  = DIR_DEMO	+ 'MASK_SUBAREA-EC-PXY_1024_1024-SOOP_POLYGONS-DISPLAY.PNG'      & WRITE_PNG, PNGFILE, IMG, R,G,B
  	CSVFILE  = DIR_DEMO	+ 'MASK_SUBAREA-EC-PXY_1024_1024-SOOP_POLYGONS.CSV'
  	SAVEFILE = DIR_DEMO + 'MASK_SUBAREA-EC-PXY_1024_1024-SOOP_POLYGONS.SAVE'


		STRUCT1=CREATE_STRUCT('SUBAREA_CODE','','SUBAREA_NAME','','NICKNAME','')
		STRUCT1=REPLICATE(STRUCT1,3)
		STRUCT1[0].SUBAREA_CODE =0 	& STRUCT1[0].SUBAREA_NAME = 'OCEAN' 		& STRUCT1[0].NICKNAME='OCEAN'
		STRUCT1[1].SUBAREA_CODE =1 	& STRUCT1[1].SUBAREA_NAME = 'COAST' 		& STRUCT1[1].NICKNAME='COAST'
		STRUCT1(2).SUBAREA_CODE =2 	& STRUCT1(2).SUBAREA_NAME = 'LAND'  		& STRUCT1(2).NICKNAME='LAND'

		STRUCT=CREATE_STRUCT('SUBAREA_CODE','','SUBAREA_NAME','','NICKNAME','')
		STRUCT=REPLICATE(STRUCT,N_ELEMENTS(POLYGONS))
		STRUCT.SUBAREA_CODE = INDGEN(N_ELEMENTS(POLYGONS))+5
		STRUCT.SUBAREA_NAME = STRUPCASE(POLYGONS)
		STRUCT.NICKNAME     = STRUPCASE(POLYGONS)

		CSV = STRUCT_CONCAT(STRUCT1,STRUCT)

		INFILE=MASKFILE
		NOTES='MASK_SUBAREA'

;			===> Write the Struct to a csv
		STRUCT_2CSV,CSVFILE,CSV
		OK=WHERE(CSV.SUBAREA_CODE NE MISSINGS(CSV.SUBAREA_CODE))
		SUBAREA_CODE= CSV[OK].SUBAREA_CODE
		SUBAREA_NAME= CSV[OK].SUBAREA_NAME
		DATA = READ_PNG(MASKFILE) 

  	STRUCT_SD_WRITE,SAVEFILE, IMAGE=DATA, PROD=PROD,  MAP=MAP, $
      MISSING_CODE=missing_code, MISSING_NAME=missing_name, $
      SUBAREA_CODE=SUBAREA_CODE,SUBAREA_NAME=subarea_name,$
      SCALING='LINEAR',  INTERCEPT=0.0,  SLOPE=1.0,TRANSFORMATION=TRANSFORMATION,$
      DATA_UNITS='',PERIOD=PERIOD, $
      INFILE=INFILE,$
      NOTES='MASK_SUBAREA', OVERWRITE=OVERWRITE, ERROR=ERROR


END; #####################  End of Routine ################################



