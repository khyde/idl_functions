; $ID:	GET_LME_DB.PRO,	2020-06-26-15,	USER-KJWH	$


;#############################################################################################################
	FUNCTION GET_LME_DB,VERBOSE=VERBOSE,MAPS=MAPS,SORT=SORT
	
;  PRO GET_LME_DB
;+
; NAME:
;		GET_LME_DB
;
; PURPOSE: THIS FUNCTION RETURNS A STRUCTURE WITH THE NAMES AND CODES OF THE LME MAPS
;
; CATEGORY:
;		PROGRAMMING CONTROL
;		 
;
; CALLING SEQUENCE:RESULT = GET_LME_DB()
;
; INPUTS:
;		NONE:	
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;   MAPS : RETURNS JUST THE NAMES OF MAPS
;   SORT: ALPHA SORT THE DB ON MAP


; OUTPUTS:
;		
;; EXAMPLES:
;  DB = GET_LME_DB()
;	NOTES:

;		
;
;
; MODIFICATION HISTORY:
;			WRITTEN JUN 28,2012  J.O'REILLY
;			MAY 27,2013,JOR CORRECTED DOCUMENTATION: ALL RETURNS ALL 64 LMES
;			JUN 6,2013,JOR ADDED PWP SO 63 NOT 62 LMES   IF COUNT EQ 63 THEN BEGIN
;     SEP 9,2013,JOR,  DB = READ_CSV('D:\IDL\DATA\LMES67_MAPS_MASTER.CSV')
;                      IF COUNT EQ 67 THEN BEGIN
;                      NAMES = DB.LME_NAME
;     SEP 15,2013,JOR, NOW USING 'D:\IDL\DATA\LMES67_DBF_MASTER.SAVE'
;     OCT 2,2013,JOR SAVEFILE = GET_PATH()+ 'IDL\DATA\LMES67_DBF_MASTER.SAVE'  & PFILE,SAVEFILE,/R
;                     DB = STRUCT_2NUM(DB)
;     MAY 9,2013,JOR :SAVEFILE = !S.MASTER +'LMES67_DBF_MASTER.SAVE'
;                     ADDED KEY MAPS



;#################################################################################
;-
;***************************
ROUTINE_NAME  = 'GET_LME_DB'
;***************************

  ;===> GET THE  SAVEFIL=E WITH LME NAMES ,CODES AND LIMITS ADDED FROM STEP DO_ADD_LIMIT_2_LME_MAPS IN MAKE_LME67_MAPS
  SAVEFILE = !S.MASTER +'LMES67_DBF_MASTER.SAVE'  
  IF KEYWORD_SET(VERBOSE) THEN PFILE,SAVEFILE,/I
  DB = IDL_RESTORE(SAVEFILE)   ; SEP 15,2013,JOR
  ;===>
  ;CONVERT DB TAGS TO NUMERIC [WHERE POSSIBLE-THIS CONVERTS LME_NUMBER TO LONG- FOR PLOT_SHAPE]
  DB = STRUCT_2NUM(DB)


  OK = WHERE(DB.CODE NE '',COUNT)
  IF COUNT EQ 67 THEN BEGIN
    DB = DB[OK]
    
    CODES= DB.CODE
    NAMES = DB.LME_NAME
  ENDIF ELSE BEGIN
    STOP
  ENDELSE
  IF KEY(SORT)  THEN BEGIN
    MAPS = DB.MAP
    S = SORT(MAPS)
    DB = DB(S)
    MAPS = MAPS(SORT(MAPS))
  ENDIF;IF KEY(SORT)  THEN BEGIN
  IF KEY(MAPS) THEN RETURN, DB.MAP ELSE RETURN,DB
DONE:          
	END; #####################  END OF ROUTINE ################################
