; $ID:	FILE_CASE.PRO,	2020-07-01-12,	USER-KJWH	$
;######################################################################################
PRO FILE_CASE, FILES, DIR_OUT=DIR_OUT , UPPER=UPPER,LOWER=LOWER, VERBOSE=VERBOSE, TEST=TEST
;+
; NAME:
;       FILE_CASE
;
; PURPOSE: CHANGE FILE NAME TO UPPER OR LOWER CASE
; EXAMPLE:
;       FILE_CASE,FILES=' '
;
; INPUTS:
;       FILES
;
; KEYWORD PARAMETERS:
;   DIR_OUT: OUTPUT DIRECTORY FOR RENAMED FILE
;   UPPER:  MAKE NAME UPPER CASE
;   LOWER:  MAKE NAME LOWER CASE [DEFAULT]
;   VERBOSE: PRINT PROGRAM OUTPUT
;   TEST:   PRINTS OUT COMMAND BUT DOES NOT EXECUTE IT
;
; OUTPUTS:
;       RENAMES FILES UPPER OR LOWER CASE
; EXAMPLES:
;           FILE_CASE,'*.PRO'
;           FILE_CASE,'D:\IDL\PROGRAMS\*.PRO'
;           FILE_CASE,'C:\IDL\JUNK\*.*',/TEST
; MODIFICATION HISTORY:
;       WRITTEN BY:  J.E.O'REILLY, OCT 26, 1995.
;       DEC 9,2013, JOR STREAMLINED, ADDED DIR_TEST, FILELIST CHANGED TO FILE_SEARCH,
;                     PARSE_IT CHANGED TO FILE_PARSE,ADDED ,,PFILE,POF
;                     ADDED EXAMPLES, DOCUMENTATION & FORMATTING 
;######################################################################################
;-
;**************************
ROUTINE_NAME = 'FILE_CASE'
;**************************

IF N_ELEMENTS(FILES) LT 1 THEN MESSAGE,'ERROR: FILES ARE REQUIRED'

;===> DEFAULT IS LOWER CASE
IF N_ELEMENTS(UPPER) NE 1 AND N_ELEMENTS(LOWER) NE 1 THEN LOWER = 1

;===> FILE_UNLIKELY [USED AS A TEMPORARY FILE]
FILE_UNLIKELY = '!#$-JUNK.TXT'

;===> OUTPUT DIRECTORY ===============================================
IF N_ELEMENTS(DIR_OUT) EQ 1 THEN _DIR_OUT = DIR_OUT ELSE _DIR_OUT = ''
IF _DIR_OUT NE '' THEN BEGIN
  ; ===> MAKE DIR_OUT IF IT DOES NOT EXIST
  DIR_TEST,DIR_OUT
  IF FILE_TEST(_DIR_OUT,/DIRECTORY) EQ 0L THEN MESSAGE,'ERROR: CAN NOT MAKE THE DIRECTORY: '+_DIR_OUT
 ENDIF;IF _DIR_OUT NE '' THEN BEGIN
;||||||||||||||||||||||||||||||||||

; ===> GET THE FILES
FILES = FILE_SEARCH(FILES)
IF FIRST(FILES) EQ '' THEN MESSAGE,'ERROR: NO FILES FOUND'

FN = FILE_PARSE(FILES)
  
;	===> GET RID OF NULL FILE NAMES
OK=WHERE(FN.NAME NE MISSINGS(FN.NAME),COUNT)
IF COUNT GE 1 THEN FILES=FILES[OK]

IF STRUPCASE(FN[0].EXT) EQ 'Z' THEN FILES = FN.NAME
  
; ====================>
IF N_ELEMENTS(FILES) EQ 0 THEN MESSAGE,'ERROR: NO FILES FOUND'
  
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(FILES)-1L DO BEGIN
  POF,NTH,FILES
  OLD_FILE = FILES[NTH]
  FN = FILE_PARSE(OLD_FILE)
  IF _DIR_OUT EQ '' THEN _DIR_OUT = FN.DIR

  IF N_ELEMENTS(UPPER) EQ 1 THEN BEGIN
    FN.NAME = STRUPCASE(FN.NAME)
    FN.EXT  = STRUPCASE(FN.EXT)
  ENDIF
  IF N_ELEMENTS(LOWER) EQ 1 THEN BEGIN
    FN.NAME = STRLOWCASE(FN.NAME)
    FN.EXT  = STRLOWCASE(FN.EXT)
  ENDIF
  NEW_FILE=_DIR_OUT + FN.NAME+'.'+FN.EXT

  IF KEYWORD_SET(TEST) THEN BEGIN
    PRINT,'TESTING:   '+ OLD_FILE +'  WILL BE CHANGED TO  ' + NEW_FILE
    PRINT
  ENDIF ELSE BEGIN
    FILE_COPY, OLD_FILE, FILE_UNLIKELY,/OVERWRITE
    FILE_MOVE, FILE_UNLIKELY, NEW_FILE,/ALLOW_SAME,/OVERWRITE
    PFILE,NEW_FILE,/W
  ENDELSE;IF KEYWORD_SET(TEST) THEN BEGIN
    
ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1L DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
   DONE:
   
END; END OF PROGRAM
