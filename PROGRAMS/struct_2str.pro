; $ID:	STRUCT_2STR.PRO,	2020-07-08-15,	USER-KJWH	$
;#######################################################################################################
	FUNCTION STRUCT_2STR, STRUCT,  EXCLUDE=EXCLUDE
;+
; THIS FUNCTION CONVERTS TAGS IN A SIMPLE SPREADSHEET STRUCTURE TO STRING TYPE 
; SYNTAX:
;   RESULT = STRUCT_2STR(STRUCT)
;   RESULT = STRUCT_2STR(STRUCT)
; ARGUMENTS:
;   STRUCT: IDL STRUCTURE (SIMPLE SPREADSHEET TYPE STRUCTURE)
; KEYWORDS:
;   FLT: CONVERT POTENTIAL NUMBERS IN STRING TAGS INTO FLOAT PRECISION. THE DEFAULT IS
;				 TO CONVERT TO DOUBLE WHEN DECIMAL OR SCIENTIFIC (EXPONENTIAL) NOTATION E.G. 1E-3 .
;		EXCLUDE: TAGNAMES TO EXCLUDE FROM BEING CHANGED TO NUMBERS.

; EXAMPLE:
;		STRUCT = CREATE_STRUCT('AA',0B,'BB','1','CC','2.1','DD',0.0D,'EE',0L,'FF',' ','GG','CAT','HH',' ')
;		STRUCT = REPLICATE(STRUCT,3)
;		STRUCT[0].AA = 255
;		STRUCT(2).AA = 127
;		STRUCT[0].BB = 'CAT'
;		STRUCT[1].BB = ''
;		STRUCT[1].FF = '0'
;		STRUCT[1].EE = -2
;		STRUCT[1].HH ='1E-3'
;		STRUCT(2).HH ='-1E3'
;	 	HELP,/STRUCT,STRUCT
;		D=STRUCT_2STR(STRUCT,/FLT)
;		HELP,/STRUCT,D
;		S = STRUCT_2STR(STRUCT_IT(DATE_NOW())) & ST,S
;
; NOTES:
;
;		1) THE INPUT STRUCTURE IS NOT ALTERED.
;		2) NUMERIC TAGS AND TAGS WHICH ARE NOT STRING ARE NOT CHANGED
;		3) STRING TAGS ARE CONVERTED TO LONG IF NONE OF THE ELEMENTS OF THE TAG HAVE A DECIMAL CHARACTER
;			 AND NONE OF THE ELEMENTS HAVE SCIENTIFIC (EXPONENTIAL) NOTATION E.G. 1E-3
;		4) STRING TAGS ARE CONVERTED TO DOUBLE IF ANY OF THE ELEMENTS OF THE TAG HAVE A DECIMAL CHARACTER
;			 OR ANY OF THE ELEMENTS OF THE TAG HAVE SCIENTIFIC (EXPONENTIAL) NOTATION
;		5) IF THE STRING CAN BE CONVERTED TO LONG OR DOUBLE THEN
;			 ANY NULL '' OR EMPTY '    ' ELEMENTS ARE SET TO THE MISSING DATA CODE FOR LONG OR DOUBLE
;			 AS DEFINED IN MISSINGS.PRO
;		6) IF THE KEYWORD FLT IS USED THEN STRINGS ARE CONVERTED TO FLOAT INSTEAD OF DOUBLE
;
;		6) THIS ROUTINE IS USEFULL FOR CONVERTING A STRUCTURE MADE OF STRING VARIABLES
;				(E.G. FROM READ_CSV.PRO) INTO NUMERIC TYPE DATA
;
; HISTORY:
;   SEP 10,2014 WRITTEN BY: J.E. O'REILLY, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;		COPIED FROM STRUCT_2NUM [ EXCESS CODE NEEDS TO BE DELETED BUT IT SEEMS TO WORK ]
;#######################################################################################################
;
;-
; ***************************
ROUTINE_NAME  = 'STRUCT_2STR'
;****************************

; CREATE_STRUCT
  SZ=SIZE(STRUCT,/STRUCT)
  TYPE = SZ.TYPE

;	===> STRUCT MUST BE A STRUCTURE
  IF TYPE NE 8 THEN BEGIN
    ERROR = 'ERROR: STRUCT MUST BE A SIMPLE SPREADSHEET-TYPE IDL STRUCTURE'
    RETURN, ERROR
  ENDIF

	IF N_ELEMENTS(EXCLUDE) GE 1 THEN _EXCLUDE = EXCLUDE ELSE _EXCLUDE = ''

	
	MISSING_CODE_STRING 	= MISSINGS('')
	MISSING_CODE_ULONG64 = MISSINGS(ULONG64[0])

  NTAGS = N_TAGS(STRUCT)

  TAGNAMES = TAG_NAMES(STRUCT)
	NUM = N_ELEMENTS(STRUCT)
	INDX = LINDGEN(NUM)
	EMPTY_STRINGS = REPLICATE(0B,NUM)


;	******************************************************
; CREATE A NEW STRUCTURE WITH TAG NAMES SAME AS ORIGINAL
; BUT CHANGE THE DATA TYPE TO NUMERIC IF POSSIBLE
  FOR N = 0L, NTAGS-1L DO BEGIN
  	TYPE = IDLTYPE(STRUCT.(N),/CODE)

;		===> CHECK TO SEE IF THIS TAGNAME IS IN THE EXCLUDE LIST
		OK_EXCLUDE=WHERE(STRUPCASE(_EXCLUDE) EQ STRUPCASE(TAGNAMES(N)), COUNT_EXCLUDE)

		IF COUNT_EXCLUDE EQ 1 OR TYPE NE 7 THEN BEGIN
;			===> IF TAG IS ALREADY NUMERIC OR IF TAG IS NOT A STRING THEN DO NOT CHANGE THE DATA TYPE
		  TEMPLATE = STRUCT[0].(N)
		ENDIF ELSE BEGIN

;			===> WHICH ARRAY VALUES ARE POTENTIALLY NUMERIC
  		_NUMBER  = NUMBER(STRUCT.(N))
  		_EMPTY_STRINGS = EMPTY_STRINGS
			OK=WHERE(STRTRIM(STRUCT.(N),2) EQ '',COUNT)
  		IF COUNT GE 1 THEN _EMPTY_STRINGS[OK] = 1
  		VALID_NUMBER    = _NUMBER > _EMPTY_STRINGS

			IF MIN(VALID_NUMBER) EQ 0 THEN BEGIN
;				IF ANY ELEMENT OF THE VALID ARRAY IS 0 THEN NOT ALL VALUES IN THE STRING CAN BE CONVERTED INTO
;				NUMBERS SO THE TAG WILL REMAIN AS STRING TYPE
				TEMPLATE = MISSING_CODE_STRING
			ENDIF ELSE BEGIN
;				IF THERE ARE ANY DECIMALS IN THE STRING OR IF THE STRING IS SCIENTIFIC (EXPONENTIAL) NOTATION
;				E.G. 1E-3, THEN CONVERT TO DOUBLE ELSE MAKE LONG, ULONG, OR ULONG64, AS NEEDED
   			IF MAX(STRPOS(STRUCT.(N),'.')) GE 0 OR  MAX(STRPOS(STRUPCASE(STRUCT.(N)),'E')) GE 1 THEN BEGIN
   				TEMPLATE = MISSINGS(0.0D)
   			ENDIF ELSE BEGIN
   				MAX_LEN = MAX(STRLEN(STRUCT.(N)))
   				TEMPLATE = MISSING_CODE_ULONG64 ; START WITH LARGEST POSSIBLE LONG
   				IF MAX_LEN LE 9 THEN TEMPLATE = MISSINGS(0L)
   				IF MAX_LEN LE 4 THEN TEMPLATE = MISSINGS(0UL)
   			ENDELSE
			ENDELSE
		ENDELSE

;		===> MAKE THE NEW STRUCTURE
		IF N EQ 0 THEN _STRUCT	=	CREATE_STRUCT(TAGNAMES(N),'') ELSE $
  								 _STRUCT = CREATE_STRUCT(_STRUCT,TAGNAMES(N),'')
  ENDFOR

  _STRUCT=REPLICATE(_STRUCT,NUM)

;	****************************************************
;	FILL EACH TAG, CHECKING IF TYPE IS NUMERIC OR STRING
	FOR N = 0L, NTAGS-1L DO BEGIN
		TYPE_SOURCE	= IDLTYPE(STRUCT.(N),/CODE)
		TYPE_DEST		= IDLTYPE(_STRUCT.(N),/CODE)

		IF TYPE_DEST EQ TYPE_SOURCE THEN BEGIN
			_STRUCT.(N) = STRUCT.(N)
		ENDIF ELSE BEGIN
		  _STRUCT.(N) = STRTRIM(STRUCT.(N),2)
;			SET ELEMENTS OF THE OUTPUT _STRUCT TO THE MISSING CODE APPROPRIATE FOR THE OUTPUT TAG WHEN
;			ANY ELEMENTS OF THE INPUT STRUCT WHICH ARE EMPTY STRINGS
		  OK=WHERE(STRTRIM(STRUCT.(N),2) EQ '',COUNT)
		  IF COUNT GE 1 THEN _STRUCT[OK].(N) = MISSINGS(_STRUCT[OK].(N))
		ENDELSE
  ENDFOR

  RETURN,_STRUCT


END; #####################  END OF ROUTINE ################################
