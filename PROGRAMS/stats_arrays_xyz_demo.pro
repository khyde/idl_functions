; $ID:	STATS_ARRAYS_XYZ_DEMO.PRO,	2020-07-08-15,	USER-KJWH	$
; #########################################################################; 
PRO STATS_ARRAYS_XYZ_DEMO
;+
; PURPOSE:  VALIDATE STATS_ARRAYS_XYZ
;
; CATEGORY: DEMO
;
;
; INPUTS:  NONE 
;
;
; KEYWORDS:  NONE
; 
; 
; OUTPUTS: 
;
;; EXAMPLES: NONE
;         
;
; MODIFICATION HISTORY:
;     APR 12, 2018  WRITTEN BY: J.E. O'REILLY
;     APR 13, 2018 - JEOR: ADDED NEW KEYS TO TEST
;     APR 14, 2018 - JEOR: ADDED STEP TEST_XYZ [AND ASSOCIATED CODE IN STATS_ARRAYS_XYZ
;     APR 15, 2018 - JEOR: ADDED STEP FRONTS_XYZ
;     APR 16, 2018 - JEOR: RENAME OUTPUT STRUCTURE IN STEP FRONTS_XYZ [XNAME,YNAME,ZNAME] 
;     APR 23, 2018 - JEOR: COMPARE GRAD_X WITH THAT USING STATS_ARRAYS
;     APR 24, 2018 - JEOR: ADDED COMPARISON BETWEEN OLD STATS_ARRAYS AND STATS_ARRAYS_XYZ_JAY
;                          [STATS_ARRAYS_XYZ DOES NOT AGREE WITH STATS_ARRAYS OUTPUT BUT STATS_ARRAYS_XYZ_JAY DOES AGREE]
;     APR 25, 2018 - KJWH: Added KIMS_TEST to test the various STATS_ARRAYS options using a simple data array
;                          Updated FRONTS_XYZ to include other STATS_ARRAYS options                    
; #########################################################################
;-
;********************************
  ROUTINE = 'STATS_ARRAYS_XYZ_DEMO'
;********************************

  SL = PATH_SEP()

;===> SWITCHES:
  TEST_XDATA   = ''
  TEST_YDATA   = ''
  TEST_ZDATA   = ''
  TEST_X       = ''
  TEST_XY      = ''
  TEST_XYZ     = ''
  KIMS_TEST    = ''
  FRONTS_XYZ   = 'YS'
  FRONTS_STATS = 'YS'

;*****************************
IF KEY(TEST_XDATA) THEN BEGIN
  ;***************************
  SWITCHES,TEST_XDATA,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS

;  ARRAY = FINDGEN(3,3) &  ARRAY(0,0) = MISSINGS(ARRAY) & ARRAY(1,1) = MISSINGS(ARRAY)& ARRAY(2,2) = MISSINGS(ARRAY)
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)

  PRINT,' ===> USE  /START WITH THE FIRST CALL THEN  S WILL BE 1, INDICATING CUMULATIVE NUMBER OF CALLS'
  PRINT
  ARR = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=ARR,/XSTART,XTRANSFORM = 'ALOG10',XSTATS =['MIN','MAX','MEAN','NUM'],XRANGE = [1,100],XOPER =['GE','LT'],XCRITERIA_TXT=CRITERIA_TXT)
  PRINT,' ===>  NOW S WILL BE 1, INDICATING CUMULATIVE NUMBER OF CALLS  S = ' ,S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(XDATA=ARR,XSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 2, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(XDATA=ARR,XSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 3, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ( XDATA=ARR,XSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 4, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(XDATA=ARR,XSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 5, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(XDATA=ARR,XSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 6, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY
  PRINT,' ===> NOW USE   /[XYZ]CALC TO SEE STATS AFTER THE SEVENTH CALL [S IS NOW A STRUCTURE] '
  S = STATS_ARRAYS_XYZ(XDATA=ARR,/XCALC,XSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,'NUM SHOULD BE 7 :'
  PRINT,'N_SETS = :',S.N_SETS
  PRINT,'ARRAY: '
  PRINT,ARRAY &PRINT & PRINT,S.NUM & PRINT & PRINT,S.MEAN
;  ST,S
  PRINT,CRITERIA_TXT

  IF STOPP THEN STOP

 ; PDONE,'TEST_XDATA'
ENDIF;IF KEY(TEST_XDATA) THEN BEGIN
;|||||||||||||||||||||||||||||||||||
;
;
;*****************************
IF KEY(TEST_YDATA) THEN BEGIN
;***************************
  SWITCHES,TEST_YDATA,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS

;  ARRAY = FINDGEN(3,3) &  ARRAY(0,0) = MISSINGS(ARRAY) & ARRAY(1,1) = MISSINGS(ARRAY)&ARRAY(2,2) = MISSINGS(ARRAY)
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)


  PRINT,' ===> USE  /START WITH THE FIRST CALL THEN  S WILL BE 1, INDICATING CUMULATIVE NUMBER OF CALLS'
  PRINT
  ARR = ARRAY
  S = STATS_ARRAYS_XYZ(YDATA=ARR,/YSTART,YTRANSFORM = 'ALOG10',YSTATS =['MIN','MAX','MEAN','NUM'],YRANGE = [1,100],YOPER =['GE','LT'],YCRITERIA_TXT=CRITERIA_TXT)
  PRINT,' ===>  NOW S WILL BE 1, INDICATING CUMULATIVE NUMBER OF CALLS  S = ' ,S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(YDATA=ARR,YSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 2, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(YDATA=ARR,YSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 3, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ( YDATA=ARR,YSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 4, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(YDATA=ARR,YSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 5, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(YDATA=ARR,YSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 6, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY
  PRINT,' ===> NOW USE   /CALC TO SEE STATS AFTER THE SEVENTH CALL [S IS NOW A STRUCTURE] '
  S = STATS_ARRAYS_XYZ(YDATA=ARR,/YCALC,YSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,'NUM SHOULD BE 7 :'
  PRINT,'N_SETS = :',S.N_SETS
  PRINT,S.NUM & PRINT & PRINT,S.MEAN
;  ST,S
  PRINT,CRITERIA_TXT

    IF STOPP THEN STOP

 ; PDONE,'TEST_YDATA'
ENDIF;IF KEY(TEST_YDATA) THEN BEGIN
;|||||||||||||||||||||||||||||||||||
;*****************************
IF KEY(TEST_ZDATA) THEN BEGIN
  ;***************************
  SWITCHES,TEST_ZDATA,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS

;  ARRAY = FINDGEN(3,3) &  ARRAY(0,0) = MISSINGS(ARRAY) & ARRAY(1,1) = MISSINGS(ARRAY)&ARRAY(2,2) = MISSINGS(ARRAY)
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)


  PRINT,' ===> USE  /START WITH THE FIRST CALL THEN  S WILL BE 1, INDICATING CUMULATIVE NUMBER OF CALLS'
  PRINT
  ARR = ARRAY
  S = STATS_ARRAYS_XYZ(ZDATA=ARR,/ZSTART,ZTRANSFORM = 'ALOG10',ZSTATS =['MIN','MAX','MEAN','NUM'],ZRANGE = [1,100],ZOPER =['GE','LT'],ZCRITERIA_TXT=CRITERIA_TXT)
  PRINT,' ===>  NOW S WILL BE 1, INDICATING CUMULATIVE NUMBER OF CALLS  S = ' ,S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(ZDATA=ARR,ZSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 2, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(ZDATA=ARR,ZSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 3, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ( ZDATA=ARR,ZSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 4, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(ZDATA=ARR,ZSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 5, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY & S = STATS_ARRAYS_XYZ(ZDATA=ARR,ZSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,' ===>  NOW S WILL BE 6, INDICATING CUMULATIVE NUMBER OF CALLS  S = ',S
  ARR = ARRAY
  PRINT,' ===> NOW USE   /CALC TO SEE STATS AFTER THE SEVENTH CALL [S IS NOW A STRUCTURE] '
  S = STATS_ARRAYS_XYZ(ZDATA=ARR,/ZCALC,ZSTATS =['MIN','MAX','MEAN','NUM'])
  PRINT,'NUM SHOULD BE 7 :'
  PRINT,'N_SETS = :',S.N_SETS
  PRINT,S.NUM & PRINT & PRINT,S.MEAN
;  ST,S
  PRINT,CRITERIA_TXT

  IF STOPP THEN STOP

 ; PDONE,'TEST_ZDATA'
ENDIF;IF KEY(TEST_ZDATA) THEN BEGIN
;|||||||||||||||||||||||||||||||||||

;*******************************
IF KEY(TEST_X) THEN BEGIN
  ;******************************
  SWITCHES,TEST_X,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  IF STOPP THEN STOP
  S = STATS_ARRAYS_XYZ(XDATA=X,/XSTART,XTRANSFORM = 'ALOG10')
  PRINT,S
  IF STOPP THEN STOP

  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X)
  PRINT,S
  IF STOPP THEN STOP

  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  Z = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X)
  PRINT,S
  IF STOPP THEN STOP
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  Z = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X,/XCALC)
  PRINT,S.N_SETS
  IF STOPP THEN STOP
  ST,S
  PRINT,S.NUM
  PRINT
  PRINT,S.MEAN
  
  IF STOPP THEN STOP
;  ,'TEST_X'
ENDIF;IF KEY(TEST_X) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||

;*******************************
IF KEY(TEST_XY) THEN BEGIN
;******************************
  SWITCHES,TEST_XY,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  IF STOPP THEN STOP
  S = STATS_ARRAYS_XYZ(XDATA=X,YDATA = Y,/XSTART,/YSTART,XTRANSFORM = 'ALOG10',YTRANSFORM = 'ALOG10')
  PRINT,S
  IF STOPP THEN STOP

  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X,YDATA = Y)
  PRINT,S
  IF STOPP THEN STOP
  
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  Z = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X,YDATA = Y)
  PRINT,S
  IF STOPP THEN STOP
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  Z = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X,YDATA=Y,/XCALC,/YCALC)
  PRINT,S.X.N_SETS,S.Y.N_SETS
  IF STOPP THEN STOP
  ST,S
  PRINT,S.X.NUM
  PRINT
  PRINT,S.X.MEAN
  PRINT
  PRINT,S.Y.NUM
  PRINT
  PRINT,S.Y.MEAN
  PRINT,'SAME MEANS:',SAME([S.X.MEAN,S.Y.MEAN])
  IF STOPP THEN STOP
 ; PDONE,'TEST_XY'
ENDIF;IF KEY(TEST_XY) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||

;*******************************
IF KEY(TEST_XYZ) THEN BEGIN
  ;******************************
  SWITCHES,TEST_XYZ,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  Z = ARRAY
  IF STOPP THEN STOP
  S = STATS_ARRAYS_XYZ(XDATA=X,YDATA = Y,ZDATA=Z,/XSTART,/YSTART,/ZSTART,XTRANSFORM = 'ALOG10',YTRANSFORM = 'ALOG10',ZTRANSFORM = 'ALOG10')
  PRINT,S
  IF STOPP THEN STOP

  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  Z = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X,YDATA = Y,ZDATA=Z)
  PRINT,S
  IF STOPP THEN STOP

  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  Z = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X,YDATA = Y,ZDATA=Z)
  PRINT,S
  IF STOPP THEN STOP
  ARRAY = FINDGEN(3,3) & ARRAY(0,0) = 1.0 & ARRAY(1,1) = 10 & ARRAY(2,2) = 100 & ARRAY(0,1) = MISSINGS(10.)
  X = ARRAY
  Y = ARRAY
  Z = ARRAY
  S = STATS_ARRAYS_XYZ(XDATA=X,YDATA=Y,ZDATA=Z,/XCALC,/YCALC,/ZCALC)
  PRINT,S.X.N_SETS,S.Y.N_SETS,S.Z.N_SETS
  IF STOPP THEN STOP
  ST,S
  PRINT,S.X.NUM
  PRINT
  PRINT,S.X.MEAN
  PRINT
  PRINT,S.Y.NUM
  PRINT
  PRINT,S.Y.MEAN
  PRINT
  PRINT,S.Z.NUM
  PRINT
  PRINT,S.Z.MEAN
  PRINT,'SAME MEANS:',SAME([S.X.MEAN,S.Y.MEAN,S.Z.MEAN])
  IF STOPP THEN STOP
 ; PDONE,'TEST_XYZ'
ENDIF;IF KEY(TEST_XYZ) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(KIMS_TEST) THEN BEGIN
  ;******************************
  SWITCHES,KIMS_TEST,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  PRINT, 'THIS STEP ILLUSTRATES USING STATS_ARRAYS_XYZ TO SIMULTANEOUSLY AVERAGE GRAD_X & GRAD_Y & A FRONT INDEX BASED ON GRAD_SST, WHILE READING THE FRONTS SAV FILE ONLY ONCE'
  ;]==> SET UP FOR STATS_ARRAYS_XYZ

  XT = 'ALOG'
  YT = 'ALOG10'
  ZT = ''
  STS     = ['NUM','MIN','MAX','MEAN','SUM']

  TESTS = ['XYZ','MAN','SAX','SAY','SAZ','NEW']
  FOR T=0, N_ELEMENTS(TESTS)-1 DO BEGIN
    PRINT, 'RUNNING ' + TESTS(T) + ' STATS_ARRAYS'
    FOR N=0,10 DO BEGIN
      CASE [1] OF
        N EQ 0:  BEGIN & START = 1 & CALC = 0 & END
        N EQ 10: BEGIN & START = 0 & CALC = 1 & END
        ELSE:    BEGIN & START = 0 & CALC = 0 & END
      ENDCASE;CASE (1) OF

      X = FINDGEN(5,2)+1*(N+1)
      Y = FINDGEN(5,2)+1*(N+2)
      Z = FINDGEN(5,2)+1*(N+3)

      CASE TESTS(T) OF
        'XYZ': O = STATS_ARRAYS_XYZ(XDATA=X,YDATA=Y,ZDATA=Z,XTRANSFORM=XT,YTRANSFORM=YT,ZTRANSFORM=ZT,XSTART=START,YSTART=START,ZSTART=START,XCALC=CALC,YCALC=CALC,ZCALC=CALC,XSTATS=STS,YSTATS=STS,ZSTATS=STS)
        'NEW': W = STATS_ARRAYS_XYZ(XDATA=X,YDATA=Y,ZDATA=Z,/NEW,XTRANSFORM=XT,YTRANSFORM=YT,ZTRANSFORM=ZT,XSTART=START,YSTART=START,ZSTART=START,XCALC=CALC,YCALC=CALC,ZCALC=CALC,XSTATS=STS,YSTATS=STS,ZSTATS=STS)
        'SAX': SX = STATS_ARRAYS(X, START=START, CALC=CALC, TRANSFORM=XT, DO_STATS=STS)
        'SAY': SY = STATS_ARRAYS(Y, START=START, CALC=CALC, TRANSFORM=YT, DO_STATS=STS)
        'SAZ': SZ = STATS_ARRAYS(Z, START=START, CALC=CALC, TRANSFORM=ZT, DO_STATS=STS)
        'MAN': BEGIN
          IF N EQ 0 THEN MX = ALOG(X)   ELSE MX = MX + ALOG(X)
          IF N EQ 0 THEN MY = ALOG10(Y) ELSE MY = MY + ALOG10(Y)
          IF N EQ 0 THEN MZ = Z         ELSE MZ = MZ + Z
          IF N EQ 0 THEN NM = 1         ELSE NM = NM + 1
        END
      ENDCASE
    ENDFOR ; N=0,10 LOOP
  ENDFOR; TESTS LOOP

  PLINES,2

  IF SAME([TOTAL(O.X.MEAN), TOTAL(EXP(MX/NM))])  THEN PRINT, "XYZ OLD X STATS MATCHES THE MANUAL X STATS"                     ELSE PRINT, "  ***ERROR WITH XYZ OLD STATS'
  IF SAME([TOTAL(O.X.MEAN), TOTAL(SX.GMEAN)])    THEN PRINT, "XYZ OLD X STATS MATCHES THE ORIGINAL STATS ARRAYS X STATS"      ELSE PRINT, "  ***ERROR WITH XYZ OLD STATS'
  IF SAME([TOTAL(O.X.MEAN), TOTAL(W.X.GMEAN)])   THEN PRINT, "XYZ OLD X STATS MATCHES XYZ NEW X STATS"                        ELSE PRINT, "  ***ERROR WITH XYZ OLD OR XYZ NEW STATS'
  IF SAME([TOTAL(W.X.GMEAN), TOTAL(EXP(MX/NM))]) THEN PRINT, "XYZ NEW X STATS MATCHES THE MANUAL X STATS"                     ELSE PRINT, "  ***ERROR WITH XYZ NEW STATS'
  IF SAME([TOTAL(W.X.GMEAN), TOTAL(SX.GMEAN)])   THEN PRINT, "XYZ NEW X STATS MATCHES THE ORIGINAL STATS ARRAYS X STATS"      ELSE PRINT, "  ***ERROR WITH XYZ NEW STATS'
  IF SAME([TOTAL(SX.GMEAN), TOTAL(EXP(MX/NM))])  THEN PRINT, "THE ORIGINAL STATS ARRAYS Z STATS MATCHESTHE MANUAL X STATS"    ELSE PRINT, "  ***ERROR WITH ORIGINAL STATS_ARRAYS STATS'
  PLINES,2

  IF SAME([TOTAL(O.Y.MEAN), TOTAL(10^(MY/NM))])  THEN PRINT, "XYZ OLD Y STATS MATCHES THE MANUAL Y STATS"                     ELSE PRINT, "  ***ERROR WITH XYZ OLD STATS'
  IF SAME([TOTAL(O.Y.MEAN), TOTAL(SY.GMEAN)])    THEN PRINT, "XYZ OLD Y STATS MATCHES THE ORIGINAL STATS ARRAYS Y STATS"      ELSE PRINT, "  ***ERROR WITH XYZ OLD STATS'
  IF SAME([TOTAL(O.Y.MEAN), TOTAL(W.Y.GMEAN)])   THEN PRINT, "XYZ OLD Y STATS MATCHES XYZ NEW Y STATS"                        ELSE PRINT, "  ***ERROR WITH KIM OR XYZ NEW STATS'
  IF SAME([TOTAL(W.Y.GMEAN), TOTAL(10^(MY/NM))]) THEN PRINT, "XYZ NEW Y STATS MATCHES THE MANUAL Y STATS"                     ELSE PRINT, "  ***ERROR WITH XYZ NEW STATS'
  IF SAME([TOTAL(W.Y.GMEAN), TOTAL(SY.GMEAN)])   THEN PRINT, "XYZ NEW Y STATS MATCHES THE ORIGINAL STATS ARRAYS Y STATS"      ELSE PRINT, "  ***ERROR WITH XYZ NEW STATS'
  IF SAME([TOTAL(SY.GMEAN), TOTAL(10^(MY/NM))])  THEN PRINT, "THE ORIGINAL STATS ARRAYS Y STATS MATCHESTHE MANUAL Y STATS"    ELSE PRINT, "  ***ERROR WITH ORIGINAL STATS_ARRAYS STATS'
  PLINES,2

  IF SAME([TOTAL(O.Z.MEAN), TOTAL(MZ/NM)])      THEN PRINT, "XYZ OLD Z STATS MATCHES THE MANUAL Z STATS"                     ELSE PRINT, "  ***ERROR WITH XYZ OLD STATS'
  IF SAME([TOTAL(O.Z.MEAN), TOTAL(SZ.MEAN)])    THEN PRINT, "XYZ OLD Z STATS MATCHES THE ORIGINAL STATS ARRAYS Z STATS"      ELSE PRINT, "  ***ERROR WITH XYZ OLD STATS'
  IF SAME([TOTAL(O.Z.MEAN), TOTAL(W.Z.MEAN)])   THEN PRINT, "XYZ OLD Z STATS MATCHES XYZ NEW Z STATS"                        ELSE PRINT, "  ***ERROR WITH KIM OR XYZ NEW STATS'
  IF SAME([TOTAL(W.Z.MEAN), TOTAL(MZ/NM)])      THEN PRINT, "XYZ NEW Z STATS MATCHES THE MANUAL Z STATS"                     ELSE PRINT, "  ***ERROR WITH XYZ NEW STATS'
  IF SAME([TOTAL(W.Z.MEAN), TOTAL(SZ.MEAN)])    THEN PRINT, "XYZ NEW Z STATS MATCHES THE ORIGINAL STATS ARRAYS Z STATS"      ELSE PRINT, "  ***ERROR WITH XYZ NEW STATS'
  IF SAME([TOTAL(SZ.MEAN),  TOTAL(MZ/NM)])      THEN PRINT, "THE ORIGINAL STATS ARRAYS Z STATS THE MANUAL Z STATS"           ELSE PRINT, "  ***ERROR WITH ORIGINAL STATS_ARRAYS STATS'
  PLINES,2

  IF STOPP THEN STOP
  ,'KIMS_TEST'
ENDIF;IF KEY(KIMS_TEST) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;*******************************
  IF KEY(FRONTS_XYZ) THEN BEGIN
;******************************
    SWITCHES,FRONTS_XYZ,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
 ;   IF STOPP THEN STOP
    PRINT, 'THIS STEP ILLUSTRATES USING STATS_ARRAYS_XYZ TO SIMULTANEOUSLY AVERAGE GRAD_X & GRAD_Y & A FRONT INDEX BASED ON GRAD_SST, WHILE READING THE FRONTS SAV FILE ONLY ONCE'
     
    IF !S.USER EQ 'JEOR' THEN DIR_IN = GET_HDD(6) +'\DATASETS\FRONTS\NES\SST' ELSE $
                              DIR_IN = !S.FRONTS + 'MODIST/NES/SAVE/GRAD_SST-BOA/'
    DIR_OUT = !S.IDL_TEMP
    FILES = FILE_SEARCH(DIR_IN,'D_2008060*-NES*-GRAD_SST-BOA.SAV')
 
    XT = 'ALOG'
    YT = 'ALOG10'
    ZT = ''
    SS = ['NUM','MIN','MAX','MEAN','SUM']

    TESTS = ['OLD','NEW','SAX','SAY','SAZ']
    FOR T=0, N_ELEMENTS(TESTS)-1 DO BEGIN
      PRINT, 'RUNNING ' + TESTS(T) + ' STATS_ARRAYS'
      STS = SS
      FOR N=0,NOF(FILES)-1 DO BEGIN
        
        D = STRUCT_READ(FILES(N),STRUCT=S)
        X = S.GRAD_X   
        Y = S.GRAD_Y   
        Z = S.GRAD_SST 

        CASE [1] OF
          N EQ 0:             BEGIN & START = 1 & CALC = 0 & END
          N EQ  NOF(FILES)-1: BEGIN & START = 0 & CALC = 1 & END
          ELSE:               BEGIN & START = 0 & CALC = 0 & END
        ENDCASE;CASE (1) OF

        CASE TESTS(T) OF
          'OLD': O = STATS_ARRAYS_XYZ(/OLD_METHOD,XDATA=X,YDATA=Y,ZDATA=Z,XTRANSFORM=XT,YTRANSFORM=YT,ZTRANSFORM=ZT,XSTART=START,YSTART=START,ZSTART=START,XCALC=CALC,YCALC=CALC,ZCALC=CALC,XSTATS=STS,YSTATS=STS,ZSTATS=STS)
          'NEW': W = STATS_ARRAYS_XYZ(XDATA=X,YDATA=Y,ZDATA=Z,XTRANSFORM=XT,YTRANSFORM=YT,ZTRANSFORM=ZT,XSTART=START,YSTART=START,ZSTART=START,XCALC=CALC,YCALC=CALC,ZCALC=CALC,XSTATS=STS,YSTATS=STS,ZSTATS=STS)
          'SAX': SX = STATS_ARRAYS(X, START=START, CALC=CALC, TRANSFORM=XT, DO_STATS=STS)
          'SAY': SY = STATS_ARRAYS(Y, START=START, CALC=CALC, TRANSFORM=YT, DO_STATS=STS)
          'SAZ': SZ = STATS_ARRAYS(Z, START=START, CALC=CALC, TRANSFORM=ZT, DO_STATS=STS)
        ENDCASE
      ENDFOR ; N=0,10 LOOP
    ENDFOR; TESTS LOOP
  
    DELAY = 2
    PROD = 'NUM_-0.1_0.1'
    PLINES,2
    PRINT, "COMPARE XYZ OLD X STATS TO THE ORIGINAL STATS ARRAYS X STATS" & IMGR, O.X.MEAN-SX.GMEAN,  PROD=PROD, DELAY=DELAY
    PRINT, "COMPARE XYZ OLD X STATS TO THE XYZ NEW X STATS ARRAYS"        & IMGR, O.X.MEAN-W.X.GMEAN, PROD=PROD, DELAY=DELAY
    PRINT, "COMPARE XYZ NEW X STATS TO THE ORIGINAL STATS ARRAYS X STATS" & IMGR, W.X.MEAN-SX.MEAN,   PROD=PROD, DELAY=DELAY
    PRINT, "COMPARE XYZ NEW X STATS TO THE ORIGINAL STATS ARRAYS X STATS" & IMGR, W.X.GMEAN-SX.GMEAN, PROD=PROD, DELAY=DELAY
    PLINES,2
   
    PRINT, "COMPARE XYZ OLD Y STATS TO THE ORIGINAL STATS ARRAYS Y STATS" & IMGR, O.Y.MEAN-SY.GMEAN,  PROD=PROD, DELAY=DELAY
    PRINT, "COMPARE XYZ OLD Y STATS TO THE XYZ NEW Y STATS ARRAYS"        & IMGR, O.Y.MEAN-W.Y.GMEAN, PROD=PROD, DELAY=DELAY
    PRINT, "COMPARE XYZ NEW Y STATS TO THE ORIGINAL STATS ARRAYS Y STATS" & IMGR, W.Y.MEAN-SY.MEAN,   PROD=PROD, DELAY=DELAY
    PRINT, "COMPARE XYZ NEW Y STATS TO THE ORIGINAL STATS ARRAYS Y STATS" & IMGR, W.Y.GMEAN-SY.GMEAN, PROD=PROD, DELAY=DELAY
    PLINES,2
    
    PRINT, "COMPARE XYZ OLD Z STATS TO THE ORIGINAL STATS ARRAYS Z STATS" & IMGR, O.Z.MEAN-SZ.MEAN,  PROD=PROD, DELAY=DELAY
    PRINT, "COMPARE XYZ OLD Z STATS TO THE XYZ NEW Z STATS ARRAYS"        & IMGR, O.Z.MEAN-W.Z.MEAN, PROD=PROD, DELAY=DELAY
    PRINT, "COMPARE XYZ NEW Z STATS TO THE ORIGINAL STATS ARRAYS Z STATS" & IMGR, W.Z.MEAN-SZ.MEAN,  PROD=PROD, DELAY=DELAY
    PLINES,2
    
  
   IF STOPP THEN STOP
    
  ;  THE PERCENT PROBABILITY/FREQUENCY OF SIGNIFICANT FRONTS AS:
    ;       PCT_FRONTS = 100.*S.Z.NUM/S.Z.N_SETS
     PCT_FRONTS = 100.*S.Z.NUM/S.Z.N_SETS  
     PMM, PCT_FRONTS
    S = CREATE_STRUCT(S,'PCT_FRONTS',PCT_FRONTS)
    ;===>COMPUTE GRAD_DIR
    IF STOPP THEN STOP
    ; ===> CALCULATE GRADIENT DIRECTION AND CHANGE RADIANS TO DEGREES 
  ;  GRAD_DIR = (ATAN(GRAD_Y, GRAD_X))*!RADEG
    GRAD_DIR = (ATAN( S.Y.MEAN,  S.X.MEAN))*!RADEG
    S = CREATE_STRUCT(S,'GRAD_DIR',GRAD_DIR)
    ;===> RENAME KEY TAGS IN S 
    S = STRUCT_RENAME(S,['X','Y','Z'],[XNAME,YNAME,ZNAME])
    ST,S
    IF STOPP THEN STOP
    SAV = DIR_OUT + 'M_200409' + '-BOA-' + MAP + '.SAV'
    PRINT,'KIM YOU SHOULD ADD THE INFO YOU WANT TO THE OUTPUT MEAN STRUCTURE '
    STRUCT_WRITE,S,FILE = SAV,INFILES=INFILES,MAP=MAP
  
    
    ,'FRONTS_XYZ'
  ENDIF;IF KEY(FRONTS_XYZ) THEN BEGIN
    
;*******************************
  IF KEY(FRONTS_STATS) THEN BEGIN
;******************************

    SWITCHES,FRONTS_XYZ,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    PRINT, 'THIS STEP ILLUSTRATES USING STATS_ARRAYS_XYZ TO SIMULTANEOUSLY AVERAGE GRAD_X & GRAD_Y & A FRONT INDEX BASED ON GRAD_SST, WHILE READING THE FRONTS SAV FILE ONLY ONCE'
    IF STOPP THEN STOP

    SL = GET_PATH()

    IF !S.USER EQ 'JEOR' THEN DIR_IN = GET_HDD(6) +'\DATASETS\FRONTS\NES\' ELSE $
    DIR_IN = !S.FRONTS + 'MODISA/NES/SAVE/'
    DIR_OUT = !S.DEMO + ROUTINE + SL 
    DIR_OLD = DIR_OUT + 'OLD_STATS' + SL & DIR_TEST, DIR_OLD
    DIR_XYZ = DIR_OUT + 'XYZ_STATS' + SL & DIR_TEST, DIR_XYZ
    
    PRODS = ['GRAD_SST-BOA','GRAD_CHL-BOA']
    
    PERIODS = ['W','M']

    
    FOR T=0, N_ELEMENTS(PRODS)-1 DO BEGIN
      PRINT, 'RUNNING ' + PRODS(T) + ' STATS_ARRAYS'
      FOR P=0, N_ELEMENTS(PERIODS)-1 DO BEGIN
        FILES = FILE_SEARCH(DIR_IN + PRODS(T) + SL + 'D_200806*-NES*-' + PRODS(T)+'.SAV')
        TIC
        STATS_ARRAYS_FRONTS, FILES, DIR_OUT=DIR_XYZ, PERIOD_CODE_OUT=PERIODS(P), VERBOSE=VERBOSE
        TOC
        FILES = FILE_SEARCH(DIR_IN + PRODS(T) + SL + 'D_200806*-NES*-' + PRODS(T)+'.SAV')
        TIC
    ;    STATS_ARRAYS_FRONTS_XYZ, FILES, DIR_OUT=DIR_XYZ, PERIOD_CODE_OUT=PERIODS(P), VERBOSE=VERBOSE
        TOC
      ENDFOR    
    ENDFOR
    
    FO = FLS(DIR_OLD + '*.*')
    FOR F=0, NOF(FO)-1 DO BEGIN
      AFILE = FO(F)
      BFILE = REPLACE(AFILE,DIR_OLD,DIR_XYZ)
      
      A = STRUCT_READ(AFILE, STRUCT=AS)
      B = STRUCT_READ(BFILE, STRUCT=BS)
      
      TAGS = TAG_NAMES(AS)
      PRINT, AFILE
      FOR T=0, N_ELEMENTS(TAGS)-1 DO BEGIN
        IF HAS(TAG_NAMES(BS),TAGS(T)) EQ 0 THEN MESSAGE, 'ERROR: XYZ STRUCT IS MISSING ' + TAGS(T)
        C = GET(AS,TAGS(T))
        D = GET(BS,TAGS(T))
        IF SAME(C,D) THEN PRINT, 'OLD ' + TAGS(T) + ' STATS MATCHES THE NEW XYZ STATS' ELSE PRINT, '  ***ERROR: OLD AND NEW ' + TAGS(T) + ' DO NOT MATCH'
      ENDFOR
      PRINT
    ENDFOR  
    
STOP
; USE SAME TO COMPARE FILES


    


    ,'FRONTS_XYZ'
  ENDIF;IF KEY(FRONTS_XYZ) THEN BEGIN  
    
    
    
    
;|||||||||||||||||||||||||||||||||||||||||||||||||||||




END; #####################  END OF ROUTINE ################################
