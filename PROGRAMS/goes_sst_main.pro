; $ID:	GOES_SST_MAIN.PRO,	2020-07-08-15,	USER-KJWH	$

;	This Program is a MAIN for Managing the AVHRR data
; and for Making AVHRR SST png images for the Northeast
;
; History:
;	June 26, 2001	Written by:	J.E. O'Reilly
; Feb 20, 2007 td, in DO_MERGE_N4AT_GOES step check for 0 COUNT_PAIRS,write out ps file and csv file with a note that no pairs were found
;-
; *************************************************************************
PRO GOES_SST_MAIN  , AUTO=AUTO
  ROUTINE_NAME='GOES_SST_MAIN'

	FTP_n_files= 999
	HDD='IOMEGA_HDD_6'

;	HDD='IOMEGA_HDD_9'

;
; *** Computer & Operating System & Date & Default Graphics Window ***
  computer=GET_COMPUTER()  & os = STRUPCASE(!VERSION.OS) & DATE=DATE_NOW()
  IF os EQ 'WIN32' THEN SET_PLOT,'WIN'

; *** Constants ***
	SLASH=DELIMITER(/path) & SP=DELIMITER(/SPACE) & UL=DELIMITER(/UL) & DASH=DELIMITER(/DASH)

; *** Data Set & File Parameters ***
  SENSOR 		= 'IMAGER'
	METHOD 		= 'CWATCH'
	SATELLITE = 'GOES_00'
	SUITE  		= ''
	MAP 			= 'GOESWH'
	PROD 			= 'SST'
	PAL 			= 'PAL_PETES24J'
	IF METHOD EQ 'CW_CD'			THEN CLD_MASK_AGGR =0
  IF METHOD EQ '_AGGR' 	THEN CLD_MASK_AGGR =1
  IF MAP    EQ 'NEC' 		THEN BEGIN
    PX=1024 & PY=1024
  ENDIF
  EXT_AVHRR = ['rs3','rs7','rs9','rd1','rd7','rsm']
  EXT_RCM   = ['rcm']
	Z_EXT     =	['GZ','gz','z','Z']

; *** Data Parameters ***
  min_sst 						= 0.0
  max_sst 						= 35.0
  COLDER_AVHRR_CUTOFF = 0 ; DEGREES C
  max_solar_el 				= 20.4 ; max for s7 type
  HOURS_NIGHTTIME   		= [3,4,5,6,7,8,9,10,11]
	HOURS_DAYTIME    		= [11,3] ; DAYTIME = WHERE(STRLEN(FN.NAME) GE 8 AND (HOUR GT HOURS_DAYTIME(0) OR HOUR LT HOURS_DAYTIME(1)),COUNT)

; *** Main Disk ***

	DISK='T:'
;	DISK='f:'
  DIR_SUFFIX = ''

; *** Main Path ***
  path = DISK + SLASH+ 'SST-IMAGER-4-GOESWH'  + SLASH ;;;

; *** Program Directories ***
	DIR_PROGRAMS       	= 'D:\IDL\PROGRAMS\'
	DIR_DATA					 	= 'D:\IDL\DATA\'
	DIR_INVENTORY			 	= 'D:\IDL\INVENTORY\'
	DIR_IMAGES				 	= 'D:\IDL\IMAGES\'
  DIR_GZIP 						= 'C:\GZIP\'
  DIR_landmask 				= 'D:\IDL\IMAGES\'
  DIR_NECW_NAV_MASTER = 'D:\IDL\DATA\'
  DISK_CD 						=	'Z:'

; *** Program Files ***
  NAVDBF  										= DIR_NECW_NAV_MASTER+ 'necw_nav_master_cwf.dbf' ; Location for NAVDBF file:
  NAVIMAGE_AVHRR_AUTO  				= 'D:\IDL\DATA\NAVIMAGE_AVHRR_AUTO.CSV'
  NAVIMAGE_AVHRR_AUTO_NAVIGATED='D:\IDL\DATA\NAVIMAGE_AVHRR_AUTO_NAVIGATED.dbf'
  MASTER_CWF_LIST			        = 'D:\IDL\DATA\NECW_MASTER_LIST.CSV'; 'D:\IDL\DATA\NOAA_CoastWatch_Active_Access_System.txt'

  land_mask_file  						= DIR_landmask+'MASK_NEC.png'
  HEADER_DATABASE							= DIR_DATA + 'NECW_AVHRR_ER_HEADER.SAVE'

; *** Data Directories ***
	DIR_TEMP  			= PATH+'temp'					+dir_suffix+SLASH
  DIR_Z 				  = PATH+'Z'						+	DIR_SUFFIX+SLASH
  DIR_BROWSE			= PATH+'browse'				+	DIR_SUFFIX+SLASH
  DIR_LOG					= PATH+'log' 					+ DIR_SUFFIX+SLASH
  DIR_REPORT 			= PATH+'report'				+ DIR_SUFFIX+SLASH
  DIR_HISTO 			= PATH+'HISTO'				+ DIR_SUFFIX+SLASH
  DIR_PLOTS 			= PATH+'plots'				+ DIR_SUFFIX+SLASH
  DIR_EXCLUDE			=	PATH+'exclude'			+	DIR_SUFFIX+SLASH
  DIR_SUSPECT			=	PATH+'exclude'			+	DIR_SUFFIX+SLASH +'SUSPECT'+	DIR_SUFFIX+SLASH
  DIR_SAVE 				= PATH+'SAVE'					+	DIR_SUFFIX+SLASH
  DIR_STATS 			= PATH+'STATS'				+	DIR_SUFFIX+SLASH
  DIR_STATS_BROWSE= PATH+'STATS_BROWSE'	+	DIR_SUFFIX+SLASH

  DIR_ALL = [DIR_Z, DIR_LOG,DIR_HISTO, DIR_REPORT,DIR_BROWSE, DIR_PLOTS, DIR_EXCLUDE,DIR_SUSPECT,DIR_TEMP,DIR_SAVE,DIR_STATS,DIR_STATS_BROWSE]


	STRUCT_DRIVES=GET_DRIVE_NAMES()
	OK=WHERE(STRUCT_DRIVES.NAME EQ HDD,COUNT)

	IF COUNT EQ 1 THEN DRIVE_HDD = STRUCT_DRIVES[OK].DRIVE ELSE DRIVE_HDD = ''


; *** FTP Parameters ***

 	FTP_SITE = 'ftp.class.noaa.gov'
  FTP_ACCOUNT = 'anonymous'
  FTP_PASSWORD = "Jay.O'Reilly@noaa.gov"
  DIR_REMOTE='bulk_data/SST1'


  INVENTORY=DIR_INVENTORY+'INVENTORY_GOES_SST.CSV'
  MIN_SIZE = -1 ; BYTES MIN for file to be added to inventory
	EXCLUDE_FILE = DIR_DATA + 'IMAGER-GOESWH-EXCLUDE-INAMES.CSV'

; *** AT Parameters ***
	AT_PERIOD='DAILY'
  AT_TIME =['3:21','6:23','10:38','12:20','16:00','20:15']


  OVERWRITE_AT 	= 1
  KILL_AT    		= 0

; *** Colors ***
 	BACKGROUND=252 &
	IF N_ELEMENTS(LAND_COLOR) 	NE 1 THEN LAND_COLOR=252
 	IF N_ELEMENTS(CLOUD_COLOR) 	NE 1 THEN CLOUD_COLOR=254
	IF N_ELEMENTS(MISS_COLOR) 	NE 1 THEN MISS_COLOR=253
	OUR_MISS_COLOR=251
	HI_LO_COLOR=255


; ****************************************************************************************
; ********************* U S E R    S W I T C H E S  *************************************
; ****************************************************************************************
; Switches controlling which Processing STEPS to do.  The steps are in order of execution
; Switches: 0 = Off, 1 = On,  2= On and Overwrite any Output Files

OVERWRITE_1D                =0
; =====>
DO_CHECK_DIRS  			        =0  ; Normally, keep this switch on

;	***** AUTOMATIC  ****
DO_AVHRR_NEC_MAIN_AT 				=0

;	**** GETTING FILES  ******
DO_CD_GET										=0

DO_FTP_GET									=0
DO_COPY_2HDD								=0

DO_GOES_SST_2GZ							=0

DO_INVENTORY_HDD            =0
DO_PERIOD_PLOT_HDD          =0

; ***** CHECKING ***********
DO_HISTOGRAM_RAW_DATA				=0   ; LEAVE ON TO UPDATE HISTOGRAM OF BYTE COUNTS IN RAW FILES


;	***** COMPRESS GZ *********
DO_Z_2SAVE									=0
DO_CHECK_24_PER_DAY         =0
DO_HISTOGRAM_RAW_2SUSPECT   =0
DO_EXCLUDE_CSV 							=0   ;$$$ ALWAYS LEAVE THIS ON TO REBUILD THE EXCLUDE.CSV EACH TIME FROM THE PNGS IN THE EXCLUDE FOLDER


;	***** SOLAR ELEVATION *********
 DO_SOLELV									=0 ;1

;	***** WARMEST *************
DO_WARMEST									=0
DO_WARMEST_BROWSE						=0

DO_HOURLY_BROWSE_FOR_EXCLUDE =0


;	***** EXCLUDE BAD ZIPS*****
DO_CHECK_GZIP								=0

; ***** PLOTS  ***************
DO_PERIOD_PLOT           		=0

; ***** MERGE WITH N4AT SST  ***************
DO_MERGE_N4AT_GOES          =1


;	***** MAKE PAGE SHOWING IMPROVED COVERAGE ***
DO_MAKE_COMPOSITE_PF4_N4AT_N4AGT 	=0

; ***** Make 5 day N4ATG mean for certain dates **8
DO_MAKE_5DAY_N4ATG_MEANS     			=0




; *********************************************
	IF DO_CHECK_DIRS GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_CHECK_DIRS'
    FOR N=0,N_ELEMENTS(DIR_ALL)-1 DO BEGIN & AFILE = STRMID(DIR_ALL(N),0,STRLEN(DIR_ALL(N))-1) &
    	IF FILE_TEST(AFILE,/DIRECTORY) EQ 0L THEN FILE_MKDIR,AFILE &  ENDFOR
  ENDIF
; |||||||||||||||||||||||||||||||||||||||||||||||||


	AGAIN_DO_FTP_GET:
; *********************************************
	IF DO_FTP_GET GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_FTP_GET'
    target_txt='sst1_'
    COUNTER=0L
		FTP_COUNT=0L

		IF COMPUTER EQ 'FLOUNDER' THEN YEARS = [2004]
		IF COMPUTER EQ 'SUNDIAL' THEN YEARS = [2004]

		_SKIP_LS=1

;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _YEAR=0,N_ELEMENTS(YEARS)-1 DO BEGIN

	    AYEAR=YEARS(_YEAR)
	    IF AYEAR EQ 2001 OR AYEAR EQ 2002 THEN DIR_REMOTE='bulk_data/SST1'
	    IF AYEAR EQ 2003 THEN DIR_REMOTE='bulk_data/SST1_2003'
	   	IF AYEAR EQ 2004 THEN DIR_REMOTE='bulk_data/SST1_2004'
	;		===> TO GET CHRON NEXT
 			dpy=DATE_DAYS_YEAR(AYEAR)
;			DOYS=STR_SPACE2ZERO(STRING(INDGEN(dpy)+1,  FORMAT='(I3)'))
;			HOURS=STR_SPACE2ZERO(STRING(INDGEN(24)  ,  FORMAT='(I2)'))
			ALL = ''
			FOR _doy = 0,DPY-1 DO BEGIN
				ALL = [ALL, REPLICATE(STR_SPACE2ZERO(STRING(_doy+1,FORMAT='(I3)'))    ,24) +'_'+ STR_SPACE2ZERO(STRING(INDGEN(24) ,  FORMAT='(I2)'))]
			ENDFOR
			ALL=ALL(1:*)
 			SATFILES = 'sst1_'+ STRTRIM(AYEAR,2)+'_'+ALL

			FILES_ALL=FILE_SEARCH(DIR_Z+'sst1_*')
			FN=PARSE_IT(FILES_ALL)
			FILES_ALL=FN.FIRST_NAME

;     ===> Check inventory
 			csv_names=''
      EXIST_CSV=FILE_INFO(INVENTORY)
      IF EXIST_CSV.EXISTS EQ 1 THEN BEGIN
        CSV_LIST = READ_CSV(INVENTORY)
        CSV_NAMES=CSV_LIST.NAME_EXT
        FILES_CSV=CSV_NAMES
				FILES_CSV=STRMID(FILES_CSV,0,23)
			  IF FILES_ALL[0] NE '' THEN FILES_ALL=[FILES_ALL,FILES_CSV] ELSE FILES_ALL=FILES_CSV
			ENDIF

			IF FILES_ALL[0] NE '' THEN BEGIN
				ok=WHERE_IN(SATFILES, FILES_ALL,COUNT,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT)
				IF NCOMPLEMENT GE 1 THEN SATFILES = SATFILES(COMPLEMENT) ELSE CONTINUE  ; >>>>>>>>>>>>>>>>>>>>>>
			ENDIF

			IF COMPUTER EQ 'FLOUNDER' THEN BEGIN
					ftp_n_files=6
					SATFILES=REVERSE(SATFILES)
			ENDIF
			IF COMPUTER EQ 'SUNDIAL' THEN BEGIN
					ftp_n_files=6
			ENDIF

;			===> Resample the first batch of satfiles depending on ftp_n_files
			DO_FILES=FTP_N_FILES-1<NCOMPLEMENT-1
			SATFILES = SATFILES(0:DO_FILES)
			TARGETS_SST=SATFILES ;;;; no aster +'*'

; 	***********************************************************
;     STRATEGY FOR NUMBER OF FILES  DEPENDING ON DAY AND HOUR
; 	***********************************************************
   				time=SYSTIME() & TXT=STRSPLIT(time,' ',/EXTRACT,/PRESERVE_NULL) & DOW = STRUPCASE(TXT[0])
   				HOURS = TXT(3) & HOURS=STRSPLIT(HOURS,':',/EXTRACT,/PRESERVE_NULL) & HOURS=HOURS[0]
					;		*************
					IF COMPUTER EQ 'FLOUNDER' THEN BEGIN
						IF DOW EQ 'MON' OR DOW EQ 'TUE' OR DOW EQ 'WED' OR DOW EQ 'THU' OR DOW EQ 'FRI' THEN BEGIN
			      	IF HOURS GE 7 AND HOURS LE 17 THEN BEGIN
			      		DELAY = 15 	;MINUTES                    ; WORKWEEK, DAYTIME
			    		ENDIF ELSE BEGIN
			      	 	DELAY = 0.01 	;MINUTES                     ; WORKWEEK, NIGHTTIME
			      	ENDELSE
			    	ENDIF ELSE BEGIN
			        DELAY = 0.01 		;MINUTES                    ; WEEKEND
			    	ENDELSE
					ENDIF ;IF COMPUTER EQ 'SANDEEL' THEN BEGIN

					IF COMPUTER EQ 'SUNDIAL' THEN BEGIN

						IF DOW EQ 'MON' OR DOW EQ 'TUE' OR DOW EQ 'WED' OR DOW EQ 'THU' OR DOW EQ 'FRI' THEN BEGIN
			      	IF HOURS GE 7 AND HOURS LE 17 THEN BEGIN
			      		DELAY = 15 	;MINUTES                    ; WORKWEEK, DAYTIME
			    		ENDIF ELSE BEGIN
			      	 	DELAY = 10 	;MINUTES                     ; WORKWEEK, NIGHTTIME
			      	ENDELSE
			    	ENDIF ELSE BEGIN
			        DELAY = 5 		;MINUTES                    ; WEEKEND
			    	ENDELSE
					ENDIF ;IF COMPUTER EQ 'SANDEEL' THEN BEGIN
			    PRINT, 'FTP_N_FILES:',FTP_N_FILES, '  DELAY: ',NUM2STR(DELAY)+' Minutes'

					;	===> See how many files in dir_z
			    	FILES_BEFORE=FILE_SEARCH(DIR_Z+'sst1_*')
			    	IF FILES_BEFORE[0] EQ '' THEN N_BEFORE = 0 ELSE N_BEFORE=N_ELEMENTS(FILES_BEFORE)

		    		ftp_batch, ftp_site=ftp_site,ACCOUNT='anonymous',PASSWORD = FTP_PASSWORD, $
		    					files = targets_sst, SKIP_LS=_skip_ls,DIR_REMOTE=DIR_REMOTE,DIR_LOCAL = DIR_Z,$
		    					MIN_SIZE=min_size,INVENTORY=INVENTORY,KEEP_FTP=KEEP_FTP,N_FILES=FTP_n_files

						FILES_AFTER = FILE_SEARCH(DIR_Z+'sst1_*')
		     		IF FILES_AFTER[0] EQ '' THEN CONTINUE ; >>>>>>>>
		      	N_AFTER=N_ELEMENTS(FILES_AFTER)

						COUNTER=COUNTER + (N_AFTER-N_BEFORE)
						FTP_COUNT=FTP_COUNT+(N_AFTER-N_BEFORE)

		    		IF FTP_COUNT GE DO_FILES  THEN BEGIN
		    			PRINT,'DOWNLOADED ',FTP_COUNT,' FILES. WAITING ',NUM2STR(60.*DELAY),'  SECONS BEFORE GETTING MORE FILES'
		    			;     ===> Copy files to hdd
		 					;		===> CHECK FOR PRESENCE OF HDD

	    				OK=WHERE(STRUPCASE(STRUCT_DRIVES.NAME) EQ HDD,COUNT)

	    				IF COUNT EQ 1 AND KEYWORD_SET(DO_COPY_2HDD) THEN BEGIN
	    					DRIVE_HDD = STRUCT_DRIVES[OK].DRIVE
	    					FILES_AFTER  = FILELIST(DIR_Z + 'sst1_*')
	    					IF  FILES_AFTER[0] NE '' THEN BEGIN
		    					DIR_HDD = REPLACE(DIR_Z,DISK,DRIVE_HDD) & DIR_HDD = REPLACE(DIR_HDD,'\\','\')
									;				===> Copy files to HDD if not already there, and update if newer
		      				FILE_UPDATE,FILES_AFTER, DIR_HDD
									;	===> Delete from hard drive if present on HDD
		    	   			FILES_HDD =  REPLACE(FILES_AFTER,DISK,DRIVE_HDD) & FILES_HDD = REPLACE(FILES_HDD,'\\','\')
		      	 			EXIST = FILE_TEST(FILES_HDD)
		       				OK=WHERE(EXIST EQ 1,COUNT_EXIST)
		       				IF COUNT_EXIST GE 1 THEN FILE_DELETE,FILES_AFTER[OK]

								ENDIF;IF  FILES_AFTER(0) NE '' THEN BEGIN
	   				  ENDIF; IF COUNT EQ 1 AND KEYWORD_SET(DO_COPY_2HDD) THEN BEGIN

							PRINT,  'WAITING  ',NUM2STR(DELAY)+' Minutes'
							WAIT, 60.*DELAY

				    	FTP_COUNT = 0L
	 						COUNTER=0L

  			ENDIF ;IF FTP_COUNT GE FTP_N_FILES  THEN BEGIN


			ENDFOR ;FOR _YEAR=0,N_ELEMENTS(YEARS)-1 DO BEGIN

		IF DO_FTP_GET EQ 3 THEN GOTO,AGAIN_DO_FTP_GET

  ENDIF ;IF DO_FTP_GET GE 1 THEN BEGIN
; |||||||||||||||||||||||||||||||||||||||||||||||||





;	**********************************
	IF DO_GOES_SST_2GZ GE 1 THEN BEGIN
;	**********************************

;	===> GZ any GOES SST1 on DIR_Z
;	files=FILE_SEARCH(DIR_Z,'SST1_*.*')

;		===> GZ an GOES SST1 files on the HDD
		OK=WHERE(STRUPCASE(STRUCT_DRIVES.NAME) EQ HDD,COUNT)
		IF COUNT EQ 1 THEN BEGIN
			HDD_DRIVE = STRUCT_DRIVES(OK[0]).DRIVE
			files=FILE_SEARCH(HDD_DRIVE,'SST1_*')
			FN=FILE_PARSE(FILES)
			OK=WHERE(STRUPCASE(FN.EXT) EQ 'GZ',COUNT,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT)
			IF NCOMPLEMENT GE 1 THEN BEGIN
				TARGETS=FILES(COMPLEMENT)
				ZIP,files=TARGETS,/gzip
			ENDIF
		ENDIF
	ENDIF
;	||||||||||||||||||||||




;	********************************
	IF DO_COPY_2HDD GE 1 THEN BEGIN
	;	********************************
;		===> CHECK FOR PRESENCE OF HDD
 		STRUCT_DRIVES=GET_DRIVE_NAMES()
    OK=WHERE(STRUPCASE(STRUCT_DRIVES.NAME) EQ HDD,COUNT)

    IF COUNT EQ 1 THEN BEGIN
    		DRIVE_HDD = STRUCT_DRIVES[OK].DRIVE
;				===> SST HDF FILES
    		TARGETS = DIR_Z + 'sst1_*'
    		FILES_SOURCE  = FILELIST(TARGETS)
    		IF  FILES_SOURCE[0] NE '' THEN BEGIN
	    		DIR_HDD = REPLACE(DIR_Z,DISK,DRIVE_HDD) & DIR_HDD = REPLACE(DIR_HDD,'\\','\')
	;				===> Copy files to HDD if not already there, and update if newer
					LOGFILE=DIR_Z+'GOES_SST_MAIN.LOG'
	      	FILE_UPDATE,FILES_SOURCE, DIR_HDD,LOGFILE=LOGFILE
	;				===> Delete from hard drive if present on HDD
	    	   FILES_HDD =  REPLACE(FILES_SOURCE,DISK,DRIVE_HDD) & FILES_HDD = REPLACE(FILES_HDD,'\\','\')
	      	 EXIST = FILE_TEST(FILES_HDD)
	       	OK=WHERE(EXIST EQ 1,COUNT_EXIST)
	       	IF COUNT_EXIST GE 1 THEN FILE_DELETE,FILES_SOURCE[OK]

				ENDIF

;				===> INVENTORY FILE (COPY TO HDD BUT DO NOT DELETE FROM HARD DRIVE)
    		TARGETS = INVENTORY
    		FILES_SOURCE  = FILELIST(TARGETS)
    		IF  FILES_SOURCE[0] NE '' THEN BEGIN
    			DIR_HDD = REPLACE(DIR_INVENTORY,'D:',DRIVE_HDD) & DIR_HDD = REPLACE(DIR_HDD,'\\','\')
;					===> Copy files to HDD if not already there, and update if newer
  	     	FILE_UPDATE,FILES_SOURCE, DIR_HDD
				ENDIF

;				===> CSV
				TARGETS = DIR_DATA + '*.CSV'
    		FILES_SOURCE  = FILELIST(TARGETS)
    		IF  FILES_SOURCE[0] NE '' THEN BEGIN
    			DIR_HDD = REPLACE(DIR_DATA,'D:',DRIVE_HDD) & DIR_HDD = REPLACE(DIR_HDD,'\\','\')
;					===> Copy files to HDD if not already there, and update if newer
  	     	FILE_UPDATE,FILES_SOURCE, DIR_HDD, ERROR=ERROR
				ENDIF

;				===> THIS IDL PROGRAM
				TARGETS = DIR_PROGRAMS + 'GOES_SST_MAIN.PRO'
    		FILES_SOURCE  = FILELIST(TARGETS)
    		IF  FILES_SOURCE[0] NE '' THEN BEGIN
    			DIR_HDD = REPLACE(DIR_PROGRAMS,'D:',DRIVE_HDD) & DIR_HDD = REPLACE(DIR_HDD,'\\','\')
;					===> Copy files to HDD if not already there, and update if newer
  	     	FILE_UPDATE,FILES_SOURCE, DIR_HDD, ERROR=ERROR
				ENDIF

     ENDIF
	ENDIF  ;IF COMPUTER EQ 'REDFISH' THEN BEGIN
;	||||||||||||||||||||||||||||||||||||||||||||||||||

; *********************************************
 	IF DO_INVENTORY_HDD GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_INVENTORY_HDD'

    	INVENTORY_HDD = REPLACE(INVENTORY,'.CSV','-'+HDD+'.CSV')
    	D=GET_DRIVE_NAMES()
    	OK=WHERE(D.NAME EQ HDD,COUNT) & IF COUNT EQ 0 THEN GOTO, DONE_INVENTORY_HDD
    	HDD_DISK = D[OK].DRIVE
    	APATH = REPLACE(DIR_Z,DISK, HDD_DISK) & APATH=REPLACE(APATH,'\\','\')
;			===> Find the z files
    	TARGETS = APATH+'SST1*' ;
			FILES = FILE_SEARCH(TARGETS)
			STOP
			FI=FILE_INFO(FILES)
			FN=PARSE_IT(FI.NAME)
	 		DATE = STRARR(N_ELEMENTS(FI))
    	DATE(*)=DATE_NOW()
    	COMPUTERS = REPLICATE(HDD,N_ELEMENTS(FI))
    	FILE_SIZE = NUM2STR(FI.SIZE)
 			temp   = CREATE_STRUCT('NAME_EXT','','DATE','','SIZE','','COMPUTER','') & temp=REPLICATE(temp,N_ELEMENTS(FILES))
    	temp.NAME_EXT= FN.NAME
    	temp.DATE=DATE
    	temp.SIZE=FILE_SIZE
    	temp.COMPUTER=COMPUTERS
    	STRUCT_2CSV,INVENTORY_HDD,TEMP
    	TEMP = ''
		DONE_INVENTORY_HDD:
  ENDIF
; |||||||||||||||||||||||||||||||||||||||||||||||||||||


; *********************************************
 	IF DO_PERIOD_PLOT_HDD GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_PERIOD_PLOT_HDD'
    TYPES= ['sst1']
    D=GET_DRIVE_NAMES()
    OK=WHERE(D.NAME EQ HDD,COUNT) & IF COUNT EQ 0 THEN GOTO, END_DO_PERIOD_PLOT_HDD
    ADRIVE = D[OK].DRIVE
    APATH = ADRIVE+'\SST-GOESWH\Z\'
	    FOR NTH=0,N_ELEMENTS(TYPES)-1 DO BEGIN
	    	ATYPE=TYPES(nth)
	    	LABEL = 'GOES-'+ATYPE
	;			===> Find the z files
	    	TARGETS = APATH+'*'+ATYPE+'*' ; E.G. 	MY04MDN1.sst.ADD2004047.030.2004050195207.hdf.gz
				FILES = FILE_SEARCH(TARGETS)
				fn=PARSE_IT(FILES)
				NAME=FN.NAME
				YEAR= STRMID(NAME,5,4)
				DOY	= STRMID(NAME,10,3)
			 ; DATE=YDOY_2DATE(YEAR,DOY)
 				DATE = JD_2DATE(YDOY_2JD(year,doy)) & period = '!D_'+STRMID(DATE,0,8)
        PERIOD_PLOT,PERIOD=PERIOD,LABEL=LABEL,DIR=DIR_PLOTS,/PS
			ENDFOR
		END_DO_PERIOD_PLOT_HDD:
  ENDIF
; |||||||||||||||||||||||||||||||||||||||||||||||||||||



; *********************************************
 	IF DO_HISTOGRAM_RAW_DATA GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_HISTOGRAM_RAW_DATA'
		HDD='IOMEGA_HDD_9'
		N_FILES = -1

 		STRUCT_DRIVES=GET_DRIVE_NAMES()
 	  OK=WHERE(STRUPCASE(STRUCT_DRIVES.NAME) EQ HDD,COUNT)
 		IF COUNT EQ 1 THEN BEGIN
			HDD_DISK = STRUCT_DRIVES(OK[0]).DRIVE
		ENDIF ELSE BEGIN
			PRINT,'ERROR: '+HDD +' NOT PRESENT'
			GOTO,DONE_HISTOGRAM_BYTE_CODES  	; >>>>>>>>>>>>>
		ENDELSE

		M=MAPS_SIZE('GOESWH')
  	PX = M.PX & PY = M.PY
  	struct = CREATE_STRUCT('FIRST_NAME','','MTIME','','ERROR','1','HISTO','')

   	TARGETS = REPLACE(DIR_Z, DISK, HDD_DISK)
    TARGETS=REPLACE(TARGETS,'\\','\')
   	TARGETS = TARGETS +'SST1*'
  	FILES = [FILE_SEARCH(TARGETS)]
    SRT=SORT(FILES) & FILES=FILES(SRT)

		HISTO_FILE 	= DIR_HISTO+'HISTOGRAM-GOES_SST-RAW.CSV'
		PS_FILE 		= DIR_HISTO+'HISTOGRAM-GOES_SST-RAW.PS'
		IF FILE_TEST(HISTO_FILE) THEN DB = READ_CSV(HISTO_FILE) ELSE DB = STRUCT

		FN=FILE_PARSE(FILES)
		OK=WHERE_IN(FN.FIRST_NAME, DB.FIRST_NAME,COUNT,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT)


;		$$$ MUST ALSO IN THE FUTURE ADD CODE TO CHECK ON MTIME IN THE DB OF HISTOGRAM TO FRESHEN UP IF THE RAW MTIME DATA IS NEWER THAN THAT IN THE HISTOGRAM

   	IF NCOMPLEMENT GE 1 THEN BEGIN
   		struct = REPLICATE(STRUCT,NCOMPLEMENT)
   		FILES = FILES(COMPLEMENT)
   		IF N_FILES NE -1 THEN BEGIN
   			FILES=FILES(0:N_FILES-1L)
   			STRUCT=STRUCT(0:N_FILES-1L)
   		ENDIF
		ENDIF ELSE BEGIN
			PRINT,'All files have been incorporated into the histogram '
			GOTO,DONE_HISTOGRAM_BYTE_CODES
		ENDELSE

		TIMER

;		===> Make structure to hold histogram results
;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    FOR _FILES = 0L,N_ELEMENTS(FILES)-1L DO BEGIN
    	AFILE=FILES(_FILES)
    	PRINT,AFILE
  		FN=PARSE_IT(AFILE) & 	NAMES = FN.FIRST_NAME
  		FI=FILE_INFO(AFILE)

			IMAGE = READ_GOES_SST(AFILE,/BIN,ERROR=ERROR)
			STRUCT(_FILES).ERROR = ERROR

  		IF IMAGE[0] EQ -1 OR ERROR EQ 1 THEN BEGIN
  			REPORT,'ERROR reading '+AFILE, DIR=DIR_REPORT
  		ENDIF ELSE BEGIN
  			STRUCT(_FILES).FIRST_NAME = FN.FIRST_NAME
  			STRUCT(_FILES).MTIME = STRTRIM(FI.MTIME,2)
  		 	H=HISTOGRAM(IMAGE)
  		 	STRUCT(_FILES).HISTO = STRJOIN(STRTRIM(H,2)+';')
			ENDELSE
		ENDFOR
		TIMER,/STOP

		DB = [DB,STRUCT] & OK=WHERE(DB.FIRST_NAME NE MISSINGS(DB.FIRST_NAME),COUNT) & DB=DB[OK]
		SRT = SORT(DB.FIRST_NAME) & DB=DB(SRT)
		STRUCT_2CSV,HISTO_FILE,DB

;		===> Generate a plot of binary 0 through 8
		OK=WHERE(DB.ERROR EQ 0,NUM) & D = DB[OK]


    H= WORDS((D.HISTO),/NO_NULL,DELIM=';',LINE=LINE)
    IF N_ELEMENTS(H) NE (NUM*256) THEN STOP
    ARR = REFORM(H,256,NUM)

		PSPRINT,FILENAME=PS_FILE,/FULL,/COLOR
		PAL_36,R,G,B
		BYTE_TARGETS = [INDGEN(11),128]

		!P.MULTI=[0,1,N_ELEMENTS(BYTE_TARGETS)]
		;		===> YEAR
;		JD = YDOY_2JD(YEAR,DOY,HOUR,MINUTE,SECOND)
		JD = 	YDOY_2JD(STRMID(D.FIRST_NAME,5,4) , STRMID(D.FIRST_NAME,10,3), STRMID(D.FIRST_NAME,14,2)	)

		IF MAX(JD) - MIN(JD) LT 367 THEN _JD = [JD,MIN(JD)+366] ELSE _JD = JD
		AX=DATE_AXIS(_JD,/YEAR)
		AXM = DATE_AXIS(_JD,/MONTH)

		FOR _B = 0,N_ELEMENTS(BYTE_TARGETS)-1 DO BEGIN
			B = BYTE_TARGETS(_B)
			Y = [0,MAX(FLOAT(ARR(B,*)))]
			IF _B NE N_ELEMENTS(BYTE_TARGETS)-1 THEN BEGIN
			_TICKNAME = AX.TICKNAME & _TICKNAME(*) = ' '
				PLOT,AX.JD,Y, XTICKS=AX.TICKS,XTICKNAME=_TICKNAME,XTICKV=AX.TICKV,/XSTYLE, XTITLE=' ',/NODATA,YTICKLEN = 0.002,YTITLE=NUM2STR(FIX(B))+' Byte',YMARGIN=[0,0.25]
			ENDIF ELSE BEGIN
				PLOT,AX.JD,Y, XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,/XSTYLE, XTITLE=AX.TITLE,/NODATA,YTICKLEN = 0.002,YTITLE=NUM2STR(FIX(B))+' Byte',YMARGIN=[0,0.25]
			ENDELSE
			GRIDS,XX=AXM.TICKV,  /NO_Y,COLOR=34
			PLOTS, JD, FLOAT(REFORM(ARR(B,*))), PSYM=1,SYMSIZE=0.07,COLOR=6
		ENDFOR; 	FOR _B = 0,N_ELEMENTS(BYTE_TARGETS)-1 DO BEGIN
		PSPRINT

    DONE_HISTOGRAM_BYTE_CODES:
  ENDIF ; IF DO_HISTOGRAM_RAW_DATA EQ 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



;
; *********************************************
	IF DO_Z_2SAVE GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_Z_2SAVE';
    OVERWRITE =  DO_Z_2SAVE GE 2
		disk='T:'
	;	disk='F:'
		dir_save=	disk+'\SST-IMAGER-4-GOESWH\save\'
		dir_z='g:\SST-IMAGER-4-GOESWH\Z\'
		dir_z='t:\SST-IMAGER-4-GOESWH\Z\'
		MAP='GOESWH'
		YEARS=[2008,2009]
	;	YEARS=[2007]
	;	YEARS=[2008]
		YEARS=[2009]
;stop
		;IF COMPUTER EQ 'STINGRAY' THEN YEARS=2007
		;IF COMPUTER EQ 'LIONFISH' THEN YEARS=2008
		;IF COMPUTER EQ 'GROUPER'  THEN YEARS=2009


;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _YEAR=0,N_ELEMENTS(YEARS)-1 DO BEGIN

			TARGET='sst1_'
			AYEAR =YEARS(_YEAR)
			IF AYEAR EQ 2007 THEN TARGET='sst1o_'
			IF AYEAR EQ 2008 THEN TARGET='sst1b_'
			IF AYEAR EQ 2009 THEN TARGET='sst1b_'
		;	FILES_Z=FILELIST(DIR_Z+TARGET+NUM2STR(AYEAR)+'_*.gz')


STOP
FILES_Z=FILELIST(DIR_Z+'sst1b_2009_3*.gz')
OVERWRITE=0

			IF FILES_Z[0] NE '' THEN BEGIN
				FOR _FILE=0,N_ELEMENTS(FILES_Z)-1L DO BEGIN
					GOES_SST_2SAVE, FILES_Z(_FILE), MAP=map, DIR_OUT=DIR_SAVE,DIR_REPORT=dir_report, 	OVERWRITE=overwrite, REFRESH=refresh, ERROR=error
				ENDFOR
			ENDIF
	  ENDFOR
  ENDIF
;	||||||||||||||||||||||||||||||||||||||||||||||||


; *********************************************
	IF DO_CHECK_24_PER_DAY GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_CHECK_24_PER_DAY';

   	FILES=FILE_SEARCH(DIR_SAVE+'*.SAVE')
   	FN=FILE_PARSE(FILES)
		SETS 	= WHERE_SETS(STRMID(FN.FIRST_NAME,3,8))
		HH=STRING(INDGEN(24),FORMAT='(I02)')
		HOURS = STRMID(FN.FIRST_NAME,11,2)
		DATES=''

			OK=WHERE(SETS.N NE 24,COUNT)
			IF COUNT GE 1L THEN BEGIN
				SETS=SETS[OK]
				FOR _SET=0,N_ELEMENTS(SETS)-1L DO BEGIN
					ASET=SETS(_SET)
					ADAY=ASET.VALUE
					SUBS=WHERE_SETS_SUBS(ASET)
					H=HOURS(SUBS)
					OK=WHERE_IN(HH,H,COUNT,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT)
					IF NCOMPLEMENT GE 1 THEN BEGIN
						GET=HH(COMPLEMENT)
						DATES=[DATES,ADAY+GET]
					ENDIF
				ENDFOR
				IF N_ELEMENTS(DATES) GE 2 THEN DATES=DATES(1:*)
				YEAR=STRMID(DATES,0,4)
				DOY=STRING(DATE_2DOY(DATES),FORMAT='(I03)')
				HOUR=STRMID(DATES,8,2)
				GOES_NAMES='sst1_'+YEAR+'_'+DOY+'_'+HOUR

				temp=CREATE_STRUCT('FILES','')
				TEMP=REPLICATE(TEMP,N_ELEMENTS(GOES_NAMES))
				TEMP.FILES= REVERSE(GOES_NAMES)
				STRUCT_2CSV,DIR_REPORT+'GOES_SST_INCOMPLETE_DAYS.CSV',TEMP
			ENDIF

	ENDIF;	IF DO_CHECK_24_PER_DAY GE 1 THEN BEGIN



;	***************************************
	IF DO_HISTOGRAM_RAW_2SUSPECT GE 1 THEN BEGIN
;	***************************************
		_OVERWRITE = DO_HISTOGRAM_RAW_2SUSPECT GE 2

		HISTO_FILE 	= DIR_HISTO+'HISTOGRAM-GOES_SST-RAW.CSV'
		DB=READ_CSV(HISTO_FILE)
		OK=WHERE(DB.ERROR EQ 0,NUM) & D = DB[OK]
    H= WORDS((D.HISTO),/NO_NULL,DELIM=';',LINE=LINE)
    IF N_ELEMENTS(H) NE (NUM*256) THEN STOP
    ARR = REFORM(H,256,NUM)

;		*** CHECK FOR RATIO_128 > .2  *** (GREEN COLORS)
		RATIO_128 = REFORM(FLOAT(ARR(128,*))) / TOTAL(FLOAT(ARR(124:133,*)),1)
		OK_128		=	WHERE(RATIO_128 GE 0.2 ,COUNT_128)

stop
;		===> FUSHIA COLORED
		RATIO_LOW_2HIGH = REFORM(TOTAL(FLOAT(ARR(9:12,*)),1)) /  REFORM(TOTAL(FLOAT(ARR(113:116,*)),1))
		OK_LOW_2HIGH=WHERE(RATIO_LOW_2HIGH GE 100,COUNT_LOW_2HIGH)

		SUSPECT = [OK_128,OK_LOW_2HIGH]

		OK_SUSPECT=WHERE(SUSPECT NE -1,COUNT_SUSPECT)
		IF COUNT_SUSPECT GE 1 THEN BEGIN
			SUSPECT=SUSPECT(OK_SUSPECT)

			NAME = D(SUSPECT).FIRST_NAME
			_SATELLITE = REPLICATE('GOES_00',COUNT_SUSPECT)
			_SENSOR    = REPLICATE(SENSOR,COUNT_SUSPECT)
			_PROD = REPLICATE(PROD,COUNT_SUSPECT)
	  	year = STRMID( NAME,5,4) & DOY = STRMID( NAME,10,3) & HOUR = STRMID(NAME,14,2)
			DATE = JD_2DATE(YDOY_2JD(year,doy,HOUR))
			period = '!H_'+STRMID(DATE,0,10)
			INAME=INAME_MAKE(PERIOD=PERIOD, SENSOR=_SENSOR,SATELLITE=_SATELLITE,SAT_EXTRA=SAT_EXTRA)
			SAVE_FILES=DIR_SAVE+iname+dash+METHOD+dash+MAP+dash+PROD+'.SAVE'

			OK = WHERE(FILE_TEST(SAVE_FILES) EQ 1,COUNT)
			IF COUNT GE 1 THEN BEGIN
				SAVE_FILES=SAVE_FILES[OK]

;   		E.G. !H_2005122513-IMAGER-GOES_00-CWATCH-GOESWH-SST.save
				STRUCT_SD_2PNG, SAVE_FILES,DIR_OUT=DIR_SUSPECT,/ADD_COLORBAR, /ADDDATE,/ADD_SENSOR,/ADD_PROD,/ADD_METHOD,$
                    BACKGROUND=BACKGROUND,LAND_COLOR=LAND_COLOR,FLAG_COLOR=FLAG_COLOR,OUTSCAN_COLOR=outscan_color,$
                    HI_LO_COLOR=HI_LO_COLOR,PAL=PAL,OVERWRITE=_overwrite,/QUIET ,IMAGE_SCALE=0.50
    	ENDIF
    ENDIF
	ENDIF ; DO_HISTOGRAM_RAW_2SUSPECT
;	||||||||||||||||||



; *********************************************
	IF DO_EXCLUDE_CSV GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_EXCLUDE_CSV';
    OVERWRITE =  DO_EXCLUDE_CSV GE 2


STOP
; $$$ ALWAYS MAKE THE EXCLUDE CSV FRESH
		OVERWRITE = 1

    FILES=FILE_SEARCH(DIR_EXCLUDE+'!H_*-IMAGER-GOES_00-CWATCH-GOESWH*.PNG')
    FN=PARSE_IT(FILES)
    IF FN[0].FULLNAME NE '' THEN BEGIN
    	NAMES=STRMID(FN.NAME,0,42) & NAMES=NAMES+'-SST' & S=SORT(names) & names=names(S)
      temp   = CREATE_STRUCT('INAME','')
      temp=REPLICATE(temp,N_ELEMENTS(names)) & temp.INAME=NAMES
      STRUCT_2CSV,EXCLUDE_FILE,TEMP
      TEMP = ''
      S=''
      names=''
   	 	FN=''

    ENDIF; IF FN(0).FULLNAME NE '' THEN BEGIN
	ENDIF; 	IF DO_EXCLUDE_CSV GE 1 THEN BEGIN
;	||||||||||||||||||||||||||||||||||||||||||||||||



; *********************************************
	IF DO_SOLELV GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_SOLELV';
    OVERWRITE =  DO_SOLELV GE 2
    TARGETS = DIR_SAVE + '!H_*-SST.SAVE'
    files = FILELIST(targets)
		LEG=COLOR_BAR_SCALE(PROD='SOLEL',PX=3000,PY=200,XTITLE='Solar Elevation',/CUT,CHARSIZE=4)
;		===> Get pixel center lon,lats for the GOESWH map
		SMAP = MAPS_SIZE(MAP)
		XY = IMAGE_PXPY([SMAP.PX,SMAP.PY], /CENTER)
		ZWIN,[SMAP.PX,SMAP.PY]
		MAP_GOESWH
		XYZ=CONVERT_COORD(XY.X,XY.Y,/DEVICE,/TO_DATA)
		LONS=REFORM(XYZ(0,*))
		LATS=REFORM(XYZ(1,*))

		LATS = REFORM(LATS,SMAP.PX,SMAP.PY)
		LONS = REFORM(LONS,SMAP.PX,SMAP.PY)
		LATS = CONGRID(LATS,750,525)
		LONS = CONGRID(LONS, 750,525)
		ZWIN
;		===> INIT ZWIN TO THE SMALLER MAP
		ZWIN,LATS
		MAP_GOESWH
		FONT_TIMES
;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _file=0L,N_ELEMENTS(FILES)-1L DO BEGIN
			FILE=FILES(_FILE)
			PRINT,FILE
			FN=FILE_PARSE(FILE)
			PNGFILE=DIR_BROWSE+FN.FIRST_NAME+'-SOLEL.PNG'
			IF FILE_TEST(PNGFILE) AND OVERWRITE EQ 0 THEN CONTINUE ; >>>>>>>>>>>>>
			P= PERIOD_2STRUCT(FN.FIRST_NAME)
			YEAR = P.YEAR_START
			DOY= DATE_2DOY(P.DATE_START)
			DHOURS = (DOY MOD 1)*24.0
			DOY = FIX(DOY)
			TIMER
			ELS=I_SUN_KIRK( LONS,LATS, P.DATE_START,/DO_EL)
			ELS=REFORM(ELS,SMAP.PX/4,SMAP.PY/4)
			TIMER,/STOP
			BIMAGE = SD_SCALES(PROD='SOLEL',ELS,/DATA2BIN)
			PRINT,MINMAX(ELS)
			OK=WHERE(ELS GE -0.1 AND ELS LE 0.1,COUNT)
			IF COUNT GE 1 THEN BIMAGE[OK]=255
			TV,BIMAGE
			MAP_CONTINENTS,COLOR=251
			PLOTGRAT,COLOR=0,10,PSYM=1,SYMSIZE=0.25
			XYOUTS,0.55,0.83,DATE_FORMAT(P.DATE_START,/HOUR),CHARSIZE=3,/NORMAL,ALIGN=0.5,COLOR=0,CHARTHICK=2
			IMAGE = TVRD()
			NEW = IMAGE_WELD(IMAGE,LEG)
			PAL_SW3,R,G,B
			WRITE_PNG,PNGFILE, NEW,R,G,B
    ENDFOR
    ZWIN
  ENDIF
;	||||||||||||||||||||||||||||||||||||||||||||||||


; *********************************************
	IF DO_WARMEST GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_WARMEST';
    OVERWRITE =  DO_WARMEST GE 2



; *********************************************************************************************************
  	COMMON COMMON_STATS_ARRAYS, MEM_TYPE, STATS_ARRAYS_NAME, STATS_ARRAYS_SZ, STATS_ARRAYS_TRANSFORM, STATS_ARRAYS_MISSING,$
  						STATS_ARRAYS_RANGE,STATS_ARRAYS_OPER,STATS_ARRAYS_CRITERIA,STATS_ARRAYS_N_SETS, $
  						DATA_MEM, NUM_MEM,		MIN_MEM,		MAX_MEM,		NEG_MEM,	 	SUM_MEM,		SSQ_MEM,		WTS_MEM, 	MEAN_MEM,		STD_MEM, 	CV_MEM
; *********************************************************************************************************


		YEARS=[2009]
		;IF COMPUTER EQ 'STINGRAY' THEN YEARS=[2009]
		;IF COMPUTER EQ 'LIONFISH' THEN YEARS=[2008]
		;IF COMPUTER EQ 'GROUPER'  THEN YEARS=[2007]
		TARGETS = ['!H_'+NUM2STR(YEARS)+'*-SST.SAVE']

    ALL_FILES = FILELIST(DIR_SAVE+targets)

		EXIST_EXCLUDE=FILE_TEST(EXCLUDE_FILE)

		IF EXIST_EXCLUDE THEN BEGIN
			OK_GOOD=WHERE_GOOD_INAMES(ALL_FILES, Count_GOOD,EXCLUDE_FILE=exclude_file, COMPLEMENT=COMPLEMENT, NCOMPLEMENT=NCOMPLEMENT)
		ENDIF

		IF Count_GOOD EQ 0 THEN STOP

		GOOD_FILES			=	ALL_FILES(OK_GOOD)
		FN_ALL 				= FILE_PARSE(ALL_FILES)
		SETS_ALL 	= WHERE_SETS(STRMID(FN_ALL.FIRST_NAME,3,8))

		IF NCOMPLEMENT GE 1 THEN BEGIN
			EX_FILES 	= ALL_FILES(COMPLEMENT)
			FN_EX 		= FILE_PARSE(EX_FILES)
			SETS_EX 	= WHERE_SETS(STRMID(FN_EX.FIRST_NAME,3,8))
			OK=WHERE_MATCH(SETS_ALL.VALUE, SETS_EX.VALUE)
			SETS_ALL = SETS_ALL[OK]

;			===> IF ALL OF THE POSSIBLE HOURLY FILES FOR A DAY MATCH THE FILES IN EXCLUDE, THEN WE MUST DELETE ANY MAX, NUM OR BROWSE FROM WARMEST
			OK_DELETE = WHERE(SETS_ALL.N EQ SETS_EX.N,COUNT_DELETE,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT)
			IF COUNT_DELETE GE 1 THEN BEGIN
				SETS_DELETE = SETS_ALL(OK_DELETE)
				SUBS_REMOVE = WHERE_SETS_SUBS(SETS_DELETE)
				ALL_FILES=REMOVE(ALL_FILES, SUBS_REMOVE)
	;			===> REDEFINE ALL FILES BY REMOVING SUBS_REMOVE

	;			E.G. !D_20051226-IMAGER-GOES_00-CWATCH-GOESWH-SST-MAX.SAVE
				MAX_FILES_2DELETE = DIR_STATS+'!D_'+SETS_DELETE.VALUE+'-IMAGER-GOES_00-CWATCH-GOESWH-SST-MAX.SAVE'
				PRINT, 'DELETING: '
				LIST, MAX_FILES_2DELETE
				FILE_DELETE,MAX_FILES_2DELETE,/QUIET

				NUM_FILES_2DELETE = DIR_STATS+'!D_'+SETS_DELETE.VALUE+'-IMAGER-GOES_00-CWATCH-GOESWH-SST-NUM.SAVE'
				PRINT, 'DELETING: '
				LIST, NUM_FILES_2DELETE
				FILE_DELETE,NUM_FILES_2DELETE,/QUIET
			ENDIF

	;		===> Check if updates are needed
			IF NCOMPLEMENT GE 1 THEN BEGIN
				SETS_CHECK = SETS_ALL(COMPLEMENT)
	      MAX_FILES_2CHECK = DIR_STATS+'!D_'+SETS_CHECK.VALUE+'-IMAGER-GOES_00-CWATCH-GOESWH-SST-MAX.SAVE'
	      NUM_FILES_2CHECK = DIR_STATS+'!D_'+SETS_CHECK.VALUE+'-IMAGER-GOES_00-CWATCH-GOESWH-SST-NUM.SAVE'



	;			$$$$ READ EACH MAX DAILY FILE, GET INAMES, COMPARE INAMES WITH THOSE IN FN_ALL AND ANY DIFFERENCES MEAN WE SHOULD DELETE THE MAX,NUM FILE
				PRINT, 'DELETING: '
				LIST, MAX_FILES_2CHECK
	;			FILE_DELETE,MAX_FILES_2CHECK
	;			FILE_DELETE,NUM_FILES_2CHECK
	;
			ENDIF
		ENDIF; IF EXCLUDED GE 1L THEN BEGIN


;		===> Get pixel center lon,lats for the GOESWH map
		SMAP = MAPS_SIZE(MAP)
		XY = IMAGE_PXPY([SMAP.PX,SMAP.PY], /CENTER)
		ZWIN,[SMAP.PX,SMAP.PY]
		MAP_GOESWH
		XYZ=CONVERT_COORD(XY.X,XY.Y,/DEVICE,/TO_DATA)
		LONS=REFORM(XYZ(0,*))
		LATS=REFORM(XYZ(1,*))

		FN=FILE_PARSE(GOOD_FILES)

;		===> Get Daily Sets of ALL_FILES
		sets=PERIOD_SETS(PERIOD_2JD(FN.FIRST_NAME),PERIOD_CODE = '!D')
		NOTES = 'Set=24/day; Removing data WHERE(SOLAR_EL GT 0)'
		_TRANSFORMATION=''
		CRITERIA_TXT=VALID_CRITERIA('SST',CRITERIA_OPER=_CRITERIA_OPER,CRITERIA_RANGE=_CRITERIA_RANGE,ERROR=ERROR)

;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _SET = 0L,N_ELEMENTS(SETS)-1L DO BEGIN
			ASET = SETS(_SET)			;IF ASET.N NE 24  THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

			SUBS = WHERE_SETS_SUBS(ASET)
			FILES = GOOD_FILES(SUBS)

			INAME= INAME_MAKE(PERIOD=ASET.PERIOD, SENSOR=SENSOR,SATELLITE=SATELLITE,SAT_EXTRA=SAT_EXTRA)
			FILE_NUM = DIR_STATS + INAME+'-'+METHOD+'-'+MAP+'-'+PROD+'-NUM.SAVE'
			FILE_MAX = DIR_STATS + INAME+'-'+METHOD+'-'+MAP+'-'+PROD+'-MAX.SAVE'

;			*** If any of the hourly input files are more recent than the MAX (Warmest) output then redo the MAX
      IF MAX((FILE_INFO(FILES)).MTIME)  LT  (FILE_INFO(FILE_MAX)).MTIME AND OVERWRITE EQ 0 THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>


			START = 1 ; THIS INITIALIZES THE STATS_ARRAY FOR THE FIRST FILE THAT IS READ WITHOUT ERRORS
			TIMER
;			LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
			FOR _file=0L,N_ELEMENTS(FILES)-1L DO BEGIN

				FILE=FILES(_FILE)
				PRINT,FILE
				FN_FILE=FILE_PARSE(FILE)
				P= PERIOD_2STRUCT(FN_FILE.FIRST_NAME)
				DATA = STRUCT_SD_READ(FILE,ERROR=error)
				IF ERROR NE 0 THEN BEGIN & REPORT,FILE+' READ ERROR',DIR=DIR_REPORT & CONTINUE & ENDIF

				SOLAR_EL=I_SUN_KIRK( LONS,LATS, P.DATE_START,/DO_EL)
				SOLAR_EL=REFORM(SOLAR_EL,SMAP.PX,SMAP.PY)

	;			===> Use the Solar Elevations to mask out daylight values

				OK=WHERE(SOLAR_EL GT 0,COUNT)
				;SOLAR_EL=''
				IF COUNT GE 1L THEN DATA[OK] = MISSINGS(DATA[OK])
			  PRINT, FILE,'Solar El > 0 :  ' + NUM2STR( (100.0*count)/N_ELEMENTS(LATS),FORMAT='(F10.1)') + '%'

				IF _FILE EQ N_ELEMENTS(FILES)-1L THEN CALC = 1 ELSE CALC = 0

				M = STATS_ARRAYS(DATA, RANGE=_CRITERIA_RANGE,OPER=_CRITERIA_OPER,CRITERIA_TXT=CRITERIA_TXT,MISSING=MISSING,$
													START=START,CALC=CALC,STRUCT=0,DO_STATS='MAX',NAME=NAME,TRANSFORM=_TRANSFORMATION )
				START=0
				DATA = ''

	    ENDFOR; FILES

			IF ERROR NE 0 THEN M = STATS_ARRAYS(RANGE=_CRITERIA_RANGE,OPER=_CRITERIA_OPER,CRITERIA_TXT=CRITERIA_TXT,MISSING=MISSING,$
													START=START,/CALC,STRUCT=0,DO_STATS='MAX',NAME=NAME,TRANSFORM=_TRANSFORMATION )




;			===> WRITE   NUM SAVE FILES
 			STRUCT_SD_WRITE,FILE_NUM,PROD=PROD, 	ASTAT='NUM', $
       IMAGE	=	NUM_MEM,  MISSING_CODE=missing_code, MISSING_NAME=missing_NAME,$
       MASK=MASK,     	CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
       SCALING='Linear', INTERCEPT=0.0,    SLOPE=1.0,       DATA_UNITS=UNITS(PROD),$
			 TRANSFORMATION=_TRANSFORMATION,$
			 STAT_CRITERIA=CRITERIA_TXT, $
       PERIOD= ASET.PERIOD, $
       INFILE= [FILES],$
       NOTES=NOTES,$
       ERROR=ERROR

;			===> WRITE   MAX SAVE FILES
 			STRUCT_SD_WRITE,FILE_MAX,PROD=PROD, 	ASTAT='MAX', $
       IMAGE	=	MAX_MEM,  MISSING_CODE=missing_code, MISSING_NAME=missing_NAME,$
       MASK=MASK,     	CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
       SCALING='Linear', INTERCEPT=0.0,    SLOPE=1.0,       DATA_UNITS=UNITS(PROD),$
       TRANSFORMATION=_TRANSFORMATION,$
			 STAT_CRITERIA=CRITERIA_TXT, $
       PERIOD= ASET.PERIOD, $
       INFILE= [FILES],$
       NOTES=NOTES,$
       ERROR=ERROR
				TIMER,/STOP

		ENDFOR; SETS
	ENDIF; IF DO_WARMEST GE 1 THEN BEGIN
;	||||||||||||||||||||||||||||||||||||||||||||||||


; *********************************************
	IF DO_WARMEST_BROWSE GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_WARMEST_BROWSE';
    OVERWRITE =  DO_WARMEST_BROWSE GE 2

		YEARS=[2007,2008,2009]
		IF COMPUTER EQ 'STINGRAY' THEN YEARS=[2009]
		IF COMPUTER EQ 'LIONFISH' THEN YEARS=[2008]
		IF COMPUTER EQ 'GROUPER'  THEN YEARS=[2007]
		IF COMPUTER EQ 'MACKEREL'  THEN YEARS=[2007]

		TARGETS = ['!D_'+NUM2STR(YEARS)+'*-SST-MAX.SAVE']

stop
    FILES = FILE_SEARCH(DIR_STATS+targets)

    STRUCT_SD_2PNG, FILES,DIR_OUT=DIR_STATS_BROWSE,/ADD_COLORBAR, /ADDDATE,/ADD_SENSOR,/ADD_PROD,/ADD_METHOD,$
                    BACKGROUND=BACKGROUND,LAND_COLOR=LAND_COLOR,FLAG_COLOR=FLAG_COLOR,OUTSCAN_COLOR=outscan_color,$
                    HI_LO_COLOR=HI_LO_COLOR,PAL=PAL,OVERWRITE=overwrite,/QUIET ,IMAGE_SCALE=0.50

	ENDIF; 	IF DO_WARMEST_BROWSE GE 1 THEN BEGIN
;	||||||||||||||||||||||||||||||||||||||||||||||||





; *********************************************
	IF DO_HOURLY_BROWSE_FOR_EXCLUDE GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_HOURLY_BROWSE_FOR_EXCLUDE';
    OVERWRITE =  DO_HOURLY_BROWSE_FOR_EXCLUDE GE 2

    FILES=FILE_SEARCH(DIR_SUSPECT+'!D_2009*-IMAGER-GOES_00-CWATCH-GOESWH*.PNG')
    FN=PARSE_IT(FILES)
    IF FN[0].FULLNAME NE '' THEN BEGIN
    	DATES=STRMID(FN.NAME,3,8)
   	 	FILES=FILE_SEARCH(DIR_SAVE+'!H_*-IMAGER-GOES_00-CWATCH-GOESWH-SST.save')
 			FN=PARSE_IT(FILES)
    	IF FN[0].FULLNAME NE '' THEN BEGIN
    		DAYS_HOURS=STRMID(FN.NAME,3,10)
    		FOR N=0L,N_ELEMENTS(DATES)-1L DO BEGIN
    			OK=WHERE(STRMID(DAYS_HOURS,0,8) EQ DATES(N),COUNT)
 					IF COUNT GE 1 THEN BEGIN
    				STRUCT_SD_2PNG, FN[OK].FULLNAME,DIR_OUT=DIR_SUSPECT,/ADD_COLORBAR, /ADDDATE,/ADD_SENSOR,/ADD_PROD,/ADD_METHOD,$
                    BACKGROUND=BACKGROUND,LAND_COLOR=LAND_COLOR,FLAG_COLOR=FLAG_COLOR,OUTSCAN_COLOR=outscan_color,$
                    HI_LO_COLOR=HI_LO_COLOR,PAL=PAL,OVERWRITE=overwrite,/QUIET ,IMAGE_SCALE=0.50
          ENDIF; IF COUNT GE 1 THEN BEGIN
      	ENDFOR;FOR N=0L,N_ELEMENTS(FN)-1L DO BEGIN
    	ENDIF; IF FN(0).FULLNAME NE '' THEN BEGIN
    ENDIF; IF FN(0).FULLNAME NE '' THEN BEGIN
	ENDIF; 	IF DO_HOURLY_BROWSE_FOR_EXCLUDE GE 1 THEN BEGIN
;	||||||||||||||||||||||||||||||||||||||||||||||||



; *********************************************
	IF DO_MERGE_N4AT_GOES GE 1 THEN BEGIN
; *********************************************
    PRINT, 'S T E P:    DO_MERGE_N4AT_GOES';
    OVERWRITE =  DO_MERGE_N4AT_GOES GE 2
; *********************************************************************************************************
;		!!! Coding scheme from SST_MERGE.PRO
    NOTES = "SOURCE_CODE = [1,2,3,4,5,6,7,8];SOURCE_NAME = ['AVHRR','AQUA','AVHRR-AQUA','TERRA','AVHRR-TERRA','AQUA-TERRA','AVHRR-AQUA-TERRA','GOES']"

;		IN THIS PROGRAM A NEW CODE 8 WILL BE 'GOES'

stop
	MAP_OUT='GEQ'
	MAP_OUT='NEC'

		IF MAP_OUT EQ 'GEQ' THEN BEGIN
			GEQ_SST_FILES 		= FILE_SEARCH('t:\SST-4-GEQ\SAVE_QUAL3\!D_20080819*N4AT-4-GEQ-SST.SAVE')
			GEQ_SOURCE_FILES 	= FILE_SEARCH('t:\SST-4-GEQ\SAVE_QUAL3\!D_20080819*N4AT-4-GEQ-SST-SOURCE.SAVE')
			GOES_WH_FILES     = FILE_SEARCH('t:\SST-IMAGER-4-GOESWH\STATS\!D_20080819*GOESWH-SST-MAX.SAVE')
			DIR_OUT_STATS 					= 't:\SST-4-GEQ\SAVE_QUAL3\'
			DIR_OUT_PLOTS 					= 't:\SST-4-GEQ\PLOTS\' ; HIST2D
		ENDIF

		IF MAP_OUT EQ 'NEC' THEN BEGIN
			GEQ_SST_FILES 		= FILE_SEARCH('t:\SST-4-NEC\SAVE\!D_2009*-SST.SAVE')
			GEQ_SOURCE_FILES 	= FILE_SEARCH('t:\SST-4-NEC\SAVE\!D_2009*-SST-SOURCE.SAVE')
			GOES_WH_FILES     = FILE_SEARCH('t:\SST-N4ATG-4-NEC\SAVE_GOES\!D_200912*CWATCH-NEC-SST-MAX.SAVE')
			DIR_OUT_STATS 					= 't:\SST-N4ATG-4-NEC\SAVE\'
			DIR_OUT_PLOTS 					= 't:\SST-N4ATG-4-NEC\PLOTS\' ; HIST2D
		ENDIF





		IF MAP_OUT EQ 'GEQ' THEN BEGIN
			PERIOD_GEQ_SST    = (VALID_PERIODS(GEQ_SST_FILES)).PERIOD
		 	PERIOD_GEQ_SOURCE = (VALID_PERIODS(GEQ_SOURCE_FILES)).PERIOD
			PERIOD_GOES_WH    = (VALID_PERIODS(GOES_WH_FILES)).PERIOD
			SETS = WHERE_SETS(PERIOD_GEQ_SST,PERIOD_GEQ_SOURCE,PERIOD_GOES_WH)
			ALL_FILES = [GEQ_SST_FILES,GEQ_SOURCE_FILES,GOES_WH_FILES]
		ENDIF

		IF MAP_OUT EQ 'NEC' THEN BEGIN
			PERIOD_GEQ_SST    = (VALID_PERIODS(GEQ_SST_FILES)).PERIOD
			PERIOD_GOES_WH    = (VALID_PERIODS(GOES_WH_FILES)).PERIOD
			SETS = WHERE_SETS(PERIOD_GEQ_SST,PERIOD_GOES_WH)
			ALL_FILES = [GEQ_SST_FILES,GOES_WH_FILES]
		ENDIF


STOP



;		===> Must have GEQ SST, GEQ source and Goes Max
		IF MAP_OUT EQ 'GEQ' THEN 		OK=WHERE(SETS.N EQ 3 AND SETS.GROUPS EQ '0;1;2;')
		IF MAP_OUT EQ 'NEC' THEN 		OK=WHERE(SETS.N EQ 2 AND SETS.GROUPS EQ '0;1;')


		SETS = SETS[OK]

		S=STATS2([1,2,3,4],[1.1,2.2,3.4,4],MODEL='RMA')

		S=STRUCT_COPY(S,TAGNAMES=['Y_ABSDEV','STATSTRING','MODEL'],/REMOVE)

		STATS_STRUCT=CREATE_STRUCT('PERIOD','',S,'INFILES','' )

		ASENSOR ='N4ATG'
		COVERAGE='4'
		AMAP   = MAP_OUT

		TXT_DEG = UNITS('SST')


;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _SET = 0L,N_ELEMENTS(SETS)-1L DO BEGIN
			ASET = SETS(_SET)
			APERIOD = ASET.VALUE

			IF MAP_OUT EQ 'GEQ' THEN BEGIN
				IF ASET.N NE 3  THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

				SUBS = WORDS(ASET.SUBS,DELIM=';',/NO_NULL)
				GEQ_SST_FILE 			= ALL_FILES(SUBS[0])
				GEQ_SOURCE_FILE 	= ALL_FILES(SUBS[1])
				GOES_WH_FILE		 	= ALL_FILES(SUBS(2))

				FN_GEQ_SST 			= FILE_PARSE(GEQ_SST_FILE)
				FN_GEQ_SOURCE 	= FILE_PARSE(GEQ_SOURCE_FILE)
				FN_GOES_WH		 	= FILE_PARSE(GOES_WH_FILE)

				PRINT,'MERGING :'
				PRINT, FN_GEQ_SST.FIRST_NAME
				PRINT, FN_GEQ_SOURCE.FIRST_NAME
				PRINT, FN_GOES_WH.FIRST_NAME

				INFILES = [FN_GEQ_SST.FIRST_NAME, FN_GEQ_SOURCE.FIRST_NAME,FN_GOES_WH.FIRST_NAME]

				INAME= APERIOD
				MERGED_SST_FILE  		= DIR_OUT_STATS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'.SAVE'
				MERGED_SOURCE_FILE  = DIR_OUT_STATS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'-SOURCE.SAVE'
				CSV_NAMES_FILE  		= DIR_OUT_STATS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'-NAMES.CSV'

				CSV_REGRESS_FILE    = DIR_OUT_PLOTS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'-STATS.CSV'
				PS_FILE    		 			= DIR_OUT_PLOTS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'-HIST2D.PS'

				FI =FILE_INFO([GEQ_SST_FILE,GOES_WH_FILE])
				F0 =FILE_INFO(MERGED_SST_FILE)

				IF MAX(FI.MTIME) LT F0.MTIME AND OVERWRITE EQ 0 THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

				TIMER

				GEQ_SST 		= STRUCT_SD_READ(GEQ_SST_FILE)
				GEQ_SOURCE 	= STRUCT_SD_READ(GEQ_SOURCE_FILE)
				GOES_WH    	= STRUCT_SD_READ(GOES_WH_FILE)

				GOES_GEQ = MAP_REMAP(GOES_WH, 	MAP_IN='GOESWH', MAP_OUT='GEQ', PX_OUT =8640L, PY_OUT =4320L, ERROR=error)

				GOES_WH = '' ; CONSERVE MEMORY

			ENDIF; IF MAP_OUT EQ 'GEQ' THEN BEGIN



		IF MAP_OUT NE 'GEQ' THEN BEGIN
				IF ASET.N NE 2  THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

				SUBS = WORDS(ASET.SUBS,DELIM=';',/NO_NULL)
				GEQ_SST_FILE 			= ALL_FILES(SUBS[0])
				GOES_WH_FILE		 	= ALL_FILES(SUBS[1])
				FN_GEQ_SST 			= FILE_PARSE(GEQ_SST_FILE)
				FN_GOES_WH		 	= FILE_PARSE(GOES_WH_FILE)

				PRINT,'MERGING :'
				PRINT, FN_GEQ_SST.FIRST_NAME
				PRINT, FN_GOES_WH.FIRST_NAME

				INFILES = [FN_GEQ_SST.FIRST_NAME,FN_GOES_WH.FIRST_NAME]

				INAME= APERIOD
				MERGED_SST_FILE  		= DIR_OUT_STATS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'.SAVE'
				CSV_NAMES_FILE  		= DIR_OUT_STATS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'-NAMES.CSV'

				CSV_REGRESS_FILE    = DIR_OUT_PLOTS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'-STATS.CSV'
				PS_FILE    		 			= DIR_OUT_PLOTS + INAME+'-'+ASENSOR+'-'+COVERAGE+'-'+AMAP+'-'+PROD+'-HIST2D.PS'

				FI =FILE_INFO([GEQ_SST_FILE,GOES_WH_FILE])
				F0 =FILE_INFO(MERGED_SST_FILE)

				IF MAX(FI.MTIME) LT F0.MTIME AND OVERWRITE EQ 0 THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

				TIMER

				GEQ_SST 		= STRUCT_SD_READ(GEQ_SST_FILE)
				GOES_GEQ    	= STRUCT_SD_READ(GOES_WH_FILE)

			ENDIF;	IF MAP_OUT NE 'GEQ' THEN BEGIN




;			===> Find common pixels
			OK_PAIR=WHERE(GEQ_SST NE MISSINGS(GEQ_SST) AND GOES_GEQ NE MISSINGS(GOES_GEQ),COUNT_PAIR)


;			***************************************************
;			*** Write regression statistics to the CSV_FILE_REGRESS ***
;			***************************************************
;			===> Regression: Add 10 degrees to avoid taking log of zero and negative values

			IF COUNT_PAIR GE 1 THEN BEGIN
				_STATS=STATS2( ALOG10(GEQ_SST(OK_PAIR)+10.0), ALOG10(GOES_GEQ(OK_PAIR)+10.0),MODEL='RMA')
				STRUCT_ASSIGN,_STATS,STATS_STRUCT
				STATS_STRUCT.PERIOD = APERIOD
				STATS_STRUCT.INFILES = STRJOIN(INFILES+';')
				STRUCT_2CSV,CSV_REGRESS_FILE,STATS_STRUCT
			ENDIF ELSE BEGIN
				STATS_STRUCT1=CREATE_STRUCT('NOTES','NO MATCHES WERE FOUND, COUNT_PAIR IS 0')
				STRUCT_2CSV,CSV_REGRESS_FILE,STATS_STRUCT1
			ENDELSE


;			*******************************************************
;			*** Joint Probability Plot: SST vs Uncorrected GOES ***
;			*******************************************************
			PSPRINT,FILENAME=PS_FILE,/FULL,/COLOR
			FONTS,'TIMES'
			IF COUNT_PAIR GE 1 THEN BEGIN

				PLOT_HIST2D,ALOG10(GEQ_SST(OK_PAIR)+10.0), ALOG10(GOES_GEQ(OK_PAIR)+10.0),SMO=16,$
			              MODEL='RMA',/LOG_FREQ,/HORIZONTAL,BAR_POS=[0.10,0.93,  0.7, 0.95],$
			              /ISOTROPIC,BIN1=0.01,BIN2=0.01,MIN_X=0.7,MIN_Y=0.7,MAX_X=1.8,MAX_Y=1.8 ,$
			              XTITLE='LOG10 (Mean AVHRR-TERRA-AQUA SST +10'+TXT_DEG+')',YTITLE='LOG10 (GOES Warmest SST +10'+TXT_DEG+')',$
						  			PAL='PAL_SW3', X_COLOR=0, Y_COLOR=0, X_THICK=2, Y_THICK=2,$
						  			LAB_TXT=label,LAB_COLOR=0,LAB_CHARSIZE=1.5,XCHARSIZE=1.5,YCHARSIZE=1.5,$
						  			ZERO_COLOR = 254, BKG_COLOR = 255, TOP_COLOR = 250,$
			              REG_COLOR=255, REG_THICK =3, REG_MID_COLOR=0,REG_MID_THICK=1,REG_LINESTYLE=1,$
						  			STATS_COLOR = 0, STATS_CHARSIZE=1.5,stats_pos=[0.11,0.78], DECIMALS=3, FAST=1

				FRAME,/PLOT,COLOR=0,THICK=4


	;			===> Corrected GOES SST
				GOES_CORRECTED =  ( 10.0^(  (ALOG10(GOES_GEQ(OK_PAIR) +10.0)- _STATS.INT)/_STATS.SLOPE ) ) -10.0 ;

	;			*******************************************************
	;			*** Joint Probability Plot: SST  vs  Corrected GOES ***
	;			*******************************************************
	;			===> Joint Probability Plot: SST vs Corrected GOES
				PLOT_HIST2D,ALOG10(GEQ_SST(OK_PAIR)+10.0), ALOG10(GOES_CORRECTED+10.0),SMO=16,$
			              MODEL='RMA',/LOG_FREQ,/HORIZONTAL,BAR_POS=[0.10,0.93,  0.7, 0.95],$
			              /ISOTROPIC,BIN1=0.01,BIN2=0.01,MIN_X=0.7,MIN_Y=0.7,MAX_X=1.8,MAX_Y=1.8 ,$
			              XTITLE='LOG10 (Mean AVHRR-TERRA-AQUA SST +10'+TXT_DEG+')',YTITLE='LOG10 (GOES Warmest SST +10'+TXT_DEG+')',$
						  			PAL='PAL_SW3', X_COLOR=0, Y_COLOR=0, X_THICK=2, Y_THICK=2,$
						  			LAB_TXT=label,LAB_COLOR=0,LAB_CHARSIZE=1.5,XCHARSIZE=1.5,YCHARSIZE=1.5,$
						  			ZERO_COLOR = 254, BKG_COLOR = 255, TOP_COLOR = 250,$
			              REG_COLOR=255, REG_THICK =3,REG_MID_COLOR=0,REG_MID_THICK=1,REG_LINESTYLE=1,$
						  			STATS_COLOR = 0, STATS_CHARSIZE=1.5,stats_pos=[0.11,0.78], DECIMALS=3, FAST=1

				FRAME,/PLOT,COLOR=0,THICK=4

			ENDIF ELSE BEGIN
				XYOUTS, 0.5, 0.004,/NORMAL, 'NO MATCHES WERE FOUND, COUNT_PAIR IS 0', ALIGN=0.3,CHARSIZE=0.75
			ENDELSE
				PSPRINT


;			*******************************************
;			*** Find SST's missing but GOES present ***
;			*******************************************


			OK_PAIR1=WHERE(GEQ_SST EQ MISSINGS(GEQ_SST) AND GOES_GEQ NE MISSINGS(GOES_GEQ),COUNT_PAIR1)
			IF COUNT_PAIR GE 1 AND COUNT_PAIR1 GE 1 THEN BEGIN
	;			===> Corrected GOES SST
				GOES_CORRECTED =  ( 10.0^(  (ALOG10(GOES_GEQ(OK_PAIR1) +10.0)- _STATS.INT)/_STATS.SLOPE ) ) -10.0 ;

	;			===> Replace Missing GEQ_SST with GOES Corrected SST
				GEQ_SST(OK_PAIR1) = 	GOES_CORRECTED
				IF MAP_OUT EQ 'GEQ' THEN GEQ_SOURCE(OK_PAIR1) = 8		; GOES CODE


	;			===> Write the CSV names file
	;			_names = [FN_GEQ_SST.FIRST_NAME, FN_GOES_WH.FIRST_NAME]
	;       temp=REPLICATE(CREATE_STRUCT('NAMES',''),N_ELEMENTS(_names)) & temp.NAMES=_names
	;       STRUCT_2CSV,CSV_NAMES_FILE,TEMP


	;			===> WRITE   MEAN N4ATG  SAVE FILES
				STRUCT_SD_WRITE,MERGED_SST_FILE,PROD=PROD, 	ASTAT='MEAN',MAP=MAP_OUT, $
		    IMAGE	=	GEQ_SST,  MISSING_CODE=missing_code, MISSING_NAME=missing_NAME,$
		    MASK=MASK,     	 CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
		    SCALING='Linear', INTERCEPT=0.0,    SLOPE=1.0,       DATA_UNITS=UNITS(PROD),$
		    PERIOD= APERIOD, $
		    INFILE= INFILES,$
		    NOTES=NOTES,$
		    ERROR=ERROR

				IF MAP_OUT EQ 'GEQ' THEN BEGIN
				;		===> WRITE   SOURCE SAVE FILES
					STRUCT_SD_WRITE,MERGED_SOURCE_FILE,PROD=PROD, 	ASTAT='SOURCE', $
			   	IMAGE	=	BYTE(GEQ_SOURCE),  MISSING_CODE=0B, MISSING_NAME=missing_NAME,$
			   	MASK=MASK,     	CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
			   	SOURCE_CODE = SOURCE_CODE,	SOURCE_NAME=SOURCE_NAME,$
			   	SCALING='Linear', INTERCEPT=0.0,    SLOPE=1.0,       DATA_UNITS=UNITS(PROD),$
			   	PERIOD= APERIOD, $
			   	INFILE= INFILES,$
			   	NOTES=NOTES,$
			   	ERROR=ERROR
		 		ENDIF
		   ENDIF;	IF COUNT_PAIR GE 1 THEN BEGIN
;
		TIMER,/STOP

		ENDFOR; SETS

	ENDIF
;	||||||||||||||||||||||||||||||||||||||||||||||||



; ************************************
	IF DO_MAKE_COMPOSITE_PF4_N4AT_N4AGT GE 1 THEN BEGIN
	DIR = 'D:\PROJECTS\SST\N4ATG\'

  _DATE_RANGE = ['20020715','20030715']

	DATES= DATE_GEN(_DATE_RANGE,UNITS='DAY')
	DATES=STRMID(DATES,0,8)

	MAP_OUT='NWA'
	ADD_LAND=1
	ADD_COAST=1
	ADD_COLORBAR = 1
	ADD_PROD = 1
	ADDDATE = 1
	ADD_METHOD = 1
	PAL='PAL_SW3'
	miss_color = 254


	OVERWRITE=1


	DIR_PF4 	=	'D:\SST-GEQ\AVHRR\save\'
	DIR_N4AT	=	'D:\SST-GEQ\N4AT\SAVE_MERGE\'
	DIR_N4ATG	=	'D:\SST-GEQ\N4ATG\SAVE_MERGE\'

	DIR_OUT_BROWSE = 'D:\SST-GEQ\N4ATG\BROWSE\'


;	LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
	FOR NTH = 0,N_ELEMENTS(DATES)-1L DO BEGIN
		DATE=DATES[NTH]

		FILES = [ FILE_SEARCH(DIR_PF4,	'!D_'+DATE+'*'+'PF_4-GEQ*.SAVE'), $
							FILE_SEARCH(DIR_N4AT,	'!D_'+DATE+'*'+'N4AT-GEQ-SST-MEAN.SAVE'),$
							FILE_SEARCH(DIR_N4ATG,'!D_'+DATE+'*'+'N4ATG-GEQ-SST-MEAN.SAVE'),$
							FILE_SEARCH(DIR_N4ATG,'!D_'+DATE+'*'+'N4ATG-GEQ-SST-SOURCE.SAVE')]



		IF N_ELEMENTS(FILES) NE 4 THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		LIST, FILES

 		STRUCT_SD_2PNG, FILES,   $ ;  obligitory

                    DIR_OUT=DIR_OUT_BROWSE, $ ; Everything below is optional (see defaults in STRUCT_SD_2IMAGE.PRO)

										ADD_LAND=add_land,ADD_COAST=add_coast,ADD_LAKES=add_lakes,$
                    ADD_COLORBAR=ADD_COLORBAR, ADD_DATEBAR=ADD_DATEBAR, ADDDATE=ADDDATE, $
                    ADD_SENSOR=ADD_SENSOR,ADD_PROD=ADD_PROD,ADD_METHOD=ADD_METHOD, ADD_EXTRA=add_extra, CHARSIZE_EXTRA = CHARSIZE_EXTRA, ADD_BATHY=ADD_BATHY,$

                    MAP_OUT=MAP_OUT,PX_OUT=PX_OUT,PY_OUT=PY_OUT,SPECIAL_SCALE=SPECIAL_SCALE,$
                    PAL=pal,$

;                   Colors
                    BACKGROUND=background,      LAND_COLOR=land_color,      FLAG_COLOR=flag_color,$
                    OUTSCAN_COLOR=outscan_color,OUTMAP_COLOR=outmap_color,  ALGFAIL_COLOR=algfail_color,$
                    HI_LO_COLOR=hi_lo_color,    BATHY_COLOR=bathy_color,  BATHY_THICK=bathy_thick,CRITERIA_COLOR=CRITERIA_COLOR,$
                    MISS_COLOR=miss_color,$
                    CRITERIA_DATA=CRITERIA_DATA,CRITERIA_OPER=CRITERIA_OPER,HI_LOW=hi_low,$
                    IMAGE_SCALE=image_scale,BELOW=BELOW,USE_PROD=USE_PROD,$
                    OVERWRITE=overwrite,QUIET=quiet


		ENDFOR
	ENDIF ;


;	*******************************************
	IF DO_MAKE_5DAY_N4ATG_MEANS GE 1 THEN BEGIN

;	********************************************


; *********************************************************************************************************
  COMMON COMMON_STATS_ARRAYS, MEM_TYPE, STATS_ARRAYS_NAME, STATS_ARRAYS_SZ, STATS_ARRAYS_TRANSFORM, STATS_ARRAYS_MISSING,$
  						STATS_ARRAYS_RANGE,STATS_ARRAYS_OPER,STATS_ARRAYS_CRITERIA,STATS_ARRAYS_N_SETS, $
  						DATA_MEM, NUM_MEM,		MIN_MEM,		MAX_MEM,		NEG_MEM,	 	SUM_MEM,		SSQ_MEM,		WTS_MEM, 	MEAN_MEM,		STD_MEM, 	CV_MEM
; *********************************************************************************************************


	DIR_N4ATG	=	'D:\SST-GEQ\N4ATG\SAVE_MERGE\'
    _DATE_RANGE = ['20020730','20020803']
	  	DATES= DATE_GEN(_DATE_RANGE,UNITS='DAY')
	DATES=STRMID(DATES,0,8)

	_FILES= DIR_N4ATG + '!D_' + DATES + '*'+'N4ATG-GEQ-SST-MEAN.SAVE'

	FILES =  FILE_SEARCH(_FILES)

	MAP_OUT = 'NWA'
	SM=MAPS_SIZE(MAP_OUT)

	LIST,FILES
	PROD='SST'


	START=1
	  ERROR = 0
	  FA=FILE_PARSE(FILES)
	  	FILE_MEAN = DIR_N4ATG + FA(2).FIRST_NAME+'.SAVE'
	  	FILE_MEAN = REPLACE(FILE_MEAN,'GEQ',MAP_OUT)
	  	PRINT,FILE_MEAN
	  	FN=PARSE_IT(FILE_MEAN,/ALL)
	  	APERIOD = FN.PERIOD

;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _FILE = 0L,N_ELEMENTS(FILES)-1L DO BEGIN

			AFILE = FILES(_FILE)
 			DATA = STRUCT_SD_READ(AFILE,ERROR=ERROR)
			IF ERROR NE 0 THEN BEGIN & REPORT,FILE+' READ ERROR',DIR=DIR_REPORT & CONTINUE & ENDIF
			SZ=SIZE(DATA,/STRUCT)
			PX_IN=SZ.DIMENSIONS[0]
			PY_IN=SZ.DIMENSIONS[1]


			IF PX_IN NE PX_OUT OR PY_IN NE PY_OUT THEN BEGIN
				DATA=MAP_REMAP(DATA, MAP_IN='GEQ', MAP_OUT='NWA', PX_OUT = SM.PX_OUT, PY_OUT = SM.PY_OUT)
				PRINT, AFILE+'  PX_IN = '+ NUM2STR(PX_IN)+'    PY_IN = '+ NUM2STR(PY_IN)
			ENDIF

 			OK_DATA = WHERE(DATA NE MISSINGS(DATA),COUNT_DATA)



			IF _FILE EQ N_ELEMENTS(FILES)-1L THEN CALC = 1 ELSE CALC = 0

		  M = STATS_ARRAYS(DATA,DO_STATS='MEAN', RANGE=range,MISSING=MISSING,START=START,CALC=CALC,NAME=NAME)
			START=0
;			===>

		ENDFOR ; FOR _FILE = 0L,N_ELEMENTS(FA)-1L DO BEGIN

	 	IF ERROR NE 0 THEN M = STATS_ARRAYS(DO_STATS='MEAN', RANGE=range,MISSING=MISSING,START=START,/CALC,NAME=NAME)


STOP
;		===> WRITE   MEAN SAVE FILES
		STRUCT_SD_WRITE,FILE_MEAN,PROD=PROD, 	ASTAT='MEAN', $
    IMAGE	=	MEAN_MEM,  MISSING_CODE=missing_code, MISSING_NAME=missing_NAME,$
    MASK=MASK,     	CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
    SCALING='Linear', INTERCEPT=0.0,    SLOPE=1.0,       DATA_UNITS=UNITS(PROD),$
    PERIOD= APERIOD, $
    INFILE= FILES,$
    NOTES=NOTES,$
    ERROR=ERROR
STOP


	ENDIF

DONE:
PRINT,'END OF GOES_SST_MAIN.PRO'



END; #####################  End of Routine ################################
