; $ID:	MAPS_MAIN.PRO,	2022-03-21-16,	USER-KJWH	$
;#############################################################################################################
	PRO MAPS_MAIN
	
;  PRO MAPS_MAIN
;+
; NAME:
;		MAPS_MAIN
;
; PURPOSE: MAKES AND DEMOS THE NEW MAPS DATABASE AND SCHEME
;
; CATEGORY:
;		MAPS
;		 
;
; CALLING SEQUENCE: MAPS_MAIN
;
; INPUTS: NONE
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;		NONE:

; MODIFICATION HISTORY:
;			WRITTEN OCT 13,2013 J.O'REILLY
;			NOV 26,2013,ADDED SEVERAL STEPS
;			CHANGED 'CONIC' TO 'LAMBERTCONIC' SO WE MAY PASS THE CORECT NAME TO MAP_SET
;			DEC 7,2013,JOR ADDED STEP DO_MAPS_2_REMOVE
;			JAN 18,2014,JOR NOW MAKING A MAIN SPREADSHEET CSV 
;			            INSTEAD OF A NESTED STRUCTURE SAVE
;			JAN 24,2014,JOR ADDED STEP DO_COMPARE_OLD_NEW_MAPS
;			FEB 1,2014,JOR NOW REWRITING ALL PROS WITH :
;			               SCALE=SCALE,LIMIT=LIMIT,STANDARD_PARALLELS=STANDARD_PARALLELS,ISOTROPIC=ISOTROPIC  
;			               IN THE FIRST 'PRO' LINE [FOR SUBSEQUENT EXTRACTION OF MAP PARAMETERS]
;		  APR 11,2014,JOR CHANGED DATE ATTRIBUTE TO PERIOD
;		  JAN 28,2016,JOR  MADE SWITCHES ALPHA [DO_COMPARE_OLD_NEW_MAPS]
;		                   COMMENTED LINES THAT DID NOT COMPILE [OBSOLETE PROS]
;     FEB 01,2016,JOR  ADDED STEP DO_PRO_ADD_KEYS
;     FEB 21,2016,JOR  ADDED STEPS DO_MAPS_SCALE_MATCH_AMOEBA
;     MAR 10,2016,JOR  ADDED STEPS DO_MAPS_SCALE_MATCH_LOOP,DO_MAPS_SCALE_MATCH_TUNE
;     MAR 13,2016,JOR  ADDED STEP DO_MAIN_EDIT_LIMIT_95
;     DEC 13, 2016 - KJWH: Changed the NEC2 map to NES
;     JAN 06, 2017 - KJWH: Added DO_MAKE_SUBSET_MAPS to add SUBSET maps to the MAIN and create LONLAT files
;     MAY 05, 2018,- JEOR: ADDED STEP ADD_NG_MAP_2_MAIN
;#################################################################################
;-

;***************************
ROUTINE_NAME  = 'MAPS_MAIN'
;***************************
;STRUCT_IT 

;SSSSSSSSSSSSSSSSSSSSSSSSSSS
DO_MAKE_MAPS_TXT            = 0
DO_EDIT_KIMS_LME_NAMES      = 0
DO_MAPS_2_REMOVE            = 0
DO_ADD_JAYS_LMES            = 0
DO_ADD_KIMS_LMES            = 0
DO_ADD_KIMS_FAO             = 0
DO_ADD_MAP_SET_PROGRAMS     = 0
DO_ADD_NO_PROJECTION_MAPS   = 0
DO_NESTED_SAVE_2CSV         = -1 ;[ONLY USED ONCE BY JAY TO MAKE THE NEW CSV MAIN]
DO_DEMO_MAPS                = 0
DO_MAPS_PRO_EXTRACT         = 0

;===> NEW SWITCHES [FEB 2016]
DO_PRO_COPY_2OBSOLETE       = ''
DO_PRO_ADD_KEYS             = ''
DO_MAPS_SCALE_MATCH_AMOEBA  = ''
DO_MAPS_SCALE_MATCH_LOOP    = ''
DO_MAPS_SCALE_MATCH_TUNE    = ''
DO_MAPS_OLD_VS_NEW          = ''
DO_MAIN_EDIT_LIMIT_95     = ''
DO_LIST_MAPS_PCT            = ''
DO_MAKE_SUBSET_MAPS         = '' ; ADDED BY KJWH 2017-01-06 TO ADD SUBSET MAP INFO TO THE MAIN
DO_MAPS_LANDMASK            = 0
DO_MAPS_COPY_J              = 0
DO_EDIT_DATE_2PERIOD        = 0
ADD_NG_MAP_2_MAIN        = 'S'

;SSSSSSSSSSSSSSSSSSSSSSSSSSS

;MAPS_PRO_EXTRACT
;**********************************
IF DO_MAKE_MAPS_TXT GE 1 THEN BEGIN
;**********************************
  PRINT,"COMPILE JAY'S VALID MAPS"

 J = VALID_MAPS(/OLD) & PN,J

  PRINT,"NOW COMPILE KIM'S VALID MAPS AND CONCATENATE"

;K = VALID_MAPS_KIM(/OLD) & PN,K
MAPS = [J,K]
PN,MAPS
STOP
MAPS = STRUPCASE(MAPS)
SETS = WHERE_SETS(MAPS)
MAPS = SETS.VALUE
PN,MAPS 
;==>WRITE A TXTFILE
TXTFILE =!S.IDL_MAINFILES + 'MAPS_MAIN.csv'  
WRITE_TXT,TXTFILE,MAPS 
PFILE,TXTFILE,/W  
ENDIF;IF DO_MAKE_MAPS_TXT GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||


;**********************************
IF DO_ADD_JAYS_LMES GE 1 THEN BEGIN
;**********************************  
  PROJ = 'CYLINDRICAL'
PLINES
PRINT,' THIS SWITCH MAKES THE NEW 512X512 LME MAPS WHERE SUBAREAS 
PRINT,' ARE DRAWN USING FROM THE SHAPEFILE LME66.SHP'

;===> GET THE 67 LMES DATA BASE[MAPS,LME_NUMBERS,NAMES]
DB = READ_LME_DB() & MAPS = DB.MAP & PN,MAPS,'MAPS'&  LME_NUMBERS = DB.LME_NUMBER & NAMES = DB.LME_NAME
IF N_ELEMENTS(MAPS) NE 67 THEN MESSAGE,'SHOULD BE 67 MAPS'

;########
GRACE = 3  ; DEGREES [TO LEAVE ROOM FOR THE LME OUTLINE]
;########
LMES = READ_LME_MAP()
LMES_ = LMES
S= SIZEXYZ(LMES)
PX= S.PX & PY= S.PY
;

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(DB)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  POF,NTH,DB
  D=DB[NTH]
  ;===> BLANK LMES AND REDRAW LME EACH TIME USING SHAPEFILES
  ZWIN,LMES
  AMAP = STRUPCASE(S.MAP)
  LME_NUMBER = S.LME_NUMBER
  ANAME = S.LME_NAME
  CODE = S.CODE
  PFILE,AMAP,/M & WAIT,1
  MAP_SMI
  TV,LMES
  PLOT_SHAPE_LME,AMAP,FILL = 1,THICK = 1,USE_LME_COLOR = 1
  IM=TVRD()
  OK = WHERE (IM EQ LME_NUMBER,COUNT)
  IF COUNT EQ 0 THEN STOP
  ;===> MAKE A SMI MAP WITH THE LME TARGET BLACK
  IM = LMES_  & IM[OK] = 0
  ;===> GET PIXEL COORDS FOR LME_NUMBER AREA
;;  XY = ARRAY_INDICES([PX,PY], OK,/DIMENSIONS)
  XY = ARRAY_INDICES(IM, OK)
  XP=REFORM(XY(0,*))
  YP=REFORM(XY(1,*))
  XYZ=CONVERT_COORD(DOUBLE(XP),DOUBLE(YP),/DEVICE,/TO_DATA)
  MMX = MINMAX(XP)  & MMY = MINMAX(YP)
  OK = WHERE(IM NE 0,COMPLEMENT=COMPLEMENT,COUNT)
  BOX_L = 0 >MMX[0] < (PX-1)
  BOX_R = 0 >MMX[1] < (PX-1)
  BOX_B=  0 >MMY[0] < (PY-1)
  BOX_T = 0 >MMY[1] < (PY-1)
  LONS = REFORM(XYZ(0,*)) & LATS = REFORM(XYZ(1,*))
  MM_LATS=MINMAX(LATS)  &  MM_LONS=MINMAX(LONS)
  ;===> ENSURE LATS,LONS ARE ON THE GLOBE
  MM_LATS[0] = -90  > (MM_LATS[0]- GRACE) < 90
  MM_LATS[1] = -90  > (MM_LATS[1]+ GRACE) < 90
  MM_LONS[0] = -180 > (MM_LONS[0]- GRACE) < 180
  MM_LONS[1] = -180 > (MM_LONS[1]+ GRACE) < 180
  IF MM_LONS[0] LT -180 THEN STOP
  ;===> SINCE GRACE IS 3 POLAT,POLON MUST BE IN THE CENTER OF THE EXPANDED MAP LIMITS
  P0LAT = MEAN(MM_LATS)
  P0LON = MEAN(MM_LONS)
  
  LIMIT = [MM_LATS[0],MM_LONS[0],MM_LATS[1],MM_LONS[1]]
  
  ;;########################################
  ;#######> SPECIAL MAPS   ################
  ;;#######################################
  IF AMAP EQ 'PACIFIC_WARM_POOL' THEN BEGIN
    P0LAT = -1.5416667 & P0LON = 155 & SCALE=0.4E+008
  ENDIF;IF AMAP EQ 'PACIFIC_WARM_POOL' THEN BEGIN
  
  IF AMAP EQ 'ALEUTIAN_ISLANDS' THEN BEGIN
    P0LAT = 52.6000 & P0LON = -179 & SCALE=7.50000E+006
  ENDIF;IF AMAP EQ 'ALEUTIAN_ISLANDS' THEN BEGIN
  
  IF AMAP EQ 'NORTHERN_BERING_CHUKCHI_SEAS' THEN BEGIN
    P0LAT = 70.0000 & P0LON = -179
    SCALE = 1.30E7
  ENDIF;IF AMAP EQ 'NORTHERN_BERING_CHUKCHI_SEAS' THEN BEGIN
  
  IF AMAP EQ 'BEAUFORT_SEA' THEN BEGIN
    P0LAT = 71.166667 & P0LON = -123
    SCALE=13.00E+006
  ENDIF;IF AMAP EQ 'BEAUFORT_SEA' THEN BEGIN
  
  IF AMAP EQ 'EAST_BERING_SEA' THEN BEGIN
    P0LAT =57.0000 & P0LON = -171  & SCALE=1.2E+007
  ENDIF;
  
  IF AMAP EQ 'CANADIAN_HIGH_ARCTIC_NORTH_GREENLAND' THEN BEGIN
    P0LAT =82.0 & P0LON = -85  & SCALE= 1.10000E+007
  ENDIF;IF AMAP EQ 'CANADIAN_HIGH_ARCTIC_NORTH_GREENLAND' THEN BEGIN
  
  IF AMAP EQ 'CANADIAN_EASTERN_ARCTIC_WEST_GREENLAND' THEN BEGIN
    P0LAT =68.5 & P0LON = -60  & SCALE=1.5E+007
  ENDIF;IF AMAP EQ 'CANADIAN_EASTERN_ARCTIC_WEST_GREENLAND' THEN BEGIN
  
  IF AMAP EQ 'CENTRAL_ARCTIC' THEN BEGIN
    P0LAT =90 & P0LON = 0  & SCALE=2.1E+007
  ENDIF;IF AMAP EQ 'CENTRAL_ARCTIC' THEN BEGIN
  
  
  ;####################################################################################3
    
  IF N_ELEMENTS(SCALE) EQ 0 THEN SCALE = ''
  IF N_ELEMENTS(LIMIT) NE 4 THEN LIMIT = ''
  ;===> RENAME MAP WITH '_J'SUFFIX
  AMAP = AMAP + '_J' & MAP = AMAP 
  STANDARD_PARALLELS = ''
  ISOTROPIC = 0 & PX = 512 & PY = 512
  S = MAPS_STRUCT()
  
  STOP
  
  
;  D = MAKE_MAP_PRO( MAP = AMAP, NAME = ANAME,CODE=CODE, PROJ = PROJ, P0LAT = P0LAT, P0LON = P0LON, ROT = ROT,$
;    LIMIT = LIMIT, PX = PX, PY =PY,GRACE=GRACE,$
;    SCALE=SCALE,ISOTROPIC = ISOTROPIC,STANDARD_PARALLELS = STANDARD_PARALLELS,$
;    STRUCT=STRUCT)
  
  
  ,'AMAP :    '+ AMAP
ENDFOR ; FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

; ===> ADD DBF TO MAPS_MAIN
;  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE'
;  SAVE,FILENAME = SAVEFILE,DBF,/COMPRESS,/VERBOSE  & PFILE,SAVEFILE,/W
ENDIF;IF DO_ADD_JAYS_LMES GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||

;*****************************************  
IF DO_EDIT_KIMS_LME_NAMES GE 1 THEN BEGIN
;*****************************************
  ;===> RESTORE MAPS_MAIN
  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE'  & DBF = IDL_RESTORE(SAVEFILE)
  
  K = CSV_READ( "C:\IDL\DATA\MAP_LME_NAMES.CSV") & NAMES = K.LME_NAME & NAMES=STRTRIM(NAMES,2)  &S=SORT(NAMES) & NAMES=NAMES(S)
  DB = READ_LME_DB() & MAPS = DB.MAP &MAPS = STRTRIM(MAPS,2)& S=SORT(MAPS) & MAPS=MAPS(S)
  OK = WHERE_IN(MAPS , NAMES,COUNT,NCOMPLEMENT = NCOMPLEMENT,COMPLEMENT = COMPLEMENT) & PLIST,MAPS[OK]
  PRINT, NCOMPLEMENT,'NOT MATCHING'
  PLIST,MAPS(COMPLEMENT),/NOSEQ
  

ENDIF;IF DO_EDIT_KIMS_LME_NAMES GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||


;************************************
IF DO_MAPS_2_REMOVE GE 1 THEN BEGIN
;************************************
  
D = CSV_READ("C:\PROJECTS\KIM\MAPS_INFO-KIM.csv")
OK = WHERE(D.REMOVE NE '',COUNT)
PLIST,D[OK].IDL_NAME
T = D[OK].IDL_NAME
MAPS = MAPS_READ(/NAMES)
OK = WHERE_IN(MAPS,T,COUNT)
IF COUNT GE 1 THEN PLIST,MAPS[OK]
; ONLY 7 MAPS IN DATABASE THAT COULD BE REMOVED 
;['GLOBEC','GOESWH','MABC','MAB_GS','NEA','NECNFL','SAB']
;[I THINK WE SHOULD KEEP THESE ABOVE SINCE THEY WERE HISTORICALLY USED BY YODER OR JAY OR IGOR]
STOP
ENDIF;IF DO_MAPS_2_REMOVE GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||
;**********************************
IF DO_ADD_KIMS_LMES GE 1 THEN BEGIN
;**********************************
  ;===> RESTORE MAPS_MAIN
;  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE'  & DBF = IDL_RESTORE(SAVEFILE)
;  ST,DBF
  PROJ = 'CYLINDRICAL'
  PLINES
  PRINT,'THIS SWITCH ADDS KIMS LME MAPS BY USING MAP_LMES_FUN [FROM KIMS MAP_LMES]'
  
  ;===> GET THE 67 LMES DATA BASE[MAPS,LME_NUMBERS,NAMES]
  DB = READ_LME_DB() & MAPS = DB.MAP & PN,MAPS,'MAPS'&  LME_NUMBERS = DB.LME_NUMBER & NAMES = DB.LME_NAME
  IF N_ELEMENTS(MAPS) NE 67 THEN MESSAGE,'SHOULD BE 67 MAPS'
  
 
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(DB)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    POF,NTH,DB
    D=DB[NTH]
    AMAP = STRUPCASE(D.MAP) & PFILE,AMAP,/M
    LME_NUMBER = D.LME_NUMBER
    ANAME = D.LME_NAME
    CODE = D.CODE
    
    MAP = AMAP
    SET_PLOT,'WIN'
;    D =  MAP_LMES_FUN( CODE=CODE, LME_NAME=AMAP, POSITION=POSITION, _EXTRA=_EXTRA,MAPS=MAPS)

;    ;===>ADD MAP TO DBF
    IF IDLTYPE(D) EQ 'STRUCT' THEN BEGIN
      MAP = 'LME_' + AMAP
      D.MAP = MAP
      D.MAP_OUT = MAP
      S= CREATE_STRUCT(MAP,CREATE_STRUCT(MAP,MAP,D))
      IF N_ELEMENTS(DBF) EQ 0 THEN BEGIN
        DBF = S
      ENDIF ELSE BEGIN
        OK = WHERE(TAG_NAMES(DBF) EQ AMAP,COUNT)
        IF COUNT GE 1 THEN CONTINUE; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        DBF = CREATE_STRUCT(DBF,S)
      ENDELSE
      P,N_TAGS(DBF),' TAGS IN DBF'      
      ,'AMAP :    '+ AMAP
    ENDIF;IF IDLTYPE(D) EQ 'STRUCT' THEN BEGIN
  ENDFOR ; FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE'
;  SAVE,FILENAME = SAVEFILE,DBF,/COMPRESS,/VERBOSE  & PFILE,SAVEFILE,/W
;  
ENDIF;IF DO_ADD_KIMS_LMES GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||
;**********************************
IF DO_ADD_KIMS_FAO GE 1 THEN BEGIN
  ;********************************
  PRINT,'THIS SWITCH ADDS KIMS FAO MAPS'
  
  ;===> RESTORE MAPS_MAIN
;  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE'  & DBF = IDL_RESTORE(SAVEFILE)

 
  PROJ = 'CYLINDRICAL'
  FAO = READALL(!S.DIR_DATA+'FAO_NAMES.CSV')
  CODES = FIX(FAO.CODE)
  NAMES = STRUPCASE(REPLACE(STRTRIM(FAO.SUBAREA_NAME,2),' ','_'))
  PLIST,NAMES
  
  ;########
  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(NAMES)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    POF,NTH,NAMES
    
    AMAP = NAMES[NTH]
    FAO_CODE = CODES[NTH]
    
    PFILE,AMAP,/U
    MAP = AMAP
    CODE = FAO[NTH].CODE
    _NAME = MAP
     MAP = 'FAO_' + MAP
;     D = MAP_FAOS_FUN(FAO_CODE=FAO_CODE,FAO_NAME=_NAME)
    
     ,'AMAP :    '+ AMAP
  ENDFOR;FOR NTH = 0,N_ELEMENTS(NAMES)-1 DO BEGIN  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE'
  SAVE,FILENAME = SAVEFILE,DBF,/COMPRESS,/VERBOSE  & PFILE,SAVEFILE,/W

ENDIF;IF DO_ADD_KIMS_FAO GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||

;******************************************
IF DO_ADD_MAP_SET_PROGRAMS  GE 1 THEN BEGIN
;******************************************
;===> RESTORE MAPS_MAIN
;  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE'  & DBF = IDL_RESTORE(SAVEFILE)
;####> GET ALL MAP_*.PRO
FILES = FILE_SEARCH(GET_DIR(),'MAP_*.PRO') & PN,FILES

;===> READ EACH FILE AND SEARCH FOR 'MAP_SET'
FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  POF,NTH,FILES
  FILE = FILES[NTH]
  TXT = READ_TXT(FILE)
  OK = WHERE_STRING(TXT,'MAP_SET',COUNT)
  IF COUNT GE 1 THEN BEGIN
    IF N_ELEMENTS(MAP_PROS) EQ 0 THEN MAP_PROS = FILE ELSE MAP_PROS = [MAP_PROS,FILE] 
  ENDIF;IF COUNT EQ 1 THEN BEGIN
ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

FN = FILE_PARSE(MAP_PROS)
MAP_PROS =STRUPCASE(FN.NAME)
MAPS = REPLACE(MAP_PROS,'MAP_','')

;===> REMOVE SELECTED UNUSED& JUNK MAPS
OK = WHERE_STRING(MAPS,['INFO','DEMO','PRO','J1','JUNK','_1','_2','JULY','TEST','OLD',$
  'DEG2IMAGE','ITER','BACK','SCALE','MATCH','DEG2L3B9','IMAGEJ',$
  'L1','GET_RANGE','ULLMAN','NEC_SIMBIOS','GLOBE_ORTHOGRAPHIC',$
  'DB_MAIN','TEMP','SRCW','UMD','SET_RANGE','REMAP','OLAM',$
  'CH_NFL','SOSIK','SIZE','SECW','MAP_SAB','SECW','SIZE','_OLD'],COUNT)

MAPS = REMOVE(MAPS,OK)

;==> REMOVE SPECIFIC MAPS FOUND BY USING WHERE
OK = WHERE(MAPS EQ 'EAST_CENTRAL_AUSTRALIAN') & MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'PACIFIC_CENTRAL_AMERICAN')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'HUDSON_BAY')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'SOUTHEAST_US_CONTINENTAL')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'PACIFIC_WARM_POOL-AZIMUTHAL')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'PACIFIC_WARM_POOL-CYLINDRICAL')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'BEAUFORT_SEA-BAD')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'ANTARCTIC')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'ICELAND_SHELF')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'EAST_SIBERIANSEA')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'WEST_CENTRAL_AUSTRALIAN')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'NES')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'APEC_REGION')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'SCOT')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'SEA')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'NORTHEAST_US_CONTINENTAL')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'EC_DSP')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'NEC_FIT')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'NEC_DSP')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'NEC-NEW')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'NECW')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'HTN')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'GLOB')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'MCGILL')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'MAB_EXT')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'LME_7')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'LMES_WITH_LIMITS')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'LMES')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'EC45')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'ECS')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'CELTIC_BISCAYSHELF')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'LMES_FUN')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'GLOBAL_EQUIDISTANT')& MAPS = REMOVE(MAPS,OK)
OK = WHERE(MAPS EQ 'CHUKCHI_SEA')& MAPS = REMOVE(MAPS,OK); NOW IS NORTHERN_BERING_CHUKCHI_SEAS
OK = WHERE(MAPS EQ 'WEST_GREENLAND_SHELF')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'BALTIC')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'EAST_GREENLAND_SHELF')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'GLOBE')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'GEQ_PART')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'GOES')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'NEWFOUNDLAND_LABRADOR_SHELF')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'SOUTHWEST_AUSTRALIAN_SHELF')& MAPS = REMOVE(MAPS,OK);SB SOUTH_WEST_AUSTRALIAN_SHELF
OK = WHERE(MAPS EQ 'FALKLANDS')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'HR_PLUME')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'MANINO')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'MASS_BAY2')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'NA')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'NWA2')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'NWA_3')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'NYBANOXIA')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'NYBAPEX')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'US')& MAPS = REMOVE(MAPS,OK);
OK = WHERE(MAPS EQ 'FAOS')& MAPS = REMOVE(MAPS,OK);

OK = WHERE_STRING(MAPS , '-')& MAPS = REMOVE(MAPS,OK)
;###> ADD L3B, L3B4,L3B9 [NO! NOT YET BECAUSE THEY DO NOT HAVE MAP_SET PROGRAMS
;
;L3BS = ['L3B', 'L3B4','L3B9']
;MAPS = [MAPS,L3BS]
S =SORT(MAPS) & MAPS = MAPS(S)
PLIST,MAPS

;###> REMOVE LME MAPS  
;   [ SINCE THEY WERE ADDED IN STEP DO_ADD_JAYS_LMES '_J' MAPS AND IN STEP DO_ADD_KIMS_LMES] 
L = READ_LME_DB() & LMES = L.MAP & PLIST,LMES
OK =WHERE_IN(MAPS,LMES,COUNT)  & P,COUNT & PLIST,MAPS[OK]
MAPS = REMOVE(MAPS,OK)
;===> REMOVE '_J' 'LME_','FAO_'
TARGETS = ['_J','LME_','FAO_']
OK = WHERE_STRING(MAPS,TARGETS,COUNT)& P,COUNT & PLIST,MAPS[OK]
IF COUNT GE 1 THEN MAPS = REMOVE(MAPS,OK)
;===> LOOP ON MAPS TO MAKE DBF SAVEFILE
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
    MAP = MAPS[NTH] & PFILE,MAP,/U
    M = MAPS_SIZE(MAP,/OLD)
    I = MAPS_INFO(MAP,/QUIET,/OLD)
     ; IF MAP EQ 'NEC' THEN STOP
    MM= !MAP
    NAME = STR_CAP(REPLACE(MAP,'_',' '))
    CODE = ''
    PROJ = I.PROJ
    P0LAT = MM.P0LAT
    P0LON = MM.P0LON
    ROT =  MM.ROTATION
    LIMIT = MM.LL_BOX
    PX = I.PX
    PY = I.PY
    GRACE = 0
    !P.MULTI=0 ;MAKE SURE !P.MULTI IS 0
    ZWIN,[PX,PY]
    SF = DOUBLE(1.2213898) ; (SCALE_FACTOR = SF * (PX^2) * SCALE

    IF !D.X_SIZE NE PX AND !D.Y_SIZE NE PY THEN   $
      PRINT,'WARNING: DRAWING AREA IS NOT '+STRTRIM(PX,2)+' X '+STRTRIM(PY)+ ' PIXELS'
     SCALE_FACTOR = (2.45*PX*PX)
     SCALE = SCALE_FACTOR/(!D.X_SIZE/!D.X_PX_CM *0.01)

    SCALE = SCALE_FACTOR/(!D.X_SIZE/!D.X_PX_CM *0.01)
    STANDARD_PARALLELS = [I.LOWER_PARALLEL,I.UPPER_PARALLEL]
    ISOTROPIC= SAME(ABS(MM.UV_BOX)); BEST GUESS ALGORITHM 
    STOP
    D = MAKE_MAP_PRO(MAP = MAP, NAME = NAME,CODE=CODE, PROJ = PROJ, P0LAT = P0LAT, P0LON = P0LON, ROT = ROT,$
      LIMIT = LIMIT, PX = PX, PY =PY,GRACE=GRACE,$
      SCALE=SCALE,ISOTROPIC = ISOTROPIC,STANDARD_PARALLELS = STANDARD_PARALLELS,$
      STRUCT=STRUCT)
    
    STOP
    
    
    
    
    
    IF IDLTYPE(M) EQ 'STRUCT' AND IDLTYPE(I) EQ 'STRUCT' THEN BEGIN
      DATE =';DATE ' +DATE_FORMAT(DATE_NOW(),/YMD,/COMMA)
      DATE = REPLACE(DATE,";DATE ",'')
      INIT= M.INIT
      P0LAT = MM.P0LAT
      P0LON = MM.P0LON
      ROT = FLOAT(MM.ROTATION)
      PROJ = I.PROJ
      LIMIT = I.LIMIT
      TAGNAMES=TAG_NAMES(I)
      IF WHERE(TAGNAMES EQ 'LOWER_PARALLEL') NE -1 THEN STANDARD_PARALLELS = [I.LOWER_PARALLEL,I.UPPER_PARALLEL] ELSE STANDARD_PARALLELS = ''
      ;### NO EASY WAY TO DETERMINE ISOTROPIC ??
      ;===> LOOK FOR 'ISOTROPIC=' IN THE MAP PROGRAM
      TXT = STRCOMPRESS(READ_TXT(!S.DIR_PROGRAMS + 'MAP_' + MAP + '.PRO' ),/REMOVE_ALL)
      ;===> REMOVE ALL ;  AND $ AND ,
      TXT = REPLACE(TXT,['$',';',','],['','',''])
      OK = WHERE_STRING(TXT,'ISOTROPIC=',COUNT_ISOTROPIC)
      IF COUNT_ISOTROPIC EQ 0 THEN ISOTROPIC = 0 ; NOT FOUND IN PROGRAM
      IF COUNT_ISOTROPIC GE 1 THEN BEGIN
        T = TXT[OK]
        OK = WHERE_STRING(T,'ISOTROPIC=0',COUNT_ZERO)
        OK = WHERE_STRING(T,'ISOTROPIC=1',COUNT_ONE)
        IF COUNT_ZERO GE 1 THEN ISOTROPIC = 0
        IF COUNT_ONE GE 1 THEN ISOTROPIC = 1
       
      ENDIF;IF COUNT_ISOTROPIC GE 1 THEN BEGIN
      POSITION=[0.0, 0.0, 1.0, 1.0]
      NOBORDER = 1
      PX = M.PX
      PY = M.PY
      MAP_OUT=M.MAP_OUT
      PX_OUT=M.PX_OUT
      PY_OUT=M.PY_OUT
      
      NAME = STRTRIM(STR_CAP(REPLACE(MAP,'_',' '),/ALL),2)
      IF N_ELEMENTS(SCALE) EQ 0 THEN SCALE = ''
      
      D=CREATE_STRUCT('MAP',MAP,'NAME',NAME,'CODE','','PROJ',PROJ,$
        'P0_LAT',P0LAT,'P0_LON',P0LON,'ROT',ROT,$
        'LIMIT',LIMIT,'SCALE',SCALE,'POSITION',POSITION,'NOBORDER',NOBORDER,'ISOTROPIC',ISOTROPIC,$
        'STANDARD_PARALLELS',STANDARD_PARALLELS,'INIT',INIT,'PX',PX,'PY',PY,'MAP_OUT',MAP_OUT,'PX_OUT',PX_OUT,'PY_OUT',PY_OUT,$
        'DATE',DATE)
            
      S= CREATE_STRUCT(MAP,CREATE_STRUCT(MAP,MAP,D))
      
      IF N_ELEMENTS(DBF) EQ 0 THEN BEGIN
        DBF = S
      ENDIF ELSE BEGIN
        OK = WHERE(TAG_NAMES(DBF) EQ MAP,COUNT)
        IF COUNT GE 1 THEN CONTINUE; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        DBF = CREATE_STRUCT(DBF,S)
      ENDELSE
      P,N_TAGS(DBF),' TAGS IN DBF'      
      ,'AMAP :    '+ MAP      
   ENDIF ELSE BEGIN
   REPORT,'ERROR:  '+ MAP
   ENDELSE;IF IDLTYPE(M) EQ 'STRUCT' AND IDLTYPE(I) EQ 'STRUCT' THEN BEGIN
   
ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


PRINT,'MAPS DATABASE HAS  ', N_TAGS(DBF),'   MAPS'
  
  
  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE' 
  SAVE,FILENAME = SAVEFILE,DBF,/COMPRESS,/VERBOSE  & PFILE,SAVEFILE,/W
  
  
  
  ,'DO_ADD_MAP_SET_PROGRAMS'
ENDIF;IF DO_ADD_MAP_SET_PROGRAMS  GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||
;

;

;STOP
; NOT SET
;***************************************
IF DO_ADD_NO_PROJECTION_MAPS GE 1 THEN BEGIN
;***************************************
;===> RESTORE MAPS_MAIN
  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE'  & DBF = IDL_RESTORE(SAVEFILE)
  MAPS = ['L3B9','L3B4','NENA']
  REWRITE = 0
NAMES = MAPS_READ(/NAMES)
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
    AMAP = MAPS[NTH]
    MAP = AMAP
    OK = WHERE(NAMES EQ AMAP,COUNT)
    IF COUNT GE 1 THEN CONTINUE ;>>>>>>>>>>>>>>>>>>>>>>>>>>>
    PFILE,AMAP,/M
    REWRITE = 1
    D = MAPS_STRUCT() & D=STRUCT_2MISSINGS(D)
    M = MAPS_SIZE(AMAP,/OLD)
    STRUCT_ASSIGN,M,D,/NOZERO
    DATE =';DATE ' +DATE_FORMAT(DATE_NOW(),/YMD,/COMMA)
    D.DATE = REPLACE(DATE,";DATE ",'')
    D.NAME = D.MAP 
    D.POSITION = [0.0, 0.0, 1.0, 1.0]  
    D.NOBORDER = 1
    D.ISOTROPIC = 1   
   S= CREATE_STRUCT(MAP,CREATE_STRUCT(MAP,MAP,D))
    IF N_ELEMENTS(DBF) EQ 0 THEN BEGIN
        DBF = S
      ENDIF ELSE BEGIN
        OK = WHERE(TAG_NAMES(DBF) EQ MAP,COUNT)
        IF COUNT GE 1 THEN CONTINUE; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        DBF = CREATE_STRUCT(DBF,S)
      ENDELSE
      P,N_TAGS(DBF),' TAGS IN DBF'  
  ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  SAVEFILE = !S.IDL_MAINFILES + 'MAPS_MAIN.SAVE' 
  SAVE,FILENAME = SAVEFILE,DBF,/COMPRESS,/VERBOSE  & PFILE,SAVEFILE,/W
  
ENDIF;IF DO_ADD_NO_PROJECTION_MAPS GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||

;**************************************
IF DO_NESTED_SAVE_2CSV GE 1 THEN BEGIN
;**************************************
  PRINT,'THIS STEP CONVERTS THE NESTED STRUCTURE INTO A CSV'
  MPMAIN = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
  MAPS =IDL_RESTORE(!S.IDL_MAINFILES + 'MAPS_MAIN.SAVE') & MAPS = TAG_NAMES(MAPS)
  PN,MAPS,'MAPS
  DB = MAPS_STRUCT()
  
 ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
    MAP = MAPS[NTH] & PF,MAP,/U
     S = MAPS_READ(MAP)
     S = STRUCT_REMOVE(S,TAGS = 0)
     S =STRUCT_EXPAND(S)
     D = MAPS_STRUCT()
     ;===> MUST ALSO RENAME STANDARD_PARALLELS TO 'PAR_LOW' FOR THE NON-CONIC MAPS
     OLD = ['LIMIT_0','LIMIT_1','LIMIT_2','LIMIT_3',$
            'STANDARD_PARALLELS_0','STANDARD_PARALLELS_1','STANDARD_PARALLELS']
     NEW = ['LATMIN','LONMIN','LATMAX','LONMAX',$
            'PAR_LOW','PAR_UPP','PAR_LOW']     
     S = STRUCT_RENAME(S,OLD,NEW)
     STRUCT_ASSIGN,S,D
     ;===> STRTRIM THE VALUE IN EACH STRING TAG TO MINIMIZE WIDTH IN EXCEL
     P,D.PX
     D = STRUCT_TRIM(D)
     P,D.PX
     IF N_ELEMENTS(DB) EQ 0 THEN DB = D ELSE DB = [DB,D]
     ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    OK = WHERE(DB.MAP EQ '',COUNT) & IF COUNT GE 1 THEN DB = REMOVE(DB,OK)
    
  STRUCT_2CSV,MPMAIN,DB & PFILE,MPMAIN
  
ENDIF;IF DO_NESTED_SAVE_2CSV GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||


;******************************
IF DO_DEMO_MAPS GE 1 THEN BEGIN
;******************************  
  DB = MAPS_READ()
  OK = WHERE(DB.INIT EQ 'MAP_SET',COUNT)
  MAPS = DB[OK].MAP
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  MAP = MAPS[NTH] & PFILE,MAP,/U
  MAPS_VIEW,MAP,/PNG,/CLOSE,DELAY =0
  ;STOP
;  D = MAPS_READ(AMAP) & IF IDLTYPE(D) NE 'STRUCT' THEN MESSAGE,'ERROR: NOT A STRUCTURE'
;  IF D.INIT NE 'MAP_SET' THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;  PAL_36,R,G,B
;  SETCOLOR,255
;  ZWIN,[D.PX,D.PY]
; 
;  MAPS_SET,AMAP,BACKGROUND=255
;  MAP_CONTINENTS,/HIRES,/COASTS,COLOR = 34,FILL = 1
;  MAP_CONTINENTS,/HIRES,/COASTS,COLOR = 0
;  DIR_OUT = !S.IDL_TEMP
;  PNGFILE = DIR_OUT + AMAP + '.PNG'
;  IM = TVRD()
;  ZWIN
;  WRITE_PNG,PNGFILE,IM,R,G,B  & PFILE,PNGFILE,/W
; 
ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDIF;IF DO_DEMO_MAPS GE 1 THEN BEGIN
  
  
;*************************************
IF DO_MAPS_PRO_EXTRACT GE 1 THEN BEGIN
;*************************************
  S = MAPS_PRO_EXTRACT('EC')
  ST,S
    
ENDIF;IF DO_MAPS_PRO_EXTRACT GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||



;***********************************
  IF DO_MAKE_SUBSET_MAPS GE 1 THEN BEGIN
;***********************************

  MPS = ['DELBAY','CHESBAY','DOPPIO','NEC']
  
  MAPS_MAIN = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
  DB = CSV_READ(MAPS_MAIN)
  NMAPS = N_ELEMENTS(DB)
  MAIN_LATS = [] & MAIN_LONS = []
  FOR MTH=0, N_ELEMENTS(MPS)-1 DO BEGIN
    AMAP = MPS(MTH)
    SMAP = 'SUBSET_'+AMAP
    MP = MAPS_READ(SMAP)
    IF IDLTYPE(MP) NE 'STRUCT' THEN BEGIN
      STR = DB[0] & STR = STRUCT_2MISSINGS(STR)
      STR.MAP = SMAP
      STR.AUTHOR = !S.USER
      STR.PERIOD = 'S_' + DATE_NOW()
      STR.INIT = 'SUBSET'
      CASE AMAP OF
        'DELBAY':  BEGIN & STR.LATMIN='38.35' & STR.LATMAX='40.10' & STR.LONMIN='-75.66' & STR.LONMAX='-74.52' & STR.NAME='Delaware Bay Subset' & END
        'CHESBAY': BEGIN & STR.LATMIN='36.00' & STR.LATMAX='40.00' & STR.LONMIN='-77.00' & STR.LONMAX='-75.00' & STR.NAME='Chesapeake Bay Subset' & END
        'DOPPIO':  BEGIN & STR.LATMIN='32.15' & STR.LATMAX='46.40' & STR.LONMIN='-80.65' & STR.LONMAX='-59.55' & STR.NAME='DOPPIO Model Domain Subset' & END
        ELSE: BEGIN
          MR = MAPS_READ(AMAP) 
          IF IDLTYPE(MR) NE 'STRUCT' THEN MESSAGE, 'ERROR: Map must either be a standard map or coordinates must be provided above'
          STR.LATMIN=MR.LATMIN & STR.LATMAX=MR.LATMAX & STR.LONMIN=MR.LONMIN & STR.LONMAX=MR.LONMAX & STR.NAME=MR.NAME + ' Subset'
        END  
      ENDCASE
      IF NONE(MAIN_LATS) THEN MAIN_LATS = IDL_RESTORE(!S.MAPINFO + 'MUR-PXY_36000_17999-LAT.SAV')
      IF NONE(MAIN_LONS) THEN MAIN_LONS = IDL_RESTORE(!S.MAPINFO + 'MUR-PXY_36000_17999-LON.SAV')

      LATS = MAPS_REMAP(MAIN_LATS, MAP_IN='MUR', MAP_OUT=AMAP, MAP_SUBSET=1, LONMIN=FLOAT(STR.LONMIN), LONMAX=FLOAT(STR.LONMAX), LATMIN=FLOAT(STR.LATMIN), LATMAX=FLOAT(STR.LATMAX))
      LONS = MAPS_REMAP(MAIN_LONS, MAP_IN='MUR', MAP_OUT=AMAP, MAP_SUBSET=1, LONMIN=FLOAT(STR.LONMIN), LONMAX=FLOAT(STR.LONMAX), LATMIN=FLOAT(STR.LATMIN), LATMAX=FLOAT(STR.LATMAX))
      SZ = SIZEXYZ(LATS,PX=PX,PY=PY) & STR.PX = ROUNDS(PX) & STR.PY = ROUNDS(PY)
     
      DB = STRUCT_CONCAT(DB,STR) 
      D = CREATE_STRUCT('MAP',SMAP,'LON',LONS,'LAT',LATS)
      SAVE, FILENAME=!S.MAPINFO + STRUPCASE(SMAP) + '-PXY_' + ROUNDS(STR.PX) + '_' + ROUNDS(STR.PY) + '-LONLAT.SAV', D
      
    ENDIF
  ENDFOR
 
  IF N_ELEMENTS(DB) GT NMAPS THEN BEGIN
    DB = DB[SORT(DB.MAP)]  
    FILE_COPY, MAPS_MAIN, !S.IDL_MAINFILES + 'MAPS_MAIN-' + DATE_NOW() + '.CSV'
    STRUCT_2CSV, MAPS_MAIN, DB   
  ENDIF  
    

  ENDIF ; DO_MAKE_SUBSET_MAPS

;***********************************
IF DO_MAPS_LANDMASK GE 1 THEN BEGIN
;***********************************
  DB = GET_LME_DB()
  SET_PLOT,'WIN'
  MAPS = DB.MAP + '_J'
  FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
    MAP_OUT = MAPS[NTH]
    MAPS_LANDMASK,MAP_OUT=MAP_OUT 
  ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
  
  
ENDIF;IF DO_MAPS_LANDMASK GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||

;***********************************
IF DO_MAPS_COPY_J GE 1 THEN BEGIN
  ;***********************************
  DB = GET_LME_DB()
  MAPS = DB.MAP + '_J'
  MAPPS = MAPS_READ(/NAME)
  
  OK = WHERE_MATCH(MAPPS ,MAPS,COUNT)
  MAPPS = MAPPS[OK]
  ;===> REDEFINE MAPS
  MAPS = DB.MAP
  FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
    MAP = MAPS[NTH]
    FILE = !S.PROGRAMS +'MAP_' + MAP+ '.PRO'
    IF FILE_TEST(FILE) EQ 1 THEN BEGIN
      TXT = READ_TXT(FILE)
      NEW = MAP + '_J'
      TXT = REPLACE(TXT,MAP,NEW)
      NEWPRO = !S.PROGRAMS +'MAP_' + NEW+ '.PRO'
      WRITE_TXT,NEWPRO,TXT & PF,NEWPRO
    ENDIF ELSE BEGIN
      MESSAGE,'ERROR:'      
    ENDELSE;IF FILE_TEST(FILE) EQ 1 THEN BEGIN
   
  ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS) -1 DO BEGIN
  
  
ENDIF;IF DO_MAPS_COPY_J GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||

;**************************************
IF DO_EDIT_DATE_2PERIOD GE 1 THEN BEGIN
;**************************************
  ,'DO_EDIT_DATE_2PERIOD'
  FILE = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
  ;FILE = "C:\IDL\MASTER\MAPS_MASTER-20140401.CSV"
  DB = CSV_READ(FILE)
  ;===> ADD AUTHOR AND NOTES TAGS
  S =REPLICATE(CREATE_STRUCT('AUTHOR','','NOTES',''),N_ELEMENTS(DB))
  DB = STRUCT_MERGE(DB,S)
  DB = STRUCT_RENAME(DB,'DATE','PERIOD')
  DB.PERIOD = 'S_20140101000000'
  DB.AUTHOR = "JOR"
  FILE = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
  STRUCT_2CSV,FILE,DB
  PFILE,FILE,/W
  ,'DO_EDIT_DATE_2PERIOD'
ENDIF;IF DO_EDIT_DATE_2PERIOD GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||



;*********************************

;   



;
;***************************************
IF KEY(DO_PRO_COPY_2OBSOLETE) THEN BEGIN
  ;*************************************
  SWITCHES,DO_PRO_COPY_2OBSOLETE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  MAPPS = MAPS_READ(/NAMES,/TRUE)
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(MAPPS)-1 DO BEGIN
    MAPP = MAPPS[NTH]
    PFILE,MAPP,/U
    FILE = !S.OBSOLETE + 'MAP_' + MAPP + '.PRO'
    IF FILE_TEST(FILE) EQ 0 THEN BEGIN
      FN = FILE_PARSE(FILE)
      TARGET = FN.NAME_EXT
      F = FLS(!S.IDL ,TARGET)
      IF NOF(F) GE 1 THEN BEGIN
        F = FIRST(F)
        FILE_COPY,F,!S.OBSOLETE ,/VERBOSE,/ALLOW_SAME
      ENDIF ELSE BEGIN
        REPORT,'ERROR CAN NOT FIND ' + FILE
      ENDELSE;IF NOF(F) GE 1 THEN BEGIN
    ENDIF;IF FILE_TEST(FILE) EQ 0 THEN BEGIN
  ENDFOR;FOR NTH = 0,NOF(MAPPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  ,'DO_PRO_COPY_2OBSOLETE'
ENDIF;IF KEY(DO_PRO_COPY_2OBSOLETE) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||


IF KEY(DO_PRO_ADD_KEYS) THEN BEGIN
  ;*********************************
  SWITCHES,DO_PRO_ADD_KEYS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  MESSAGE,/INFORM,'REMEMBER YOU MUST ADD !S.OBSOLETE TO YOUR PATH FOR RESOLVE_ROUTINE TO WORK'
  MESSAGE,/INFORM,'THIS STEP ADDS THE KEYWORD SCALE TO ALL THE MAIN MAPS [104] THAT HAVE SCALES[IF NEEDED]'
  IF STOPP THEN STOP
  PRO_ADD_KEYS
  ,'DO_PRO_ADD_KEYS'
ENDIF;IF KEY(DO_PRO_ADD_KEYS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||

;**************************************
IF KEY(DO_MAPS_SCALE_MATCH_AMOEBA) THEN BEGIN
  ;************************************
  SWITCHES,DO_MAPS_SCALE_MATCH_AMOEBA,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  MESSAGE,/INFORM,'THIS STEP USES PLOTGRAT & AMOEBA TO FIND THE SCALE WHICH GIVES THE BEST MATCH TO THE OLD MAP_*.PRO PROGRAMS '
  IF STOPP THEN STOP
  MAPS_SCALE_MATCH_AMOEBA,'ALL'  ; [ALL MAPS WITH A SCALE]

ENDIF;IF KEY(DO_MAPS_SCALE_MATCH_AMOEBA) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||

;******************************************
IF KEY(DO_MAPS_SCALE_MATCH_LOOP) THEN BEGIN
  ;****************************************
  SWITCHES,DO_MAPS_SCALE_MATCH_LOOP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  MESSAGE,/INFORM,'THIS STEP LOOPS ON EXISTING MAP SCALES TO FIND THE SCALE WHICH GIVES THE BEST MATCH TO THE OLD MAP_*.PRO PROGRAMS '
  IF STOPP THEN STOP
  MAPS_SCALE_MATCH_LOOP

ENDIF;IF KEY(DO_MAPS_SCALE_MATCH_LOOP) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||
;
;******************************************
IF KEY(DO_MAPS_SCALE_MATCH_TUNE) THEN BEGIN
  ;****************************************
  SWITCHES,DO_MAPS_SCALE_MATCH_TUNE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  MESSAGE,/INFORM,'THIS STEP TUNES EXISTING MAP SCALES TO FIND THE SCALE WHICH GIVES THE BEST MATCH TO THE OLD MAP_*.PRO PROGRAMS '
  MESSAGE,/INFORM,'IT IS BEST TO RUN MAPS_SCALE_MATCH_TUNE INTERACTIVELY [WITH ONE MAP AT A TIME]'
  IF STOPP THEN STOP
  MAPS_SCALE_MATCH_TUNE

ENDIF;IF KEY(DO_MAPS_SCALE_MATCH_TUNE) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||
;;
;
;
;
;************************************
IF KEY(DO_MAPS_OLD_VS_NEW) THEN BEGIN
  ;************************************
  SWITCHES,DO_MAPS_OLD_VS_NEW,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  MESSAGE,/INFORM,'THIS STEP COMPARES OLD MAPS WITH THE NEW MAPS IN MAIN'
  MAPS_OLD_VS_NEW
ENDIF;IF KEY(DO_MAPS_OLD_VS_NEW) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||
;
;
;
;;***********************
IF KEY(DO_MAIN_EDIT_LIMIT_95) THEN BEGIN
  ;***********************
  SWITCHES,DO_MAIN_EDIT_LIMIT_95,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  LOWEST_PCT = 95.
  ;===> MAKE AN OUTPUT DATABASE TO INFORM ON THE MAPS THAT WERE UPDATED
  OUT = CREATE_STRUCT('MAP', '','NEW_SCALE','','PCT','')
  STRUCT = CSV_READ(!S.DEMO +'MAPS_OLD_VS_NEW' + PATH_SEP() + 'MAPS_OLD_VS_NEW.CSV')
  OK = WHERE(STRUCT.PCT GE 95.0,COUNT) & P,COUNT
  IF COUNT GE 1 THEN STRUCT =STRUCT[OK]
   ;******************************************************
  ;   MAKE A DATE-STAMPED BACKUP BEFORE EDITING MAIN
  ;******************************************************
  MSTR = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
  IF FILE_TEST(MSTR) EQ 0 THEN STOP
  COPY = REPLACE(MSTR,'.CSV', '-'+ DATE_STAMP() + '.CSV')
  FILE_COPY,MSTR,COPY,/VERBOSE,/OVERWRITE
  ;|||||||||||||||||||||||||||||||||||||||||||||||||||||
  
  ;===> EDIT PCT IN MSTR [> 95]
  
  ;===> GET MOST RECENT MAIN DATA [/INIT]
  M = MAPS_READ(/INIT) & PN,M,' MAPS IN MAIN'

  ;===> DETERMINE THE NUMBER OF MAPS IN STRUCT
  SETS = WHERE_SETS(STRUCT.MAP)
  MAPS = SETS.VALUE

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(MAPS)-1 DO BEGIN
    MAPP = MAPS[NTH]
    PFILE,MAPP,/U
    OK = WHERE(STRUCT.MAP EQ MAPP,COUNT)
    IF COUNT GE 1 THEN DB = STRUCT[OK]
    ;===> FIND THE HIGHEST PCT [AND ITS SUBSCRIPT] FOR THIS MAP
    MAX_PCT = MAX(DB.PCT,SUB)
    D = DB(SUB)
    OK = WHERE_MATCH(M.MAP,D.MAP,COUNT)

    ;#########################################################
    ;===> ONLY UPDATE MSTR IF PCT EXCEEDS LOWEST_PCT AND EXCEEDS PCT IN MSTR [M(OK).PCT]
    IF COUNT EQ 1 AND D.PCT GE LOWEST_PCT AND D.PCT GT M[OK].PCT THEN BEGIN
    
      M[OK].PCT = STRTRIM(ROUNDS(D.PCT,2))
      M[OK].PERIOD = 'S_' + DATE_NOW()
      M[OK].AUTHOR = !S.USER
      OUT.MAP = MAPP
      OUT.PCT = STRTRIM(D.PCT)
      MESSAGE,/INFORM,'UPDATED PCT IN MAPS_MAIN FOR MAP > ' + MAPP & WAIT,1
      IF NONE(DB_OUT) THEN DB_OUT = OUT ELSE DB_OUT = [DB_OUT,OUT]
    ENDIF;IF COUNT EQ 1 AND  D.PCT GT M(OK).PCT THEN BEGIN
    ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||
  ENDFOR;FOR NTH = 0,NOF(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ;
  ;===> REWRITE MAPS_MAIN [IF ANY RECORDS WERE UPDATED]
  IF NOF(DB_OUT) GE 1 THEN BEGIN
    MSTR = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
    CSV_WRITE,MSTR,M
    ;===> REINITIALIZE MSTR [SO SUBSEQUENT CALLS TO MAP_READ HAVE THE LATEST SCALES]
    M = MAPS_READ(/INIT)
    CSV_WRITE,!S.IDL_TEMP + ROUTINE_NAME + '-' + DATE_STAMP() + '.CSV',DB_OUT
  ENDIF ;IF NOF(DB_OUT) GE 1 THEN BEGIN
  MESSAGE,/INFORM,'NUMBER OF MAIN MAP RECORDS EDITED: '+ ROUNDS(NOF(DB_OUT))
  
  STOP

ENDIF;IF KEY(DO_MAIN_EDIT_LIMIT_95) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||

;***********************
IF KEY(DO_LIST_MAPS_PCT) THEN BEGIN
;***********************
  SWITCHES,DO_LIST_MAPS_PCT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
ENDIF;IF KEY(DO_LIST_MAPS_PCT) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||

;*******************************
IF KEY(ADD_NG_MAP_2_MAIN) THEN BEGIN
  ;******************************
  SWITCHES,ADD_NG_MAP_2_MAIN,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP ADDS THE NEW GRAPHICS PROJECTION NAMES TO THE MAPS MAIN DATABASE'
  IF STOPP THEN STOP
  MSTR = !S.IDL_MAINFILES + 'MAPS_MAIN.csv'
  DB = CSV_READ(MSTR)
  ST,DB
  ;===> ADD KEY NG_MAP TO MSTR
  S = REPLICATE(CREATE_STRUCT('NG_MAP',''),NOF(DB))
  DB = STRUCT_MERGE(DB,S)
  ST,DB
  ;===> GET ALL THE PROJ TYPES
  SETS = WHERE_SETS(DB.PROJ)
  PLIST,SETS.VALUE
  OK = WHERE(SETS.VALUE NE '')
  SETS = SETS[OK]
  PLIST,SETS.VALUE  
  IF STOPP THEN STOP
  FOR NTH = 0,NOF(SETS) -1 DO BEGIN
    SET = SETS[NTH]
    MAPP = SET.VALUE
    PFILE,MAPP,/U
    SUBS = WHERE_SETS_SUBS(SET)
    ;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
    CASE (MAPP) OF
      'LAMBERTCONIC':     DB(SUBS).NG_MAP = 'Lambert Conformal Conic'
      'CYLINDRICAL':      DB(SUBS).NG_MAP = 'Equirectangular'
      'ROBINSON':         DB(SUBS).NG_MAP = 'Robinson'
      'MOLLWEIDE':        DB(SUBS).NG_MAP = 'Mollweide'
      'MERCATOR':         DB(SUBS).NG_MAP = 'Mercator'
      'SINUSOIDAL':       DB(SUBS).NG_MAP = 'Sinusoidal'
      'STEREOGRAPHIC':    DB(SUBS).NG_MAP = 'Stereographic'
      'HAMMERAITOFF':     DB(SUBS).NG_MAP = 'Hammer'
      'SINUSOIDAL':       DB(SUBS).NG_MAP = 'Sinusoidal'
      'ORTHOGRAPHIC':     DB(SUBS).NG_MAP = 'Orthographic'
      
      ELSE: BEGIN
      END
    ENDCASE; CASE (MAPP) OF
    ;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  ENDFOR;FOR NTH = 0,NOF(SETS) -1 DO BEGIN
  
  IF STOPP THEN STOP
  CSV_WRITE,MSTR,DB
  ,'ADD_NG_MAP_2_MAIN'
ENDIF;IF KEY(ADD_NG_MAP_2_MAIN) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||





END; #####################  END OF ROUTINE ################################
