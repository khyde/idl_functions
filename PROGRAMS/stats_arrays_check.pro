; $ID:	STATS_ARRAYS_CHECK.PRO,	2020-07-01-12,	USER-KJWH	$

	PRO STATS_ARRAYS_CHECK,FILE

;+
; NAME:
;		STATS_ARRAYS_CHECK
;
; PURPOSE: GENERATE A PNG FOR EACH COLOR IN AN IMAGE
;
; CATEGORY:
;		CATEGORY
;		 MATH
;
; CALLING SEQUENCE:
;
; INPUTS:
;		FILE:	FULL NAMES OF FILE TO CHECK
;		
; OPTIONAL INPUTS:
;		NONE:	
;
; KEYWORD PARAMETERS:
;		
;
; OUTPUTS:
;		THIS PROGRAM CHECKS THE MATH AVERAGE IN FILE CREATED WITH STATS_ARRAYS ( AND STRUCT_SD_WRITE )
;

; EXAMPLE:
;  STATS_ARRAYS_CHECK,FILE
;	NOTES:
;		THIS ROUTINE WILL DISPLAY BETTER IF YOU SET YOUR TAB TO 2 SPACES:
;	  (PREFERENCES, EDITOR, THE TAB NUMBER OF SPACES TO INDENT FOR EACH TAB: 2)

;		CITATIONS OR ANY OTHER USEFUL NOTES
;
;
; MODIFICATION HISTORY:
;			WRITTEN FEB 3,2011  J.O'REILLY
;			FEB 21,2013,JOR :       SENSOR = 'OCTS_SEAWIFS_TERRA_AQUA_MERIS'  
;                             INAMES = PERIODS+DASH+SENSORS
   

;-
;	********************************************
	ROUTINE_NAME = 'STATS_ARRAYS_CHECK'
; ********************************************
; 
; ; JUNK  STOP
;SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
DO_ONE = 0
DO_TWO = 0
DO_INFILE_PNGS = 2
	;STOP

;	IF N_ELEMENTS(FILE) EQ 0 THEN MESSAGE,'FILE MUST BE PROVIDED'
PLIST,FILE
;**************************************************************
IF DO_TWO GE 1 THEN BEGIN
;**************************************************************

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	
	FOR NTH = 0,N_ELEMENTS(FILE)-1 DO BEGIN
	  AFILE = FILE[NTH]
	  PRINT
	  PFILE,AFILE,/R
    PRINT	  
	  ADATA = STRUCT_SD_READ(AFILE,STRUCT=STRUCT)
	  INFILE = STRUCT.INFILE
	  INFILE='E:\SMI\BZ2\'+INFILE+'.BZ2'
	  ATRANS = STRUCT.TRANSFORMATION
	  PRINT
	  IF ATRANS NE '' THEN PRINT, STRUCT.PROD +' DATA IN STATS_ARRAYS STRUCTURE FILE ARE TRANSFORMED ('+ATRANS +')'
	  PRINT
	  PLIST,INFILE,/NOHEADING,NOTES='INFILES'
	  N_INFILE = N_ELEMENTS(INFILE)
	  IF N_INFILE NE 2 THEN MESSAGE,'MUST BE TWO INFILES'
	  ;STOP
; ===> FIND FIRST NON MISSING DATUM IN AVG AFILE THEN COMPARE WITH AVERAGE OF THE TWO VALS IN INFILE
    OK = WHERE(ADATA NE MISSINGS(ADATA),COUNT)
    PRINT,AFILE +'  MEAN HAS '+ STR_COMMA(COUNT) + '  GOOD DATA   ' 


;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
     FOR IN = 0,N_INFILE-1 DO BEGIN
            PFILE,INFILE(IN),/R
         
           D = READHDF(INFILE(IN),PROD='L3M_DATA')
           D=D.L3M_DATA
           ;;OK = WHERE(D NE MISSINGS(D),COUNT) 
           OK = WHERE(D NE -32767.0,COUNT)              
           PRINT,INFILE(IN)+ '  HAS ' + STR_COMMA(COUNT) + '  GOOD DATA   '
           IF STRUCT.TRANSFORMATION EQ '' AND ATRANS EQ 'ALOG' THEN D = ALOG(D) 
           IF STRUCT.TRANSFORMATION EQ '' AND ATRANS EQ 'ALOG10' THEN D = 10^(D)           
           IF IN EQ 0 AND IDLTYPE(D,/CODE) NE 0 THEN BDATA=D 
           IF IN EQ 1 AND IDLTYPE(D,/CODE) NE 0 THEN CDATA=D 
     ; STOP   
     ENDFOR ;FOR IN = 0,N_ELEMENTS(INFILE)-1 DO BEGIN
; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL

    OK = WHERE(ADATA NE MISSINGS(ADATA) AND BDATA NE -32767.0 AND CDATA NE -32767.0,COUNT)
    
    IF COUNT GE 1 THEN PRINT,' ALL THREE  ' + STR_COMMA(COUNT) + '   GOOD DATA   '
    

     IF COUNT GE 1 THEN BEGIN
;LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL     
       FOR N = 0,(10 < COUNT) DO BEGIN
         SUB = OK(N)
         ADAT = ADATA(SUB)
         BDAT = BDATA(SUB)
         CDAT = CDATA(SUB)
         ARR = [ADAT,BDAT,CDAT]
         PRINT,'ARR:  ',ARR
         PRINT,'AVG:  ',(BDAT+CDAT)/2.0
         PRINT
  ;||||||||||||||||||||||||||
       ENDFOR;FOR N = 0,(10 < COUNT) DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF       
         
     ENDIF;IF COUNT GE 1 THEN BEGIN
   ;STOP
	ENDFOR ; FOR NTH = 0,N_ELEMENTS(FILE)-1 DO BEGIN
	ENDIF;IF DO_TWO GE 1 THEN BEGIN
  ;||||||||||||||||||||||||||||||||||||||||||||||||
  ;
  ;
;**************************************************************
	IF DO_ONE GE 1 THEN BEGIN
;**************************************************************
	
	;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 
  FOR NTH = 0,N_ELEMENTS(FILE)-1 DO BEGIN
    AFILE = FILE[NTH]
    PRINT
    PFILE,AFILE,/R
    PRINT   
    ADATA = STRUCT_SD_READ(AFILE,STRUCT=STRUCT)
    INFILE = STRUCT.INFILE
    ATRANS = STRUCT.TRANSFORMATION
    PRINT
    IF ATRANS NE '' THEN PRINT, STRUCT.PROD +' DATA IN STATS_ARRAYS STRUCTURE FILE ARE TRANSFORMED ('+ATRANS +')'
    PRINT
    PLIST,INFILE,/NOHEADING,NOTES='INFILES'
    N_INFILE = N_ELEMENTS(INFILE)
; ===> FIND FIRST NON MISSING DATUM IN AVG AFILE THEN COMPARE WITH AVERAGE OF THE  VALS IN INFILE
    OK = WHERE(ADATA NE MISSINGS(ADATA),COUNT)
    PRINT,AFILE +'  MEAN HAS '+ STR_COMMA(COUNT) + '  GOOD DATA   ' 

;STOP
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
     FOR IN = 0,N_INFILE-1 DO BEGIN
            PFILE,INFILE(IN),/R
         
           D = READHDF(INFILE(IN),PROD='L3M_DATA')
           D=D.L3M_DATA
           ;;OK = WHERE(D NE MISSINGS(D),COUNT) 
           OK = WHERE(D NE -32767.0,COUNT)              
           PRINT,INFILE(IN)+ '  HAS ' + STR_COMMA(COUNT) + '  GOOD DATA   '
           IF STRUCT.TRANSFORMATION EQ '' AND ATRANS EQ 'ALOG' THEN D = ALOG(D) 
           IF STRUCT.TRANSFORMATION EQ '' AND ATRANS EQ 'ALOG10' THEN D = 10^(D)           
           IF IN EQ 0 AND IDLTYPE(D,/CODE) NE 0 THEN BDATA=D 
           
     ; STOP   
     ENDFOR ;FOR IN = 0,N_ELEMENTS(INFILE)-1 DO BEGIN
; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL

    OK = WHERE(ADATA NE MISSINGS(ADATA) AND BDATA NE -32767.0,COUNT)
    
    IF COUNT GE 1 THEN PRINT,' ALL TWO  ' + STR_COMMA(COUNT) + '   GOOD DATA   '
    

     IF COUNT GE 1 THEN BEGIN
;LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL     
       FOR N = 0,(10 < COUNT) DO BEGIN
         SUB = OK(N)
         ADAT = ADATA(SUB)
         BDAT = BDATA(SUB)
         ARR = [ADAT,BDAT]
         PRINT,'ARR:  ',ARR
         PRINT,'AVG:  ',(BDAT)
         PRINT
  ;||||||||||||||||||||||||||
       ENDFOR;FOR N = 0,(10 < COUNT) DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF       
         
     ENDIF;IF COUNT GE 1 THEN BEGIN
   ;STOP
  ENDFOR ; FOR NTH = 0,N_ELEMENTS(FILE)-1 DO BEGIN
  ENDIF;IF DO_ONE GE 1 THEN BEGIN
  ;||||||||||||||||||||||||||||||||||||||||||||||||
  ;************************************************************
IF DO_INFILE_PNGS GE 1 THEN BEGIN
;**************************************************************
OVERWRITE = DO_INFILE_PNGS GE 2

  DIR_JUNK='D:\JUNK\' 
  FILE_MKDIR,DIR_JUNK;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
  EXT = '.L3m_DAY_CHL_chlor_a_9km.bz2' 
  SENSOR = 'OCTS_SEAWIFS_TERRA_AQUA_MERIS'
    
  PN,FILE,'FILE'
  ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
  DATA = STRUCT_SD_READ(FILE,STRUCT=STRUCT)
  DATE= STRMID(PERIOD_2DATE(STRUCT.PERIOD),0,8)
  ;===> MAKE A PNG FROM THE MEAN
   MAKE_COASTLINE_PNG,DATA,FILE=FILE,DATE=DATE,MAP='GEQ',PROD = 'CHLOR_A',DIR_OUT='D:\JUNK\',SENSOR = SENSOR,TYPE = 'SMI'
       
  INFILES = STRUCT.INFILE
  PLIST,INFILES
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(INFILES)-1 DO BEGIN
    AFILE = INFILES[NTH]
    FN = FILE_PARSE(AFILE)
    D = READHDF(AFILE)
    PFILE,AFILE,/R 
    IF IDLTYPE(D,/CODE) NE 8 THEN MESSAGE,AFILE + '   !!!!!!!!!!!!!!!!!!!!!!!!!! IS NOT A STRUCTURE '
    DATA=D.L3M_DATA
    DATE=STRMID(SATDATE_2DATE(FN.NAME),0,8)
    SENSOR = SENSOR_LETTER_2SENSOR(FN.NAME)
    MAKE_COASTLINE_PNG,DATA,FILE=AFILE,DATE=DATE,MAP='GEQ',PROD = 'CHLOR_A',DIR_OUT='D:\JUNK\',SENSOR = SENSOR,TYPE = 'SMI'
ENDFOR;FOR NTH = 0,N_ELEMENTS(INFILES)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


     
      

   
  ,'DO_INFILE_PNGS'
  ;||||||||||||||||||||||||||||||||||||||||||||||||
  ENDIF;IF DO_INFILE_PNGS GE 1 THEN BEGIN
  
	
	

	END; #####################  END OF ROUTINE ################################
