; $ID:	PLT_SHP_LOOP.PRO,	2020-07-08-15,	USER-KJWH	$
;######################################################################################################################################## 
PRO PLT_SHP_LOOP, FILES, MP=MP, COLOR=COLOR, FILL=FILL, THICK=THICK, VERBOSE=VERBOSE, GET_RANGE=GET_RANGE, TAGNAME=TAGNAME, VALUE=VALUE, RANGE_LON=RANGE_LON, RANGE_LAT=RANGE_LAT, $
                STRUCT=STRUCT, NORMAL=NORMAL, DO_ALL=DO_ALL, AUTO=AUTO, LONS=LONS, LATS=LATS, AROUND=AROUND, PSYM=PSYM, SYMSIZE=SYMSIZE, _EXTRA=_EXTRA, OVERWRITE=OVERWRITE
; 
;+
;	THIS PROGRAM PLOTS SHAPE FILE INFORMATION
;	
;	
; KEYWORDS:
;   MP=MP: BASE MAP TO PLOT THE SUBAREA ON 
;   COLOR: COLOR TO USE FOR POLY LINES AND FILL COLOR
;   FILL: FILL IN POLY LINE AREAS USING IDL'S POLYFILL
;   VERBOSE: PRINT PROGRAM OUTPUT TO LOG
;   GET_RANGE: CALLS  MAP_GET_RANGE 
;   TAGNAME: SELECTS THE TAGNAME FROM THE ATTRIBUTES IN THE SHAPEFILE DBF
;   VALUE: THE VALUE OF THE TAGNAME THAT SHOULD BE SELECTED AND PLOTTED
;   STRUCT: THE OUTPUT STRUCTURE
;   NORMAL: PLOT DATA AFTER CONCERTING DATA COORDS  TO NORMAL COORDS
;   DO_ALL: PLOT ALL VALUES FOR A TAGNAME
;   _EXTRA: EXTRA COMMANDS PASSED TO PLOTS AND POLYFILL
;   
;   
; HISTORY:
;	MAR 26, 2002	WRITTEN BY:	J.E. O'REILLY, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;	OCT 25, 2011 - JEOR: ADDED KEYWORD FILL
;	NOV 21, 2012 - JEOR: REPLACED PARSE_IT WITH FILE_PARSE
;	DEC 05, 2012 - JEOR: FORMATTING; CHANGE DIR TO ORIGINAL; REMOVED UNUSED COMMENTS
;	DEC 14, 2012 - JEOR: STREAMLINED, ADDED KEYWORDS
;	DEC 23, 2012 - JEOR: CYCLE THROUGH ENTITIES TO FIND THE TAGNAME ATTRIBUTE  AND THE TAGNAME  VALUE
;	DEC 26, 2012 - JEOR: IF FOUND_ATTRIBUTE_NAME EQ 1 AND N_ELEMENTS(START_ENT)EQ 0 THEN BEGIN
; DEC 29, 2012 - JEOR: UPPERCASE:  ATTINDEX = WHERE(STRUPCASE(ATTRIBUTE_NAMES) EQ STRUPCASE(TAGNAME), FOUND_ATTRIBUTE_NAME)
; JAN 01, 2013 - JEOR: IF N_ELEMENTS(VALUE) EQ 1 THEN _VALUE = STRUPCASE(VALUE) ELSE _VALUE = ''
; JAN 02, 2012 - JEOR: ; ######     CONVERT X,Y FROM LONLAT TO NORMAL COORDINATES     ##### 
;                       ADDED KEYWORD LONLAT
;                       PLOT, XRANGE, YRANGE, XSTYLE=5, YSTYLE=5, POSITION=[0,0, 1,1], /NODATA,/NOERASE,NORMAL=NORMAL,DATA=DATA
; JAN 03, 2013 - JEOR: CHANGED DEFAULT TO ASSUME X,Y COORDS IN SHAPEFILE ARE LON,LAT ; ADDED KEYWORD NORMAL FOR OTHER INPUT
;                      IF N_ELEMENTS(LINESTYLE) EQ 1 THEN _LINESTYLE =LINESTYLE ELSE _LINESTYLE= 0
; JAN 22, 2013 - JEOR: IF N_ELEMENTS(VALUE) GT 1 THEN MESSAGE,'VALUE MUST BE SCALAR'
; JAN 27, 2013 - JEOR: REMOVED UNUSED COMMENTED CODE;REPORT, '##### FOUND  TAGNAME VALUE     #####' +AVALUE
;                      CHANGED X TO Y: MM_Y =MINMAX(Y)
;                      ALWAYS REPORT:      REPORT, 'FOUND  TAGNAME VALUE:  ' +AVALUE
; AUG 13, 2013 - JEOR: _COLOR = AVALUE
; AUG 15, 2013 - JEOR: CHANGED TARGET TO TAGNAME ENTITY_TAGNAME = STRTRIM((*ENTITY.ATTRIBUTES).(ATTINDEX), 2)
;                      IF FOUND_ATTRIBUTE_NAME EQ 1 AND (AVALUE EQ _VALUE OR FLOAT(AVALUE) EQ FLOAT(_VALUE))  THEN BEGIN
; AUG 16, 2013 - JEOR: ENTITY_ = STRTRIM((*ENTITY.ATTRIBUTES).(ATTINDEX), 2)
;                      IF KEYWORD_SET(ENTITY_COLOR) THEN _COLOR = ENTITY_ MOD 256
; AUG 17, 2013 - JEOR: GOTO,PLOT_ENTITY;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;                      IF AVALUE EQ 'WARM' AND IDLTYPE(ENTITY_) EQ 'STRING' THEN ENTITY_ = 67; PWP
; AUG 18, 2013 - JEOR: ADDED KEYWORDS RANGE_LON,RANGE_LAT
; AUG 19, 2013 - JEOR: IF N_ELEMENTS(COLOR) EQ 1 THEN _COLOR = COLOR ELSE _COLOR = AVALUE
; SEP 15, 2013 - JEOR: IF FOUND_ATTRIBUTE_NAME EQ 1 AND STRTRIM(AVALUE,2) EQ STRTRIM(_VALUE,2)  THEN BEGIN
;                      IF FOUND_ATTRIBUTE_NAME EQ 1 THEN AVALUE=(STRTRIM((*ENT.ATTRIBUTES).(ATTINDEX), 2)) ELSE AVALUE = ''
;                      IF N_ELEMENTS(VALUE) EQ 1 THEN _VALUE = VALUE ELSE _VALUE = '' [REMOVED STRUPCASE(VALUE)]
; OCT 06, 2013 - JEOR: ADDED KEYWORD GET_RANGE [ FOR CENTRAL_ARCTIC]
; OCT 18, 2013 - JEOR: ADDED KEYWORD DO_ALL
; APR 06, 2014 - JEOR: ADDED KEYWORD AUTO 
;                      [IF KEYWORD_SET(AUTO) THEN TAGNAME = LAST(ATTRIBUTE_NAMES)
; MAY 28, 2014 - JEOR: COPIED FROM PLOT_SHAPE, STREAMLINED,AUTO FIXED
;                      IF N_ELEMENTS(TAGNAME) NE 1 THEN  AUTO = 1 & ENTITY_COLOR = 1 
; MAY 30, 2014 - JEOR: ADDED KEYWORDS LONS,LATS
; JUN 04, 2014 - JEOR: IF ENT.SHAPE_TYPE EQ 1 THEN BEGIN
;                      ADDED PSYM,SYMSIZE [FOR POINTS]
; JUN 10, 2014 - JEOR: ADDED BOX_AROUND  FOR LON,LAT POINT
; JUN 17, 2014 - JEOR: RANGE_LON= MINMAX(LONS)
; JUN 19, 2014 - JEOR: CODE TO EXTRACT ALL 9 PIXELS WHEN AROUND = 1
; DEC 08, 2014 - JEOR: CHANGED IMAGE_PXPY TO IMG_XPYP
; DEC 08, 2016 - KJWH: UPDATED THE FORMATTING
;                      NOW LOOPING THROUGH ENTITIES IN ORDER TO EXTRACT MULTIPLE POLYGONS PER FILE
;                      CAN NOW GET AN OUTPUT STRUCTURE FROM THE MULTIPLE FILES AND POLYGONS
;                      ADDED ATTR = SHAPEFILEOBJ->GETATTRIBUTES(_ENT) TO GET THE ATTRIBUTE INFO FROM THE SHP FILE
;                      USING ATTRIBUTE_0 TO NAME THE POLYGONS IN THE OUTPUT STRUCTURE -                              ?????? IS ATTRIBUTE_0 COMMONLY THE NAME OF THE POLYGON ????????
;                      ADDED KEYWORD MP (MAP) IN ORDER TO RESET THE MAP DOMAIN WITH EACH ENTITY
;                      NOW WRITING A SAV FILE WITH THE MAP AND SHAPEFILE SPECIFIC INFORMATION
;                      ADDED FILE_MAKE STEP TO DETERMINE IF THE SAV FILE NEEDS TO BE CREATED
;                      ADDED OVERWRITE KEYWORD
; DEC 12, 2016 - KJWH: ADDED SUBS TO THE OUTPUT STRUCTURE 
; DEC 17, 2016 - JEOR: FIXED WHEN ATTRIB.ATTRIBUTE_0 IS NUMERIC: 
;                      TAG = STRUCT_TAGNAMES_FIX(STRTRIM(ATTRIB.ATTRIBUTE_0,2))  ; ASSUMES THE POLYGON NAME IS IN ATTRIBUTE_0
; DEC 20, 2016 - KJWH: UPDATED FORMATTING                    
; FEB 13, 2017 - KJWH: FIXED BUG WITH THE NAMING OF THE OUTFILE - NEEDED TO MOVE !S.IDL_SHAPEFILES TO BEFORE STRUPCASE()               
;
;-
;#################################################################################################

;**********************
  ROUTINE_NAME= 'PLT_SHP'
;**********************

  IF N_ELEMENTS(TAGNAME) NE 1 THEN BEGIN
    TAGNAME = ''
    AUTO = 1
    IF NONE(COLOR) THEN ENTITY_COLOR = 1
  ENDIF;IF N_ELEMENTS(TAGNAME) NE 1 THEN BEGIN

  IF NONE(VALUE)            THEN _VALUE = '' ELSE _VALUE = VALUE
  IF N_ELEMENTS(VALUE) GT 1 THEN MESSAGE,'VALUE MUST BE SCALAR'
  IF NONE(MP) OR N_ELEMENTS(MP) GT 1 THEN MESSAGE,'MUST PROVIDE A SINGLE MAP'
  IF NONE(COLOR)            THEN _COLOR = 0 ELSE _COLOR = COLOR
  IF NONE(THICK)            THEN _THICK = 0 ELSE _THICK = THICK
  IF NONE(PSYM)            THEN _PSYM = 8 ELSE _PSYM = PSYM
  IF NONE(SYMSIZE)            THEN _SYMSIZE = 2 ELSE _SYMSIZE = SYMSIZE

;===> INITIALIZE RANGE_LON,RANGE_LAT
  RANGE_LON =[MISSINGS(0.),-MISSINGS(0.)]&  RANGE_LAT = RANGE_LON
  IF N_ELEMENTS(FILES) EQ 0 THEN FILES = DIALOG_PICKFILE(TITLE='PICK A SHAPEFILE')

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  MASTER_STRUCT = []
  FOR FILES_ = 0L,N_ELEMENTS(FILES)-1L DO BEGIN
	  SHAPEFILE=FILES(FILES_)
	  FP = FILE_PARSE(SHAPEFILE)
	  OUTFILE = !S.IDL_SHAPEFILES + STRUPCASE(MP + '-' + FP.NAME + '.SAV')
	  IF FILE_MAKE(SHAPEFILE,OUTFILE,OVERWRITE=OVERWRITE) EQ 0 THEN BEGIN
	    STR = STRUCT_READ(OUTFILE)
	    MASTER_STRUCT=CREATE_STRUCT(MASTER_STRUCT,FP.NAME,STR)
	    CONTINUE
	  ENDIF
    SHAPEFILEOBJ=OBJ_NEW('IDLFFSHAPE',SHAPEFILE) ; ===> OPEN THE SHAPEFILE 
    SHAPEFILEOBJ -> IDLFFSHAPE::GETPROPERTY, N_ENTITIES=N_ENTITIES,ENTITY_TYPE=ENTITY_TYPE,N_ATTRIBUTES=N_ATTRIBUTES,ATTRIBUTE_NAMES=ATTRIBUTE_NAMES ; ===> GET THE NUMBER OF ENTITIES,NUMBER OF ATTRIBUTES,AND ATTRIBUTE NAMES FROM SHAPEFILEOBJ 
    ENTITIES = SHAPEFILEOBJ -> IDLFFSHAPE::GETENTITY(/ALL,/ATTRIBUTES) ; ===> GET THE ENTITIES 
    ATTR = SHAPEFILEOBJ -> IDLFFSHAPE::GETATTRIBUTES(/ALL,/ATTRIBUTE_STRUCTURE) ; ===> GET THE ATTRIBUTES  
	  
    IF KEY(VERBOSE) THEN PRINT,'N_ENTITIES = ',N_ENTITIES
    IF KEY(VERBOSE) THEN PRINT,'N_ATTRIBUTES = ',N_ATTRIBUTES
    IF KEY(VERBOSE) THEN PRINT,'ATTRIBUTE_NAMES = ',ARR_2STR(ATTRIBUTE_NAMES)
    IF KEY(VERBOSE) THEN PRINT
    
    SHAPEFILEOBJ -> GETPROPERTY, ATTRIBUTE_NAMES=ATTRIBUTE_NAMES
    IF KEYWORD_SET(AUTO) THEN TAGNAME = LAST(ATTRIBUTE_NAMES)
    ATTINDEX = WHERE(STRUPCASE(ATTRIBUTE_NAMES) EQ STRUPCASE(TAGNAME), FOUND_ATTRIBUTE_NAME)
    IF ATTINDEX EQ -1 THEN MESSAGE,'CAN NOT FIND   ' + TAGNAME + '  IN   ' +SHAPEFILE
  
  ;===> GET ALL ENTITIES 
    ENTITIES = PTR_NEW(/ALLOCATE_HEAP) 
    *ENTITIES = SHAPEFILEOBJ -> GETENTITY(/ALL, /ATTRIBUTES)
  
    COLORS = [] ; Set up a null array to hold the colors of the ENTITIES
    FILE_STRUCT = []
    FOR _ENT = 0,N_ELEMENTS(*ENTITIES) -1 DO BEGIN 
      ENT = SHAPEFILEOBJ->IDLFFSHAPE::GETENTITY(_ENT,/ATTRIBUTES)
      ENTITY = (*ENTITIES)[_ENT]  
      ENTITY_TAGNAME = STRTRIM((*ENTITY.ATTRIBUTES).(ATTINDEX), 2)
      IF FOUND_ATTRIBUTE_NAME EQ 1 THEN AVALUE=(*ENT.ATTRIBUTES).(ATTINDEX) ELSE AVALUE = ''
      ATTRIB = SHAPEFILEOBJ->GETATTRIBUTES(_ENT)
          
      IF KEY(VERBOSE) THEN PRINT,TAGNAME,':  ',AVALUE
      IF KEY(DO_ALL) THEN GOTO, PLOT_ALL_ENTITIES

      IF FOUND_ATTRIBUTE_NAME EQ 1 AND AVALUE EQ _VALUE  THEN BEGIN
        START_ENT = _ENT
        END_ENT = _ENT
        GOTO,PLOT_ENTITY;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      ENDIF ; IF FOUND_ATTRIBUTE_NAME EQ 1 AND AVALUE EQ _VALUE THEN BEGIN      
    
 
; ===> IF THE ABOVE DID NOT FIND THE TAGNAME AND ITS VALUE THEN     
      IF FOUND_ATTRIBUTE_NAME EQ 1 AND N_ELEMENTS(START_ENT) EQ 0 THEN BEGIN
        START_ENT=0
        END_ENT =N_ELEMENTS(*ENTITIES) -1
      ENDIF;IF N_ELEMENTS(START_ENT)EQ 0 THEN BEGIN
        
      PLOT_ALL_ENTITIES:
      IF N_ELEMENTS(START_ENT) EQ 0 THEN BEGIN
        START_ENT=0
        END_ENT =N_ELEMENTS(*ENTITIES) -1
     ENDIF ; IF N_ELEMENTS(START_ENT) EQ 0 THEN BEGIN

;#################################################################################################
    PLOT_ENTITY:   
    
      FOR _EN = START_ENT, END_ENT DO BEGIN    
        ENT = SHAPEFILEOBJ->IDLFFSHAPE::GETENTITY(_EN,/ATTRIBUTES)
        ENTITY = (*ENTITIES)[_ENT]
        IF IDLTYPE(AVALUE) EQ 'STRING' THEN BEGIN
           IF AVALUE EQ 'WARM' THEN  ENTITY_ = 67
        ENDIF ELSE BEGIN
         ENTITY_ = (*ENTITY.ATTRIBUTES).(ATTINDEX)      
        ENDELSE ; IF IDLTYPE(ENTITY_) EQ 'STRING' THEN BEGIN
        
        IF KEY(ENTITY_COLOR) THEN _COLOR = _ENT+10 MOD 256
        IF KEY(VERBOSE) THEN PRINT,'SHAPE_TYPE         :  ', ENT.SHAPE_TYPE
        IF KEY(VERBOSE) THEN PRINT,'N PARTS         :  ', ENT.N_PARTS
        IF KEY(VERBOSE) THEN PRINT,'N VERTICES         :  ', ENT.N_VERTICES
        
        MAPS_SET, MP
      
; ===> Get XP and YP info
        IF ENT.SHAPE_TYPE EQ 1 THEN BEGIN
          PT = [ENT.VERTICES]
          LONS = ENT.BOUNDS[0]
          LATS = ENT.BOUNDS[1]
          RANGE_LON= MINMAX(LONS)
          RANGE_LAT= MINMAX(LATS)
          ;===> CONVERT LON,LAT TO PIXEL COORDINATES
          XYZ = CONVERT_COORD(LONS,LATS,/DATA,/TO_DEVICE)
          XP = ROUND(REFORM(XYZ(0,*))) & YP = ROUND(REFORM(XYZ(1,*)))
          XP = XP[0] & YP = YP[0]
          PX = !D.X_SIZE & PY = !D.Y_SIZE
          ;===> GET SUBSCRIPTS FOR A 3X3 BOX AROUND THE XP,YP POINT
          XY = IMG_XPYP([PX,PY])
          B = BOX_AROUND(BYTARR([PX,PY]), [XP,YP], SUBS=SUBS, AROUND=AROUND)
          ;===> CONVERT SUBS TO XPS,YPS  LAT
          XX = XY.X(SUBS) &  YY = XY.Y(SUBS)        
          PLOTS,XX,YY,PSYM = 3,SYMSIZE = 5,COLOR = COLOR, THICK =1,/DEVICE
          ;===> GET POINTS JUST PLOTTED AND CONVERT TO LONS,LATS
          IMG = TVRD()
          OK = WHERE(IMG EQ COLOR,COUNT)
          IF COUNT GE 1 THEN BEGIN
            XY = ARRAY_INDICES(IMG,OK)
            XP = REFORM(XY(0,*))
            YP = REFORM(XY(1,*))
            XYZ = CONVERT_COORD(XP,YP,/DEVICE,/TO_DATA)
            LONS = REFORM(XYZ(0,*)) & LATS = REFORM(XYZ(1,*))
          ENDIF;IF COUNT GE 1 THEN BEGIN        
        ENDIF;IF ENT.SHAPE_TYPE EQ 1 THEN BEGIN
        
      
        FOR SEG=0, ENT.N_PARTS-1 DO BEGIN
          SEGS = [*ENT.PARTS, ENT.N_VERTICES]
          X = REFORM((*ENT.VERTICES)[0, SEGS[SEG]:SEGS[SEG+1]-1]) 
          Y = REFORM((*ENT.VERTICES)[1, SEGS[SEG]:SEGS[SEG+1]-1])  
          IF KEYWORD_SET(VERBOSE) THEN PRINT,_COLOR
          MM_X =MINMAX(X) & MM_Y =MINMAX(Y)
          IF KEYWORD_SET(VERBOSE) THEN BEGIN & PRINT,'X RANGE    :  ',MM_X & ENDIF
          IF KEYWORD_SET(VERBOSE) THEN BEGIN & PRINT,'Y RANGE    :  ',MM_Y & ENDIF
          RANGE_LON[0] = MM_X[0] < RANGE_LON[0]
          RANGE_LON[1] = MM_X[1] > RANGE_LON[1]
          RANGE_LAT[0] = MM_Y[0] < RANGE_LAT[0]
          RANGE_LAT[1] = MM_Y[1] > RANGE_LAT[1]
      
; ===> CONVERT X, Y TO NORMAL COORDINATES
          IF KEY(NORMAL) THEN BEGIN 
            NORMAL = 1 & DATA = 0 ;===> THE ENTIRE GLOBE
            XRANGE=[0,1] &  YRANGE=XRANGE
            XYZ = CONVERT_COORD(X,Y,/DATA,/TO_NORMAL)
            X=REFORM(XYZ(0,*))
            Y=REFORM(XYZ(1,*))
            PLOT, XRANGE, YRANGE, XSTYLE=5, YSTYLE=5, POSITION=[0,0, 1,1], /NODATA,/NOERASE,NORMAL=NORMAL,DATA=DATA
          ENDIF ELSE BEGIN
            IF KEYWORD_SET(GET_RANGE) THEN BEGIN
              MAP_GET_RANGE & XRANGE=!X.RANGE & YRANGE=!Y.RANGE
              PLOT, XRANGE, YRANGE, XSTYLE=5, YSTYLE=5, POSITION=[0,0, 1,1], /NODATA,/NOERASE,NORMAL=NORMAL,DATA=DATA,_EXTRA=_EXTRA
            ENDIF;IF KEYWORD_SET(GET_RANGE) THEN BEGIN
            NORMAL = 0 & DATA = 1 ; DEFAULT        
          ENDELSE;IF KEYWORD_SET(NORMAL) THEN BEGIN 
       
; ===> FILL IN OR OUTLINE THE POLY LINE
          IF KEY(FILL) EQ 1 THEN BEGIN
            POLYFILL, X, Y, /DATA, COLOR=_COLOR, _EXTRA=_EXTRA
          ENDIF ELSE BEGIN        
            PLOTS, X, Y, NORMAL=NORMAL, DATA=DATA, LINESTYLE=_LINESTYLE, THICK=_THICK, COLOR=_COLOR
          ENDELSE;IF KEYWORD_SET(FILL) EQ 1 THEN BEGIN   

          IF NONE(LONS) THEN LONS = X ELSE LONS = [LONS,X]
          IF NONE(LATS) THEN LATS = Y ELSE LATS = [LATS,Y]
          IMG = TVRD()
          SUBS = WHERE(IMG EQ _COLOR,/NULL)
          ENT_STRUCT = CREATE_STRUCT(ENT,ATTRIB,'COLOR',_COLOR,'IMG',IMG,'SUBS',SUBS)
          ZWIN
        
        ENDFOR;FOR SEG=0, ENTITY.N_PARTS-1 DO BEGIN
          
        IF PTR_VALID(ENTITY) THEN HEAP_FREE, ENTITY
      ENDFOR;FOR _ENT = START_ENT,END_ENT DO BEGIN
    
      COLORS = [COLORS,_COLOR] ; ===> RETURN _COLOR IN KEYWORD COLOR
      TAG = STRUCT_TAGNAMES_FIX(STRTRIM(ATTRIB.ATTRIBUTE_0,2))  ; ASSUMES THE POLYGON NAME IS IN ATTRIBUTE_0, IF IT IS NUMERIC, THEN MAKE IT A STRING
      FILE_STRUCT = CREATE_STRUCT(FILE_STRUCT,TAG,ENT_STRUCT)  
    ENDFOR ; FOR _ENT = 0,N_ELEMENTS(*ENTITIES) -1 DO BEGIN    
    
    CLOSING:  ; ===> CLOSE/DESTROY/FREE THE SHAPEFILE & ENTITIES
    IF OBJ_VALID(SHAPEFILE) THEN OBJ_DESTROY, SHAPEFILE 
    IF PTR_VALID(ENTITIES) THEN PTR_FREE, ENTITIES;
    IF PTR_VALID(ENTITIES) THEN HEAP_FREE, ENTITIES;
   
    OBJ_DESTROY, SHAPEFILEOBJ
    MASTER_STRUCT = CREATE_STRUCT(MASTER_STRUCT,FP.NAME,FILE_STRUCT)  
    SAVE, FILENAME=OUTFILE, FILE_STRUCT
  ENDFOR ;   FOR FILES_ = 0L,N_ELEMENTS(FILES)-1L DO BEGIN
  STRUCT = MASTER_STRUCT
  DONE:

END; #####################  END OF ROUTINE ################################
