; $ID:	DYNPSRCH.PRO,	2020-07-01-12,	USER-KJWH	$

PRO DYNPSRCH,TT,RR,FILE,GHOST=GHOST,DT=DT,TLEN=TLEN,PMIN=PMIN,      $
             PMAX=PMAX,NUMF=NUMF,GRAY=GRAY,SIG=SIG,NOLABEL=NOLABEL, $
             RATERR=RATERR,COLOR=COLOR, TBIN=TBIN, LOG=LOG,         $
             EPOCH=EPOCH,WINDOW=WINDOW,CHSIZE=CHSIZE,               $
             SUNANGDIST=SUNANGDIST,PERIOD=PERIOD,PX=PX,             $
             MAXCHI2PER=MAXCHI2PER,PSDPEAKSORT=PSDPEAKSORT,         $
             MULTIPLE=MULTIPLE,SIMSIGNI=SIMSIGNI,                   $
             YLAXISV=YLAXISV

;+
; NAME:
;       DYNPSRCH
;
;
; PURPOSE:
;       PRODUCE A DYNAMICAL PERIOD SEARCH OF A TIMESERIES
;       AND DISPLAY PSD OR \CHI^2 OF EPOCH FOLD
;
;
; CATEGORY:
;       TIME SERIES ANALYSIS
;
;
; CALLING SEQUENCE:
;       DYNPSRCH,TT,RR,FILE,GHOST=GHOST,DT=DT,TLEN=TLEN,
;          PMIN=PMIN,PMAX=PMAX,NUMF=NUMF, /LOG, /EPOCH, /NOLABEL
;
; INPUTS:
;       TT:     TIME
;       RR:     COUNT RATE
;       FILE:   FILE NAME OF ENCAPSULATED PS-FILE TO BE PRODUCED
;
; OPTIONAL INPUTS:
;       DT:     TIME DISTANCE BETWEEN INDIVIDUAL PSDS (DEFAULT: 4)
;       TLEN:   LENGTH OF THE INDIVIDUAL TIME SERIES THAT ARE USED
;                 TO GENERATE THE PSD
;       PMIN:   MINIMUM PERIOD TO CONSIDER (2.*DT DEFAULT)
;       PMAX:   MAXIMUM PERIOD TO CONSIDER (TLEN/2)
;       NUMF:   NUMBER OF FREQUENCY POINTS (500)
;       SIG :   SIGNIFICANCE LEVELS (99, AND 99.9 %)
;       RATERR: ERROR BARS FOR RATE. PLOT SYMBOLS INSTEAD OF LINES.
;       SUNANGDIST: ANGULAR DISTANCE BETWEEN THE SUN AND THE ASM
;               OBJECT. MAKE AN ANGULAR DISTANCE VERSUS TIME PLOT.
;       MULTIPLE: NUMBER OF SIMULATIONS TO OBTAIN THE SIGNIFICANCE
;               LEVELS, IF NOT SET OR <=0, THEN THE SIGNIFICANCE IS
;               COMPUTED FROM THE STANDARD FORMULA, AND NOT USING
;               SIMULATIONS (FASTER, BUT NOT RECOMMENDED...)
;       YLAXISV: THE DATA VALUES FOR EACH TICK MARK FOR THE Y LEFT
;               AXIS.
;
; KEYWORD PARAMETERS:
;       GHOST:  INVOKE GHOSTSCRIPT AFTER PLOT IS DONE
;       GRAY:   GRAY SCALE PLOT INSTEAD OF COLOR
;       COLOR:  IT'S COLOR INSTEAD OF COUNT RATE
;       TBIN:   DO PSYM=10 PLOTS, WITH ERRORS, IN A WAY THAT WILL MAKE
;                EVEN JEORN HAPPY (I.E., GAPS ARE EXPLICIT)
;       NOLABEL: DON'T PUT A LABEL ON THE ASM SIGNIFICANCE LEVELS!
;       LOG:    MAKE LOGARITHMIC PERIOD AXES ON THE PLOT
;       EPOCH:  EPOCH FOLD INSTEAD OF LOMB-SCARGLE (DEFAULT)
;       WINDOW: APPLY A WELCH WINDOW TO THE DATA
;
; OUTPUTS:
;       AN ENCAPSULATED POSTSCRIPT FILE IS PRODUCED
; OPTIONAL OUTPUTS:
;       PX: PSD VALUES FOR LOMB-SCARGLE PERIODOGRAM OR \CHI^2 VALUES
;           FOR EPOCH FOLD
;       PERIOD: PERIOD CORRESPONDING TO EACH PSD VALUE FOR
;           LOMB-SCARGLE PERIODOGRAM OR TRIAL PERIODS FOR EPOCH FOLD
;       MAXCHI2PER: PERIOD OF MAXIMUM CHI^2 FOR EPOCH FOLD
;       PSDPEAKSORT : ARRAY WITH THE MAXIMUM PEAK FROM THE LOM-SCARGLE
;           PERIODOGRAM PRO EACH SIMULATION
;       SIMSIGNI : POWER THRESHOLD CORRESPONDING TO THE GIVEN
;           FALSE ALARM PROBABILITIES FAP ACCORDING TO WHITE
;           NOISE SIMULATIONS FOR THE PSD;
;
; RESTRICTIONS:
;       IT IS NOT CHECKED WHETHER THE DESIRED PERIOD RANGE IS
;       MEANINGFUL
;
; PROCEDURE:
;       PIECES OF LENGTH TLEN OF THE TIME SERIES ARE TRANSFORMED
;       WITH THE LOMB SCARGLE PERIODOGRAM OR EPOCH FOLDED AND THEN
;       ARE NORMALIZED TO THE MAXIMUM VALUE. THE RESULT IS PLOTTED.
;
;
; EXAMPLE:
;
;
; PROCEDURES CALLED:
;       REQUIRES: SCARGLE.PRO, EPFOLD.PRO (=> PFOLD.PRO), JWOPLOTERR,
;                 JWMJDAXIS, JWDATEAXIS, OPEN_PRINT, CLOSE_PRINT
;
;
; MODIFICATION HISTORY:
;       VERSION 0.5: 1999/08/07 (DYNSCARG): JEORN WILMS
;           (WILMS@ASTRO.UNI-TUEBINGEN.DE)
;
;       VERSION 0.6: 1999/08/25: JEORN WILMS
;           I HOPE THE NORMALIZATION IS NOW FINALLY ALL RIGHT...
;       VERSION 0.7: 1999/08/26: MICHAEL NOWAK
;           (MNOWAK@ROCINANTE.COLORADO.EDU)
;           ADDED RATERR AS AN OPTIONAL INPUT, COLOR AS A KEYWORD,
;           TBIN AS A KEYWORD
;       VERSION 0.8 (DYNPSRCH): 1999/10/21: MICHAEL NOWAK
;           ADDED LOG AS A KEYWORD, TO PRODUCE LOGARITHMIC PLOTS
;           ADDED EPOCH AS A KEYWORD, TO DO AN EPOCH FOLD INSTEAD
;           TVSCAL NOW CENTERS PIXELS ON MID-POINT OF PSD/FOLD, &
;             WIDTH OF PLOT IS NOW MORE CAREFULLY CALCULATED
;           PMIN IS DEFAULTED TO 2.*DT
;       VERSION 0.9: 1999/11/02: MICHAEL NOWAK
;           FOLLOWING PADI BOYD'S SUGGESTION, ADDED PADDING OF LIGHTCURVES
;             TO ALLOW DYNAMICAL PSD TO BE DONE OVER WHOLE LIGHTCURVE RANGE.
;           ADDED KEYWORD TO WINDOW FUNCTION THE LIGHTCURVE WITH A
;             WELCH WINDOW.
;       VERSION 1.0: 1999/11/30: SARA BENLLOCH
;           ADDED SUNANGDIST AS A OPTIONAL INPUT, TO PLOT THE ANGULAR
;           DISTANCE BETWEEN THE SUN AND THE ASM OBJECT VERSUS THE
;           TIME, IN ORDER TO CHECK THE SUN INFLUENCE.
;       VERSION 1.1: 2000/08/31: SARA BENLLOCH / J. WILMS
;           ADOPTED TO NEW (FAST) SCARGLE ROUTINE
;-

   ;; CHECK KEYWORD PARAMETERS

   ;; SIMULATIONS  FOR PERIODOGRAM
   IF N_ELEMENTS(MULTIPLE) EQ 0 THEN MULTIPLE = 0
   ;; SIZE OF FONTS
   IF (N_ELEMENTS(CHSIZE) EQ 0) THEN CHSIZE = 1.

   ;; INVOKE GHOSTSCRIPT?
   IF (N_ELEMENTS(GHOST) EQ 0) THEN GHOST = 0

   ;; TIME DISTANCE BETWEEN THE INDIVIDUAL PSDS
   IF (N_ELEMENTS(DT) EQ 0) THEN DT = 4.

   ;; LENGTH OF THE TIME SEGMENT FOR ONE PSD
   IF (N_ELEMENTS(TLEN) EQ 0) THEN TLEN = 500.

   ;; PMIN,PMAX,NUMF: MINIMUM AND MAXIMUM PERIOD TO BE
   ;;   CHECKED, AND NUMBER OF FREQUENCY POINTS TO CONSIDER
   IF (N_ELEMENTS(PMIN) EQ 0) THEN PMIN = 2.*DT
   IF (N_ELEMENTS(PMAX) EQ 0) THEN PMAX = TLEN/2.
   IF (N_ELEMENTS(NUMF) EQ 0) THEN NUMF = 500

   IF (N_ELEMENTS(SIG) EQ 0) THEN BEGIN
       IF KEYWORD_SET(EPOCH) THEN BEGIN
               SIG = [0.99D0]
               FAP = [0.01D0]
       ENDIF ELSE BEGIN
               SIG = [0.99D0,0.999D0]
               FAP = [0.01D0,0.001D0]
       ENDELSE
   ENDIF ELSE BEGIN
       FAP = 1.D0 - DOUBLE(SIG)
   END

   T0   = MIN(TT)
   TM   = MAX(TT)
   NPAD = FIX((TLEN/2.D0)/DT)
   ;;
   ;; PADDED LIGHTCURVE.  THE PADDED POINTS BEFORE/AFTER THE KNOWN
   ;; LIGHTCURVE HAVE THE MEAN AND VARIANCE OF THE FIRST/LAST TLEN/2.D0
   ;; OF THE LIGHTCURVE
   ;;
   TP  = [(FINDGEN(NPAD)-NPAD)*DT+T0,TT,TM+(FINDGEN(NPAD)+1.)*DT]
   TP0 = MIN(TP)

   IBEG = WHERE(TT LE T0+TLEN/2.D0)
   MNB  = MEAN(RR(IBEG))
   SIGB = SQRT(VARIANCE(RR(IBEG)))

   IEND = WHERE(TT GE TM-TLEN/2.D0)
   MNE  = MEAN(RR(IEND))
   SIGE = SQRT(VARIANCE(RR(IEND)))

   RP = [RANDOMU(S,NPAD,/NORMAL)*SIGB+MNB,RR,RANDOMU(S,NPAD,/NORMAL)*SIGE+MNE]

   NUMSTEP_PAD  = FIX((MAX(TP)-TLEN-MIN(TP))/DT)
   NUMSTEP_NPAD = FIX((TM-TLEN-T0)/DT)

   IF (NUMSTEP_PAD LT 10 OR NUMSTEP_NPAD LT 10 ) THEN BEGIN
       MESSAGE,'TIME SERIES NOT LONG ENOUGH FOR DYNAMICAL PSD', $
         /INFORMATIONAL
       RETURN
   ENDIF

   NUMOUT = NUMF
   DYN = FLTARR(NUMSTEP_PAD,NUMF)

   IF (KEYWORD_SET(LOG)) THEN BEGIN
       PER = PMIN*( (PMAX/PMIN)^(DINDGEN(NUMOUT)/DOUBLE(NUMOUT-1)) )
   ENDIF ELSE BEGIN
       PER = PMIN+FINDGEN(NUMOUT)/(NUMOUT-1)*(PMAX-PMIN)
   ENDELSE

   CAVG = FLTARR(2,NUMSTEP_NPAD)
   II = 0

   FOR I=0,NUMSTEP_PAD-1 DO BEGIN
       TMIN = TP0+I*DT
       TMAX = TMIN+TLEN

       NDX = WHERE(TP GT TMIN AND TP LE TMAX)
       T   = TP(NDX)
       R   = RP(NDX)

       IF (TMIN GE T0 AND II LE NUMSTEP_NPAD-1) THEN BEGIN
           CAVG[0,II] = (TMIN+TMAX)/2.D0
           CAVG[1,II] = MEAN(R)
           II = II+1
       ENDIF


       IF (KEYWORD_SET(EPOCH)) THEN BEGIN
           EPFOLD,T,R,=PMIN,PSTOP=PMAX,CHIERG=CHIERG,SAMPLING=60
           PERIOD = CHIERG[0,*]
           PX     = CHIERG[1,*]
       ENDIF ELSE BEGIN
           ;;  THIS IS NOT RECOMMENDED FOR FREQUENCIES ~< (A FEW)/TLEN, BUT
           ;;  GOOD TO CHECK HIGH FREQUENCY STUFF
           IF (KEYWORD_SET(WINDOW)) THEN BEGIN
               RTMP = R*( 1.D0 - (2.D0*(T-TMIN-TLEN/2.D0)/TLEN)^2 )
               SCARGLE,T,RTMP,OM,PX,PERIOD=PERIOD,NUMF=NUMF, $
                 FMIN=1./PMAX,FMAX=1./PMIN
           ENDIF ELSE BEGIN
               SCARGLE,T,R,OM,PX,PERIOD=PERIOD,NUMF=NUMF,    $
                 FMIN=1./PMAX,FMAX=1./PMIN
           ENDELSE
           ;; NORMALIZATION
           DOM = SHIFT(OM,-1)-OM
           DOM[N_ELEMENTS(OM)-1] = DOM[N_ELEMENTS(OM)-2]
           NORM = TOTAL(PX*DOM)
           PX = PX* (VARIANCE(R)/(MEAN(R)^2. * NORM))
       ENDELSE

       ;; INTERPOLATE ONTO DESIRED FREQUENCIES
       DYN[I,*]=INTERPOL(PX,PERIOD,PER)

   END

   IF (KEYWORD_SET(EPOCH)) THEN BEGIN
       ;; TOTAL EPOCH FOLD
       EPFOLD,TT,RR,=PMIN,PSTOP=PMAX,CHIERG=CHIERG,SAMPLING=60, $
         PERIOD=PERIOD,PERSIG=PERSIG
       MAXCHI2PER = PERIOD
       PERIOD     = CHIERG[0,*]
       PX         = CHIERG[1,*]
   ENDIF ELSE BEGIN
       ;; TOTAL PERIODOGRAM
       IF (KEYWORD_SET(WINDOW)) THEN BEGIN
           RTMP = RR*( 1.D0 - (2.D0*( TT-(T0+TM)/2.D0 )/(TM-T0))^2 )
           SCARGLE,TT,RTMP,OM,PX,PERIOD=PERIOD,NUMF=NUMF, $
             FMIN=1./PMAX,FMAX=1./PMIN, PSDPEAKSORT=PSDPEAKSORT,$
             MULTIPLE=MULTIPLE,FAP=FAP,SIMSIGNI=SIMSIGNI
           ;; MULTIPLY BY 15/8 IF WINDOW FUNCTION IS USED (I.E. THE MEAN
           ;; VALUE OF THE SQUARE OF THE WINDOW FUNCTION).  THAT
           ;; SHOULD BE THE PROPER NORMALIZATION WITH THE WINDOW FUNCTION
           PX = PX*15.D0/8.D0
       ENDIF ELSE BEGIN
           SCARGLE,TT,RR,OM,PX,PERIOD=PERIOD,NUMF=NUMF, $
             FMIN=1./PMAX,FMAX=1./PMIN,PSDPEAKSORT=PSDPEAKSORT, $
             MULTIPLE=MULTIPLE,FAP=FAP,SIMSIGNI=SIMSIGNI,/DEBUG
       ENDELSE
   ENDELSE

   NI = N_ELEMENTS(PX)
   IF (N_ELEMENTS(TT)/2 LT NI) THEN NI = N_ELEMENTS(TT)/2
   IF (KEYWORD_SET(EPOCH)) THEN BEGIN
       SIGNI = PERSIG
   ENDIF ELSE BEGIN
       IF (N_ELEMENTS(SIMSIGNI) NE 0) THEN BEGIN
           SIGNI = SIMSIGNI
       END ELSE BEGIN
           SIGNI = -ALOG(1.D0-(1.D0-FAP)^(1.D0/DOUBLE(NI)))
       END
   ENDELSE

   ;; NOW FOR THE PLOTTING

   ;; OPEN THE GRAPHICS DEVICE
   OPEN_PRINT,FILE
   DEVICE,/COLOR,BITS_PER_PIXEL=8,XSIZE=25,YSIZE=25
   IF (KEYWORD_SET(GRAY)) THEN BEGIN
       LOADCT,0
   END ELSE BEGIN
       LOADCT,39
   END

   XST=0.08
   YST=0.5
   XWI=0.6
   YWI=0.4
   IF N_ELEMENTS(SUNANGDIST) NE 0 THEN SST = 0.08 ELSE SST = 0

   ;; THE WIDTH OF ONE PIXEL
   DXT=XWI*DT/(TM-T0)
   ;; THE STARTING POINT
   TST = T0-NPAD*DT+TLEN/2.D0-DT/2.D0

   IF (TST GE T0) THEN BEGIN
       IS = 0
       DXST = XWI*(TST-T0)/(TM-T0)
   ENDIF ELSE BEGIN
       IS=1
       DXST = XWI*(TST-T0)/(TM-T0) + DXT
   ENDELSE

   TVSCL,DYN(IS:*,*),XST+DXST,YST,XSIZE=FLOAT(NUMSTEP_PAD-IS)*DXT, $
     YSIZE=YWI,/NORMAL

   IF (KEYWORD_SET(LOG)) THEN BEGIN
       IF N_ELEMENTS(YLAXISV) NE 0 THEN BEGIN
           PLOT,TT,PERIOD,XSTYLE=1+4,YSTYLE=1,$
             /NOERASE, XRANGE=[T0,TM], $
             YTITLE='PERIOD [D]', YRANGE=[PMIN,PMAX], /YLOG, $
             POSITION=[XST,YST,XST+XWI,YST+YWI],/NODATA, CHARSIZE=CHSIZE, $
             YTICKS=N_ELEMENTS(YLAXISV)-1,YTICKV=YLAXISV
           XTICKFORMAT='NOLABEL'
       ENDIF ELSE BEGIN
           PLOT,TT,PERIOD,XSTYLE=1+4,YSTYLE=1,$
             /NOERASE, XRANGE=[T0,TM], $
             YTITLE='PERIOD [D]', YRANGE=[PMIN,PMAX], /YLOG, $
             POSITION=[XST,YST,XST+XWI,YST+YWI],/NODATA, CHARSIZE=CHSIZE
           XTICKFORMAT='NOLABEL'
       ENDELSE
   ENDIF ELSE BEGIN
       IF N_ELEMENTS(YLAXISV) NE 0 THEN BEGIN
           PLOT,TT,PERIOD,XSTYLE=1+4,YSTYLE=1,$
             /NOERASE, XRANGE=[T0,TM], $
             YTITLE='PERIOD [D]', YRANGE=[PMIN,PMAX], $
             POSITION=[XST,YST,XST+XWI,YST+YWI],/NODATA, CHARSIZE=CHSIZE, $
             YTICKS=N_ELEMENTS(YLAXISV)-1,YTICKV=YLAXISV
           XTICKFORMAT='NOLABEL'
       ENDIF ELSE BEGIN
           PLOT,TT,PERIOD,XSTYLE=1+4,YSTYLE=1,$
             /NOERASE, XRANGE=[T0,TM], $
             YTITLE='PERIOD [D]', YRANGE=[PMIN,PMAX], $
             POSITION=[XST,YST,XST+XWI,YST+YWI],/NODATA, CHARSIZE=CHSIZE
           XTICKFORMAT='NOLABEL'
       ENDELSE
   ENDELSE

   JWMJDAXIS,/MJD,/UPPER,LABELOFFSET=2450000,STRETCH=0.5
   JWDATEAXIS,/MJD,/NOLABEL,STRETCH=0.5


   IF (KEYWORD_SET(EPOCH)) THEN BEGIN
       ;; RIGHT: EPOCH FOLD
       XTIT='\CHI^2'
   ENDIF ELSE BEGIN
       ;; RIGHT: LOMB SCARGLE PERIODOGRAM
       XTIT='POWER'
       ;; X RANGE
       IF MAX(SIGNI) GT MAX(PX) THEN XMAX=MAX(SIGNI) ELSE XMAX=MAX(PX)
   ENDELSE


   IF (KEYWORD_SET(LOG)) THEN BEGIN
       PLOT,PX,PERIOD,POSITION=[XST+XWI,YST,0.90,YST+YWI],/NOERASE, $
         XTITLE=TEXTOIDL(XTIT),XSTYLE=1,YSTYLE=1,XRANGE=[MIN(PX),XMAX+1], $
         YTICKFORMAT='NOLABEL', CHARSIZE=CHSIZE, /YLOG
       IF N_ELEMENTS(YLAXISV) NE 0 THEN BEGIN
           AXIS,YAXIS=1,YSTYLE=1,YTITLE=TEXTOIDL('PERIOD [D]'), $
             CHARSIZE=CHSIZE,YTICKS=N_ELEMENTS(YLAXISV)-1,YTICKV=YLAXISV
       ENDIF ELSE BEGIN
           AXIS,YAXIS=1,YSTYLE=1,YTITLE=TEXTOIDL('PERIOD [D]'),CHARSIZE=CHSIZE
       ENDELSE

   ENDIF ELSE BEGIN
       PLOT,PX,PERIOD,POSITION=[XST+XWI,YST,0.90,YST+YWI],/NOERASE, $
         XTITLE=TEXTOIDL(XTIT),XSTYLE=1,YSTYLE=1,XRANGE=[MIN(PX),XMAX+1], $
         YTICKFORMAT='NOLABEL', CHARSIZE=CHSIZE
       IF N_ELEMENTS(YLAXISV) NE 0 THEN BEGIN
           AXIS,YAXIS=1,YSTYLE=1,YTITLE=TEXTOIDL('PERIOD [D]'), $
             CHARSIZE=CHSIZE,YTICKS=N_ELEMENTS(YLAXISV)-1,YTICKV=YLAXISV
       ENDIF ELSE BEGIN
           AXIS,YAXIS=1,YSTYLE=1,YTITLE=TEXTOIDL('PERIOD [D]'),CHARSIZE=CHSIZE
       ENDELSE
   ENDELSE

   ;; SIGNIFICANCE LEVEL
   IF (KEYWORD_SET(EPOCH)) THEN BEGIN
       ;; RIGHT: EPOCH FOLD
   ENDIF ELSE BEGIN
       ;; RIGHT: LOMB SCARGLE
       FOR I=0,N_ELEMENTS(SIGNI)-1 DO BEGIN
           OPLOT,[SIGNI[I],SIGNI[I]],[PMIN,PMAX],LINESTYLE=I+1

           IF (NOT KEYWORD_SET(NOLABEL)) THEN BEGIN
               XYOUTS,SIGNI[I]*1.01,PMIN+0.03*(PMAX-PMIN), $
                 STRTRIM(SIG[I]*100,2)+'%',$
                 ORIENTATION=180
           ENDIF
       END
   ENDELSE

   ;; BOTTOM: ASM COUNT RATE
   IF (KEYWORD_SET(COLOR)) THEN BEGIN
       YTIT='ASM COLOR'
   ENDIF ELSE BEGIN
       YTIT='ASM COUNT RATE'
   ENDELSE

   IF (N_ELEMENTS(RATERR) EQ 0) THEN BEGIN
       PLOT,TT,RR,XSTYLE=1+4,YSTYLE=1,$
         POSITION=[XST,0.1,XST+XWI,YST-SST], $
         YTITLE=YTIT, $
         /NOERASE, CHARSIZE=CHSIZE
       JWDATEAXIS,/MJD,/NOLABEL,STRETCH=0.5,/UPPER
       JWDATEAXIS,/MJD,STRETCH=0.5

       ;; SUN ANGULAR DISTANCE
       IF N_ELEMENTS(SUNANGDIST) NE 0 THEN BEGIN
           PLOT,TT,SUNANGDIST,XSTYLE=1+4,YSTYLE=1,  $
             POSITION=[XST,YST-SST,XST+XWI,YST], $
             YTITLE='SUN',/NOERASE,CHARSIZE=CHSIZE,YRANGE=[0,200],PSYM=3
           JWDATEAXIS,/MJD,/NOLABEL,STRETCH=0.5,/UPPER
       ENDIF

   ENDIF ELSE BEGIN
       IF(N_ELEMENTS(TBIN) NE 0)THEN BEGIN
           DTM = TT-SHIFT(TT,1)
           WDT = WHERE(DTM GT TBIN)
           IF (WDT[0] NE -1 ) THEN BEGIN
               FWDT = WDT(N_ELEMENTS(WDT)-1)
               IF(FWDT LT N_ELEMENTS(DTM)-1) THEN BEGIN
                   WDT = [0,WDT,N_ELEMENTS(DTM)-1]
               ENDIF ELSE BEGIN
                   WDT = [0,WDT]
               ENDELSE
           ENDIF ELSE BEGIN
               WDT = [0,N_ELEMENTS(TT)-1]
           ENDELSE
       ENDIF ELSE BEGIN

           WDT = [0,N_ELEMENTS(TT)-1]
       ENDELSE

       PLOT,TT,RR,XSTYLE=1+4,YSTYLE=1,$
         POSITION=[XST,0.1,XST+XWI,YST-SST], $
         YTITLE=YTIT, $
         /NOERASE, /NODATA, CHARSIZE=CHSIZE
       JWDATEAXIS,/MJD,/NOLABEL,STRETCH=0.5,/UPPER
       JWDATEAXIS,/MJD,STRETCH=0.5

       FOR I=1,N_ELEMENTS(WDT)-1 DO BEGIN
           IA = WDT(I-1)
           IB = WDT(I)-1
           IF(N_ELEMENTS(TBIN) NE 0)THEN BEGIN
               JWOPLOTERR, TT(IA:IB), RR(IA:IB), RATERR(IA:IB), $
                 PSYM=10, YMIN=0.
           ENDIF ELSE BEGIN
               JWOPLOTERR, TT(IA:IB), RR(IA:IB), RATERR(IA:IB), $
                 PSYM=4, YMIN=0.
           ENDELSE
       ENDFOR

       ;; SUN ANGULAR DISTANCE
       IF N_ELEMENTS(SUNANGDIST) NE 0 THEN BEGIN
           PLOT,TT,SUNANGDIST,XSTYLE=1+4,YSTYLE=1,  $
             POSITION=[XST,YST-SST,XST+XWI,YST], $
             YTITLE='SUN',/NOERASE,CHARSIZE=CHSIZE,YRANGE=[0,200],PSYM=3
           JWDATEAXIS,/MJD,/NOLABEL,STRETCH=0.5,/UPPER
       ENDIF
   ENDELSE

   CLOSE_PRINT,GHOST=GHOST

END





