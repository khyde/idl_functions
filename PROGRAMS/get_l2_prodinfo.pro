; $ID:	GET_L2_PRODINFO.PRO,	2020-06-30-17,	USER-KJWH	$

 PRO GET_L2_PRODINFO, OVERWRITE=overwrite
;+
; NAME:
;       Get the L2 PRODUCT info from a SeaDAS generated L2 file
;
; PURPOSE:
;				Read a L2 netcdf and create GLOBAL product info
;
; PROCEDURE:
;       
;
;	INPUT KEYWORDS:
;	  
;	OPTIONAL KEYWORDS  
;	 
;
;	RESTRICTIONS:
;		
;
;	EXAMPLE:
;  
;
; MODIFICATION HISTORY:
;       Written August 01, 2016 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;       AUG 02, 2016 - KJWH: Now removing the IMAGE from the structure to make the files smaller
;       AUG 29, 2016 - KJWH: Changed the GLOBAL directory to !S.GLOBAL_PRODS so they are easier to find 
;       FEB 15, 2017 - KJWH: Updated the MUR and AVHRR blocks
;       JUL 24, 2017 - KJWH: Removed REPRO from the directory name
;       SEP 08, 2017 - KJWH: Added SMODISA and SMODIST sensors and specific code to generate the GLOBAL files for the SST prods
;-

  ROUTINE_NAME='GET_L2_PRODINFO'
  PRINT, 'Running: '+ROUTINE_NAME

; ===> DELIMITERS
  SL    = PATH_SEP()

; ===> DEFAULTS
  IF NONE(SENSORS)    THEN SENSORS    = ['OCCCI'];,'SMODIST'];,'MODISA','MODIST','MUR','AVHRR','SEAWIFS']
  IF NONE(DATEDOY)    THEN DATEDOY    = '2006089'
  IF NONE(DATE)       THEN DATE       = '20060330' ; Need the DATE for the MUR data
 
; ===> NARRAGANSETT 1KM PROCDESSING BOUNDARIES
  LATMIN = 17.92
  LATMAX = 55.4
  LONMIN = -97.8
  LONMAX = -43.8

  ; ===> LOOP THROUGH SENSORS
  FOR STH=0, N_ELEMENTS(SENSORS)-1 DO BEGIN
    SENSOR = SENSORS(STH)
    IF SENSOR EQ 'MODIS' THEN SENSOR = 'MODISA'
    CASE SENSOR OF
      'MODISA':  BEGIN & SERVER = !S.OC  & PREFIX = 'A' & REPRO = 'R2015' & SUFFIX = 'L2_LAC_SUB_OC' & END
      'SEAWIFS': BEGIN & SERVER = !S.OC  & PREFIX = 'S' & REPRO = 'R2015' & SUFFIX = 'L2_MLAC_OC'    & END
      'MUR':     BEGIN & SERVER = !S.SST & PREFIX = ''  & REPRO = ''      & SUFFIX = 'JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1' & END
      'AVHRR':   BEGIN & SERVER = !S.SST & PREFIX = ''  & REPRO = ''      & SUFFIX = '' & END
      'SMODISA': BEGIN & SERVER = !S.SST & PREFIX = 'A' & REPRO = 'R2015' & SUFFIX = 'L2_LAC' & END
      'SMODIST': BEGIN & SERVER = !S.SST & PREFIX = 'T' & REPRO = 'R2015' & SUFFIX = 'L2_LAC' & END
      'CZCS':    BEGIN & SERVER = !S.OC  & PREFIX = 'C' & REPRO = 'R2015' & SUFFIX = '' & END
      'OCTS':    BEGIN & SERVER = !S.OC  & PREFIX = 'O' & REPRO = 'R2015' & SUFFIX = '' & END
      'VIIRS':   BEGIN & SERVER = !S.OC  & PREFIX = 'V' & REPRO = 'R2016' & SUFFIX = '' & END
      'MERIS':   BEGIN & SERVER = !S.OC  & PREFIX = 'M' & REPRO = 'R2015' & SUFFIX = '' & END
      'OCCCI':   BEGIN & SERVER = !S.OC  & PREFIX = ''  & REPRO = 'V3_1'  & SUFFIX = '' & END
    ENDCASE

    IF SENSOR EQ 'OCCCI' THEN BEGIN
      DIR = SERVER + SENSOR + SL + 'SIN' + SL + 'NC' + SL
      DIRS = FILE_SEARCH(DIR + '*', /MARK_DIRECTORY)
      FOR D=0, N_ELEMENTS(DIRS)-1 DO BEGIN
        FILE  = FIRST(FLS(DIRS(D) + 'E*')) & IF N_ELEMENTS(FILE) NE 1 THEN STOP
        SI    = SENSOR_INFO(FILE)
        CPROD = STR_BREAK(SI.NC_PROD,';')
        PRODS = STR_BREAK(SI.PRODS,';') 
        BRK   = STR_BREAK(PRODS,'-')
        PRODS = BRK(*,0)
        IF FILE_MAKE(FILE,!S.GLOBAL_PRODS + SENSOR + '-' + PRODS + '-GLOBAL.SAV',OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
        G = READ_NC(FILE,PROD='GLOBAL')
        GSTRUCT = G.GLOBAL
        GSTRUCT = G.GLOBAL
        GSTRUCT= STRUCT_REMOVE(GSTRUCT,['CREATION_DATE','DATE_CREATED','TIME_COVERAGE_START','TIME_COVERAGE_STOP','GEOSPATIAL_LAT_MIN','GEOSPATIAL_LAT_MAX','GEOSPATIAL_LON_MIN','GEOSPATIAL_LON_MAX','COMMENT'])
        FOR P=0, N_ELEMENTS(PRODS)-1 DO BEGIN
          APROD = PRODS(P)
          NPROD = CPROD(P)
          GFILE = !S.GLOBAL_PRODS + SENSOR + '-' + APROD + '-GLOBAL.SAV'
          IF FILE_MAKE(FILE,GFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
          STR = READ_NC(FILE,PROD=NPROD,/LOOK)
          STRUCT = STR.SD.(0)
          STRUCT = STRUCT_REMOVE(STRUCT,['IMAGE','COORDINATES','GRID_MAPPING','_FILLVALUE'])
          STRUCT = CREATE_STRUCT(GSTRUCT,STRUCT)
          SAVE, STRUCT, FILENAME=GFILE
          PFILE, GFILE
        ENDFOR
      ENDFOR
    ENDIF
    
    IF SENSOR EQ 'MUR' THEN BEGIN
      DIR = SERVER + SENSOR + 'L4' + SL + 'NC' + SL
      FILE = FILE_SEARCH(DIR + DATE + '*' + SUFFIX + '*.nc')
      GFILE = !S.GLOBAL_PRODS + SENSOR + '-SST-GLOBAL.SAV'
      IF FILE_MAKE(FILE,GFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      G = READ_NC(FILE[0],PROD='GLOBAL')
      GSTRUCT = G.GLOBAL
      GSTRUCT= STRUCT_REMOVE(GSTRUCT,['DATE_CREATED','START_TIME','STOP_TIME','TIME_COVERAGE_START','TIME_COVERAGE_STOP','NORTHERNMOST_LATITUDE','SOUTHERNMOST_LATITUDE','EASTERNMOST_LONGITUDE','WESTERNMOST_LONGITUDE','COMMENT'])
      D = READ_NC(FILE[0],PROD='ANALYSED_SST',/LOOK)
      STRUCT = D.SD.ANALYSED_SST
      STRUCT = STRUCT_REMOVE(STRUCT,['IMAGE','SOURCE','CONVENTIONS','VALID_MIN','VALID_MAX','_FILLVALUE','SCALE_FACTOR'])
      STRUCT.UNITS = 'Degrees Celsius'
      STRUCT = CREATE_STRUCT(GSTRUCT,STRUCT)
      SAVE, STRUCT, FILENAME=GFILE      
      CONTINUE
    ENDIF
    
    IF SENSOR EQ 'AVHRR' THEN BEGIN
      DIR = !S.DATASETS + 'SST-AVHRR-4KM' + SL + 'AVHRR' + SL + 'NC' + SL
      FILE = FILE_SEARCH(DIR + DATE + '*' + SUFFIX + '*.nc')
      GFILE = !S.GLOBAL_PRODS + SENSOR + '-SST-GLOBAL.SAV'
      IF FILE_MAKE(FILE,GFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      G = READ_NC(FILE[0],PROD='GLOBAL')
      GSTRUCT = G.GLOBAL
      GSTRUCT= STRUCT_REMOVE(GSTRUCT,['DATE_CREATED','START_TIME','STOP_TIME','TIME_COVERAGE_START','TIME_COVERAGE_STOP','NORTHERNMOST_LATITUDE','SOUTHERNMOST_LATITUDE','EASTERNMOST_LONGITUDE','WESTERNMOST_LONGITUDE','COMMENT'])
      D = READ_NC(FILE[0],PROD='SEA_SURFACE_TEMPERATURE',/LOOK)
      STRUCT = D.SD.SEA_SURFACE_TEMPERATURE
      STRUCT = STRUCT_REMOVE(STRUCT,['IMAGE','SOURCE','PLATFORM','VALID_MIN','VALID_MAX','_FILLVALUE','ADD_OFFSET','SCALE_FACTOR'])
      STRUCT.UNITS = 'Degrees Celsius'
      STRUCT = CREATE_STRUCT(GSTRUCT,STRUCT)
      SAVE, STRUCT, FILENAME=GFILE
      CONTINUE
    ENDIF

    IF SENSOR EQ 'SMODISA' OR SENSOR EQ 'SMODIST' THEN BEGIN
      PRODS = ['SST','SST4']
      RES   = ['1KM'];,'4KM']
      FOR R=0, N_ELEMENTS(RES)-1 DO BEGIN
        FOR D=0, N_ELEMENTS(PRODS)-1 DO BEGIN
          DATASET = 'SST-' + STRMID(SENSOR,1,5) + '-' + RES(R)
              
          DIR     = SERVER + DATASET + SL
          L2_DIR  = DIR + 'L2' + SL + 'NC' + SL
          
          FILES = FILE_SEARCH(L2_DIR + PREFIX + DATEDOY + '*' + SUFFIX + '_' + PRODS(D) + '.nc')
          
          FP = PARSE_IT(FILES,/ALL)
          FILE = FILES[WHERE(FP.SIZE EQ MAX(FP.SIZE))]
          GFILE = !S.GLOBAL_PRODS + STRMID(SENSOR,1) + '-' + PRODS(D) + '-GLOBAL.SAV'
          IF FILE_MAKE(FILE,GFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
             
          G = READ_NC(FILE,PRODS=['GLOBAL',PRODS(D)])
          GSTRUCT = G.GLOBAL
          GSTRUCT=STRUCT_REMOVE(GSTRUCT,['PRODUCT_NAME','ORBIT_NUMBER','HISTORY','ID','DATE_CREATED','EQUATORCROSSINGDATETIME','EQUATORCROSSINGLONGITUDE','TIME_COVERAGE_START','TIME_COVERAGE_END',$
            'START_CENTER_LONGITUDE','START_CENTER_LATITUDE','END_CENTER_LATITUDE','END_CENTER_LONGITUDE','NORTHERNMOST_LATITUDE','SOUTHERNMOST_LATITUDE','EASTERNMOST_LONGITUDE','WESTERNMOST_LONGITUDE',$
            'GEOSPATIAL_LAT_MAX','GEOSPATIAL_LAT_MIN','GEOSPATIAL_LON_MAX','GEOSPATIAL_LON_MIN'])
          STRUCT = G.SD.(0)
          STRUCT = STRUCT_REMOVE(STRUCT,['_FILE','_NDIMESIONS','_DIMENSIONS','_NELEMENTS','_DATA','DIMENSION_LIST','IMAGE'])
          STRUCT = CREATE_STRUCT(GSTRUCT,STRUCT)
          PFILE, GFILE
          SAVE, STRUCT, FILENAME=GFILE              
        ENDFOR
      ENDFOR
      CONTINUE
    ENDIF

    DATASET = 'OC-' + SENSOR + '-1KM'
    DIR     = SL + SERVER + SL + 'DATASETS' + SL + DATASET + SL
    L2_DIR  = DIR + 'L2' + SL
    GLOBAL  = !S.GLOBAL_PRODS
    DIR_TEST, [GLOBAL]

    FILES = FILE_SEARCH(L2_DIR + PREFIX + DATEDOY + '*' + SUFFIX)
    FP = PARSE_IT(FILES,/ALL)
    FILE = FILES[WHERE(FP.SIZE EQ MAX(FP.SIZE))]
    G = READ_NC(FILE,PRODS='GLOBAL')
    GSTRUCT = G.GLOBAL
    GSTRUCT=STRUCT_REMOVE(GSTRUCT,['PRODUCT_NAME','ORBIT_NUMBER','HISTORY','ID','DATE_CREATED','EQUATORCROSSINGDATETIME','EQUATORCROSSINGLONGITUDE','TIME_COVERAGE_START','TIME_COVERAGE_END',$
      'START_CENTER_LONGITUDE','START_CENTER_LATITUDE','END_CENTER_LATITUDE','END_CENTER_LONGITUDE','NORTHERNMOST_LATITUDE','SOUTHERNMOST_LATITUDE','EASTERNMOST_LONGITUDE','WESTERNMOST_LONGITUDE',$
      'GEOSPATIAL_LAT_MAX','GEOSPATIAL_LAT_MIN','GEOSPATIAL_LON_MAX','GEOSPATIAL_LON_MIN'])
    D = READ_NC(FILE,/LOOK)
    PRODS = D.SD.GEOPHYSICAL_DATA
    
    FOR PTH=0, N_ELEMENTS(PRODS)-1 DO BEGIN
      GFILE = GLOBAL + SENSOR + '-' + STRUPCASE(PRODS(PTH)) + '-GLOBAL.SAV'
      IF FILE_MAKE(FILE,GFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      D = READ_NC(FILE,PRODS=[PRODS(PTH)])
      STRUCT = D.SD.(0)
      STRUCT = STRUCT_REMOVE(STRUCT,['_FILE','_NDIMESIONS','_DIMENSIONS','_NELEMENTS','_DATA','DIMENSION_LIST','IMAGE'])
      STRUCT = CREATE_STRUCT(GSTRUCT,STRUCT)
      POF, PTH, PRODS, OUTTXT=_POFTXT,/QUIET,/NOPRO
      PFILE, GFILE, _POFTXT=_POFTXT
      SAVE, STRUCT, FILENAME=GFILE
    ENDFOR ; PRODS  
	ENDFOR ; SENSORS


END; #####################  End of Routine ################################
