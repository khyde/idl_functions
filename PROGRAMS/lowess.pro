; $ID:	LOWESS.PRO,	2020-06-30-17,	USER-KJWH	$
;#########################################################################################
FUNCTION LOWESS, X, Y, FRACTION=FRACTION, WIDTH=WIDTH, DEG=DEG, NOISE=NOISE, EXTEND=EXTEND
;
;+
; NAME:
;	LOWESS
;
; PURPOSE:
;	ROBUST SMOOTHING OF 1D DATA
;
; CALLING SEQUENCE:
;	YSMOOTH = LOWESS(X,Y,FRACTION=FRACTION, DEG=DEG, NOISE=NOISE, EXTEND=EXTEND)
;
; INPUT ARGUMENTS:
;	X = X VALUES
;	Y = Y VALUES, TO BE SMOOTHED
;	FRACTION = THE SMOOTHING PARAMETER, FRACTION, IS A NUMBER BETWEEN (DEG+1)/N AND 1,THE FRACTION OF THE TOTAL NUMBER OF DATA POINTS TO BE USED FOR EACH ITERATIVE FITTING
;	DEG   = DEGREE OF POLYNOMIAL TO BE USED WITHIN THE WINDOW (1 OR 2 RECOMMENDED)
;					 (LOWESS USES A 1 DEGREE POLYNOMIAL, LOESS A 2 DEGREE POLYNOMIAL)
; THE SUBSET OF DATA USED IN EACH WEIGHTED LEAST SQUARES FIT IS MADE UP OF THE NF
;	(ROUNDED TO THE NEXT LARGEST INTEGER) POINTS WHOSE EXPLANATORY VARIABLES VALUES
;  ARE CLOSEST TO THE POINT WHERE THE RESPONSE IS BEING ESTIMATED.
;
;
; NOTES:
; (FROM HTTP://WWW.ITL.NIST.GOV/DIV898/HANDBOOK/PMD/SECTION1/PMD144.HTM)
;	LOESS, ORIGINALLY PROPOSED BY CLEVELAND (1979) AND FURTHER DEVELOPED BY CLEVELAND AND DEVLIN (1988),
;	SPECIFICALLY DENOTES A METHOD THAT IS (SOMEWHAT) MORE DESCRIPTIVELY KNOWN AS LOCALLY WEIGHTED POLYNOMIAL
;	REGRESSION. AT EACH POINT IN THE DATA SET A LOW-DEGREE POLYNOMIAL IS FIT TO A SUBSET OF THE DATA WITH EXPLANATORY
;	VARIABLE VALUES NEAR THE POINT WHOSE RESPONSE IS BEING ESTIMATED. THE POLYNOMIAL IS FIT USING WEIGHTED LEAST SQUARES,
;	GIVING MORE WEIGHT TO POINTS NEAR THE POINT WHOSE RESPONSE IS BEING ESTIMATED AND LESS WEIGHT TO POINTS FURTHER
;	AWAY. THE VALUE OF THE REGRESSION FUNCTION FOR THE POINT IS THEN OBTAINED BY EVALUATING THE LOCAL POLYNOMIAL USING
;	THE EXPLANATORY VARIABLE VALUES FOR THAT DATA POINT. THE LOESS FIT IS COMPLETE AFTER REGRESSION FUNCTION VALUES HAVE
;	BEEN COMPUTED FOR EACH OF THE N DATA POINTS IN THE DATA SET. MANY OF THE DETAILS OF THIS METHOD, SUCH AS THE DEGREE OF
;	THE POLYNOMIAL MODEL AND THE WEIGHTS, ARE FLEXIBLE.
;
;
;CLEVELAND, W.S. (1979) "ROBUST LOCALLY WEIGHTED REGRESSION AND SMOOTHING SCATTERPLOTS," JOURNAL OF THE AMERICAN STATISTICAL ASSOCIATION, VOL. 74, PP. 829-836
;CLEVELAND, W.S. AND DEVLIN, S.J. (1988) "LOCALLY WEIGHTED REGRESSION: AN APPROACH TO REGRESSION ANALYSIS BY LOCAL FITTING," JOURNAL OF THE AMERICAN STATISTICAL ASSOCIATION, VOL. 83, PP. 596-610.
;
; PROGRAM PATTERNED AFTER: LOWESS.PRO,  H.T. FREUDENREICH, HSTX, 1/8/93
; J.O'REILLY  MAY 1,2002
;	AUG 08, 2002 - JEOR: ADDED WIDTH (NUMBER OF POINTS TO SMOOTH)
; FEB 19, 2003 - JEOR: DISCOVERED DIFFERENCES BETWEEN INTERCEPT AND SLOPE WHEN USING POLY_FIT VS REGRESS
;						   				 WHENDEG = 1 THE REGRESS GIVES RESULTS EXACTLY EQUAL TO DLOWESS_J.FOR BUT POLY_FIT DOES NOT (CLOSE)
;										   IF DEG EQ 1 THEN REGRESS ELSE POLY_FIT IS USED
;				               SHOULD NORMALLY USE DEG = 1
;	JAN 13, 2013 - JEOR: COPIED FROM LOWEDD.PRO, MODIFIED TO USE CONVOL
;	JUL 14, 2014 - JEOR: UPDATED FUNCTIONS NONE ETC.
;	FEB 22, 2107 - KJWH: ADDED X AND Y ARRAY ERROR MESSAGES
;	                     UPDATED FORMATTING
;#########################################################################################
;-

;*************************
  ROUTINE_NAME = 'LOWESS'
;*************************

	IF N_ELEMENTS(X) LT 2 THEN MESSAGE,'ERROR: MUST PROVIDE AN ARRAY OF X VALUES'
	IF N_ELEMENTS(Y) LT 2 THEN MESSAGE,'ERROR: MUST PROVIDE AN ARRAY OF Y VALUES'
	IF N_ELEMENTS(FRACTION) NE 1 THEN FRACTION = 0.2 ; USE 20% OF DATA FOR EACH FIT
	IF NONE(DEG) THEN DEG = 1
	IF KEY(EXTEND) THEN _EXTEND = EXTEND ELSE _EXTEND = 2 ; DEFAULT IS TO ADD 2 TO EITHER SIDE OF WINDOW
	EPS = 1.0E-20

  INDEX=LINDGEN(N_ELEMENTS(X))
	NX=N_ELEMENTS(X)
	NTHX = NX-1L
	NOISE=FLTARR(N_ELEMENTS(X))
	Z=DOUBLE(Y)
	Z(*)=MISSINGS(Z)
	NPTS = ROUND(NX*FRACTION) > 2

  IF N_ELEMENTS(WIDTH) EQ 1 THEN BEGIN ; ===> IF WIDTH PROVIDED THEN PREEMPT F
  	IF WIDTH GT 0 THEN NPTS = (WIDTH > 2)
  ENDIF

; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
	FOR I=0L,NX -1L DO BEGIN
	  XP = DOUBLE(X(I))
		_NPTS = NPTS  & WIDENED=0  & 	TRY = 0L

  	TRY_AGAIN:

     DISTANCE=ABS(X-XP) ; ===> GET THE NEAREST NEIGHBORS
     S=SORT(DISTANCE) & SUBS = INDEX(S(0:_NPTS-1L)) ; ===> SORT BASED ON DISTANCE OF X FROM XP
     OK = WHERE(DISTANCE EQ 0,COUNT) ; ===> IF HAVE MANY IDENTICAL X VALUES FOR AN XP THEN USE ALL OF THEM
     IF COUNT GE 2 THEN BEGIN ; WILL ALWAYS HAVE 1 X (XP) WHERE DIST IS ZERO
       SUBS=[SUBS,OK]
       S=SORT(SUBS) & SUBS=SUBS(S) & U=UNIQ(SUBS) & SUBS=SUBS(U)
     ENDIF

     N_SUBS=N_ELEMENTS(SUBS)
     DISTANCE=DISTANCE(SUBS)
		 XX = DOUBLE(X(SUBS))
		 YY = DOUBLE(Y(SUBS))

  	IF N_SUBS LE DEG+1 THEN BEGIN ; ===> ENSURE THAT NUMBER OF POINTS IS AT LEAST EQUAL TO THE DEG+1 OF THE POLYNOMIAL
  	  _NPTS = _NPTS + _EXTEND
  	  TRY = TRY+1L
  	 	IF TRY GE 100 THEN STOP ELSE GOTO, TRY_AGAIN
		ENDIF

  	IF MAX(YY) EQ MIN(YY) THEN BEGIN ; ===> IF ALL THE YY'S WITHIN THE WINDOW ARE IDENTICAL THEN NO NEED TO FIT
     Z(I)=YY[0]
     NOISE(I)=0.0
     CONTINUE
  	ENDIF

    IF MAX(DISTANCE) EQ 0 THEN BEGIN ; ===> CHECK IF THE MOST DISTANT OF THE NEAREST NEIGHBORS (XX) IS SAME AS  XP
		  Z(I) = MEAN(YY) ;     IF ALL XX'S ARE THE SAME THEN BEST ESTIMATE FOR Z IS MEAN OF YY
		ENDIF ELSE BEGIN
  		W_DIST = WEIGHT_TRICUBE(XX,XP) ; ===> COMPUTE THE WEIGHTS FOR EACH XX ACCORDING TO THE DISTANCES OF XX FROM XP
			IF TOTAL(W_DIST(1:*)) EQ 0 THEN BEGIN ; ===> IF ALL DISTANCE WEIGHTS AWAY FROM XP ARE ZERO THEN Z(I) = YY(0)
         Z(I) =  YY[0]
			ENDIF ELSE BEGIN
    		WEIGHTS = SQRT(1/W_DIST)
				_DEG = DEG
				IF _DEG EQ 1 THEN BEGIN ; ===> COMPUTE THE WEIGHTED POLYNOMIAL FIT:
					COEFFSR = REGRESS( XX, YY, CONST=CONST,MEASURE_ERRORS =WEIGHTS, /DOUBLE, YFIT=YFIT )
				  COEFFS = [CONST,COEFFSR]
				ENDIF ELSE BEGIN
					COEFFS=POLY_FIT(XX,YY,_DEG,MEASURE_ERRORS=WEIGHTS,YFIT=YFIT,STATUS=STATUS)
				ENDELSE

				IF N_ELEMENTS(COEFFS) NE (DEG+1)  THEN BEGIN ; ===> CHECK STATUS OF RESULTS FROM POLY_FIT
					PRINT,'I= '+NUM2STR(I)+ ' EXTENDING'
  	  		_NPTS = _NPTS + _EXTEND
  	   		IF TRY GE 100 THEN STOP ELSE GOTO, TRY_AGAIN
				ENDIF
			  OK_XP = WHERE(SUBS EQ I)
    		Z(I) = YFIT(OK_XP[0])
      ENDELSE ; IF TOTAL(W_DIST) LE 0.0001 THEN BEGIN
		ENDELSE ;  	IF MAX(DISTANCE) EQ 0 THEN BEGIN

    NEXT:
  ENDFOR

  DONE:
  RETURN,Z
END; #####################  END OF ROUTINE ################################
