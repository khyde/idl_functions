; $ID:	PP_OPAL_MAIN.PRO,	2020-07-08-15,	USER-KJWH	$
;#############################################################################################################
	PRO PP_OPAL_MAIN
	
;  PRO PP_OPAL_MAIN
;+
; NAME:
;		PP_OPAL_MAIN
;
; PURPOSE: THIS PROGRAM IS A MAIN TO RUN PP_OPAL AND OUTPUT PPD SAVEFILES 
;
; OUTPUTS: A PPD SAVEFILE FOR EACH SET OF CHL,PAR,SST AND ADG_443 FILES
;
;
; MODIFICATION HISTORY:
;			WRITTEN MAY 4,2013 J.O'REILLY
;			MAY 8,2013,JOR  DIR =GET_DIR()
;     MAY 12,2013,JOR: ADDED STEPS DO_PP_DATES_2SAVE,DO_MAKE_TS_CSV
;     MAR 3,2014,JOR STREAMLINED AND UPDATED [GET_SMI]	
;     MAR 4,2014,JOR, ERROR FIXED: IMAGE=PPD,	TO  IMAGE=PPD_OPAL
;			
;			
;#################################################################################
;-
;*****************************
ROUTINE_NAME  = 'PP_OPAL_MAIN'
;*****************************
;KX


;CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
;CCCCC     CONSTANTS     CCCCC
;CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
DO_PNG = 1
DIR =GET_SMI()
DIR_OUT = DIR.PP
MAP = 'SMI' & MAP_IN = MAP & MAP_OUT = 'SMI' 
SMI_PX = 4320 & SMI_PY = 2160
BATHY_FILE=!S.DATA +'SRTM30-SMI-PXY_4320_2160-BATHY.SAVE'
BOTTOM_DEPTH = STRUCT_SD_READ(BATHY_FILE) & PRINT,'MIN BOTTOM_DEPTH:  ' +STR_COMMA(MIN(BOTTOM_DEPTH,/NAN)),' MAX BOTTOM_DEPTH: '+STR_COMMA(MAX(BOTTOM_DEPTH,/NAN))
LAND_MASK = READ_LANDMASK(MAP=MAP,PX=PX,PY=PY,/LAND)
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;SSSSS     SWITCHES     SSSSS
DO_LME_PPY_CSV  =  0
DO_PP_OPAL   = 2
DO_MARCH30_1998 = 1  ; 
DATE_RANGE = ['20000101','20001231']
IF DO_MARCH30_1998 EQ 1 THEN DATE_RANGE = ['19980330','19980330']
;SSSSS     SWITCHES     SSSSS

;****************************
IF DO_PP_OPAL GE 1 THEN BEGIN
;****************************
  OVERWRITE = DO_PP_OPAL EQ 2 & IF DO_PP_OPAL EQ 3 THEN STOP
   
  ;===> GET THE  INPUT STATS MEAN FILES:
  CHL_FILES = FILE_SEARCH(DIR.STATS,'D_*CHLOR_A-MEAN.SAVE') & PN,CHL_FILES,'CHL_FILES' & P,FIRST(CHL_FILES) & P,LAST(CHL_FILES)
  PAR_FILES = FILE_SEARCH(DIR.STATS,'D_*PAR-MEAN.SAVE') & PN,PAR_FILES,'PAR_FILES' & P,FIRST(PAR_FILES) & P,LAST(PAR_FILES)
  SST_FILES = FILE_SEARCH(DIR.STATS,'D_*PAT-9KM-SMI-SST-N_11UM-INTERP-TS_IMAGES-MEAN.SAVE') & PN,SST_FILES,'SST_FILES' & P,FIRST(SST_FILES) & P,LAST(SST_FILES)
  ADG_443_FILES=FILE_SEARCH(DIR.STATS,'D_*ADG_443-MEAN.SAVE') & PN,ADG_443_FILES,'ADG_443_FILES' & P,FIRST(ADG_443_FILES) & P,LAST(ADG_443_FILES)  
  
  
  ;===> PARSE FILES AND EXTRACT DATES:
  FN_CHL      = FILE_PARSE(CHL_FILES)          & DATE_CHL =      STRMID(PERIOD_2DATE(FN_CHL.FIRST_NAME),0,8)
  FN_PAR      = FILE_PARSE(PAR_FILES)          & DATE_PAR =      STRMID(PERIOD_2DATE(FN_PAR.FIRST_NAME),0,8)
  FN_SST      = FILE_PARSE(SST_FILES)          & DATE_SST =      STRMID(PERIOD_2DATE(FN_SST.FIRST_NAME),0,8)
  FN_ADG_443  = FILE_PARSE(ADG_443_FILES)      & DATE_ADG_443 =  STRMID(PERIOD_2DATE(FN_ADG_443.FIRST_NAME),0,8)
  
  ;===> CONCATENATE ALL FILES IN A SPECIFIC ORDER [ REQUIRED FOR WHERE_SETS TO WORK PROPERLY]
  FILES = [CHL_FILES,PAR_FILES,SST_FILES,ADG_443_FILES]
  
  SETS= WHERE_SETS([DATE_CHL,DATE_PAR,DATE_SST,DATE_ADG_443]) & PN,SETS,'SETS'
  OK = WHERE(SETS.N EQ 4,COUNT) & SETS=SETS[OK]  & PN,SETS,'SETS OF 4'
  
  DATES = SETS.VALUE & PERIOD = 'D_' + DATES
   
  IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
    JD_RANGE = DATE_2JD(DATE_RANGE)
    JD = DATE_2JD(DATES)
    OK_JD = WHERE(JD GE JD_RANGE[0] AND JD LE JD_RANGE[1],COUNT_JD)
    IF COUNT_JD GE 1 THEN BEGIN
      SETS = SETS(OK_JD)
      PERIOD= PERIOD(OK_JD)
    ENDIF
    
  ENDIF;IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
    
;  ===> GET ALL OUTPUT FILE NAMES    
  PP_FILES = DIR_OUT + PERIOD +'-'+ MAP_OUT+ '-OPAL-PPD.SAVE'
 
   SUBS = WHERE(FILE_TEST(PP_FILES) EQ 0,COUNT,NCOMPLEMENT = NCOMPLEMENT,COMPLEMENT =COMPLEMENT)
   IF OVERWRITE EQ 1 THEN  SUBS = LINDGEN(N_ELEMENTS(PP_FILES))
   
   IF COUNT GE 1 THEN SETS=SETS(SUBS)
; ===>  REMAINING TO PROCESS
      REPORT,STRTRIM(NCOMPLEMENT,2) +'   ' + MAP_OUT+'  PPD FILES COMPLETED'
      REPORT,STRTRIM(COUNT,2) + '   ' + MAP_OUT + '  PPD FILES REMAINING TO BE MADE'
     TRANSFORMATION = '' ; STORED IN SAVE FILE 
  IF DO_MARCH30_1998 EQ 1 THEN BEGIN
    OK = WHERE(SETS.VALUE EQ '19980330',COUNT)    
    IF COUNT EQ 1 THEN SETS = SETS[OK]
  ENDIF;IF DO_MARCH30_1998 EQ 1 THEN BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _SET = 0,N_ELEMENTS(SETS)-1 DO BEGIN
  IF _SET EQ 0 THEN INITIALIZE =1 ELSE INITIALIZE = 0 & PRINT,'INITIALIZE=',INITIALIZE & WAIT, 1
  POF,_SET,SETS
  SET = SETS(_SET)
  SUBS = WHERE_SETS_SUBS(SET)

;$$$$$    READ THE DATA FILES     $$$$$  PRODS = ['CHLOR_A', 'PAR','SST','ADG_443']
  
  CHL_FILE = FILES(SUBS[0]) &       CHL_SAT = STATS_READ(CHL_FILE) & PFILE,CHL_FILE,/R
  PAR_FILE = FILES(SUBS[1]) &       PAR     = STATS_READ(PAR_FILE) & PFILE,PAR_FILE,/R
  SST_FILE = FILES(SUBS(2))&        SST     = STATS_READ(SST_FILE) & PFILE,SST_FILE,/R
  ADG_443_FILE = FILES(SUBS(3)) &   ADG_443 = STATS_READ(ADG_443_FILE) & PFILE,ADG_443_FILE,/R
  
  
;  ;===> INFO FOR CONSTRUCTING SAVEFILE
   PERIOD_TXT='D_' + SET.VALUE 
   PP_FILE = DIR_OUT + PERIOD_TXT +'-'+ MAP_OUT+ '-OPAL-PPD.SAVE'
  INFILE = [CHL_FILE,PAR_FILE,SST_FILE,ADG_443_FILE,BATHY_FILE]
  COVERAGE='9KM'
  ALG= 'OPAL'
  DATA_UNITS=UNITS('PPD')
  KX = ADG_443
  ;;KX = A_CDOM_300_2_A_CDOM_443(KX)
  ; ####### MAKE ARRAY TO HOLD PPD FROM OPAL #####
  PPD_OPAL = REPLICATE(MISSINGS(0.0),[SMI_PX,SMI_PY])
  
;#########   FIND GOOD DATA   ################
      OK_OPAL = WHERE($
      LAND_MASK EQ 0 AND $
      CHL_SAT NE MISSINGS(CHL_SAT) AND $
      PAR NE MISSINGS(PAR) AND $
      SST NE MISSINGS(SST) AND $
      KX NE MISSINGS(KX) AND $
      BOTTOM_DEPTH NE MISSINGS(BOTTOM_DEPTH) , $
      COUNT_OPAL) 
;|||||||||||||||||||||||||||||||||||||||||||||||| 
      IF N_ELEMENTS(INITIALIZE) EQ 0 THEN INITIALIZE = 1 ELSE INITIALIZE = 0
      PRINT,'INITIALIZE  =  ' + ROUNDS(INITIALIZE) ;& WAIT,3
TIMER
PPD= PP_OPAL(INITIALIZE = INITIALIZE, $
      ;   *** REQUIRED INPUT ***          (ONE VALUE OR ARRAY, SST_SAT AND PAR MUST MATCH SIZE OF CHL_SAT)
          CHL_SAT       = CHL_SAT(OK_OPAL),        $; REMOTELY-SENSED CHLOROPHLL CONCENTRATION (MG M-3)
          PAR           = PAR(OK_OPAL),            $; PAR (EINSTEIN M-2 D-1)
          SST           = SST(OK_OPAL),            $; SEA SURFACE TEMPERATURE (DEGREES C)
          KX            = KX(OK_OPAL),             $; ABSORPTION BY 'OTHER: I.E. CDOM ABSORPTION AT 443NM'
          BOTTOM_DEPTH  = BOTTOM_DEPTH(OK_OPAL)); BOTTOM DEPTH (M)
 PPD_OPAL(OK_OPAL) = PPD
 TIMER,/STOP
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||      
      
  
  ;===> WRITE STRUCTURE
        STRUCT_SD_WRITE,PP_FILE,PROD='PPD',  ASTAT='DATA',$
                    IMAGE=PPD_OPAL,      MISSING_CODE=MISSINGS(PPD), $
                    MASK=MASK,        CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
                    SCALING=SCALING,  INTERCEPT=INTERCEPT,  SLOPE=SLOPE,TRANSFORMATION=TRANSFORMATION,$
                    DATA_UNITS=DATA_UNITS,PERIOD=PERIOD_TXT, $
                    SENSOR=SENSOR,$
                    SATELLITE=SATELLITE,$
                    COVERAGE=COVERAGE,$
                    ALG=ALG,$
                    INFILE=INFILE,$
                    NOTES=NOTES,ERROR=ERROR
TIMER,/STOP
P
IF DO_PNG GE 1 THEN BEGIN
 ; STRUCT_SD_2PNG,PP_FILE,/ADD_COLORBAR,/ADD_LAND,OVERWRITE=OVERWRITE
  PRODS_2PNG,PP_FILE,STAT='MEAN',DIR_OUT=!S.DIR_PROGRAMS,OVERWRITE=OVERWRITE
  PFILE,PP_FILE,/W
ENDIF;IF DO_PNG GE 1 THEN BEGIN
      
ENDFOR;FOR _SET = 0,N_ELEMENTS(SETS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;IF DO_MARCH30_1998 EQ 1 THEN BEGIN
;  JAY_PP=PPD_OPAL
;  JAY_PP_NORTHEAST = GET_LME_DATA(JAY_PP,7) & S=STATS(JAY_PP_NORTHEAST) 
;  
;  PRINT,'STATS -JAY  ',S.N,S.MEAN
;  PLINES,2
;  PRINT, ' KIM  396  1.3572435  JAY  382 1.3556662'
; 
; STOP 
;ENDIF;IF DO_MARCH30_1998 EQ 1 THEN BEGIN
;  
ENDIF;IF DO_PP_OPAL GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||



;**************************************
IF DO_LME_PPY_CSV GE 1 THEN BEGIN
;**************************************
  DB= IDL_RESTORE('F:\SMI\LME_DATA\UNEP_MAIN-D_PPD.SAVE') & PN,DB
  SETS = WHERE_SETS(DB.MAP) & PN,SETS,' MAPS '
  MAPS = SETS.VALUE & PL,MAPS
  CSV = REPLICATE(CREATE_STRUCT('MAP','','PPY',0.0),N_ELEMENTS(MAPS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  
    AMAP = MAPS[NTH]
    OK = WHERE(DB.MAP EQ AMAP)
    D = DB[OK]
    PL,D.AMEAN
    PL,D.MED
    OK = WHERE(FINITE(D.AMEAN) EQ 1,COUNT,COMPLEMENT = COMPLEMENT) & P,(100.0* COUNT)/N_ELEMENTS(D)
    JD = PERIOD_2JD(D.PERIOD) & YF = JD_2DYEAR(JD)
    AX = DATE_AXIS(JD,/ENDS) & ST,AX
    ;PLOT,AX.JD,Y, XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,/XSTYLE, XTITLE=AX.TITLE
    
    P = PLOT(JD,D.AMEAN,THICK = 3,YTITLE = UNITS('PPD'),FONT_SIZE = 12,XTICKNAME = AX.TICKNAME)
    P = PLOT(JD,REPLICATE(1,N_ELEMENTS(JD)),/OVERPLOT,COLOR = 'MAGENTA',THICK = 5,TITLE =AMAP )
    
    ;CSV_WRITE,'JUNK.CSV',D(OK)
    PPY = ROUNDS(TOTAL(D.AMEAN,/NAN))
    ANN = PPY +UNITS('PPY',/NO_NAME)
    T = TEXT(0.60,0.75,/NORMAL,ANN,FONT_SIZE = 25,COLOR = 'DARK RED')
    PNGFILE = !S.DIR_TEMP + 'PP_OPAL' + '-' + AMAP + '.PNG'
    P.SAVE, PNGFILE,  RESOLUTION=RES,WIDTH = 800,HEIGHT = 800 ,BORDER = 10
    PFILE,PNGFILE,/W
    P.CLOSE
    CSV[NTH].MAP = AMAP
    CSV[NTH].PPY = PPY
  ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  CSVFILE = !S.DIR_TEMP + 'DO_LME_PPY_CSV.CSV'
  CSV_WRITE,CSVFILE,CSV & PF,CSVFILE
  
ENDIF;IF DO_LME_PPY_CSV GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||



END; #####################  END OF ROUTINE ################################
