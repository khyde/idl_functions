; $ID:	MUR_2NEC.PRO,	2020-07-01-12,	USER-KJWH	$
;#########################################################################################
  FUNCTION MUR_2NEC,ARR,INIT=INIT
;+
; NAME:
;       MUR_2NEC
;
; PURPOSE:
;       DETERMINE WARPING COEFFICIENTS NEEDED TO WARP A MUR [E.G.SST] TO A NEC PROJECTION
;       OR IF COEFFICIENTS FILE EXISTS THEN RETURN A NEC ARRAY
;      
;
; CATEGORY:
;       MAPS FAMILY
;
; CALLING SEQUENCE:
;       MUR_2NEC
;
; INPUTS:
;       ARR A MUR ARRAY [SST DATA]
;
; KEYWORD PARAMETERS:
;                INIT..... INITIALIZES [REWRITES SAV KX,KY FILE],INITIALIZES COMMON MEMORY
;       
;       
; OUTPUTS: IF NO ARR PROVIDED THEN WARPING COEFFICIENT ARRAYS KX AND KY ARE SAVED IN A STRUCTURE FOR SUBSEQUENT USE.
;          IF ARR IS PROVIDED THEN OUTPUT IS A NEC ARRAY
; 
;          A MUR MAP PROJECTION IS ESTABLISHED WITH MAPS_SET [EQUIRECTANGULAR, 32768 X 16384 PIXELS]
;          A GRATICULE DOT IS DRAWN EVERY QUARTER DEGREE;
;          THE DEVICE COORDINATES ARE DETERMINED AND POLYWARP [POLYNOMIAL SPATIAL WARPING] 
;          IS USED TO COMPUTE WARPING COEFFICIENTS KX,KY
;           
;
;
; MODIFICATION HISTORY:
;       WRITTEN BY:  J.E.O'REILLY, AUG 30,2015 PATTERNED AFTER NECW_2NEC_COEF AND NECW_2NEC [COASTWATCH MAPS]
;       AUG 31,2015,JOR REFINMENTS
;####################################################################################
;-

;************************
ROUTINE_NAME = 'MUR_2NEC'
;************************
COMMON _MUR_2NEC,KX,KY
PRINT,'PROGRAM NOT WORKING PROPERLY'
;===> DEFAULTS
PX = 32768
PY = 16384
DDEG = 1.0/6.0 ; DECIMAL DEGREES FOR PLOTGRAT
FILE = !S.DATA + ROUTINE_NAME + '.SAV'

;CHANGE THIS FOR MAC AND UNIX >>
IF !S.OS EQ 'UNIX' THEN SET_PLOT,'X' ELSE SET_PLOT,STRMID(!S.OS,0,3)
;IF NONE(ARR) THEN BEGIN
;===> REMEMBER THE CURRENT GRAPHICS DEVICE
OLD_DEVICE = !D.NAME
;**********************************************
IF KEY(INIT) OR FILE_TEST(FILE) EQ 0 THEN BEGIN
;**********************************************
  ;===> SET THE GRAPHICS DEVICE TO THE 'Z' DEVICE [NOT WITH ZWIN SO WE MAY SET COLORS TO 2]
  SET_PLOT,'Z'
  ; ===> ESTABLISH THE MUR MAP PROJECTION 
  DEVICE,SET_RESOLUTION=[PX,PY], SET_COLORS=2 ;2 IS CORRECT (SAVES MEMORY)
  MAPS_SET,'EQUIRECTANGULAR',PX=PX,PY=PY
  ;===> DRAW A DOT GRATICULE EVERY 10 DEGREES
  PLOTGRAT,DDEG,PSYM=3,COLOR=1
  ;===> READ THE IMAGE
  MUR_GRAT = TVRD()
  ;===>  DETERMINE LOCATIONS OF GRATICULE PIXELS
  OK = WHERE(MUR_GRAT EQ 1,COUNT)
       PRINT,'COUNT = ' , COUNT
  
   ;===>  CONVERT THE SUBSCRIPTS TO APPROXIMATE DEVICE X,Y LOCATIONS
  XY = ARRAY_INDICES([PX,PY],OK,/DIMENSIONS)
  X = XY(0,*)
  Y = XY(1,*)

  ;===> CONVERT X,Y TO  MUR DATA COORDINATES
    XYZ = CONVERT_COORD(X,Y, /DEVICE, /TO_DATA)
  
  ;===> REFORM XYZ INTO 2D ARRAYS
    XX = REFORM(XYZ(0,*,*))
    YY = REFORM(XYZ(1,*,*))
  
  ;===> COMPUTE THE EXACT LON LAT DATA FOR EACH OF THE PIXELS IN THE MUR_GRAT IMAGE FROM XX,YY

  SIXTH_X =  ROUND(((ABS(XX) MOD FIX(ABS(XX))))  /(1./6.))
  SIXTH_Y =  ROUND(((ABS(YY) MOD FIX(ABS(YY))))  /(1./6.))
  
  X_MUR_DEG = -1.0* (FIX(ABS(XX)) + 1./6. * SIXTH_X)
  Y_MUR_DEG =  1.0* (FIX(ABS(YY)) + 1./6. * SIXTH_Y)
  
  ;===> NOW GET THE PRECISE DEVICE COORDINATES OF THESE EXACT XX,YY VALUES
  XYZ = CONVERT_COORD(X_MUR_DEG,Y_MUR_DEG, /DATA, /TO_DEVICE)
  
  ;===> REFORM XYZ INTO 2D ARRAYS
  X_MUR_DEV = REFORM(XYZ(0,*,*))
  Y_MUR_DEV = REFORM(XYZ(1,*,*))
  
  ;===> CLOSE THE Z DEVICE AND FREE UP ITS MEMORY
  DEVICE,/CLOSE
  
  ;===> SET THE GRAPHICS DEVICE TO THE 'Z' DEVICE AND THE NEC MAP
  SET_PLOT,'Z'
  DEVICE,SET_RESOLUTION=[1024,1024], SET_COLORS=2 ;2 IS CORRECT (SAVES MEMORY)
  ;===> ESTABLISH THE NEC MAP PROJECTION
  MAPS_SET,'NEC'
  
  ;===> CONVERT X,Y TO NEC DEVICE COORDINATES
  XYZ = CONVERT_COORD(X_MUR_DEG,Y_MUR_DEG, /DATA, /TO_DEVICE)
  
  ;===> CLOSE THE Z DEVICE AND FREE UP ITS MEMORY
  DEVICE,/CLOSE
    
  ; ===============>
  ; SET THE GRAPHICS DEVICE TO THE 'Z' DEVICE AND THE NEC MAP
  SET_PLOT,'Z'
  DEVICE,SET_RESOLUTION=[1024,1024], SET_COLORS=2 ;2 IS CORRECT (SAVES MEMORY)
  ;===> ESTABLISH THE NEC MAP PROJECTION
  MAPS_SET,'NEC' 
  ;===> CONVERT X,Y TO NEC DEVICE COORDINATES
    XYZ = CONVERT_COORD(X_MUR_DEG,Y_MUR_DEG, /DATA, /TO_DEVICE)
  
  ;===> CLOSE THE Z DEVICE AND FREE UP ITS MEMORY
  DEVICE,/CLOSE
    
  ;===> RESTORE THE GRAPHICS DEVICE
  SET_PLOT, OLD_DEVICE
  ;===> REFORM XYZ INTO 2D ARRAYS
  X_NEC_DEV = REFORM(XYZ(0,*,*))
  Y_NEC_DEV = REFORM(XYZ(1,*,*))
  GONE,XYZ ;TO SAVE MEMORY
  
  ;===> GET THE WARPING TRANSFORMATION COEFFICIENTS KX, AND KY
  PRINT, 'COMPUTING WARPING COEFFICENTS'
  POLYWARP, X_MUR_DEV,Y_MUR_DEV,X_NEC_DEV, Y_NEC_DEV, 5, KX, KY ;;;
  
  SAVE,FILENAME = FILE,KX,KY,/VERBOSE
  INIT = 1
ENDIF;IF KEY(INIT) OR FILE_TEST(FILE) EQ 0 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||



;##################################
IF KEY(INIT) OR NONE(KX) OR NONE(KY) THEN BEGIN
;##################################
  ;===> READ THE COEFFICIENTS FILE
  S = STRUCT_READ(FILE)
  KX = S.KX & KY = S.KY
  ;===> WARP THE IMAGE TO THE NEC PROJECTION
  MISSING = MISSINGS(ARR[0])
  IMAGEW = POLY_2D(ARR, KX,KY,MISSING=MISSING,PIXEL_CENTER=0.5) ; NEAREST NEIGHBOR
  ;===> EXTRACT FROM THE IMAGEW THE PX X PY REGION
  IMAGEW = IMAGEW(0:1023,0:1023)
  ;===> RETURN THE WARPED ARR
  RETURN,IMAGEW
ENDIF;IF NONE(KX) OR NONE(KY) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||



END; #####################  END OF ROUTINE ################################
