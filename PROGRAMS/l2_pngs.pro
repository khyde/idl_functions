; $ID:	L2_PNGS.PRO,	2021-04-15-17,	USER-KJWH	$

PRO L2_PNGS, FILES, PRODS=PRODS, DIR_OUT=DIR_OUT, MAP_OUT=MAP_OUT, MAP_ONLY=MAP_ONLY, GET_AREA=GET_AREA, GLOBAL_ONLY=GLOBAL_ONLY,$
	                  FLAG_BITS=FLAG_BITS, SST_QUAL=SST_QUAL, METHOD=METHOD, BUFFER=BUFFER,OVERWRITE=OVERWRITE

;+
; NAME: L2_PNGS
;
; PURPOSE: This program opens a SeaDAS generated L2 file and creates pngs for specified maps
;
; CATEGORY: PNG_MAKE
;
; OUTPUT: Mapped L2 .SAV files
; 
; INPUT: FILES = L2*.hdf files generated by SeaDAS or acquired from the NASA Ocean Color Web
;
; KEYWORDS: PROD = Sensor specific products to get fromt the L3b files
;           METHOD = Reprocessing method (i.e. R2015) for the output file name
;           DIR_OUT = Output directory for the .SAV files
;           MAP_OUT = The name of the MAP(s) for the output files 
;           FLAG_BITS = Bit values for the flags to be applied to the L2 files
;           OVERWRITE_SAVE = Rewrite the .SAV if it already exits
;           
; EXAMPLE:
;			FILES = FILE_SEARCH('E:\MODIS_TEST\*SEAWIFS*.hdf') & DIR_OUT = 'E:\MODIS_TEST\SAVE\' & MAPS = 'NEC' & PRODS = 'chlor_a'
;			L2_2SAVE,FILES=FILES,PRODS=PRODS,DIR_OUT=DIR_OUT,MAP_OUT=MAP_OUT, /OVERWRITE
;
;	NOTES:
;
; MODIFICATION HISTORY:
;   WRITTEN:  Dec 02, 2015 - K. Hyde 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;   MODIFIED: FEB 14, 2019 - KJWH: Adapted from SAVE_MAKE_L2
;
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'L2_PNGS'

  ERROR = 0
  DASH=DELIMITER(/DASH)
  SL=PATH_SEP()
  MAP_IN = 'LONLAT'

	IF NONE(FILES)     THEN FILES     = DIALOG_PICKFILE(TITLE='satellite files')
	IF KEY(DATE_RANGE) THEN FILES     = DATE_SELECT(FILES,DATE_RANGE,COUNT=COUNT_FILES) & IF FILES EQ [] THEN GOTO, DONE
	IF NONE(MAP_OUT)   THEN MAPS      = 'LONLAT' ELSE MAPS = MAP_OUT    
	IF NONE(N_EXCLUDE) THEN N_EXCLUDE = 100
  IF NONE(METHOD)    THEN METHOD    = 'R2015'
  IF NONE(FLAG_BITS) THEN FLAG_BITS = [0,1,2,3,4,5,8,9,10,12,14,15,16,25]
  IF NONE(SST_QUAL)  THEN SST_QUAL  = 2
  IF NONE(PRODS)     THEN PRODS     = ['CHLOR_A-OCI','PAR','RRS_443','RRS_555']
  IF NONE(BUFFER)    THEN BUFFER    = 1
  
  SAVEPRODS = PRODS(WHERE(STRUPCASE(PRODS) NE 'L2_FLAGS',COUNT,/NULL))  ; Create a list of products to save
  
; ===> CREATE SAVE, LOG, EXCLUDE AND MAP_INFO OUTPUT DIRECTORIES FOR EACH MAP  
  
  
; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL  
  FOR F=0, N_ELEMENTS(FILES)-1L DO BEGIN
    AFILE=FILES(F)
    FP = FILE_PARSE(AFILE)
    SI = SENSOR_INFO(AFILE)
    NC = [] ; Make NC null to ensure you are reading the correct file
    GD = [] ; Make GD null to ensure you are reading the correct file
    SD = [] ; Make SD null to ensure you are reading the correct file
    
; ************************************************************************************************************************    
    FOR M=0, N_ELEMENTS(MAPS)-1 DO BEGIN
      AMAP = MAPS(M)
      IF VALIDS('MAPS', AMAP) EQ '' AND AMAP NE 'LONLAT' THEN CONTINUE
      IF NONE(DIR_OUT) THEN DIR_PNG = REPLACE(FP[0].DIR,FP[0].SUB,'THUMBNAIL'+SL+AMAP) $
                       ELSE DIR_PNG = DIR_OUT+AMAP+SL+'THUMBNAIL'+SL
      DIR_EXCLUDE  = DIR_PNG + 'EXCLUDE'  + SL
      DIR_MAP_INFO = DIR_PNG + 'MAP_INFO' + SL
      DIR_TEST, [DIR_PNG,DIR_EXCLUDE,DIR_MAP_INFO]
      
      OUTPUT_LABEL=SI.PERIOD+DASH+SI.FILELABEL+DASH+AMAP
      EXCLUDE_FILE  = DIR_EXCLUDE + OUTPUT_LABEL  + '-EXCLUDE.TXT'
      MAP_INFO_FILE = DIR_MAP_INFO + OUTPUT_LABEL + '-LONLAT_STRUCT.SAV'
      
      IF FILE_MAKE(AFILE,EXCLUDE_FILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE                    ; If the EXCLUDE_FILE exists and is newer than the input file, skip
      IF FILE_MAKE(AFILE,MAP_INFO_FILE,OVERWRITE=OVERWRITE) EQ 0 THEN BEGIN
        LONLAT_STRUCT = IDL_RESTORE(MAP_INFO_FILE)
        GOTO, SKIP_EXCLUDE_CHECK
      ENDIF ELSE LONLAT_STRUCT = []
      IF AMAP EQ 'LONLAT' THEN GOTO, SKIP_EXCLUDE_CHECK
      
      MP = MAPS_INFO(AMAP)
      LATMIN = MP.LIMIT[0]
      LATMAX = MP.LIMIT(2)
      LONMIN = MP.LIMIT[1]
      LONMAX = MP.LIMIT(3)
      
      NC = READ_NC(AFILE, PRODS=['GLOBAL','LATITUDE','LONGITUDE']) 
      SLATMIN = NC.GLOBAL.GEOSPATIAL_LAT_MIN
      SLATMAX = NC.GLOBAL.GEOSPATIAL_LAT_MAX
      SLONMIN = NC.GLOBAL.GEOSPATIAL_LON_MIN
      SLONMAX = NC.GLOBAL.GEOSPATIAL_LON_MAX
      
      IF SLATMAX LT LATMIN OR SLATMIN GT LATMAX OR SLONMAX LT LONMIN OR SLONMIN GT LONMAX THEN BEGIN
        TXT = AMAP + ' bounds are not within the boundaries of ' + AFILE + ' - Writing EXCLUDE_FILE...'
        PRINT, TXT  
        WRITE_TXT,EXCLUDE_FILE, TXT
        CONTINUE
      ENDIF
            
      LAT = NC.SD.LATITUDE.IMAGE
      LON = NC.SD.LONGITUDE.IMAGE
      SAT_DATA = LAT & SAT_DATA(*) = 0 ; Create a blank array to remap
      MAP_IMG = MAPS_REMAP(SAT_DATA, MAP_IN='LONLAT', MAP_OUT=AMAP, CONTROL_LONS=LON, CONTROL_LATS=LAT, LONLAT_STRUCT=LONLAT_STRUCT)
      IF IDLTYPE(MAP_IMG) EQ 'STRING' THEN BEGIN
        TXT = AMAP + ' has less than 10 pixels within the boundaries of ' + AFILE + ' - Writing EXCLUDE_FILE...'
        PRINT, TXT
        WRITE_TXT,EXCLUDE_FILE, TXT
        CONTINUE
      ENDIF
      PRINT, 'SAVING MAP_INFO_STRUCT: ' + MAP_INFO_FILE
      IF IDLTYPE(LONLAT_STRUCT) EQ 'STRUCT' THEN SAVE, LONLAT_STRUCT, FILENAME=MAP_INFO_FILE
      
      SKIP_EXCLUDE_CHECK:
      PNGPRODS = []
      PNGFILES = []
      EXCLUDES  = []
      FOR P = 0,N_ELEMENTS(PRODS)-1 DO BEGIN
        APROD = PRODS(P)        
        DIR_PROD = DIR_PNG + APROD + SL & DIR_TEST, DIR_PROD
        PNGFILE  = DIR_PROD + OUTPUT_LABEL + DASH + APROD + '.PNG'
        EXCLUDE_PROD = DIR_EXCLUDE + OUTPUT_LABEL + DASH + APROD + '-EXCLUDE.TXT'
        IF FILE_MAKE(AFILE,EXCLUDE_PROD,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE  ; If the EXCLUDE_FILE exists and is newer than the input file, skip
        IF FILE_MAKE(AFILE,PNGFILE,OVERWRITE=OVERWRITE_SAVE) EQ 1 THEN BEGIN
          PNGPRODS = [PNGPRODS,STRUPCASE(APROD)]
          PNGFILES = [PNGFILES,PNGFILE]
        ENDIF
      ENDFOR
      IF PNGPRODS EQ [] THEN CONTINUE ; >>> No new files to create >>>>>>
       
; ===> Get the PRODUCTS in the file and construct output product-algorithm names 
      IF SIP EQ [] THEN SIP = SENSOR_INFO(AFILE,/GET_PRODS) 
      PROD_NAME    = STRSPLIT(SIP.PRODS,  SIP.DELIM,/EXTRACT,/PRESERVE_NULL)
      ALG_NAME     = STRSPLIT(SIP.ALG,    SIP.DELIM,/EXTRACT,/PRESERVE_NULL)
      L2_PROD_NAME = STRSPLIT(SIP.NC_PROD,SIP.DELIM,/EXTRACT,/PRESERVE_NULL)
      OK = WHERE(ALG_NAME NE '',COUNT)
      IF COUNT GE 1 THEN PROD_NAME[OK] = PROD_NAME[OK] + DASH + ALG_NAME[OK]

      OK=WHERE_MATCH(PROD_NAME,PNGPRODS,COUNT, VALID=VALID, NINVALID=NINVALID,INVALID=INVALID)
      IF COUNT GE 1 THEN BEGIN
        PRODUCTS = PROD_NAME[OK]
        L2_PRODS = L2_PROD_NAME[OK]
      ENDIF
      IF NINVALID GE 1 THEN BEGIN
        CPROD = PNGPRODS(INVALID)
        FOR C=0, N_ELEMENTS(CPROD)-1 DO BEGIN
          TXT = CPROD(C) + ': is not a valid product for file - ' + AFILE + ' - Writing EXCLUDE_FILE...'
          PRINT, TXT
        ENDFOR
        IF NINVALID EQ N_ELEMENTS(PNGPRODS) THEN CONTINUE ; No additional products to process
      ENDIF  
  
      NC_PRODS = [L2_PRODS]
      IF SD EQ [] THEN BEGIN
        PRINT, 'READING: ' + AFILE 
        SD = READ_NC(AFILE,PRODS=[L2_PRODS,'L2_FLAGS','QUAL_SST','QUAL_SST4','FLAGS_SST','FLAGS_SST4','BIAS_SST4','BIAS_SST'])
        IF IDLTYPE(SD) EQ 'STRING' THEN BEGIN
          TXT = 'ERROR reading ' + AFILE
        stop  
          CONTINUE
        ENDIF
      SD = SD.SD
      ENDIF ; IF SD EQ [] THEN BEGIN  
            
      ; ===> Generate L2_FLAGS masks
      IF STRUCT_HAS(SD,'QUAL_SST') EQ 0 AND STRUCT_HAS(SD,'QUAL_SST4') EQ 0 THEN MASK_FLAG = SD_FLAGS_COMBO(SD.L2_FLAGS.IMAGE,FLAG_BITS) ELSE BEGIN
        MASK_FLAG = SD.QUAL_SST.IMAGE                ; For SST images, use the QUAL_SST flag instead
        MASK_FLAG(WHERE(MASK_FLAG LE SST_QUAL)) = 0  
      ENDELSE
      OK_L2_FLAGS = WHERE(MASK_FLAG GT 0, COUNT_L2_FLAGS)
      
      ; ===> Get LAND flag info
      LAND_FLAG = SD_FLAGS_COMBO(SD.L2_FLAGS.IMAGE,1)
      OK_LAND = WHERE(LAND_FLAG GT 0, COUNT_LAND)
      
      FOR P=0, N_ELEMENTS(L2_PRODS)-1 DO BEGIN
        APROD    = STRUPCASE(VALIDS('PRODS',SAVEPRODS(P)))
        AALG     = STRUPCASE(VALIDS('ALGS', SAVEPRODS(P)))
        PNGFILE  = PNGFILES(P)
        POS = WHERE(STRUPCASE(TAG_NAMES(SD)) EQ STRUPCASE(L2_PRODS(P)),COUNT) & IF COUNT EQ 0 THEN STOP
        S = SD.(POS)    
        IMG = S.IMAGE
        SZ = SIZEXYZ(IMG)
        IF SZ.N_ELEMENTS LT 200 OR SZ.PX LT 10 OR SZ.PY LT 10 THEN CONTINUE
        
        ; ===>  Find FILLED/BAD data
        IF STRUCT_HAS(S,'_FILLVALUE')       THEN FV = S._FILLVALUE._DATA[0] ELSE FV = MISSINGS(IMG)
        IF STRUCT_HAS(S,'BAD_VALUE_SCALED') THEN BV = S.BAD_VALUE_SCALED    ELSE BV = MISSINGS(IMG)
        IF STRUCT_HAS(S,'VALID_MIN')        THEN MN = S.VALID_MIN._DATA[0]  ELSE MN = MIN(IMG)
        IF STRUCT_HAS(S,'VALID_MAX')        THEN MX = S.VALID_MAX._DATA[0]  ELSE MX = MAX(IMG) 

        ; ===>  Find GOOD data
        OK_GOOD=WHERE(IMG NE MISSINGS(IMG) AND IMG NE BV AND IMG NE FV AND IMG LE MX AND IMG GE MN,COUNT_GOOD,COMPLEMENT=OK_BAD,NCOMPLEMENT=COUNT_BAD) 
        
        ; ===> Scale with slope and intercept if available
        SLOPE = 1.0 & INTERCEPT = 0.0
        IF STRUCT_HAS(S,'SLOPE')            THEN SLOPE = FLOAT(S.SLOPE[0])
        IF STRUCT_HAS(S,'SCALE_FACTOR')     THEN SLOPE = FLOAT(S.SCALE_FACTOR._DATA[0])
        IF STRUCT_HAS(S,'INTERCEPT')        THEN INTERCEPT = FLOAT(S.INTERCEPT[0])
        IF STRUCT_HAS(S,'ADD_OFFSET')       THEN INTERCEPT = FLOAT(S.ADD_OFFSET._DATA[0])

        SAT_DATA = IMG * SLOPE + INTERCEPT

        ; ===>  Make "BAD" data MISSINGS
        IF COUNT_BAD GE 1 THEN SAT_DATA(OK_BAD) = MISSINGS(SAT_DATA) ; Mask out MISSING and BAD_VALUE data
        
        ; ===> Apply the L2_FLAGS mask to all products except those listed
        IF HAS(['PAR','SENZ'],APROD) EQ 0 AND COUNT_L2_FLAGS GE 1 THEN SAT_DATA(OK_L2_FLAGS) = MISSINGS(SAT_DATA) ; Mask out data based on L2 FLAGS
  
        ; ===> Remap data  
        IF AMAP NE 'LONLAT' THEN BEGIN
          MAP_IMG = MAPS_REMAP(SAT_DATA, MAP_IN='LONLAT', MAP_OUT=AMAP, CONTROL_LONS=LON, CONTROL_LATS=LAT, LONLAT_STRUCT=LONLAT_STRUCT)
          BIMG = PRODS_2BYTE(MAP_IMG,PROD=APROD,/ADD_LAND,MP=AMAP)
        ENDIF ELSE BEGIN
          BIMG = PRODS_2BYTE(SAT_DATA,PROD=APROD)
          IF COUNT_LAND GT 0 THEN BIMG(OK_LAND) = 254
          BIMG = ROTATE(BIMG,5)
        ENDELSE 
        
        IM = IMAGE(BIMG, RGB_TABLE=CPAL_READ('PAL_BR'),MARGIN=0,BUFFER=BUFFER)
        IM.SAVE, PNGFILE
        IM.CLOSE
        
      ENDFOR ; FOR P=0, N_ELEMENTS(DO_PROD)-1 DO BEGIN
    ENDFOR   ; FOR M=0, N_ELEMENTS(MAPS)-1 DO BEGIN
    SD = []
    SIP = []
  ENDFOR     ; FOR F=0, N_ELEMENTS(FILES)-1L DO BEGIN
   
 DONE:
END; #####################  End of Routine ################################
