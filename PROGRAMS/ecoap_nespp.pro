; $ID:	ECOAP_NESPP.PRO,	2021-04-15-17,	USER-KJWH	$

  PRO ECOAP_NESPP

;+
; NAME:
;   ECOAP_NESPP
;
; PURPOSE:
;   This procedure is the main program to analyze the size fractionated phytoplankton data for the NE US Shelf.
;
; CATEGORY:
;   CATEGORY
;
; CALLING SEQUENCE:
;
; INPUTS:
;   Parm1:  Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;   Parm2:  Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;   KEY1: Document keyword parameters like this. 
;
; OUTPUTS:
;   This function returns data and figures related to phytoplankton on the NE Shelf
;
; OPTIONAL OUTPUTS:
;
; PROCEDURE:
;
; EXAMPLE:
;
; NOTES:
;
;
; MODIFICATION HISTORY:
;			Written:  October 22, 2012 by K.J.W. Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;			Modified:  
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'ECOAP_NESPP'
	
	SL = DELIMITER(/SLASH)
	
	DO_EPU_MAP            = 'Y' ; Added 6/22/2017 - Make a "Figure 1" map of the EPUs for the NE Shelf
	DO_GOMN_MAPS          = '' ; Added 7/20/16 - Make GOMN maps for M. Fogarty
	DO_SUMMARY_MAPS       = 0 ; Added 2/19/14 - For the 2014 Ocean Sciences Poster
		
	DO_MONTHLY_EXTRACTS   = 0 ; Added 12/6/13 Adapted from ECOAP_NAFO
	DO_MONTHLY_SUMS       = 0 ; Added 12/6/13 Adapted from ECOAP_NAFO
	DO_PP_CONCATENATE     = 0 ; Added 4/2/15  Adapted from ECOAP_FISHERIES - To combine all PP data into a single spreadsheet for M. Fogarty
	DO_PP_ANNUAL_MEAN     = 0 ; Added 8/3/15  Adapted from ECOAP_FISHERIES - To concatenate all PP data and generate climatological means for M. Fogarty
	DO_SUMMED_STATS       = 0 ; Added 12/6/13 Adapted from ECOAP_NAFO
	
	DO_SUBAREA_EXTRACT    = '' ; Added 4/24/2017 - To extract the CHL/PP data
	DO_CHL_PP_TIMESERIES  = '' ; Added 4/16/17 - Plots the monthly CHL/PP timeseries 
	DO_PP_TIMESERIES_2017 = '' ; Added 5/4/2017 - Time series line and bar plots of PP Size data (adapted from ECOAP_FISHERIES)
	DO_MONTHLY_TIMESERIES = 0 ; Added 4/2/14 - Plots the CHL/PP size class timeseries 
	DO_ANNUAL_PLOTS       = 0 ; Added 12/6/13 Adapted from ECOAP_NAFO
	DO_FINAL_COMPOSITES   = 0 ; Added 12/6/13 Adapted from ECOAP_NAFO	
	DO_MAP_COMPOSITES     = 0 ; Added 12/6/13 Adapted from ECOAP_NAFO
	DO_NAFO_PAN_OC4       = 0 ; Added 12/6/13 Adapted from ECOAP_NAFO
		
	DO_BOUNDARIES         = 0 ; Added 12/9/13 - To get the lon/lat boundaries of the ecoregions
	DO_DAILY_COMPARE      = 0 ; Added 12/12/13 - To compare daily MODIS and SeaWiFS products
	DO_PAN_OC_COMPARE     = 0 ; Added 12/12/13 - To compare SeaWiFS & MODIS CHL and PP stats
	DO_IMAGE_COMPARE      = 0 ; Added 12/12/13 - To compare SeaWiFS & MODIS CHL and PP images
	
  DO_TRANSFER_EFFICIENCIES        = 0 ; Added 05-28-2016 to create histogram plots of the transfer efficiencies
	DO_LANDINGS                     = 0 ; Added 05-28-2016 to create a polygon plot of the landings data
	DO_PP_COMPOSITE                 = 0
	DO_MARMAP_PLOT                  = 0
	DO_MAKE_BROWSES                 = 0 ; Added 10-22-2012
	DO_GIOVANNI_FILES               = 0 ; Added 03-11-2013
	DO_ANNUAL_TIMESERIES            = 0 ; Added 01-03-2013
	DO_COMPARE_PLOTS_2017           = 'Y' ; Added 02-22-2017 To compare the old and new (R2014) data
	DO_COMPARE_PLOTS                = 0 ; Added 10-22-2012
	DO_MONTH_COMPARE                = 0 ; Added 12-10-2012  
	DO_PHYTO_PLOTS                  = 0 ; Added 02-19-2012
  DO_PHYTO_COMPOSITION_PLOTS      = 0 ; Added 02-19-2012    
  
  DIR_PROJECTS = FIX_PATH(!S.PROJECTS + 'ECOAP' + SL + 'NESPP' + SL)
  DIR_PLOTS    = DIR_PROJECTS + 'PLOTS' + SL 
  DIR_TEMP     = DIR_PROJECTS + 'TEMP_PLOTS' + SL  
  DIR_DATA     = DIR_PROJECTS + 'DATA' + SL
  DIR_SUBAREAS = DIR_PROJECTS + 'SUBAREA_EXTRACTS' + sl
  DIR_SUMMARY  = DIR_PROJECTS + 'SUBAREA_SUMMARY' + SL
  DIR_SAVE_PAN = DIR_PROJECTS + 'DATA_BY_SUBAREA_PAN' + SL
  DIR_SAVE_OC  = DIR_PROJECTS + 'DATA_BY_SUBAREA_OCI' + SL
  DIR_MONTHLY  = DIR_PROJECTS + 'PLOTS' + SL + 'MONTHLY_TIMESERIES_2017' + SL
  DIR_TEST,[DIR_PROJECTS,DIR_PLOTS,DIR_TEMP,DIR_SAVE_PAN,DIR_SAVE_OC,DIR_SUMMARY,DIR_MONTHLY,DIR_SUBAREAS]

; *******************************************************
  IF KEY(DO_EPU_MAP) THEN BEGIN
; *******************************************************
    SNAME = DO_EPU_MAP
    PRINT, 'Running: ' + 'DO_EPU_MAP'
    SWITCHES,DO_EPU_MAP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATASETS=DATASETS,DATERANGE=DATERANGE

    VERSION = 'V2_2017'
    MAP_OUT = ['NEC','GOMN']
    DIR     = 'NES_ECOREGIONS
    SUBAREAS = ['NES_EPU_NOESTUARIES','NES_EPU_CORE','NES_STOCKAREAS']
    NAMES   = [['GOM','SS','GB','MAB']+'_CORE','GB_SHELF','MAB_SHELF']
    NICKNAMES = ['GoM','SS','GB','MAB','EEZ']
    CLRS    =   ['BLUE','SPRING_GREEN','AQUA','RED','GOLD']
    BATHY = -200
    
    BUFFER = 0
    PAL_LANDMASK,RR,GG,BB
    ICLR = IDL_COLORS()
    FOR N=0, N_ELEMENTS(CLRS)-1 DO BEGIN
      CLR = !COLOR.(WHERE(ICLR EQ CLRS(N)))
      RR(N+10) = CLR[0]
      GG(N+10) = CLR[1]
      BB(N+10) = CLR(2)
    ENDFOR
    OCLR = !COLOR.(WHERE(ICLR EQ 'LIGHT_SKY_BLUE'))
    RR(20) = OCLR[0] & GG(20) = OCLR[1] & BB(20) = OCLR(2)

    DATERANGE = [2012,2016]
    CSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-L3B2-CHLOR_A-OCI-STATS.SAV'
    PSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-L3B2-PPD-VGPM2-STATS.SAV'
    MSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-L3B2-MICROPP-STATS.SAV'
    NSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-L3B2-NANOPICOPP-STATS.SAV'
    SSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MUR-V04.1-L3B2-SST-STATS.SAV'
    SFTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-NWA-SST_BOA-4UM-STATS.SAV'
    CFTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-NWA-CHL_BOA-OCI-STATS.SAV'
    
    BASEMAP = ['EPU',PSTAT,CSTAT,MSTAT,NSTAT,SSTAT,SFTAT,CFTAT]
    FOR BTH=0, N_ELEMENTS(BASEMAP)-1 DO BEGIN
      FOR M=0, N_ELEMENTS(MAP_OUT)-1 DO BEGIN
        AMAP = MAP_OUT(M)
        MS = MAPS_SIZE(AMAP,PX=PX,PY=PY)
        LAND = READ_LANDMASK(AMAP)
        LSTR = READ_LANDMASK(AMAP,/STRUCT)
        
        SCOLORS = [10,11,12,13]
        CORE_COLOR  = []  & CORE_THICK = 3
        EXT_COLOR   = LSTR.COAST_CODE    & EXT_THICK  = 3
        EEZ_COLOR   = [];14 & EEZ_THICK = 5
        STK_COLOR   = 1 & STK_THICK = 3
        BATHY_COLOR = [];0
  
        IF EEZ NE [] THEN BEGIN
          EEZ  = CSV_READ(!S.IDL_SHAPEFILES + DIR + SL + 'EEZ_POINTS.csv')
          MAPS_SET,AMAP
          PXPY = MAP_DEG2IMAGE(LAND,FLOAT(EEZ.LON), FLOAT(EEZ.LAT), X=EX,Y=EY,AROUND=0,SUBS=ZSUBS)
          EX = EX[WHERE(EX GT 0)] & EY = EY[WHERE(EX GT 0)]
          PLOTS, EX, EY, COLOR=3,  THICK=EEZ_THICK, /DEVICE
          IMG = TVRD()
          ZSUBS = WHERE(IMG EQ 3,/NULL)
        ENDIF
        
        BATH  = TOPO_GET(AMAP,BATHY,SWIDTH=SWIDTH,THICKS=THICKS,VERBOSE=VERBOSE,FACT=1)
        TT    = TOPO_TAGS(AMAP,BATHY)
        BSUBS = STRSPLIT(STRUCT_GET(BATH,TT.TAG+'.SUBS'),';',/EXTRACT)
  
        STRUCT = READ_SHPFILE(SUBAREAS, MAPP=AMAP, COLOR=COLORS, VERBOSE=VERBOSE)
        EXT = STRUCT.(WHERE(TAG_NAMES(STRUCT) EQ STRUPCASE(SUBAREAS[0]),/NULL))
        COR = STRUCT.(WHERE(TAG_NAMES(STRUCT) EQ STRUPCASE(SUBAREAS[1]),/NULL))
        STK = STRUCT.(WHERE(TAG_NAMES(STRUCT) EQ STRUPCASE(SUBAREAS(2)),/NULL))
  
        BLK = MAPS_BLANK(AMAP,FILL=20)
        BLK(EXT.GOM.SUBS) = SCOLORS[0]
        BLK(EXT.SS.SUBS)  = SCOLORS[1]
        BLK(EXT.GB.SUBS)  = SCOLORS(2)
        BLK(EXT.MAB.SUBS) = SCOLORS(3)

        ARR = BYTARR(3,N_ELEMENTS(RR))
        ARR(0,*) = RR
        ARR(1,*) = GG
        ARR(2,*) = BB
  
        ; ===> Look for OCEAN pixels that are adjacent to subarea pixels and make them black
        COK = WHERE(BLK NE 255, COUNT)
        BLANK = BYTE(MAPS_BLANK(AMAP,FILL=0))
        BLANK(COK) = 254
        FOR I = 0L, COUNT-1 DO BEGIN
          BOX = BOX_AROUND(BLK,COK(I),SUBS=SUBS,AROUND=1)
          OK = WHERE(BOX EQ 255, COUNTB) ; Find LAND pixels completely surrounded by COAST   
          IF COUNTB GE 1 THEN BLANK(SUBS[OK]) = 10
        ENDFOR
        SDIL = IMG_DILATE(BLANK,TARGET=10,BOX=EXT_THICK+2,SUBS=SSUBS)
        
        CSUBS = [] & ESUBS = []
        FOR F=0, N_ELEMENTS(NAMES)-1 DO BEGIN
          IF AMAP EQ 'GOMN' AND STRMID(NAMES(F),0,3) EQ 'MAB' THEN CONTINUE
          POSC = WHERE(TAG_NAMES(COR) EQ STRUPCASE(NAMES(F)),/NULL,COUNT)
          CSUBS = [CSUBS,COR.(POSC[0]).OUTLINE]
          SNAME = STR_BREAK(NAMES(F),'_')
          POSE = WHERE(TAG_NAMES(EXT) EQ STRUPCASE(SNAME[0]),/NULL,COUNT)
          ESUBS = [ESUBS,EXT.(POSE[0]).OUTLINE]
        ENDFOR
        BLANK = BYTE(MAPS_BLANK(AMAP,FILL=0))
        BLANK(CSUBS) = 1
        CDIL = IMG_DILATE(BLANK,TARGET=1,BOX=CORE_THICK,SUBS=CSUBS)
        BLANK = BYTE(MAPS_BLANK(AMAP,FILL=0))
        BLANK(ESUBS) = 1
        EDIL = IMG_DILATE(BLANK,TARGET=1,BOX=EXT_THICK,SUBS=ESUBS)    
        
        IF BASEMAP(BTH) EQ 'EPU' THEN BEGIN ; Add the NES_STOCKAREA outlines to the EPU map
          BLANK(STK.OUTLINE) = 2
          SDIL = IMG_DILATE(BLANK,TARGET=2,BOX=STK_THICK,SUBS=SSUBS)
        ENDIF ELSE SSUBS = []
        
        IF BASEMAP(BTH) NE 'EPU' THEN BEGIN
          IPLT = BASEMAP(BTH) & FB = PARSE_IT(IPLT)
          PNGFILE = REPLACE(IPLT,[FB.DIR,'L3B2','NWA','.SAV'],[!S.PROJECTS+'ECOAP/',AMAP,AMAP,'.PNG'])
         ; IF FILE_MAKE(IPLT,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
          CD = STRUCT_READ(IPLT,MAP_OUT=AMAP,STRUCT=CS)
          CASE IPLT OF
            CSTAT: BEGIN & PROD = 'CHLOR_A_0.03_30' & CTITLE = 'Chlorophyll ' + UNITS('CHLOR_A',/NO_NAME)          & BLK = PRODS_2BYTE(CS.MEAN,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & END
            PSTAT: BEGIN & PROD = 'PPD_0.03_10'     & CTITLE = 'Primary Production ' + UNITS('PPD',/NO_NAME)       & BLK = PRODS_2BYTE(CS.MEAN,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & END
            SSTAT: BEGIN & PROD = 'SST'             & CTITLE = 'Temperature ' + UNITS('SST',/NO_NAME)              & BLK = PRODS_2BYTE(CS.MEAN,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & END
            SFTAT: BEGIN & PROD = 'SST_BOA'         & CTITLE = 'SST Gradients ' + UNITS('CHL_BOA',/NO_NAME)        & BLK = PRODS_2BYTE(CS.GRAD_SST,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & END
            CFTAT: BEGIN & PROD = 'CHL_BOA'         & CTITLE = 'Chlorophyll Gradients' + UNITS('CHL_BOA',/NO_NAME) & BLK = PRODS_2BYTE(CS.GRAD_CHL,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & END
          ENDCASE 
        ENDIF ELSE PNGFILE = !S.PROJECTS+'ECOAP/'+AMAP+'_EPU_FIGURE.PNG'
        
        IF CORE_COLOR  NE [] THEN BLK(CSUBS) = CORE_COLOR
        IF EXT_COLOR NE [] THEN BLK(ESUBS) = EXT_COLOR
        IF BATHY_COLOR NE [] THEN BLK(BSUBS) = BATHY_COLOR
        IF SSUBS NE [] THEN BLK(SSUBS) = STK_COLOR
        BLK(LSTR.LAND) = LSTR.LAND_CODE
        BLK(LSTR.LAKE) = LSTR.OCEAN_CODE
        
        BLANK = BYTE(MAPS_BLANK(AMAP,FILL=0))
        BLANK(LSTR.COAST) = 1
        BLANK(LSTR.LAKESIDE) = 1
        TDIL = IMG_DILATE(BLANK,TARGET=1,BOX=2,SUBS=CTHICK)
        BLK(CTHICK) = LSTR.COAST_CODE ; Make a thicker coastline
  
        FOR N=0, 1 DO BEGIN
          IF N EQ 1 AND EEZ_COLOR EQ [] THEN CONTINUE
          IF N EQ 1 THEN BLK(ZSUBS) = EEZ_COLOR
          
          IF BASEMAP(BTH) NE 'EPU' THEN BEGIN
            IM = IMAGE(BLK,RGB_TABLE=ARR,DIMENSIONS=[1024,1124],POSITION=[0,100,1024,1124],/DEVICE,BUFFER=1)
            PRODS_COLORBAR, PROD, IMG=IM, LOG=1, ORIENTATION=0, TITLE=CTITLE, FONT_SIZE=14, POSITION=[200,40,824,90], TEXTPOS=0, /DEVICE, PAL='PAL_BR'
            IM.SAVE, PNGFILE
            IM.CLOSE
            PFILE, PNGFILE, /W
            CONTINUE
          ENDIF  
          
          IM = IMAGE(BLK,RGB_TABLE=ARR,DIMENSIONS=[1124,1124],POSITION=[50,50,1074,1074],/DEVICE)
          PY = POLYLINE([50,1074,1074,50,50],[50,50,1074,1074,50],COLOR='BLACK',THICK=3,/DEVICE,/CURRENT)
          LATS = [36,40,44]        & LATNAMES = STRTRIM(LATS,2)
          LONS = [-76,-72,-68,-64] & LONNAMES = STRTRIM(LONS,2)
          NEAR = 0.1
          LL = MAPS_2LONLAT(AMAP,PX=1024,PY=1024)
          LAT = WHERE_NEAREST(LL.LAT(0,*),FLOAT(LATS),NEAR=NEAR)
          LON = WHERE_NEAREST(LL.LON(*,0),FLOAT(LONS),NEAR=NEAR)
          FOR S=0, N_ELEMENTS(LAT)-1 DO LLAT = SYMBOL(52,LAT(S)+50,'HLINE',SYM_SIZE=1.5,SYM_COLOR='BLACK',SYM_THICK=3,/SYM_FILLED,/CURRENT,/DEVICE,LABEL_STRING=LATNAMES(S),LABEL_FONT_SIZE=16,LABEL_FONT_STYLE='BOLD',LABEL_POSITION='L')
          FOR S=0, N_ELEMENTS(LON)-1 DO LLON = SYMBOL(LON(S)+50,52,'VLINE',SYM_SIZE=1.5,SYM_COLOR='BLACK',SYM_THICK=3,/SYM_FILLED,/CURRENT,/DEVICE,LABEL_STRING=LONNAMES(S),LABEL_FONT_SIZE=16,LABEL_FONT_STYLE='BOLD',LABEL_POSITION='B')
          
          IF N EQ 1 THEN IM.SAVE,!S.PROJECTS+'ECOAP/'+AMAP+'_EPU_EEZ_FIGURE-BLANK.PNG' ELSE IM.SAVE,!S.PROJECTS+'ECOAP/'+AMAP+'_EPU_FIGURE-BLANK.PNG'
          FSZ = 26 & FC = 'WHITE'
          TM = TEXT(265,425,'Mid-Atlantic',FONT_SIZE=FSZ,FONT_STYLE='BOLD',COLOR=FC,/DEVICE,ORIENTATION=45) ; TM = TEXT(310,540,'MAB',FONT_SIZE=FSZ,FONT_STYLE='BOLD',COLOR=FC,/DEVICE)
          TB = TEXT(670,620,'Georges!CBank', FONT_SIZE=FSZ,FONT_STYLE='BOLD',COLOR=FC,/DEVICE,ALIGNMENT=0.5) ; TB = TEXT(650,650,'GB', FONT_SIZE=FSZ,FONT_STYLE='BOLD',COLOR=FC,/DEVICE)
          TM = TEXT(635,780,'Gulf of!CMaine',FONT_SIZE=FSZ,FONT_STYLE='BOLD',COLOR=FC,/DEVICE,ALIGNMENT=0.5) ; TM = TEXT(590,810,'GOM',FONT_SIZE=FSZ,FONT_STYLE='BOLD',COLOR=FC,/DEVICE)
          TS = TEXT(780,795,'Scotian!CShelf', FONT_SIZE=FSZ*.75,FONT_STYLE='BOLD',COLOR=FC,/DEVICE,ALIGNMENT=0.5) ; TS = TEXT(755,810,'SS', FONT_SIZE=FSZ,FONT_STYLE='BOLD',COLOR=FC,/DEVICE)
          IF N EQ 1 THEN IM.SAVE,!S.PROJECTS+'ECOAP/'+AMAP+'_EPU_EEZ_FIGURE-NO_LEGEND.PNG' ELSE IM.SAVE,!S.PROJECTS+'ECOAP/'+AMAP+'_EPU_FIGURE-NO_LEGEND.PNG' 
    
          FOR S=0, N_ELEMENTS(CLRS)-2 DO SYM = SYMBOL(950,300-(S*50),SYMBOL='SQUARE',SYM_SIZE=2,SYM_COLOR=CLRS(S),/SYM_FILLED,LABEL_STRING=NICKNAMES(S),LABEL_FONT_SIZE=18,LABEL_FONT_STYLE='BOLD',/DEVICE)  
          IF N EQ 1 THEN BEGIN
            SYM = SYMBOL(950,300-(S*50),SYMBOL='HLINE',SYM_SIZE=2.5,SYM_THICK=5,SYM_COLOR=CLRS(S),/SYM_FILLED,LABEL_STRING=NICKNAMES(S),LABEL_FONT_SIZE=18,LABEL_FONT_STYLE='BOLD',/DEVICE) 
            PY = POLYLINE([920,1040,1040,920,920],[80,80,330,330,80],COLOR='BLACK',THICK=2,/DEVICE,/CURRENT)
            IM.SAVE,!S.PROJECTS+'ECOAP/'+AMAP+'_EPU_EEZ_FIGURE.PNG';,RESOLUTION=1200
          ENDIF ELSE BEGIN
            FOR S=0, N_ELEMENTS(CLRS)-2 DO SYM = SYMBOL(950,300-(S*50),SYMBOL='SQUARE',SYM_SIZE=2,SYM_COLOR=CLRS(S),/SYM_FILLED,LABEL_STRING=NICKNAMES(S),LABEL_FONT_SIZE=18,LABEL_FONT_STYLE='BOLD',/DEVICE) 
            PY = POLYLINE([920,1040,1040,920,920],[120,120,330,330,120],COLOR='BLACK',THICK=2,/DEVICE,/CURRENT)
            IM.SAVE,!S.PROJECTS+'ECOAP/'+AMAP+'_EPU_FIGURE.PNG';,RESOLUTION=1200
          ENDELSE
         
          IM.CLOSE
        ENDFOR
      ENDFOR
    ENDFOR ; BASEMAP      
STOP
  ENDIF ; DO_EPU_MAP

; *******************************************************
  IF KEY(DO_GOMN_MAPS) THEN BEGIN
; *******************************************************
    SNAME = DO_GOMN_MAPS
    PRINT, 'Running: ' + 'DO_GOMN_MAPS'
    SWITCHES,DO_GOMN_MAPS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATASETS=DATASETS,DATERANGE=DATERANGE

    VERSION = 'V2_2017'
    MAP_OUT = ['NEC','GOMN']
    DIR     = 'NES_ECOREGIONS
    SUBAREAS = 'NES_EPU_EXTENDED'
    NAMES   = [['GOM','GB','SS','MAB']+'_CORE','MAB_SHELF','GB_SHELF']
    EEZ = !S.IDL_SHAPEFILES + 'EEZ/EEZ.shp'
    BATHY = -200
    
    BUFFER = 0
    PAL='PAL_BR'
    CORE_COLOR  = 255  & CORE_THICK = 5
    FULL_COLOR  = []
    EEZ_COLOR   = [] ; 200
    BATHY_COLOR = [];0
    DATERANGE = [2012,2016]
    PRODS   = ['PPD','MICROPP', 'NANOPP']
    SS      = ['MID','MID']
    
    CFILES = FLS(!S.MODIS + 'OC-MODISA-1KM/L3B2/STATS/CHLOR_A-OCI/A*',DATERANGE=DATERANGE)
    CFILES = [CFILES,FLS(!S.SEADAS + 'OC-SEAWIFS-1KM/L3B2/STATS/CHLOR_A-OCI/A*',DATERANGE=DATERANGE)]
    
    PFILES = FLS(!S.PP + 'PP-MODISA-1KM/L3B2/STATS/PPD-VGPM2/A*',DATERANGE=DATERANGE)
    PFILES = [PFILES,FLS(!S.PP + 'PP-SEAWIFS-1KM/L3B2/STATS/PPD-VGPM2/A*',DATERANGE=DATERANGE)]
    
    MFILES = FLS(!S.PP + 'PP-MODISA-1KM/L3B2/STATS/MICROPP/A*',DATERANGE=DATERANGE)
    MFILES = [MFILES,FLS(!S.PP + 'PP-SEAWIFS-1KM/L3B2/STATS/MICROPP/A*',DATERANGE=DATERANGE)]
    
    NFILES = FLS(!S.PP + 'PP-MODISA-1KM/L3B2/STATS/NANOPICOPP/A*',DATERANGE=DATERANGE)
    NFILES = [NFILES,FLS(!S.PP + 'PP-SEAWIFS-1KM/L3B2/STATS/NANOPICOPP/A*',DATERANGE=DATERANGE)]
    
    SFILES = FLS(!S.DATASETS + 'SST-MUR-1KM/L3B2/STATS/SST/A*',DATERANGE=DATERANGE)
    SFILES = [SFILES,FLS(!S.DATASETS + 'SST-AVHRR-4KM/L3B2/STATS/SST/A*',DATERANGE=DATERANGE)]
    
    FSILES = FLS(!S.FRONTS + 'SST-MODISA-1KM/NWA/STATS/SST_BOA-4UM/A*',DATERANGE=DATERANGE)
 ;   FSILES = [FSILES,FLS(!S.FRONTS + 'SST-MODIST-1KM/NWA/STATS/SST_BOA-4UM/A*',DATERANGE=DATERANGE)]
    
    FCILES = FLS(!S.FRONTS + 'OC-MODISA-1KM/NWA/STATS/CHL_BOA-OCI/A*',DATERANGE=DATERANGE)
    FCILES = [FCILES,FLS(!S.FRONTS + 'OC-SEAWIFS-1KM/NWA/STATS/CHL_BOA-OCI/A*',DATERANGE=DATERANGE)]
    
    CSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-L3B2-CHLOR_A-OCI-STATS.SAV'
    PSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-L3B2-PPD-VGPM2-STATS.SAV
    MSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-L3B2-MICROPP-STATS.SAV'
    NSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-L3B2-NANOPICOPP-STATS.SAV'
    SSTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MUR-V04.1-L3B2-SST-STATS.SAV'
    SFTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-NWA-SST_BOA-4UM-STATS.SAV'
    CFTAT = DIR_PLOTS+'YY_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-MODISA-R2015-NWA-CHL_BOA-OCI-STATS.SAV'

    IF FILE_MAKE([CFILES,PFILES,MFILES,NFILES,SFILES,FSILES,FCILES],[CSTAT,PSTAT,MSTAT,NSTAT,SSTAT,SFTAT,CFTAT]) EQ 1 THEN BEGIN
      STATS_ARRAYS_PERIODS, CFILES, STAT_PROD='CHLOR_A',      DIR_OUT=DIR_PLOTS, PERIOD_CODE_OUT='YY', DO_STATS=['MEAN','SUM','NUM'], FILE_LABEL=FILE_LABEL, DATERANGE=DATERANGE, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
      STATS_ARRAYS_PERIODS, PFILES, STAT_PROD='PPD',          DIR_OUT=DIR_PLOTS, PERIOD_CODE_OUT='YY', DO_STATS=['MEAN','SUM','NUM'], FILE_LABEL=FILE_LABEL, DATERANGE=DATERANGE, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
      STATS_ARRAYS_PERIODS, MFILES, STAT_PROD='MICROPP',    DIR_OUT=DIR_PLOTS, PERIOD_CODE_OUT='YY', DO_STATS=['MEAN','SUM','NUM'], FILE_LABEL=FILE_LABEL, DATERANGE=DATERANGE, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
      STATS_ARRAYS_PERIODS, NFILES, STAT_PROD='NANOPICOPP', DIR_OUT=DIR_PLOTS, PERIOD_CODE_OUT='YY', DO_STATS=['MEAN','SUM','NUM'], FILE_LABEL=FILE_LABEL, DATERANGE=DATERANGE, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
      STATS_ARRAYS_PERIODS, SFILES, STAT_PROD='SST',          DIR_OUT=DIR_PLOTS, PERIOD_CODE_OUT='YY', DO_STATS=['MEAN','SUM','NUM'], FILE_LABEL=FILE_LABEL, DATERANGE=DATERANGE, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
      STATS_ARRAYS_FRONTS,  FSILES,                           DIR_OUT=DIR_PLOTS, PERIOD_CODE_OUT='YY', DO_STATS=['MEAN','SUM','NUM'], FILE_LABEL=FILE_LABEL, DATERANGE=DATERANGE, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
      STATS_ARRAYS_FRONTS,  FCILES,                           DIR_OUT=DIR_PLOTS, PERIOD_CODE_OUT='YY', DO_STATS=['MEAN','SUM','NUM'], FILE_LABEL=FILE_LABEL, DATERANGE=DATERANGE, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE
    ENDIF
    
    FOR M=0, N_ELEMENTS(MAP_OUT)-1 DO BEGIN
      AMAP = MAP_OUT(M)
      MS = MAPS_SIZE(AMAP,PX=PX,PY=PY)
      LAND = READ_LANDMASK(AMAP)
      LSTR = READ_LANDMASK(AMAP,/STRUCT)
      
     ; CORE = CSV_READ(!S.SHAPEFILES + 'ECOREGIONS/ECOREGIONS_CORE.csv')
     ; FULL = CSV_READ(!S.SHAPEFILES + 'ECOREGIONS/ECOREGIONS_FULL.csv')
      EEZ  = CSV_READ(!S.IDL_SHAPEFILES + 'ECOREGIONS/EEZ_POINTS.csv')
      
   ;   READ_SHPFILE, EEZ, MAPP=AMAP, COLOR=COLOR, FILL=1, THICK=THICK, VERBOSE=VERBOSE, GET_RANGE=GET_RANGE, TAGNAME=TAGNAME, VALUE=VALUE, RANGE_LON=RANGE_LON, RANGE_LAT=RANGE_LAT, $
   ;     STRUCT=ESTRUCT, NORMAL=NORMAL, DO_ALL=DO_ALL, AUTO=AUTO, LONS=LONS, LATS=LATS, AROUND=AROUND, PSYM=PSYM, SYMSIZE=SYMSIZE, _EXTRA=_EXTRA, OVERWRITE=OVERWRITE
      
      BATH  = TOPO_GET(AMAP,BATHY,SWIDTH=SWIDTH,THICKS=THICKS,VERBOSE=VERBOSE,FACT=1) 
      TT    = TOPO_TAGS(AMAP,BATHY) 
      BSUBS = STRSPLIT(STRUCT_GET(BATH,TT.TAG+'.SUBS'),';',/EXTRACT)
      
      STRUCT = READ_SHPFILE(SUBAREAS, MAPP=AMAP, COLOR=COLORS, VERBOSE=VERBOSE)
      POS = WHERE(TAG_NAMES(STRUCT) EQ STRUPCASE(SUBAREAS),/NULL)
      STR = STRUCT.(POS)          
      
      CSUBS = []
      FOR F=0, N_ELEMENTS(NAMES)-1 DO BEGIN
        IF AMAP EQ 'GOMN' AND STRMID(NAMES(F),0,3) EQ 'MAB' THEN CONTINUE
        POS2 = WHERE(TAG_NAMES(STR) EQ STRUPCASE(NAMES(F)),/NULL,COUNT)
        CSUBS = [CSUBS,STR.(POS2[0]).OUTLINE]    
      ENDFOR
      BLANK = BYTE(MAPS_BLANK(AMAP,FILL=0))
      BLANK(CSUBS) = 1
      CDIL = IMG_DILATE(BLANK,TARGET=1,BOX=CORE_THICK,SUBS=CSUBS)
          
      
;      FOR F=0, N_ELEMENTS(NAMES)-1 DO BEGIN
;        IF AMAP EQ 'GOMN' AND NAMES(F) EQ 'MAB' THEN CONTINUE
;        POS2 = WHERE(STRMID(TAG_NAMES(STR),0,STRLEN(NAMES(F))) EQ STRUPCASE(NAMES(F)),/NULL,COUNT)
;        SUBS = STR.(POS2[0]).SUBS
;        IF COUNT EQ 2 THEN SUBS = [SUBS,STR.(POS2[1]).SUBS]
;        BLANK = BYTE(MAPS_BLANK(AMAP,FILL=0))
;        BLANK(SUBS) = 1
;        CDIL = IMAGE_OUTLINE(BLANK,LEVELS=1,OUTLINE=OUTLINE)
;        CSUBS = [CSUBS, OUTLINE]
;      ENDFOR
;      IF CORE_THICK NE 1 THEN BEGIN
;        BLANK = BYTE(MAPS_BLANK(AMAP,FILL=0))
;        BLANK(CSUBS) = 1
;        CDIL = IMG_DILATE(BLANK,TARGET=1,BOX=CORE_THICK,SUBS=CSUBS)
;      ENDIF
            
;      B = WHERE_SETS(FULL.EPU)
;      FOR N=0, N_ELEMENTS(B)-1 DO BEGIN
;        SET = FULL(WHERE_SETS_SUBS(B(N)))
;        IF AMAP EQ 'GOMN' AND B(N).VALUE EQ 'MAB' THEN CONTINUE
;        PXPY = MAP_DEG2IMAGE(LAND,FLOAT(SET.LON),FLOAT(SET.LAT),X=FX,Y=FY,AROUND=0,SUBS=FSUBS)
;        PLOTS, FX, FY, COLOR=2, THICK=4, /DEVICE
;      ENDFOR
;      IMG = TVRD()
;      FSUBS = WHERE(IMG EQ 2,/NULL)
      
;      PXPY = MAP_DEG2IMAGE(LAND,FLOAT(EEZ.LON), FLOAT(EEZ.LAT), X=EX,Y=EY,AROUND=0,SUBS=ESUBS)
;      EX = EX[WHERE(EX GT 0)] & EY = EY[WHERE(EX GT 0)]
;      PLOTS, EX, EY, COLOR=3,  THICK=3, /DEVICE
;      IMG = TVRD()
;      ESUBS = WHERE(IMG EQ 3,/NULL)
;      
;      ZWIN
      
      HS  = 100 ; HORIZONTAL IMAGE BOTTOM
      CB  = 60  ; COLORBAR BOTTOM
      CT  = 90  ; COLORBAR TOP
      DIF = 480 ; X & Y SIZE OF THE IMAGE
      
      INDIVIDUAL_PLOTS = [CSTAT, SSTAT, CFTAT, SFTAT]
      FOR I=0, N_ELEMENTS(INDIVIDUAL_PLOTS)-1 DO BEGIN
        IPLT = INDIVIDUAL_PLOTS(I)
        PNGFILE = REPLACE(IPLT,['L3B2','NWA','.SAV'],[AMAP,AMAP,'.PNG'])
        IF FILE_MAKE(IPLT,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
        TICKNAMES=[]
        TICKVALUES=[]
        CASE IPLT OF
          CSTAT: BEGIN & PROD='CHLOR_A_0.03_30' & CTITLE='Chlorophyll ' + UNITS('CHLOR_A',/NO_NAME)          & CD = STRUCT_READ(IPLT,MAP_OUT=AMAP,STRUCT=CS) & CBYT=PRODS_2BYTE(CS.MEAN,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & END
          SSTAT: BEGIN & PROD='SST_5_25'        & CTITLE='Temperature ' + UNITS('SST',/NO_NAME)              & CD = STRUCT_READ(IPLT,MAP_OUT=AMAP,STRUCT=CS) & CBYT=PRODS_2BYTE(CS.MEAN,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & TICKNAMES=['5','10','15','20','25'] & END
          SFTAT: BEGIN & PROD='GRAD_SST'   & CTITLE='SST Gradients ' + UNITS('GRAD_SST',/NO_NAME)        & CD = STRUCT_READ(IPLT,MAP_OUT=AMAP,STRUCT=CS,TAG='GRAD_SST') & CBYT=PRODS_2BYTE(CS.GRAD_SST,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & END
          CFTAT: BEGIN & PROD='GRAD_CHL_1_1.07' & CTITLE='Chlorophyll Gradients' + UNITS('GRAD_CHL',/NO_NAME) & CD = STRUCT_READ(IPLT,MAP_OUT=AMAP,STRUCT=CS,TAG='GRAD_CHL') & CBYT=PRODS_2BYTE(CS.GRAD_CHL,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) & TICKNAMES=['1.0','1.02','1.04','1.06'] & END
        ENDCASE       
          
        IF FULL_COLOR  NE [] THEN CBYT(FSUBS) = FULL_COLOR 
        IF CORE_COLOR  NE [] THEN CBYT(CSUBS) = CORE_COLOR 
        IF EEZ_COLOR   NE [] THEN CBYT(ESUBS) = EEZ_COLOR 
        IF BATHY_COLOR NE [] THEN CBYT(BSUBS) = BATHY_COLOR 
        CBYT(LSTR.COAST_THICK) = 0 ; Rewrite the coastline
        
        CHM = WINDOW(DIMENSIONS=[480,580],BUFFER=BUFFER,BACKGROUND_TRANSPARENCY=0)
        CPNG = IMAGE(CBYT,RGB_TABLE=CPAL_READ('PAL_BR'),POSITION=[0,HS,DIF,HS+DIF],/CURRENT,/DEVICE)          
        PRODS_COLORBAR, PROD, IMG=CPNG, LOG=0, ORIENTATION=0, TITLE=CTITLE, FONT_SIZE=14, POSITION=[DIF*.1,CB,DIF*.9,CT], TEXTPOS=0, /DEVICE, PAL='PAL_BR', TICKNAMES=TICKNAMES, TICKVALUES=TICKVALUES
        PFILE, PNGFILE
        CHM.SAVE, PNGFILE, RESOLUTION=RESOLUTION
        CHM.CLOSE
      ENDFOR   
      
      MD = STRUCT_READ(MSTAT,MAP_OUT=AMAP,STRUCT=MS)
      ND = STRUCT_READ(NSTAT,MAP_OUT=AMAP,STRUCT=NS)

      PNGFILE = DIR_PLOTS + 'DAILY_MEAN_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-'+AMAP+'-PP_MICRO_NANO_COMPOSITE-'+VERSION+'.PNG'
      HS  = 100 ; HORIZONTAL IMAGE BOTTOM
      CB  = 60  ; COLORBAR BOTTOM
      CT  = 90  ; COLORBAR TOP
      DIF = 480 ; X & Y SIZE OF THE IMAGE
      IF FILE_MAKE([MSTAT,NSTAT],PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_DAILY

      PROD = 'PPD_0.03_3.0'
      TITLES = ['Microplankton','Nano+Picoplankton']
      CTITLE = 'Primary Production ' + UNITS('PPD',/NO_NAME)

      MBYT = PRODS_2BYTE(MS.MEAN,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) 
      NBYT = PRODS_2BYTE(NS.MEAN,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) 
      
      IF FULL_COLOR  NE [] THEN BEGIN & MBYT(FSUBS) = FULL_COLOR  & NBYT(FSUBS) = FULL_COLOR  & END 
      IF CORE_COLOR  NE [] THEN BEGIN & MBYT(CSUBS) = CORE_COLOR  & NBYT(CSUBS) = CORE_COLOR  & END 
      IF EEZ_COLOR   NE [] THEN BEGIN & MBYT(ESUBS) = EEZ_COLOR   & NBYT(ESUBS) = EEZ_COLOR   & END 
      IF BATHY_COLOR NE [] THEN BEGIN & MBYT(BSUBS) = BATHY_COLOR & NBYT(BSUBS) = BATHY_COLOR & END
      MBYT(LSTR.COAST_THICK) = 0 & NBYT(LSTR.COAST_THICK) = 0 ; Rewrite the coastline
      
      WHM = WINDOW(DIMENSIONS=[960,580],BUFFER=BUFFER,BACKGROUND_TRANSPARENCY=0)
      MPNG = IMAGE(MBYT,RGB_TABLE=CPAL_READ('PAL_BR'),POSITION=[0,HS,DIF,HS+DIF],/CURRENT,/DEVICE)
      NPNG = IMAGE(NBYT,RGB_TABLE=CPAL_READ('PAL_BR'),POSITION=[DIF,HS,DIF+DIF,HS+DIF],/CURRENT,/DEVICE)     
      PRODS_COLORBAR, PROD, IMG=MPNG, LOG=1, ORIENTATION=0, TITLE=CTITLE, FONT_SIZE=14, POSITION=[DIF*2*.1,CB,DIF*2*.9,CT], TEXTPOS=0, /DEVICE, PAL='PAL_BR'
      TX = TEXT(10,    565,TITLES[0],FONT_SIZE=15,VERTICAL_ALIGNMENT=1.0,FONT_STYLE='BOLD',/DEVICE)
      TY = TEXT(DIF+10,565,TITLES[1],FONT_SIZE=15,VERTICAL_ALIGNMENT=1.0,FONT_STYLE='BOLD',/DEVICE)
      WHM.SAVE, PNGFILE, RESOLUTION=RESOLUTION
      WHM.CLOSE
      
      SKIP_DAILY: 
      PNGFILE = DIR_PLOTS + 'ANNUAL_SUM_'+STRJOIN(NUM2STR(DATERANGE),'_')+'-'+AMAP+'-PP_MICRO_NANO_COMPOSITE-'+VERSION+'.PNG'
      HS  = 100
      CS  = 50
      DIF = 480
      IF FILE_MAKE([MSTAT,NSTAT],PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      
      PROD = 'PPY_10_1000'
      TITLES = ['MICROPLANKTON','NANO+PICOPLANKTON']
      CTITLE = 'Primary Production ' + UNITS('PPY',/NO_NAME)
      MBYT = PRODS_2BYTE(MS.MEAN*365,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) 
      NBYT = PRODS_2BYTE(NS.MEAN*365,PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND) 
      
      IF FULL_COLOR  NE [] THEN BEGIN & MBYT(FSUBS) = FULL_COLOR  & NBYT(FSUBS) = FULL_COLOR  & END 
      IF CORE_COLOR  NE [] THEN BEGIN & MBYT(CSUBS) = CORE_COLOR  & NBYT(CSUBS) = CORE_COLOR  & END 
      IF EEZ_COLOR   NE [] THEN BEGIN & MBYT(ESUBS) = EEZ_COLOR   & NBYT(ESUBS) = EEZ_COLOR   & END 
      IF BATHY_COLOR NE [] THEN BEGIN & MBYT(BSUBS) = BATHY_COLOR & NBYT(BSUBS) = BATHY_COLOR & END
      MBYT(LSTR.COAST_THICK) = 0 & NBYT(LSTR.COAST_THICK) = 0 ; Rewrite the coastline

      WHS = WINDOW(DIMENSIONS=[960,580],BUFFER=BUFFER,BACKGROUND_TRANSPARENCY=0)
      MPNG = IMAGE(MBYT,RGB_TABLE=CPAL_READ('PAL_BR'),POSITION=[0,HS,DIF,HS+DIF],/CURRENT,/DEVICE)     
      NPNG = IMAGE(NBYT,RGB_TABLE=CPAL_READ('PAL_BR'),POSITION=[DIF,HS,DIF+DIF,HS+DIF],/CURRENT,/DEVICE)
      PRODS_COLORBAR, PROD, IMG=MPNG, LOG=1, ORIENTATION=0, TITLE=CTITLE, FONT_SIZE=14, POSITION=[DIF*2*.15,CB,DIF*2*.85,CT], TEXTPOS=0, /DEVICE, PAL='PAL_BR'
      TX = TEXT(10,    565,TITLES[0],FONT_SIZE=15,VERTICAL_ALIGNMENT=1.0,FONT_STYLE='BOLD',/DEVICE)
      TY = TEXT(DIF+10,565,TITLES[1],FONT_SIZE=15,VERTICAL_ALIGNMENT=1.0,FONT_STYLE='BOLD',/DEVICE)
      
      PFILE, PNGFILE
      WHS.SAVE, PNGFILE, RESOLUTION=RESOLUTION
      WHS.CLOSE
      
    ENDFOR
    STOP
 
  ENDIF ; DO_GOMN_MAPS


; *******************************************************
  IF DO_SUMMARY_MAPS GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_SUMMARY_MAPS GE 2
    
    MAP_OUT = 'NEC'
    BUFFER = 0
    RESOLUTION = 1200
    RGB = CPAL_READ('PAL_SW3')
    OUTLINE_FILE = !S.OUTLINES + 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_FULL_NO_ESTUARIES-OUTLINE.PNG'
    OUTLINE_FILE = !S.IMAGES   + 'MASK_SUBAREA-NEC-PXY_1024_1024-ESTUARY_SHELF_LME.PNG'
    MASK = STRUCT_SD_READ(!S.IMAGES + 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_FULL_NO_ESTUARIES.SAVE',STRUCT=STRUCT,MAP_OUT=MAP_OUT)
    BATHY = STRUCT_SD_READ(!S.BATHY+'SRTM30PLUS-NEC-PXY_1024_1024-BATHY-SMOOTH_5.SAVE',STRUCT=BATHY_STRUCT)
    MASK_SUBS = WHERE(BATHY GT 1100.0)
    ADD_MASK = 1
    IF ADD_MASK EQ 1 THEN FILEEXTRA = '-OFFSHORE_MASK' ELSE FILEEXTRA = ''
    
    PNGFILE = DIR_PLOTS + 'ANNUAL-'+MAP_OUT+'-NESLME-CHL_PP_MICRO_NANO_COMPOSITE'+FILEEXTRA+'DPI_' + NUM2STR(RESOLUTION) + '.PNG'    
    CHL_SS = '.1_10'
    PP_SS  = ''
    PER_SS = ''
    
    CTSTATS = FIX_PATH(!S.DATASETS + 'OC-SEAWIFS-MLAC/NEC/STATS/CHLOR_A-PAN/')
    CMSTATS = FIX_PATH(!S.DATASETS + 'OC-SEAWIFS-MLAC/NEC/STATS/MICRO_PERCENTAGE-PAN/')
    CNSTATS = FIX_PATH(!S.DATASETS + 'OC-SEAWIFS-MLAC/NEC/STATS/NANO_PERCENTAGE-PAN/')
    
    PTSTATS = FIX_PATH(!S.DATASETS + 'PP-SEAWIFS-AVHRR-MLAC/NEC/STATS/PPD-VGPM2/')
    PMSTATS = FIX_PATH(!S.DATASETS + 'PP-SEAWIFS-AVHRR-MLAC/NEC/STATS/MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2/')
    PNSTATS = FIX_PATH(!S.DATASETS + 'PP-SEAWIFS-AVHRR-MLAC/NEC/STATS/NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2/')
    
    DIRS    = [CTSTATS,CMSTATS,CNSTATS,PTSTATS,PMSTATS,PNSTATS]
    PRODS   = ['CHLOR_A','PERCENT','PERCENT','PPD','PERCENT','PERCENT']
    SS      = ['.03_33','100','100','.1_10','100','100']
    LETTER  = ['B','C','D','F','G','H']
    CTITLES = [UNITS('CHLOR_A',/NO_NAME),'(%)','(%)',UNITS('PPD',/NO_NAME),'(%)','(%)'] 
    TITLES  = ['Total Chlorophyll',       '% Microplankton Chlorophyll','% Nano+Picoplankton Chlorophyll',$
               'Total Primary Production','% Microplankton Production', '% Nano+Picoplankton Production']
    
    LAYOUT = [4,2,0]
    W = WINDOW(DIMENSIONS=[1124,620],BUFFER=BUFFER,BACKGROUND_TRANSPARENCY=0)
    XPOS = [326,592,858,326,592,858]
    YPOS = [334,334,334,48,48,48]
    TXTX = XPOS + 128
    TXTY = YPOS + 260 
    DIF  = 256
    
        
    MAR = READALL(DIR_DATA + 'MARMAP-ECOREGIONS-CHL-PPD-SURFACE-SIZE_FRACTION-STATS.csv')
    DATE = JD_2DATE(PERIOD_2JD(MAR.PERIOD))
    CPER = FLOAT(MAR.CHL_PER_NET_MEAN)*100
    PPER = FLOAT(MAR.PP_PER_NET_MEAN)*100
    YTITLE = '% Microplankton Chlorophyll'
    XTITLE = '% Microplankton Production'
    PARAMS = [2,3,4,8]
    POS = [60,48,316,304]
    P = PLOT(CPER,PPER,POSITION=POS,/DEVICE,FONT_SIZE=11,FONT_STYLE='BOLD',SYMBOL='CIRCLE',SYM_SIZE=0.8,/SYM_FILLED,BACKGROUND_COLOR=[255,247,168],COLOR=[0,137,152],XCOLOR=[0,70,127],YCOLOR=[0,70,127],$
      FONT_NAME='HELVETICA',XTITLE=XTITLE,YTITLE=YTITLE,XRANGE=[0,100],YRANGE=[0,100],YSTYLE=1,LINESTYLE=6,/CURRENT,FONT_COLOR=[0,70,127])
    P = PLOT([0,80],[0,80*0.822],THICK=5,COLOR=[0,70,127],/OVERPLOT)
    TXT = TEXT(188,308,'MARMAP',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=12,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
    TXT = TEXT(POS[0]+10,POS(3)-20,'E',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=12,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
    
    POS = [60,334,316,590]
    IMG = STRUCT_SD_2IMAGE_NG(BATHY_STRUCT,IMG_POSITION=POS,USE_PROD='BATHY',/CURRENT,ADD_MASK=ADD_MASK,MASK_SUBS=MASK_SUBS,MASK_COLOR=255,$
      /ADD_LAND,/ADD_COAST,/ADD_OUTLINE,OUTLINE_THICK=3,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=0,SPECIAL_SCALE='1000',BUFFER=BUFFER,PAL='PAL_BATHY',/DEVICE)
    TXT = TEXT(POS[0]+10,POS(3)-20,'A',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=12,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
    TXT = TEXT(POS[0]+128,POS[1]+260,'Northeast Shelf LME EcoRegions',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=12,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
    TXT = TEXT(290,470,'Western!CScotian!CShelf',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=10,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
    TXT = TEXT(160,540,'Gulf of!CMaine',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=10,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
    TXT = TEXT(250,445,'Georges!CBank',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=10,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
    TXT = TEXT(180,410,'Mid-Atlantic!CBight',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=10,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
    CBPOS = [POS[0]+55,POS[1]+5,POS[0]+245,POS[1]+20]
    CB = COLOR_BAR_SCALE_NG(PROD='BATHY',SPECIAL_SCALE='1000',PX=CBPOS[0],PY=CBPOS[1],CHARSIZE=11,XDIM=CBPOS(2)-CBPOS[0],YDIM=CBPOS(3)-CBPOS[1],PAL='PAL_BATHY',$
      COLOR=[0,70,127],HORIZONTAL=1,TOP=1,TITLE='Depth (m)',FONT='HELVETICA')
    FOR NTH=0, N_ELEMENTS(DIRS)-1 DO BEGIN
      FILES = FILE_SEARCH(DIRS[NTH]+'ANNUAL_'+'*MEAN.SAVE')
      IF N_ELEMENTS(FILES) GT 1 OR FILES[0] EQ '' THEN STOP
      FP = PARSE_IT(FILES,/ALL)
      DATA = STRUCT_SD_READ(FILES[0],STRUCT=STRUCT)        
      POS = [XPOS[NTH],YPOS[NTH],XPOS[NTH]+DIF,YPOS[NTH]+DIF]
      CBPOS = [POS[0]+55,POS[1]+5,POS[0]+245,POS[1]+20]
      IMG = STRUCT_SD_2IMAGE_NG(STRUCT,IMG_POSITION=POS,USE_PROD=STRUCT.PROD,/CURRENT,ADD_MASK=ADD_MASK,MASK_SUBS=MASK_SUBS,MASK_COLOR=255,$
        /ADD_LAND,/ADD_COAST,/ADD_OUTLINE,OUTLINE_THICK=3,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=0,SPECIAL_SCALE=SS[NTH],BUFFER=BUFFER,PAL='PAL_SW3',/DEVICE)
      TXT = TEXT(TXTX[NTH],TXTY[NTH],TITLES[NTH],ALIGNMENT=0.5,/DEVICE,FONT_SIZE=12,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
      TXT = TEXT(POS[0]+10,POS(3)-20,LETTER[NTH],ALIGNMENT=0.5,/DEVICE,FONT_SIZE=12,FONT_COLOR=[0,70,127],FONT_STYLE='BOLD')
      CB = COLOR_BAR_SCALE_NG(PROD=PRODS[NTH],SPECIAL_SCALE=SS[NTH],PX=CBPOS[0],PY=CBPOS[1],CHARSIZE=11,XDIM=CBPOS(2)-CBPOS[0],YDIM=CBPOS(3)-CBPOS[1],PAL='PAL_SW3',$
           COLOR=[0,70,127],HORIZONTAL=1,TOP=1,TITLE=CTITLES[NTH],FONT='HELVETICA')            
    ENDFOR
    
    W.SAVE, PNGFILE, RESOLUTION=RESOLUTION
    W.CLOSE
    STOP   
    
  ENDIF ; DO_SUMMARY_MAPS  

; *******************************************************
  IF DO_MONTHLY_EXTRACTS GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_MONTHLY_EXTRACTS GE 2
    
    MP = 'NEC'
    MPIN = 'L3B2'
    SENSORS = ['SEAWIFS','MODISA']
    CHL  = ['CHLOR_A-PAN', 'MICRO-PAN',  'NANOPICO-PAN']
    PP   = ['PPD-VGPM2','MICROPP','NANOPICOPP'];,'PPD-OPAL','MICROPP-MM_PAN_OPAL','NANOPICOPP-MM_PAN_OPAL']
    YEARS = YEAR_RANGE('1998','2016',/STRING)
    PP_CHL_INPUT = ['PAN','OCI']
    
; ===> GET THE SUBSCRIPTS FROM THE SHAPEFILES FOR THE ECOREGIONS    
    SUBAREA = 'NES_EPU_NOESTUARIES'
    NAMES    = ['NES','SS','GOM','GB','MAB'] 
    CODES    = NAMES + '_full'
    SUBTITLES = ['Northeast Shelf LME','Scotian Shelf','Gulf of Maine','Georges Bank','Mid-Atlantic Bight']
    STRUCT = READ_SHPFILE(SUBAREA, MAPP=MP, COLOR=COLOR, FILL=1, THICK=THICK, VERBOSE=VERBOSE, GET_RANGE=GET_RANGE, TAGNAME=TAGNAME, VALUE=VALUE, RANGE_LON=RANGE_LON, RANGE_LAT=RANGE_LAT, $
      NORMAL=NORMAL, DO_ALL=DO_ALL, AUTO=AUTO, LONS=LONS, LATS=LATS, AROUND=AROUND, PSYM=PSYM, SYMSIZE=SYMSIZE, _EXTRA=_EXTRA, OVERWRITE=OVERWRITE)
    SHPS=[]
    FOR AREAS=0, N_ELEMENTS(NAMES)-1 DO BEGIN
      ANAME = NAMES(AREAS)                                                      ; SUBAREA NAME
      ATAG = WHERE(TAG_NAMES(STRUCT) EQ STRUPCASE(ANAME+'_FULL'),/NULL)         ; FIRST TAG IN THE READ_SHPFILE STRUCTURE
      BTAG = WHERE(TAG_NAMES(STRUCT.(ATAG)) EQ STRUPCASE(ANAME+'_FULL'),/NULL)  ; SECOND TAG IN THE READ_SHPFILE STRUCTURE
      SHPS = CREATE_STRUCT(SHPS,ANAME,STRUCT.(ATAG).(BTAG).SUBS)                ; CREATE A NEW STRUCTURE WITH THE SUBAREA SUBSCRIPTS FROM THE INPUT MAP
    ENDFOR 
    
; ===> LOOP THROUGH THE INPUT ALGORITHMS (PAN OR OCI)
    FOR CHLI=0, N_ELEMENTS(PP_CHL_INPUT)-1 DO BEGIN
      CHLIN = PP_CHL_INPUT(CHLI)
      IF CHLIN EQ 'PAN' THEN DIR_SAVE = DIR_SAVE_PAN ELSE DIR_SAVE = DIR_SAVE_OC
      
; ===> IDENTIFY THE DIRECTORIES AND PRODUCTS BASED ON THE INPUT ALGORITHM        
      DIRS = []
      PRODS = []
      FOR S=0, N_ELEMENTS(SENSORS)-1 DO BEGIN
        CDIR = 'OC-'+SENSORS(S)+'-1KM'
        IF CHLIN EQ 'PAN' THEN PDIR = 'PP-'+SENSORS(S)+'_PAN'+'-1KM' ELSE PDIR = 'PP-'+SENSORS(S)+'-1KM'
        DIRS  = [DIRS,REPLICATE(CDIR,N_ELEMENTS(CHL)),REPLICATE(PDIR,N_ELEMENTS(PP))]
        PRODS = [PRODS,CHL,PP]
      ENDFOR
      IF CHLIN EQ 'OCI' THEN PRODS = REPLACE(PRODS,'CHLOR_A-PAN','CHLOR_A-OCI')
        
; ===> LOOP THROUGH EACH YEAR AND DIRECTORY        
      FOR Y=0, N_ELEMENTS(YEARS)-1 DO BEGIN
        FOR D=0, N_ELEMENTS(DIRS)-1 DO BEGIN
          DIR_OUT = DIR_SAVE + PRODS(D) + SL & DIR_TEST,DIR_OUT
          IF PRODS(D) EQ 'MICROPP' OR PRODS(D) EQ 'NANOPICOPP' THEN SPROD = 'PPD_SIZE-MAR' ELSE SPROD = PRODS(D)
          CASE [1] OF
            HAS(DIRS(D),'OC-SEAWIFS'):  DIRIN = !S.SEADAS
            HAS(DIRS(D),'OC-MODISA'):   DIRIN = !S.MODIS
            HAS(DIRS(D),'PP-'):         DIRIN = !S.PP
          ENDCASE

; ===> FIND FILES            
          PRINT, 'Searching: ' + FIX_PATH(DIRIN + DIRS(D)+'/'+MPIN+'/STATS/'+PRODS(D)+'/M_'+YEARS(Y)+'*'+PRODS(D))
          FILES = FILE_SEARCH(FIX_PATH(DIRIN + DIRS(D)+'/'+MPIN+'/STATS/'+SPROD+'/M_'+YEARS(Y)+'*'+SPROD+'*.SAV*'))
          IF FILES[0] EQ '' THEN CONTINUE
            
; ===> CREATE OUTPUT FILE NAMES            
          FP = PARSE_IT(FILES,/ALL)
          SAVEFILES = []
          FOR A=0, N_ELEMENTS(NAMES)-1 DO SAVEFILES = [SAVEFILES,DIR_OUT + 'M_'+YEARS(Y) + '-' + CHLIN + '-' + REPLACE(FP[0].NAME,[FP[0].PERIOD,SPROD],[NAMES(A),PRODS(D)]) +'.SAV']
          IF FILE_MAKE(FILES,SAVEFILES,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE

; ===> READ THE FILES AND COMBINE INTO A SINGLE STRUCTURE            
          STRUCT = []
          FOR N=0, N_ELEMENTS(FILES)-1 DO BEGIN
            PFILE, FILES(N), /R
            DT = STRUCT_READ(FILES(N),TAG=PRODS(D),MAP_OUT=MP,BINS=BINS,/NO_STRUCT)
            IF BINS NE [] THEN DT = MAPS_L3B_2ARR(DT,MAPP=MP,BINS=BINS) 
            STRUCT = CREATE_STRUCT(STRUCT,FP(N).PERIOD,DT)
          ENDFOR
          TAGS = TAG_NAMES(STRUCT)       
          
; ===> LOOP THROUGH EACH SUBAREA
          SUBAREA_TAGS = TAG_NAMES(SHPS)
          FOR S=0, N_TAGS(SHPS)-1 DO BEGIN
            ANAME = SUBAREA_TAGS(S)
            SUBS  = SHPS.(S) 
            SAVEFILE = DIR_OUT + 'M_'+YEARS(Y)+'-'+CHLIN+'-'+REPLACE(FP[0].NAME,[FP[0].PERIOD,SPROD],[ANAME,PRODS(D)]) +'.SAV'
            IF FILE_MAKE(FILES,SAVEFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
            TEMP = []
            FOR T=0, N_ELEMENTS(TAGS)-1 DO TEMP = CREATE_STRUCT(TEMP,TAGS(T)+'_'+ANAME,STRUCT.(T)(SUBS))
            PRINT, 'Writing: ' + SAVEFILE
            SAVE,FILENAME=SAVEFILE,TEMP,/COMPRESS         
          ENDFOR ; AREAS  
        ENDFOR ; DIRS
      ENDFOR ; YEARS
    ENDFOR ; PP_CHL_INPUT    
  ENDIF ; DO_MONTHLY_EXTRACTS
  
; *******************************************************
  IF DO_MONTHLY_SUMS GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_MONTHLY_SUMS GE 2     
    
    GIS = CSV_READ(DIR_PROJECTS+'NEC_ECOREGIONS_AREAS.csv')    
    NAMES    = ['GB','GOM','MAB','SS','NES'] 
    
    MAPIN = 'NEC';'L3B2'
    IF MAPIN EQ 'L3B2' THEN PIXAREA = MAPS_BLANK('L3B2',FILL=2.3^2) ELSE PIXAREA = MAPS_PIXAREA(MAPIN)  ; Average pixel area of the L3B2 maps (need to create a more precise are with MAPS_PIXAREA once we figure out how to convert the L3Bs to the exact Sinusoidal map projection)
      
    SUBAREA = 'NES_EPU_NOESTUARIES'
    NAMES    = ['NES','SS','GOM','GB','MAB']
    CODES    = NAMES + '_full'
    SUBTITLES = ['Northeast Shelf LME','Scotian Shelf','Gulf of Maine','Georges Bank','Mid-Atlantic Bight']
    STRUCT = READ_SHPFILE(SUBAREA, MAPP=MAPIN, COLOR=COLOR, FILL=1, THICK=THICK, VERBOSE=VERBOSE, GET_RANGE=GET_RANGE, TAGNAME=TAGNAME, VALUE=VALUE, RANGE_LON=RANGE_LON, RANGE_LAT=RANGE_LAT, $
             NORMAL=NORMAL, DO_ALL=DO_ALL, AUTO=AUTO, LONS=LONS, LATS=LATS, AROUND=AROUND, PSYM=PSYM, SYMSIZE=SYMSIZE, _EXTRA=_EXTRA, OVERWRITE=OVERWRITE)
    SHPS=[]
    FOR AREAS=0, N_ELEMENTS(NAMES)-1 DO BEGIN
      ANAME = NAMES(AREAS)                                                      ; SUBAREA NAME
      ATAG = WHERE(TAG_NAMES(STRUCT) EQ STRUPCASE(ANAME+'_FULL'),/NULL)         ; FIRST TAG IN THE READ_SHPFILE STRUCTURE
      BTAG = WHERE(TAG_NAMES(STRUCT.(ATAG)) EQ STRUPCASE(ANAME+'_FULL'),/NULL)  ; SECOND TAG IN THE READ_SHPFILE STRUCTURE
      SHPS = CREATE_STRUCT(SHPS,ANAME,STRUCT.(ATAG).(BTAG).SUBS)                ; CREATE A NEW STRUCTURE WITH THE SUBAREA SUBSCRIPTS FROM THE INPUT MAP
    ENDFOR
    
    PP_TARGETS   = ['VGPM2'];,'OPAL']
    PP_CHL_INPUT = ['PAN','OCI']
    SENSORS      = ['SEAWIFS','MODISA']
    
    FOR CHLI=0, N_ELEMENTS(PP_CHL_INPUT)-1 DO BEGIN
      CHLIN = PP_CHL_INPUT(CHLI)
      IF CHLIN EQ 'PAN' THEN DIR_SAVE = DIR_SAVE_PAN ELSE DIR_SAVE = DIR_SAVE_OC
      
      FOR TAR=0, N_ELEMENTS(PP_TARGETS)-1 DO BEGIN
        PP_TARGET = PP_TARGETS(TAR)

        FOR SEN=0, N_ELEMENTS(SENSORS)-1 DO BEGIN
          SENSOR = SENSORS(SEN)
          CHL  = ['CHLOR_A-PAN', 'MICRO-PAN', 'NANOPICO-PAN']   
          IF CHLIN EQ 'OCI' THEN CHL[0] = 'CHLOR_A-OCI'
          PPD = ['PPD-VGPM2','MICROPP','NANOPICOPP']
          PRODS = [CHL,PPD]          
          RANGES = ['0.001_80.0','0.001_80.0','0.001_80.0','0.001_50.0','0.001_50.0','0.001_50']
          
          DIRS  = DIR_SAVE + PRODS + SL
          YEARS = YEAR_RANGE('1998','2007',/STRING)
          IF SENSOR EQ 'MODISA' THEN YEARS = YEAR_RANGE('2008','2016',/STRING)
          
          FOR N=0, N_ELEMENTS(NAMES)-1 DO BEGIN
            ANAME = NAMES(N)
            FOR P=0, N_ELEMENTS(PRODS)-1 DO BEGIN
              APROD = PRODS(P)
              SAVES = FILE_SEARCH(DIRS(P) + 'M_*' + '-' + ANAME+'-*' + SENSOR + '*' + PRODS(P) + '*.SAV')
              IF N_ELEMENTS(SAVES) LE 1 THEN CONTINUE
              FP = FILE_PARSE(SAVES)
              PERIOD = STRSPLIT(FP.NAME,'-',/EXTRACT) & PERIOD = PERIOD
              SAVEFILE = DIRS(P) + REPLACE(FP[0].NAME_EXT,FIRST(PERIOD[0]),'ALL')
              IF FILE_MAKE(SAVES,SAVEFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
              PRINT, 'Combining savefiles for ' + ANAME+'-*' + SENSOR + '*' + PRODS(P)
              COUNTER = 0
              FOR S=0, N_ELEMENTS(SAVES)-1 DO BEGIN
                YR = PERIOD(S)
                YR = STRSPLIT(YR[0],'_',/EXTRACT)
                IF WHERE(YR[1] EQ YEARS) LT 0 THEN CONTINUE
                DATA = IDL_RESTORE(SAVES(S))
                IF COUNTER EQ 0 THEN OUTSTRUCT =  DATA ELSE OUTSTRUCT = STRUCT_MERGE(OUTSTRUCT,DATA)
                IF N_ELEMENTS(TAG_NAMES(OUTSTRUCT)) EQ 1 THEN STOP
                GONE, DATA
                COUNTER = COUNTER + 1
              ENDFOR ; SAVES
              PRINT, 'Writing ' + SAVEFILE
              SAVE,FILENAME=SAVEFILE,OUTSTRUCT,/COMPRESS
              GONE, OUTSTRUCT
            ENDFOR ; PRODS
          ENDFOR ; NAMES 
          
          FOR N=0, N_ELEMENTS(NAMES)-1 DO BEGIN
            ANAME = NAMES(N)           
            GIS_AREA = FLOAT(GIS[WHERE(STRUPCASE(GIS.SUBAREA_NAME) EQ STRUPCASE(ANAME+'_FULL'))].AREA_KM)
            AREA_SUBS = SHPS.(WHERE(TAG_NAMES(SHPS) EQ ANAME))
            TOTAL_AREA = PIXAREA(AREA_SUBS)
            SAVES = []
            FOR I=0, N_ELEMENTS(DIRS)-1 DO SAVES = [SAVES,FILE_SEARCH(DIRS(I) + 'ALL-' + CHLIN + '-' + ANAME+'-*' + SENSOR + '*' + PRODS(I) + '*.SAV')]
            
            DIR_CSV   = DIR_SAVE + 'STATS-CSV'  + SL & DIR_TEST,DIR_CSV
            DIR_STATS = DIR_SAVE + 'STATS-SAVE' + SL & DIR_TEST,DIR_STATS
            
            MSAVEFILE = DIR_STATS + 'MONTHLY_SUM-' + CHLIN + '-' + SENSOR + '-' + ANAME + '-CHL_PRIMARY_PRODUCTION-'+PP_TARGET+'-STATS.SAV'
            MCSVFILE  = DIR_CSV   + 'MONTHLY_SUM-' + CHLIN + '-' + SENSOR + '-' + ANAME + '-CHL_PRIMARY_PRODUCTION-'+PP_TARGET+'-STATS.CSV'
            ASAVEFILE = DIR_STATS + 'ANNUAL_SUM-'  + CHLIN + '-' + SENSOR + '-' + ANAME + '-CHL_PRIMARY_PRODUCTION-'+PP_TARGET+'-STATS.SAV'
            ACSVFILE  = DIR_CSV   + 'ANNUAL_SUM-'  + CHLIN + '-' + SENSOR + '-' + ANAME + '-CHL_PRIMARY_PRODUCTION-'+PP_TARGET+'-STATS.CSV'
            IF FILE_MAKE(SAVES,[MSAVEFILE,ASAVEFILE,MCSVFILE,ACSVFILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
            
            CTDATA = IDL_RESTORE(FLS(DIRS[0] + 'ALL-' + CHLIN + '-' + ANAME+'-*' + SENSOR + '*' + PRODS[0] + '*.SAV'))
            CMDATA = IDL_RESTORE(FLS(DIRS[1] + 'ALL-' + CHLIN + '-' + ANAME+'-*' + SENSOR + '*' + PRODS[1] + '*.SAV'))
            CNDATA = IDL_RESTORE(FLS(DIRS(2) + 'ALL-' + CHLIN + '-' + ANAME+'-*' + SENSOR + '*' + PRODS(2) + '*.SAV'))
            PTDATA = IDL_RESTORE(FLS(DIRS(3) + 'ALL-' + CHLIN + '-' + ANAME+'-*' + SENSOR + '*' + PRODS(3) + '*.SAV'))
            PMDATA = IDL_RESTORE(FLS(DIRS(4) + 'ALL-' + CHLIN + '-' + ANAME+'-*' + SENSOR + '*' + PRODS(4) + '*.SAV'))
            PNDATA = IDL_RESTORE(FLS(DIRS(5) + 'ALL-' + CHLIN + '-' + ANAME+'-*' + SENSOR + '*' + PRODS(5) + '*.SAV'))
            TAGS   = TAG_NAMES(CTDATA)
            
            PRINT, 'Calculating stats for: ' + SENSOR + ':' + ANAME + ' '+PP_TARGET
            STRUCT = CREATE_STRUCT('SENSOR','','CHL_ALG','','PP_ALG','','YEAR','','MONTH','','SUBAREA_NAME','','N_SUBAREA_PIXELS',0L,'TOTAL_PIXEL_AREA_KM2',0.0D,'GIS_AREA_KM2',0.0D,$             
            ;  'TCHL_N_PIXELS',       0L,  'MCHL_N_PIXELS',       0L,  'NCHL_N_PIXELS',       0L,  $
            ;  'TCHL_N_PIXELS_AREA',  0.0D,'MCHL_N_PIXELS_AREA',  0.0D,'NCHL_N_PIXELS_AREA',  0.0D,$
              'TCHL_MEAN',           0.0, 'MCHL_MEAN',           0.0, 'NCHL_MEAN',           0.0, $
              'TCHL_SPATIAL_VAR',    0.0, 'MCHL_SPATIAL_VAR',    0.0, 'NCHL_SPATIAL_VAR',    0.0, $
              
            ;  'TPP_N_PIXELS',        0L,  'MPP_N_PIXELS',        0L,  'NPP_N_PIXELS',        0L,  $
            ;  'TPP_N_PIXELS_AREA',   0.0D,'MPP_N_PIXELS_AREA',   0.0D,'NPP_N_PIXELS_AREA',   0.0D,$
              'TPP_SPATIAL_SUM',     0.0D,'MPP_SPATIAL_SUM',     0.0D,'NPP_SPATIAL_SUM',     0.0D,$
              'TPP_MONTHLY_SUM',     0.0D,'MPP_MONTHLY_SUM',     0.0D,'NPP_MONTHLY_SUM',     0.0D,$
              'TPP_MEAN',            0.0, 'MPP_MEAN',            0.0, 'NPP_MEAN',            0.0, $
              'TPP_SPATIAL_VAR',     0.0, 'MPP_SPATIAL_VAR',     0.0, 'NPP_SPATIAL_VAR',     0.0)
                          
            MONTHS = ['01','02','03','04','05','06','07','08','09','10','11','12']
            STRUCT = REPLICATE(STRUCT_2MISSINGS(STRUCT),N_ELEMENTS(YEARS)*12)
            
            YSTRUCT = CREATE_STRUCT('SENSOR','','CHL_ALG','','PP_ALG','','YEAR','','SUBAREA_NAME','','N_SUBAREA_PIXELS',0L,'TOTAL_PIXEL_AREA_KM2',0.0D,'GIS_AREA_KM2',0.0D,$                        ; Pixel area information
              'TCHL_ANNUAL_MEAN', 0.0,  'MCHL_ANNUAL_MEAN', 0.0,  'NCHL_ANNUAL_MEAN', 0.0,$    ; Annual mean CHL
              'TPP_ANNUAL_MEAN',  0.0,  'MPP_ANNUAL_MEAN',  0.0,  'NPP_ANNUAL_MEAN',  0.0,$    ; Annual mean PP
              'TPP_ANNUAL_SUM',   0.0D, 'MPP_ANNUAL_SUM',   0.0D, 'NPP_ANNUAL_SUM',   0.0D,$   ; Annual SUM
              'TPP_N_MONTHS',     0L,   'MPP_N_MONTHS',     0L,   'NPP_N_MONTHS',     0L,$     ; Number of months used to calculate annual summed PP
              'TPP_ANNUAL_MTON',  0.0D, 'MPP_ANNUAL_MTON',  0.0D, 'NPP_ANNUAL_MTON',  0.0D,$   ; Annual PP sum converted to million tons
              'TPP_ANNUAL_TTON',  0.0D, 'MPP_ANNUAL_TTON',  0.0D, 'NPP_ANNUAL_TTON',  0.0D)    ; Annual PP sum converted to thousand tons
            YSTRUCT = REPLICATE(STRUCT_2MISSINGS(YSTRUCT),N_ELEMENTS(YEARS))
            I = 0
            STRUCT.SENSOR  = SENSORS(SEN) & YSTRUCT.SENSOR  = SENSORS(SEN)
            STRUCT.PP_ALG  = PP_TARGET    & YSTRUCT.PP_ALG  = PP_TARGET
            STRUCT.CHL_ALG = CHLIN        & YSTRUCT.CHL_ALG = CHLIN 
            FOR Y=0, N_ELEMENTS(YEARS)-1 DO BEGIN
              FOR MTH=0, N_ELEMENTS(MONTHS)-1 DO BEGIN
                STRUCT(I).YEAR = YEARS(Y)
                STRUCT(I).MONTH = MONTHS(MTH)
                STRUCT(I).SUBAREA_NAME = ANAME
                STRUCT(I).N_SUBAREA_PIXELS = N_ELEMENTS(CTDATA.(0))
                STRUCT(I).GIS_AREA_KM2 = GIS_AREA
                STRUCT(I).TOTAL_PIXEL_AREA_KM2 = TOTAL(PIXAREA(AREA_SUBS))
                                
                ATAG = 'M_' + YEARS(Y) + MONTHS(MTH) + '_' + ANAME
                CTPOS = WHERE(TAG_NAMES(CTDATA) EQ ATAG) & IF CTPOS EQ -1 THEN GOTO, SKIP_FILE
                
                VCT = VALID_DATA(CTDATA.(WHERE(TAG_NAMES(CTDATA) EQ ATAG)),PROD=PRODS[0],RANGE=RANGES[0],SUBS=OKCT,COUNT=COUNTCT,COMPLEMENT=CCT)
                VCM = VALID_DATA(CMDATA.(WHERE(TAG_NAMES(CMDATA) EQ ATAG)),PROD=PRODS[1],RANGE=RANGES[1],SUBS=OKCM,COUNT=COUNTCM,COMPLEMENT=CCM)
                VCN = VALID_DATA(CNDATA.(WHERE(TAG_NAMES(CNDATA) EQ ATAG)),PROD=PRODS(2),RANGE=RANGES(2),SUBS=OKCN,COUNT=COUNTCN,COMPLEMENT=CCN)
                VPT = VALID_DATA(PTDATA.(WHERE(TAG_NAMES(PTDATA) EQ ATAG)),PROD=PRODS(3),RANGE=RANGES(3),SUBS=OKPT,COUNT=COUNTPT,COMPLEMENT=CPT)
                VPM = VALID_DATA(PMDATA.(WHERE(TAG_NAMES(PMDATA) EQ ATAG)),PROD=PRODS(4),RANGE=RANGES(4),SUBS=OKPM,COUNT=COUNTPM,COMPLEMENT=CPM)
                VPN = VALID_DATA(PNDATA.(WHERE(TAG_NAMES(PNDATA) EQ ATAG)),PROD=PRODS(5),RANGE=RANGES(5),SUBS=OKPN,COUNT=COUNTPN,COMPLEMENT=CPN)
                
;                STRUCT(I).TCHL_N_PIXELS = COUNTCT
;                STRUCT(I).MCHL_N_PIXELS = COUNTCM
;                STRUCT(I).NCHL_N_PIXELS = COUNTCN
;                STRUCT(I).TPP_N_PIXELS  = COUNTPT
;                STRUCT(I).MPP_N_PIXELS  = COUNTPM
;                STRUCT(I).NPP_N_PIXELS  = COUNTPN
;                
;                IF N_ELEMENTS(PIXAREA) EQ 1 THEN BEGIN
;                  STRUCT(I).TCHL_N_PIXELS_AREA = PIXAREA*COUNTCT
;                  STRUCT(I).MCHL_N_PIXELS_AREA = PIXAREA*COUNTCM
;                  STRUCT(I).NCHL_N_PIXELS_AREA = PIXAREA*COUNTCN
;                  STRUCT(I).TPP_N_PIXELS_AREA  = PIXAREA*COUNTPT
;                  STRUCT(I).MPP_N_PIXELS_AREA  = PIXAREA*COUNTPM
;                  STRUCT(I).NPP_N_PIXELS_AREA  = PIXAREA*COUNTPN
;                ENDIF ELSE BEGIN
;                  STRUCT(I).TCHL_N_PIXELS_AREA = TOTAL(PIXAREA(OKCT))
;                  STRUCT(I).MCHL_N_PIXELS_AREA = TOTAL(PIXAREA(OKCM))
;                  STRUCT(I).NCHL_N_PIXELS_AREA = TOTAL(PIXAREA(OKCN))
;                  STRUCT(I).TPP_N_PIXELS_AREA  = TOTAL(PIXAREA(OKPT))
;                  STRUCT(I).MPP_N_PIXELS_AREA  = TOTAL(PIXAREA(OKPM))
;                  STRUCT(I).NPP_N_PIXELS_AREA  = TOTAL(PIXAREA(OKPN))
;                ENDELSE ; N_ELEMENTS(PIXAREA)
                
                STRUCT(I).TCHL_MEAN = GEOMEAN(VCT(OKCT))
                STRUCT(I).MCHL_MEAN = GEOMEAN(VCM(OKCM))
                STRUCT(I).NCHL_MEAN = GEOMEAN(VCN(OKCN))
                STRUCT(I).TPP_MEAN  = GEOMEAN(VPT(OKPT))
                STRUCT(I).MPP_MEAN  = GEOMEAN(VPM(OKPM))
                STRUCT(I).NPP_MEAN  = GEOMEAN(VPN(OKPN))
                                
                STRUCT(I).TCHL_SPATIAL_VAR = VARIANCE(VCT(OKCT))
                STRUCT(I).MCHL_SPATIAL_VAR = VARIANCE(VCM(OKCM))
                STRUCT(I).NCHL_SPATIAL_VAR = VARIANCE(VCN(OKCN))
                STRUCT(I).TPP_SPATIAL_VAR  = VARIANCE(VPT(OKPT))
                STRUCT(I).MPP_SPATIAL_VAR  = VARIANCE(VPM(OKPM))
                STRUCT(I).NPP_SPATIAL_VAR  = VARIANCE(VPN(OKPN))
                
                ; FILL IN MISSING PP DATA WITH THE MEAN PRIOR TO CALCULATING THE TOTAL
                VPT(CPT) = STRUCT(I).TPP_MEAN
                VPM(CPM) = STRUCT(I).MPP_MEAN
                VPN(CPN) = STRUCT(I).NPP_MEAN
                
                STRUCT(I).TPP_SPATIAL_SUM  = TOTAL(VPT*1000000*PIXAREA(AREA_SUBS))
                STRUCT(I).MPP_SPATIAL_SUM  = TOTAL(VPM*1000000*PIXAREA(AREA_SUBS))
                STRUCT(I).NPP_SPATIAL_SUM  = TOTAL(VPN*1000000*PIXAREA(AREA_SUBS))
                
                STRUCT(I).TPP_MONTHLY_SUM  = STRUCT(I).TPP_SPATIAL_SUM*DAYS_MONTH(MONTHS(MTH),YEAR=YEARS(Y))
                STRUCT(I).MPP_MONTHLY_SUM  = STRUCT(I).MPP_SPATIAL_SUM*DAYS_MONTH(MONTHS(MTH),YEAR=YEARS(Y))
                STRUCT(I).NPP_MONTHLY_SUM  = STRUCT(I).NPP_SPATIAL_SUM*DAYS_MONTH(MONTHS(MTH),YEAR=YEARS(Y))
                
                I = I+1
              ENDFOR ; MONTHS
              YSTRUCT(Y).YEAR = YEARS(Y)
              YSTRUCT(Y).SUBAREA_NAME = ANAME
              YSTRUCT(Y).N_SUBAREA_PIXELS = N_ELEMENTS(CTDATA.(0))
              YSTRUCT(Y).GIS_AREA_KM2 = GIS_AREA
              IF N_ELEMENTS(PIXAREA) EQ 1 THEN YSTRUCT(Y).TOTAL_PIXEL_AREA_KM2 = YSTRUCT(Y).N_SUBAREA_PIXELS * PIXAREA $
                                          ELSE YSTRUCT(Y).TOTAL_PIXEL_AREA_KM2 = TOTAL(PIXAREA(AREA_SUBS))
              OKY = WHERE(STRUCT.YEAR EQ YEARS(Y))
              
              YSTRUCT(Y).TCHL_ANNUAL_MEAN    = MEAN(STRUCT(OKY).TCHL_MEAN,/NAN)
              YSTRUCT(Y).MCHL_ANNUAL_MEAN    = MEAN(STRUCT(OKY).MCHL_MEAN,/NAN)
              YSTRUCT(Y).NCHL_ANNUAL_MEAN    = MEAN(STRUCT(OKY).NCHL_MEAN,/NAN)
              
              YSTRUCT(Y).TPP_ANNUAL_MEAN    = MEAN(STRUCT(OKY).TPP_MEAN,/NAN)*365
              YSTRUCT(Y).MPP_ANNUAL_MEAN    = MEAN(STRUCT(OKY).MPP_MEAN,/NAN)*365
              YSTRUCT(Y).NPP_ANNUAL_MEAN    = MEAN(STRUCT(OKY).NPP_MEAN,/NAN)*365
              
              YSTRUCT(Y).TPP_ANNUAL_SUM = TOTAL(STRUCT(OKY).TPP_MONTHLY_SUM,/NAN)
              YSTRUCT(Y).MPP_ANNUAL_SUM = TOTAL(STRUCT(OKY).MPP_MONTHLY_SUM,/NAN)
              YSTRUCT(Y).NPP_ANNUAL_SUM = TOTAL(STRUCT(OKY).NPP_MONTHLY_SUM,/NAN)
              
              YSTRUCT(Y).TPP_N_MONTHS = N_ELEMENTS(WHERE(STRUCT(OKY).TPP_MONTHLY_SUM NE MISSINGS(0.0)))
              YSTRUCT(Y).MPP_N_MONTHS = N_ELEMENTS(WHERE(STRUCT(OKY).MPP_MONTHLY_SUM NE MISSINGS(0.0)))
              YSTRUCT(Y).NPP_N_MONTHS = N_ELEMENTS(WHERE(STRUCT(OKY).NPP_MONTHLY_SUM NE MISSINGS(0.0)))
              
              YSTRUCT(Y).TPP_ANNUAL_MTON   = YSTRUCT(Y).TPP_ANNUAL_SUM * 1E-6
              YSTRUCT(Y).MPP_ANNUAL_MTON   = YSTRUCT(Y).MPP_ANNUAL_SUM * 1E-6
              YSTRUCT(Y).NPP_ANNUAL_MTON   = YSTRUCT(Y).NPP_ANNUAL_SUM * 1E-6
              
              YSTRUCT(Y).TPP_ANNUAL_TTON   = YSTRUCT(Y).TPP_ANNUAL_MTON/1000
              YSTRUCT(Y).MPP_ANNUAL_TTON   = YSTRUCT(Y).MPP_ANNUAL_MTON/1000
              YSTRUCT(Y).NPP_ANNUAL_TTON   = YSTRUCT(Y).NPP_ANNUAL_MTON/1000
                           
            ENDFOR ; YEARS
            PRINT, 'Writing: ' + MSAVEFILE
            PRINT, 'Writing: ' + ASAVEFILE
            SAVE, FILENAME=MSAVEFILE,STRUCT,/COMPRESS
            SAVE, FILENAME=ASAVEFILE,YSTRUCT,/COMPRESS
            STRUCT_2CSV,MCSVFILE,STRUCT
            STRUCT_2CSV,ACSVFILE,YSTRUCT
            SKIP_FILE:
          ENDFOR ; CODES
        ENDFOR ; SENSORS
          
        ASAVEFILE = DIR_SUMMARY + 'ANNUAL_SUM-'+CHLIN+'-SEAQ-NEC_ECOREGIONS-CHL_PRIMARY_PRODUCTION-'+PP_TARGET+'-STATS.SAV'
        ACSVFILE  = DIR_SUMMARY + 'ANNUAL_SUM-'+CHLIN+'-SEAQ-NEC_ECOREGIONS-CHL_PRIMARY_PRODUCTION-'+PP_TARGET+'-STATS.CSV'
        FILES = FILE_SEARCH(DIR_STATS + 'ANNUAL_SUM-'+CHLIN+'-'+'*-CHL_PRIMARY_PRODUCTION-'+PP_TARGET+'-STATS.SAV')
        IF FILE_MAKE(FILES,[ASAVEFILE,ACSVFILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
        FOR F=0, N_ELEMENTS(FILES)-1 DO BEGIN
          IF F EQ 0 THEN SUBSTRUCT = IDL_RESTORE(FILES(F)) ELSE SUBSTRUCT = STRUCT_CONCAT(IDL_RESTORE(FILES(F)),SUBSTRUCT)
        ENDFOR
        SUBSTRUCT = SUBSTRUCT[SORT(STRING(SUBSTRUCT.SUBAREA_NAME)+'_'+STRING(SUBSTRUCT.YEAR))]         
        PRINT, 'Writing: ' + ASAVEFILE   
        SAVE, FILENAME=ASAVEFILE,SUBSTRUCT,/COMPRESS
        STRUCT_2CSV,ACSVFILE,SUBSTRUCT
      ENDFOR  ; PP_TARGETS
    ENDFOR  ; PP_CHL_INPUT
  ENDIF  ; DO_MONTHLY_SUMS
  
; *******************************************************
  IF DO_PP_CONCATENATE GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_PP_CONCATENATE GE 2
    
    MAP = 'NEC'

    PP_TARGETS = ['VGPM2'];,'OPAL']
    PP_CHL_INPUT = ['OCI','PAN']
    
    FOR CHLI=0, N_ELEMENTS(PP_CHL_INPUT)-1 DO BEGIN ; Loop through CHL algorithms
      CHLIN = PP_CHL_INPUT(CHLI)
      DIR_IN = DIR_SUMMARY ;DIR_PROJECTS + 'DATA_BY_SUBAREA_' + CHLIN + SL
      
      SAVEFILE = DIR_IN + 'ANNUAL-' + CHLIN + '-MERGED_PP_SUM_DATA.SAV' 
      CSVFILE  = DIR_IN + 'ANNUAL-' + CHLIN + '-MERGED_PP_SUM_DATA.CSV'
      FILES  = FILE_SEARCH(DIR_IN + 'ANNUAL_SUM-' + CHLIN + '*CHL_PRIMARY_PRODUCTION-*-STATS.SAV')
      IF FILE_MAKE(FILES,[SAVEFILE,CSVFILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      FOR P=0, N_ELEMENTS(PP_TARGETS)-1 DO BEGIN
        FILES  = FILE_SEARCH(DIR_IN + 'ANNUAL_SUM-' + CHLIN + '*CHL_PRIMARY_PRODUCTION-'+PP_TARGETS(P)+'-STATS.SAV')
        STR = IDL_RESTORE(FILES)
        STR = STR[SORT(NUM2STR(STR.YEAR)+'_'+STR.SUBAREA_NAME)]
        STR = STRUCT_COPY(STR,TAGNAMES=['YEAR','SENSOR','SUBAREA_NAME','TOTAL_PIXEL_AREA_KM2','GIS_AREA_KM2','TPP_ANNUAL_MTON','MPP_ANNUAL_MTON','NPP_ANNUAL_MTON'])
        STR = STRUCT_RENAME(STR,['TPP_ANNUAL_MTON','MPP_ANNUAL_MTON','NPP_ANNUAL_MTON'],['TOTAL_','MICRO_','NANO_']+PP_TARGETS(P))
        IF P EQ 0 THEN CSTR = STR ELSE CSTR = STRUCT_JOIN(CSTR,STR,TAGNAMES=['YEAR','SENSOR','SUBAREA_NAME','TOTAL_PIXEL_AREA_KM2','GIS_AREA_KM2'])
      ENDFOR  
      FSTRUCT = CSTR[SORT(CSTR.SUBAREA_NAME+NUM2STR(CSTR.YEAR))]       
      PFILE, SAVEFILE  
      SAVE, FILENAME=SAVEFILE,FSTRUCT,/COMPRESS
      STRUCT_2CSV,CSVFILE,FSTRUCT
    ENDFOR ; PP_CHL_INPUT  
  ENDIF ; DO_PP_CONCATENATE  
  
  
; *******************************************************
  IF DO_PP_ANNUAL_MEAN GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_PP_ANNUAL_MEAN GE 2

    PP_TARGETS = ['VGPM2'];,'OPAL']
    PP_CHL_INPUT = ['PAN','OCI']
   
    FOR CHLI=0, N_ELEMENTS(PP_CHL_INPUT)-1 DO BEGIN ; Loop through CHL algorithms
      CHLIN = PP_CHL_INPUT(CHLI)
      DIR_IN = DIR_SUMMARY ; DIR_PROJECTS + 'DATA_BY_SUBAREA_' + CHLIN + SL
       
      SAVEFILE = DIR_IN + 'ANNUAL_MEAN-' + CHLIN + '-MERGED_PP_DATA.SAV'
      CSVFILE  = DIR_IN + 'ANNUAL_MEAN-' + CHLIN + '-MERGED_PP_DATA.CSV'
      FILES  = FILE_SEARCH(DIR_IN + 'ANNUAL_SUM-' + CHLIN + '*CHL_PRIMARY_PRODUCTION-*-STATS.SAV')
      IF FILE_MAKE(FILES,[SAVEFILE,CSVFILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
      FOR P=0, N_ELEMENTS(PP_TARGETS)-1 DO BEGIN
        FILES  = FILE_SEARCH(DIR_IN + 'ANNUAL_SUM-' + CHLIN + '*CHL_PRIMARY_PRODUCTION-'+PP_TARGETS(P)+'-STATS.SAV')
        STR = IDL_RESTORE(FILES)
        STR = STRUCT_COPY(STR,TAGNAMES=['YEAR','SENSOR','SUBAREA_NAME','TOTAL_PIXEL_AREA_KM2','GIS_AREA_KM2',$
          'TPP_ANNUAL_MEAN','MPP_ANNUAL_MEAN','NPP_ANNUAL_MEAN','TPP_ANNUAL_TTON','MPP_ANNUAL_TTON','NPP_ANNUAL_TTON']);$
   
        STR = STRUCT_RENAME(STR,['TPP_ANNUAL_MEAN','MPP_ANNUAL_MEAN','NPP_ANNUAL_MEAN'],['TOTAL_PP_MEAN_', 'MICRO_PP_MEAN_', 'NANO_PP_MEAN_'] +PP_TARGETS(P))
        STR = STRUCT_RENAME(STR,['TPP_ANNUAL_TTON','MPP_ANNUAL_TTON','NPP_ANNUAL_TTON'],['TOTAL_TTON_',    'MICRO_TTON_',    'NANO_TTON_']    +PP_TARGETS(P))
        IF P EQ 0 THEN STRUCT = STR ELSE STRUCT = STRUCT_JOIN(STRUCT,STR,TAGNAMES=['YEAR','SENSOR','SUBAREA_NAME','GIS_AREA_KM2'])
      ENDFOR
      STRUCT = STRUCT[SORT(ROUNDS(STRUCT.YEAR)+'_'+STRUCT.SUBAREA_NAME)]
;      IF S EQ 0 THEN CSTR = STRUCT ELSE CSTR = STRUCT_CONCAT(CSTR,STRUCT)

      SETS = WHERE_SETS(STRUCT.SUBAREA_NAME)
      TEMP  = REPLICATE(CREATE_STRUCT('SUBAREA_NAME','','TOTAL_PIXEL_AREA_KM2',0.0D,'GIS_AREA_KM2',0.0D,$
        'ANNUAL_MEAN_VGPM2_TOTAL',0.0D,'ANNUAL_MEAN_VGPM2_MICRO',0.0D,'ANNUAL_MEAN_VGPM2_NANO',0.0D,'MEAN_VGPM2_TTON_TOTAL',0.0D,'MEAN_VGPM2_TTON_MICRO',0.0D,'MEAN_VGPM2_TTON_NANO',0.0D,$
        'ANNUAL_MEAN_OPAL_TOTAL', 0.0D,'ANNUAL_MEAN_OPAL_MICRO', 0.0D,'ANNUAL_MEAN_OPAL_NANO', 0.0D,'MEAN_OPAL_TTON_TOTAL', 0.0D,'MEAN_OPAL_TTON_MICRO', 0.0D,'MEAN_OPAL_TTON_NANO', 0.0),N_ELEMENTS(SETS))

      FOR S=0, N_ELEMENTS(SETS)-1 DO BEGIN
        SUBS = WHERE_SETS_SUBS(SETS(S))
        MSET  = STRUCT(SUBS)  
       
        TEMP(S).SUBAREA_NAME         = MSET[0].SUBAREA_NAME
        TEMP(S).TOTAL_PIXEL_AREA_KM2 = MSET[0].TOTAL_PIXEL_AREA_KM2
        TEMP(S).GIS_AREA_KM2         = MSET[0].GIS_AREA_KM2

        TEMP(S).ANNUAL_MEAN_VGPM2_TOTAL   = MEAN(MSET.TOTAL_PP_MEAN_VGPM2)
        TEMP(S).ANNUAL_MEAN_VGPM2_MICRO   = MEAN(MSET.MICRO_PP_MEAN_VGPM2)
        TEMP(S).ANNUAL_MEAN_VGPM2_NANO    = MEAN(MSET.NANO_PP_MEAN_VGPM2)
        TEMP(S).MEAN_VGPM2_TTON_TOTAL     = MEAN(MSET.TOTAL_TTON_VGPM2)
        TEMP(S).MEAN_VGPM2_TTON_MICRO     = MEAN(MSET.MICRO_TTON_VGPM2)
        TEMP(S).MEAN_VGPM2_TTON_NANO      = MEAN(MSET.NANO_TTON_VGPM2)

     ;   TEMP(S).ANNUAL_MEAN_OPAL_TOTAL   = MEAN(MSET.TOTAL_PP_MEAN_OPAL)
     ;   TEMP(S).ANNUAL_MEAN_OPAL_MICRO   = MEAN(MSET.MICRO_PP_MEAN_OPAL)
     ;   TEMP(S).ANNUAL_MEAN_OPAL_NANO    = MEAN(MSET.NANO_PP_MEAN_OPAL)
     ;   TEMP(S).MEAN_OPAL_TTON_TOTAL     = MEAN(MSET.TOTAL_TTON_OPAL)
     ;   TEMP(S).MEAN_OPAL_TTON_MICRO     = MEAN(MSET.MICRO_TTON_OPAL)
     ;   TEMP(S).MEAN_OPAL_TTON_NANO      = MEAN(MSET.NANO_TTON_OPAL)

      ENDFOR

      SAVE, FILENAME=SAVEFILE,TEMP,/COMPRESS
      STRUCT_2CSV,CSVFILE,TEMP
     
    ENDFOR ; PP_CHL_INPUT
  ENDIF ; DO_PP_ANNUAL_MEAN
  
  
  
  
; *******************************************************
  IF DO_SUMMED_STATS GE 1 THEN BEGIN
; *******************************************************
    
    OVERWRITE = DO_SUMMED_STATS GE 2
  
    CODES = [5,6,7,8,32]
    
    FILES = FILE_SEARCH(DIR_SUMMARY + 'ANNUAL_SUM-*-SEAQ-NEC_ECOREGIONS-CHL_PRIMARY_PRODUCTION-*-STATS.SAV')                
    SAVEFILE = DIR_SUMMARY + 'ANNUAL-PRIMARY_PRODUCTION-STATS-SUMMARY.SAV'
    CSVFILE  = DIR_SUMMARY + 'ANNUAL-PRIMARY_PRODUCTION-STATS-SUMMARY.csv'
    IF FILE_MAKE(FILES,[SAVEFILE,CSVFILE],OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, DONE_SUMMED_STATS 
    STRUCT = CREATE_STRUCT('SUBAREA_NAME','','CHL_ALG','','PP_ALG','','TOTAL_PIXEL_AREA_KM2',0.D,'GIS_AREA_KM2',0D,$
      'INTERANNUAL_TOTAL_CHL_MEAN',0.0,'INTERANNUAL_MICRO_CHL_MEAN',0.0,'INTERANNUAL_NANO_CHL_MEAN',0.0,$
      'INTERANNUAL_TOTAL_PP_MEAN',0.0,'INTERANNUAL_MICRO_PP_MEAN',0.0,'INTERANNUAL_NANO_PP_MEAN',0.0,$
      'INTERANNUAL_TOTAL_SUMMED_PP_MEAN',0.0,'INTERANNUAL_MICRO_SUMMED_PP_MEAN',0.0,'INTERANNUAL_NANO_SUMMED_PP_MEAN',0.0,$
      'INTERANNUAL_TOTAL_PP_VAR',0.0,'INTERANNUAL_MICRO_PP_VAR',0.0,'INTERANNUAL_NANO_PP_VAR',0.0)
    STRUCT = REPLICATE(STRUCT_2MISSINGS(STRUCT),N_ELEMENTS(FILES)*N_ELEMENTS(CODES))
    
    I = 0
    FOR N=0, N_ELEMENTS(FILES)-1 DO BEGIN
      FP = FILE_PARSE(FILES(N))
      D = IDL_RESTORE(FILES(N))
      TAGS = TAG_NAMES(D)
      FOR C=0, N_ELEMENTS(NAMES)-1 DO BEGIN
        ANAME = NAMES(C)
        SET = D[WHERE(D.SUBAREA_NAME EQ ANAME)]
        STRUCT(I).SUBAREA_NAME                      = SET[0].SUBAREA_NAME
        STRUCT(I).CHL_ALG                           = SET[0].CHL_ALG
        STRUCT(I).PP_ALG                            = SET[0].PP_ALG
        STRUCT(I).TOTAL_PIXEL_AREA_KM2              = SET[0].TOTAL_PIXEL_AREA_KM2
        STRUCT(i).GIS_AREA_KM2                      = SET[0].GIS_AREA_KM2
        STRUCT(I).INTERANNUAL_TOTAL_CHL_MEAN        = MEAN(SET.TCHL_ANNUAL_MEAN,/NAN)
        STRUCT(I).INTERANNUAL_MICRO_CHL_MEAN        = MEAN(SET.MCHL_ANNUAL_MEAN,/NAN)
        STRUCT(I).INTERANNUAL_NANO_CHL_MEAN         = MEAN(SET.NCHL_ANNUAL_MEAN,/NAN)
        STRUCT(I).INTERANNUAL_TOTAL_PP_MEAN         = MEAN(SET.TPP_ANNUAL_MEAN,/NAN)
        STRUCT(I).INTERANNUAL_MICRO_PP_MEAN         = MEAN(SET.MPP_ANNUAL_MEAN,/NAN)
        STRUCT(I).INTERANNUAL_NANO_PP_MEAN          = MEAN(SET.NPP_ANNUAL_MEAN,/NAN)
        STRUCT(I).INTERANNUAL_TOTAL_SUMMED_PP_MEAN  = MEAN(SET.TPP_ANNUAL_MTON,/NAN)
        STRUCT(I).INTERANNUAL_MICRO_SUMMED_PP_MEAN  = MEAN(SET.MPP_ANNUAL_MTON,/NAN)
        STRUCT(I).INTERANNUAL_NANO_SUMMED_PP_MEAN   = MEAN(SET.NPP_ANNUAL_MTON,/NAN)
        STRUCT(I).INTERANNUAL_TOTAL_PP_VAR          = VARIANCE(SET.TPP_ANNUAL_MTON,/NAN)
        STRUCT(I).INTERANNUAL_MICRO_PP_VAR          = VARIANCE(SET.MPP_ANNUAL_MTON,/NAN)
        STRUCT(I).INTERANNUAL_NANO_PP_VAR           = VARIANCE(SET.NPP_ANNUAL_MTON,/NAN)
        I = I+1
      ENDFOR  
    ENDFOR
    
    STRUCT = STRUCT[WHERE(STRUCT.SUBAREA_NAME NE MISSINGS(''))]
    PFILE, SAVEFILE
    SAVE,FILENAME=SAVEFILE,STRUCT
    STRUCT_2CSV,CSVFILE,STRUCT
    DONE_SUMMED_STATS:
        
  ENDIF ; DO_SUMMED_STATS


; *******************************************************
  IF KEY(DO_SUBAREA_EXTRACT) THEN BEGIN
; *******************************************************
    SNAME = DO_SUBAREA_EXTRACT
    PRINT, 'Running: ' + 'DO_SUBAREA_EXTRACT'
    SWITCHES,DO_SUBAREA_EXTRACT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATASETS=DATASETS,DATERANGE=DATERANGE

    MAPIN = 'L3B2'
    CALGS = ['OCI','PAN']
    
    SUBAREA = 'NES_ECOREGIONS'
    NAMES    = ['NES','SS','GOM','GB','MAB'] + '_full'
    SUBAREAFILES = FLS(!S.IDL_SHAPEFILES + 'NES_ECOREGIONS' + SL + [NAMES] + '.shp')
  
    FILE_PERIODS = ['M','A','MONTH']
    
    FOR C=0, N_ELEMENTS(CALGS)-1 DO BEGIN  
      DATASETS = ['OC-SEA','OC-MOD','PP-SEA','PP-MOD'] ; 'PP-SA','OC-SA'
      IF CALGS(C) EQ 'PAN' THEN DATASETS = REPLACE(DATASETS,['PP-SEA','PP-MOD'],['PP-SEA_P','PP-MOD_P'])
      
      BUFFER = 1
      WINX = 790
      WINY = 1024
      CTITLE = ' '
    
      YMINOR=1
      FONTSIZE = 8.5
      SYMSIZE = 0.45
      THICK = 2
      FONT = 0
      YMARGIN = [0.3,0.3]
      XMARGIN = [4,1]
      COLORA = 'ORANGE_RED'
      COLORB = 'DARK_BLUE'
      COLORXY = !COLOR.(WHERE(TAG_NAMES(!COLOR) EQ COLORB))
    
      FOR DTH=0, N_ELEMENTS(DATASETS)-1 DO BEGIN
        PRINT, 'Finding files for DATASET: ' + DATASETS(DTH)
        CASE DATASETS(DTH) OF
          'OC-SEA':   BEGIN & DATASET='OC-SEAWIFS-1KM'     & DIR = !S.SEADAS   & PRODS=['CHLOR_A-OCI', 'MICRO-PAN', 'NANOPICO-PAN'] & END
          'OC-MOD':   BEGIN & DATASET='OC-MODISA-1KM'      & DIR = !S.MODIS    & PRODS=['CHLOR_A-OCI', 'MICRO-PAN', 'NANOPICO-PAN'] & END
          'OC-SA':    BEGIN & DATASET='OC-SA-1KM'          & DIR = !S.DATASETS & PRODS=['CHLOR_A-OCI', 'MICRO-PAN', 'NANOPICO-PAN'] & END
          'PP-SEA':   BEGIN & DATASET='PP-SEAWIFS-1KM'     & DIR = !S.PP      & PRODS=['PPD-VGPM2', 'MICROPP', 'NANOPICOPP', 'MICROPP_PERCENTAGE', 'NANOPICOPP_PERCENTAGE'] & END
          'PP-MOD':   BEGIN & DATASET='PP-MODISA-1KM'      & DIR = !S.PP      & PRODS=['PPD-VGPM2', 'MICROPP', 'NANOPICOPP', 'MICROPP_PERCENTAGE', 'NANOPICOPP_PERCENTAGE'] & END
          'PP-SA':    BEGIN & DATASET='PP-SEAWIFS-1KM'     & DIR = !S.PP      & PRODS=['PPD-VGPM2', 'MICROPP', 'NANOPICOPP', 'MICROPP_PERCENTAGE', 'NANOPICOPP_PERCENTAGE'] & END
          'PP-SEA_P': BEGIN & DATASET='PP-SEAWIFS_PAN-1KM' & DIR = !S.PP      & PRODS=['PPD-VGPM2', 'MICROPP', 'NANOPICOPP', 'MICROPP_PERCENTAGE', 'NANOPICOPP_PERCENTAGE'] & END
          'PP-MOD_P': BEGIN & DATASET='PP-MODISA_PAN-1KM'  & DIR = !S.PP      & PRODS=['PPD-VGPM2', 'MICROPP', 'NANOPICOPP', 'MICROPP_PERCENTAGE', 'NANOPICOPP_PERCENTAGE'] & END
          'PP-SA_P':  BEGIN & DATASET='PP-SEAWIFS_PAN-1KM' & DIR = !S.PP      & PRODS=['PPD-VGPM2', 'MICROPP', 'NANOPICOPP', 'MICROPP_PERCENTAGE', 'NANOPICOPP_PERCENTAGE'] & END
        ENDCASE ; DATASETS
    
        IF CALGS(C) EQ 'PAN' THEN PRODS = REPLACE(PRODS,'CHLOR_A-OCI','CHLOR_A-PAN')    
        DIR = DIR + DATASET + SL + MAPIN + SL    
        FOR PTH=0, N_ELEMENTS(PRODS)-1 DO BEGIN
          FILES = []
          IF HAS(FILE_PERIODS,'D') THEN BEGIN
            FILES = [FILES,FLS(DIR+SL+'SAVE'+SL+PRODS(PTH)+SL+'D_*'+PRODS(PTH)+'*.SAV',DATERANGE=YEARS)]
            IF PRODS(PTH) EQ 'CHLOR_A-OCI' THEN FILES = [FILES,FLS(DIR+'NC'+SL+'*CHL*.nc',DATERANGE=YEARS)]
            IF PRODS(PTH) EQ 'MICRO-PAN' OR PRODS(PTH) EQ 'NANOPICO-PAN' THEN FILES = [FILES,FLS(DIR+'SAVE'+SL+'PHYTO'+SL+'D*SAV',DATERANGE=YEARS)]
          ENDIF  
          FILES = [FILES,FLS(DIR+'STATS'+SL+PRODS(PTH)+SL+[FILE_PERIODS]+'_*.SAV*',DATERANGE=YEARS)]
          IF HAS(PRODS(PTH),'MICROPP') OR HAS(PRODS(PTH),'NANOPICOPP') THEN FILES = [FILES,FLS(DIR+'STATS'+SL+'PPD_SIZE-MAR'+SL+'M_*.SAV',DATERANGE=YEARS)]
         
          VERBOSE=0
          FA = PARSE_IT(FILES[0],/ALL) 
          SAVEFILE = DIR_SUBAREAS + 'NESPP_'+CALGS(C)+'-'+INAME_MAKE(SENSOR=FA[0].SENSOR, SATELLITE=FA[0].SATELLITE, METHOD=FA[0].METHOD, COVERAGE=FA[0].COVERAGE, MAP=FA[0].MAP) + '-' + PRODS(PTH) + '-SUBAREAS.SAV'
          SUBAREAS_EXTRACT,FILES,PROD=PRODS(PTH),REGIONS=REGIONS,SHP_FILES=SUBAREAFILES,DIR_OUT=DIR_SUMMARY,DIR_SHP=DIR_SHP,SAVEFILE=SAVEFILE,INIT=INIT,VERBOSE=VERBOSE
        ENDFOR ; PRODS
      ENDFOR ; DTH
      SFILES = FLS(DIR_SUBAREAS + 'NESPP_'+CALGS(C)+'*-SUBAREAS.SAV')
      COMBO = []
      FOR S=0, N_ELEMENTS(SFILES)-1 DO BEGIN
        D = STRUCT_READ(SFILES(S))
        IF S EQ 0 THEN COMBO = D ELSE COMBO = STRUCT_CONCAT(COMBO,D)
      ENDFOR  
      SAVEFILE = DIR_SUMMARY + 'NESPP_'+CALGS(C)+'_SUBAREA_EXTRACTS.SAV'
      SAVE, COMBO, FILENAME=SAVEFILE
      SAVE_2CSV, SAVEFILE
    ENDFOR ; CALGS  
  ENDIF ; DO_SUBAREA_EXTRACT    



; *******************************************************
  IF KEY(DO_CHL_PP_TIMESERIES) THEN BEGIN
; *******************************************************
    SNAME = DO_CHL_PP_TIMESERIES
    PRINT, 'Running: ' + 'DO_CHL_PP_TIMESERIES'
    SWITCHES,DO_CHL_PP_TIMESERIES,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATASETS=DATASETS,DATERANGE=DATERANGE
    
    BUFFER     = 0
    DATES      = [19980101,20161231]
    PALGS      = ['VGPM2'];,'OPAL']
    CALGS      = ['OCI'];,'PAN']
    CDATASET   = ['OC/SEAWIFS',  'OC/MODISA']
    PERIODS    = 'M'    
    SDATE      = DATE_2JD(['19970101000000','20071231235959'])
    MDATE      = DATE_2JD(['20080101000000','20161231235959'])
    NAMES    = ['NES','MAB','GB','GOM','SS']+'_FULL'
    TITLES     = ['Northeast Shelf LME', 'Mid-Atlantic Bight','Georges Bank','Gulf of Maine','Scotian Shelf']
        
    FOR CTH=0, N_ELEMENTS(CALGS)-1 DO BEGIN
      CALG = CALGS(CTH)
      SUBAREA_FILE = DIR_SUMMARY + 'NESPP_' + CALG +'_SUBAREA_EXTRACTS.SAV'
            
      FOR PTH=0, N_ELEMENTS(PALGS)-1 DO BEGIN
        PALG = PALGS(PTH)
        PRODS  = ['CHLOR_A-'+CALG,'MICROPP','NANOPICOPP']
            
        YTITLEC = 'CHL - ' + CALG + ' ' + UNITS('CHLOR_A',/NO_NAME)
        YTITLEP = 'PP - '  + PALG + ' ' + UNITS('PPD',/NO_NAME)
        LEGENDA = ['SeaWiFS','SeaWiFS']
        LEGENDB = ['MODIS', 'MODIS']
        YRANGEC = [0,5]
        YRANGEP = [0,1.6]
              
        WINX = 850
        WINY = 1100
        XSPACE = 40. & XPER = XSPACE/WINX
        YDIF = .19
        START_POS = [0.06,0.83,0.95,0.98]
        
        YMINOR=1
        FONTSIZE = 8.5
        SYMSIZE = 0.45
        THICK = 2
        FONT = 0
        COLORM = 'LIME_GREEN'
        COLORN = 'GOLD' 
        COLORC = 'BLUE'   
            
        X     = DATE_2JD(DATES)
        AX    = DATE_AXIS(X,/MONTH, /YY_YEAR,STEP_SIZE=4)
        XTICKNAMES = REPLICATE(' ',N_ELEMENTS(AX.TICKNAME))
        
        PNGFILE = FIX_PATH(DIR_MONTHLY + 'NE_ECOREGIONS-'+CALG+'-PP_'+PALG+'-SZ_CLASSES-SEAWIFS_MODIS.PNG')
        CNGFILE = FIX_PATH(DIR_MONTHLY + 'NE_ECOREGIONS-CHL_'+CALG+'-PP_'+PALG+'-SZ_CLASSES-SEAWIFS_MODIS.PNG')
        IF FILE_MAKE(SUBAREA_FILE,[PNGFILE,CNGFILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE 
        PRINT, 'Working on: ' + PNGFILE
        D = STRUCT_READ(SUBAREA_FILE)
        
        W = WINDOW(DIMENSIONS=[WINX,WINY],BUFFER=BUFFER)
        FOR C=0, N_ELEMENTS(NAMES)-1 DO BEGIN          
          IF C EQ 0 THEN PLOT_POS = START_POS ELSE PLOT_POS = [PLOT_POS[0],PLOT_POS[1]-YDIF,PLOT_POS(2),PLOT_POS(3)-YDIF]
          NAME  = NAMES(C)
          TITLE = TITLES(C)
          SET   = D[WHERE(D.SUBAREA EQ NAME AND D.PERIOD_CODE EQ PERIODS,/NULL)]    
          IF CALG EQ 'PAN' THEN SEA = 'SEAWIFS_PAN' ELSE SEA = 'SEAWIFS'
          IF CALG EQ 'PAN' THEN MDA = 'MODISA_PAN'  ELSE MDA = 'MODISA'  
          
          SCHL = SET[WHERE(SET.PROD+'-'+SET.ALG EQ PRODS[0] AND SET.SENSOR EQ 'SEAWIFS' AND PERIOD_2JD(SET.PERIOD) GE SDATE[0] AND PERIOD_2JD(SET.PERIOD) LE SDATE[1],/NULL)]
          SMCP = SET[WHERE(SET.PROD             EQ PRODS[1] AND SET.SENSOR EQ SEA       AND PERIOD_2JD(SET.PERIOD) GE SDATE[0] AND PERIOD_2JD(SET.PERIOD) LE SDATE[1],/NULL)]
          SNPP = SET[WHERE(SET.PROD             EQ PRODS(2) AND SET.SENSOR EQ SEA       AND PERIOD_2JD(SET.PERIOD) GE SDATE[0] AND PERIOD_2JD(SET.PERIOD) LE SDATE[1],/NULL)]
          MCHL = SET[WHERE(SET.PROD+'-'+SET.ALG EQ PRODS[0] AND SET.SENSOR EQ 'MODISA'  AND PERIOD_2JD(SET.PERIOD) GE MDATE[0] AND PERIOD_2JD(SET.PERIOD) LE MDATE[1],/NULL)]
          MMCP = SET[WHERE(SET.PROD             EQ PRODS[1] AND SET.SENSOR EQ MDA       AND PERIOD_2JD(SET.PERIOD) GE MDATE[0] AND PERIOD_2JD(SET.PERIOD) LE MDATE[1],/NULL)]
          MNPP = SET[WHERE(SET.PROD             EQ PRODS(2) AND SET.SENSOR EQ MDA       AND PERIOD_2JD(SET.PERIOD) GE MDATE[0] AND PERIOD_2JD(SET.PERIOD) LE MDATE[1],/NULL)]
                             
          JDC  = PERIOD_2JD([SCHL.PERIOD,MCHL.PERIOD])
          JDM  = PERIOD_2JD([SMCP.PERIOD,MMCP.PERIOD])
          JDN  = PERIOD_2JD([SNPP.PERIOD,MNPP.PERIOD])
          CHL  = [SCHL.AMEAN,MCHL.AMEAN]
          MICR = [SMCP.AMEAN,MMCP.AMEAN]
          NANO = [SNPP.AMEAN,MNPP.AMEAN]
          
          PP = PLOT(AX.JD,YRANGEP,YTITLE=YTITLEP,XRANGE=AX.JD,YRANGE=YRANGEP,FONT_SIZE=FONTSIZE,AXIS_STYLE=1,YMINOR=YMINOR,XSTYLE=1,YSTYLE=1,XMAJOR=AX.TICKS,XMINOR=0,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,POSITION=PLOT_POS,/NODATA,/CURRENT)
                
          YY = [NANO,REPLICATE(0, N_ELEMENTS(NANO))]
          XX = [JDN,REVERSE(JDN)]
          PN = PLOT(JDN,NANO,COLOR=COLORN,THICK=3,/OVERPLOT,/CURRENT,AXIS_STYLE=1)
          
          YY = [MICR,REPLICATE(0, N_ELEMENTS(MICR))]
          XX = [JDM,REVERSE(JDM)]
          PM = PLOT(JDM,MICR,COLOR=COLORM,THICK=3,/OVERPLOT,/CURRENT,AXIS_STYLE=1)
        
          XTICKV = PP.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)
          TA = TEXT(MAX(SDATE),MAX(YRANGEP),'SeaWiFS   ',   ALIGNMENT=1,VERTICAL_ALIGNMENT=0,FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD',/DATA,TARGET=PP,CLIP=0)
          TB = TEXT(MAX(SDATE),MAX(YRANGEP),'   MODIS-Aqua',ALIGNMENT=0,VERTICAL_ALIGNMENT=0,FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD',/DATA,TARGET=PP,CLIP=0)
          FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGEP,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGEP,AXIS_STYLE=1)
          PT = PLOT([MAX(SDATE),MAX(SDATE)],YRANGEP,COLOR='BLACK',THICK=3,/OVERPLOT,/CURRENT,AXIS_STYLE=1)
          AY = AXIS('X',TARGET=PP,LOCATION='TOP',MAJOR=0,MINOR=0)
              
          PC = PLOT(JDC,CHL,COLOR=COLORC,/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=PP.XRANGE,YRANGE=YRANGEC,YSTYLE=1,YMINOR=YMINOR,THICK=3,LINESTYLE=0,POSITION=PLOT_POS)      
          A1 = AXIS('Y',TARGET=PC,LOCATION='RIGHT',TEXTPOS=1,MINOR=1,TICKFONT_SIZE=FONTSIZE,TICKDIR=1,TITLE=YTITLEC,YRANGE=YRANGEC)
          TXT = TEXT(PLOT_POS[0]+0.01,PLOT_POS(3)-0.025,TITLE,FONT_SIZE=12,FONT_STYLE='BOLD') 
        ENDFOR  
               
        PY = 20
        P1 = 100
        P2 = 400
        P3 = 650
        SN = SYMBOL(P1,PY+7.5,'HLINE',SYM_COLOR=COLORN,/SYM_FILLED,SYM_SIZE=3,SYM_THICK=3,/DEVICE,/CURRENT,LABEL_STRING=' Nano + Picoplankton PP')
        SM = SYMBOL(P2,PY+7.5,'HLINE',SYM_COLOR=COLORM,/SYM_FILLED,SYM_SIZE=3,SYM_THICK=3,/DEVICE,/CURRENT,LABEL_STRING=' Microplankton PP')
        SC = SYMBOL(P3,PY+7.5,'HLINE',SYM_COLOR=COLORC,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=4,/DEVICE,/CURRENT,LABEL_STRING=' Total Chlorophyll')
        
        PRINT, 'Writing: ' + CNGFILE
        W.SAVE,CNGFILE,RESOLUTION=600
        W.CLOSE 
        
        W = WINDOW(DIMENSIONS=[WINX,WINY],BUFFER=BUFFER)
        FOR C=0, N_ELEMENTS(NAMES)-1 DO BEGIN
          IF C EQ 0 THEN PLOT_POS = START_POS ELSE PLOT_POS = [PLOT_POS[0],PLOT_POS[1]-YDIF,PLOT_POS(2),PLOT_POS(3)-YDIF]
          NAME  = NAMES(C)
          TITLE = TITLES(C)
          SET   = D[WHERE(D.SUBAREA EQ NAME AND D.PERIOD_CODE EQ PERIODS,/NULL)]
          IF CALG EQ 'PAN' THEN SEA = 'SEAWIFS_PAN' ELSE SEA = 'SEAWIFS'
          IF CALG EQ 'PAN' THEN MDA = 'MODISA_PAN'  ELSE MDA = 'MODISA'

          SCHL = SET[WHERE(SET.PROD+'-'+SET.ALG EQ PRODS[0] AND SET.SENSOR EQ 'SEAWIFS' AND PERIOD_2JD(SET.PERIOD) GE SDATE[0] AND PERIOD_2JD(SET.PERIOD) LE SDATE[1],/NULL)]
          SMCP = SET[WHERE(SET.PROD             EQ PRODS[1] AND SET.SENSOR EQ SEA       AND PERIOD_2JD(SET.PERIOD) GE SDATE[0] AND PERIOD_2JD(SET.PERIOD) LE SDATE[1],/NULL)]
          SNPP = SET[WHERE(SET.PROD             EQ PRODS(2) AND SET.SENSOR EQ SEA       AND PERIOD_2JD(SET.PERIOD) GE SDATE[0] AND PERIOD_2JD(SET.PERIOD) LE SDATE[1],/NULL)]
          MCHL = SET[WHERE(SET.PROD+'-'+SET.ALG EQ PRODS[0] AND SET.SENSOR EQ 'MODISA'  AND PERIOD_2JD(SET.PERIOD) GE MDATE[0] AND PERIOD_2JD(SET.PERIOD) LE MDATE[1],/NULL)]
          MMCP = SET[WHERE(SET.PROD             EQ PRODS[1] AND SET.SENSOR EQ MDA       AND PERIOD_2JD(SET.PERIOD) GE MDATE[0] AND PERIOD_2JD(SET.PERIOD) LE MDATE[1],/NULL)]
          MNPP = SET[WHERE(SET.PROD             EQ PRODS(2) AND SET.SENSOR EQ MDA       AND PERIOD_2JD(SET.PERIOD) GE MDATE[0] AND PERIOD_2JD(SET.PERIOD) LE MDATE[1],/NULL)]

          JDC  = PERIOD_2JD([SCHL.PERIOD,MCHL.PERIOD])
          JDM  = PERIOD_2JD([SMCP.PERIOD,MMCP.PERIOD])
          JDN  = PERIOD_2JD([SNPP.PERIOD,MNPP.PERIOD])
          CHL  = [SCHL.AMEAN,MCHL.AMEAN]
          MICR = [SMCP.AMEAN,MMCP.AMEAN]
          NANO = [SNPP.AMEAN,MNPP.AMEAN]

          PP = PLOT(AX.JD,YRANGEP,YTITLE=YTITLEP,XRANGE=AX.JD,YRANGE=YRANGEP,FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XSTYLE=1,YSTYLE=1,XMAJOR=AX.TICKS,XMINOR=0,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,POSITION=PLOT_POS,/NODATA,/CURRENT)

          YY = [NANO,REPLICATE(0, N_ELEMENTS(NANO))]
          XX = [JDN,REVERSE(JDN)]
          PN = PLOT(JDN,NANO,COLOR=COLORN,THICK=3,/OVERPLOT,/CURRENT)

          YY = [MICR,REPLICATE(0, N_ELEMENTS(MICR))]
          XX = [JDM,REVERSE(JDM)]
          PM = PLOT(JDM,MICR,COLOR=COLORM,THICK=3,/OVERPLOT,/CURRENT)

          XTICKV = PP.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)
          TA = TEXT(MAX(SDATE),MAX(YRANGEP),'SeaWiFS   ',   ALIGNMENT=1,VERTICAL_ALIGNMENT=0,FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD',/DATA,TARGET=PP,CLIP=0)
          TB = TEXT(MAX(SDATE),MAX(YRANGEP),'   MODIS-Aqua',ALIGNMENT=0,VERTICAL_ALIGNMENT=0,FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD',/DATA,TARGET=PP,CLIP=0)
          FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGEP,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGEP)
          PT = PLOT([MAX(SDATE),MAX(SDATE)],YRANGEP,COLOR='BLACK',THICK=3,/OVERPLOT,/CURRENT)
       ;   AY = AXIS('X',TARGET=PP,LOCATION='TOP',MAJOR=0,MINOR=0)

          ;PC = PLOT(JDC,CHL,COLOR=COLORC,/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=PP.XRANGE,YRANGE=YRANGEC,YSTYLE=1,YMINOR=YMINOR,THICK=3,LINESTYLE=0,POSITION=PLOT_POS)
          ;A1 = AXIS('Y',TARGET=PC,LOCATION='RIGHT',TEXTPOS=1,MINOR=1,TICKFONT_SIZE=FONTSIZE,TICKDIR=1,TITLE=YTITLEC,YRANGE=YRANGEC)
          TXT = TEXT(PLOT_POS[0]+0.01,PLOT_POS(3)-0.025,TITLE,FONT_SIZE=12,FONT_STYLE='BOLD')
        ENDFOR

        PY = 20
        P1 = 200
        P2 = 500
     ;   P3 = 650
        SN = SYMBOL(P1,PY+7.5,'HLINE',SYM_COLOR=COLORN,/SYM_FILLED,SYM_SIZE=3,SYM_THICK=3,/DEVICE,/CURRENT,LABEL_STRING=' Nano + Picoplankton PP')
        SM = SYMBOL(P2,PY+7.5,'HLINE',SYM_COLOR=COLORM,/SYM_FILLED,SYM_SIZE=3,SYM_THICK=3,/DEVICE,/CURRENT,LABEL_STRING=' Microplankton PP')
       
        PRINT, 'Writing: ' + PNGFILE
        W.SAVE,PNGFILE,RESOLUTION=600
        W.CLOSE
        
        
      ENDFOR      
    ENDFOR  
    
  ENDIF ; DO_CHL_PP_TIMESERIES


; *******************************************************
  IF KEY(DO_PP_TIMESERIES_2017) THEN BEGIN
; *******************************************************
    SNAME = DO_PP_TIMESERIES_2017
    PRINT, 'Running: ' + 'DO_PP_TIMESERIES_2017'
    SWITCHES,DO_PP_TIMESERIES_2017,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATASETS=DATASETS,DATERANGE=DATERANGE
  
    BUFFER     = 0
    DATES      = [19980101,20161231]
    PALGS      = ['VGPM2'];,'OPAL']
    CALGS      = ['PAN','OCI']
    CDATASET   = ['OC-SEAWIFS-1KM',  'OC-MODISA-1KM']
    PERIODS    = 'M'    
    SDATE      = DATE_2JD(['19970101000000','20071231235959'])
    MDATE      = DATE_2JD(['20080101000000','20161231235959'])
    NAMES      = ['NES','MAB','GB','GOM','SS']+'_FULL'
    TITLES     = ['Northeast Shelf LME', 'Mid-Atlantic Bight','Georges Bank','Gulf of Maine','Scotian Shelf']
        
    FOR CTH=0, N_ELEMENTS(CALGS)-1 DO BEGIN
      CALG = CALGS(CTH)
      SUBAREA_FILE = DIR_SUMMARY + 'NESPP_' + CALG +'_SUBAREA_EXTRACTS.SAV'
      SUBAREAS = IDL_RESTORE(SUBAREA_FILE)
      IF CALG EQ 'PAN' THEN SENSORS = 'SEAWIFS_PAN' ELSE SENSORS = 'SEAWIFS'
      IF CALG EQ 'PAN' THEN SENSORA = 'MODISA_PAN'  ELSE SENSORA = 'MODISA'
            
      FOR PTH=0, N_ELEMENTS(PALGS)-1 DO BEGIN
        PALG = PALGS(PTH)
        PRODS  = ['PPD-VGPM2','MICROPP','NANOPICOPP','MICROPP_PERCENTAGE','NANOPICOPP_PERCENTAGE']
            
        YTITLEP = 'PP - '  + PALG + ' ' + UNITS('PPD',/NO_NAME)
        LEGENDA = ['SeaWiFS','SeaWiFS']
        LEGENDB = ['MODIS', 'MODIS']
        YRANGEC = [0,5]
        YRANGEP = [0,1.6]

        FOR C=0, N_ELEMENTS(NAMES)-1 DO BEGIN
          NAME = NAMES(C)
          TITLE = TITLES(C)
          CCFILE = FIX_PATH(DIR_PLOTS + NAME + '-MONTHLY_ANNUAL-PP_PHYTO_COMPOSITE' + '-' + PALG + '-' + CALG + '.PNG')
          ACFILE = FIX_PATH(DIR_PLOTS + NAME + '-ANNUAL-PP_MICRO' + '-' + PALG + '-' + CALG + '.PNG')
          MCFILE = FIX_PATH(DIR_PLOTS + NAME + '-MONTHLY-PP_MICRO' + '-' + PALG + '-' + CALG + '.PNG')
          APFILE = FIX_PATH(DIR_PLOTS + NAME + '-ANNUAL-PP_MICRO_PERCENT' + '-' + PALG + '-' + CALG + '.PNG')
          MPFILE = FIX_PATH(DIR_PLOTS + NAME + '-MONTHLY-PP_MICRO_PERCENT' + '-' + PALG + '-' + CALG + '.PNG')
          BPFILE = FIX_PATH(DIR_PLOTS + NAME + '-ANNUAL-PP_MICRO_PERCENT' + '-' + PALG + '-' + CALG + '-BARPLOT.PNG')

  
          IF FILE_MAKE(SUBAREA_FILE,[CCFILE,ACFILE,MCFILE,APFILE,MPFILE,BPFILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
          ODATA  = SUBAREAS[WHERE(SUBAREAS.SUBAREA EQ NAME AND SUBAREAS.PERIOD_CODE EQ 'MONTH',/NULL)]
          MDATA  = SUBAREAS[WHERE(SUBAREAS.SUBAREA EQ NAME AND SUBAREAS.PERIOD_CODE EQ 'M',/NULL)]
          ADATA  = SUBAREAS[WHERE(SUBAREAS.SUBAREA EQ NAME AND SUBAREAS.PERIOD_CODE EQ 'A',/NULL)]  
        
          CGROUPS = ['MICRO','NANOPICO']
          CCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']
          PGROUPS = ['MICRO','NANOPICO']
          PCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']

; ***** BAR PLOTS *****         
          NBARS = 1
          MX = DATE_AXIS([20200101,20201231],/MONTH,/MID,/FYEAR,STEP_SIZE=1)
          MXRANGE = DATE_2JD([20191216,20210114])
          MBOT = REPLICATE(0, 12)
  
          AX = DATE_AXIS([19980101,20160101],/YEAR,/YY,STEP_SIZE=2)
          AXRANGE = DATE_2JD([19970101,20170101])
          ABOT = REPLICATE(0,17)
  
          ; MONTHLY PRODUCTIVITY BAR PLOTS
          SMICRO = ODATA[WHERE(ODATA.SENSOR EQ SENSORS AND ODATA.PROD EQ 'MICROPP',/NULL)] & SNANO = ODATA[WHERE(ODATA.SENSOR EQ SENSORS AND ODATA.PROD EQ 'NANOPICOPP',/NULL)]
          AMICRO = ODATA[WHERE(ODATA.SENSOR EQ SENSORA AND ODATA.PROD EQ 'MICROPP',/NULL)] & ANANO = ODATA[WHERE(ODATA.SENSOR EQ SENSORA AND ODATA.PROD EQ 'NANOPICOPP',/NULL)]
          
          MICRO = (SMICRO[SORT(SMICRO.PERIOD)].AMEAN + AMICRO[SORT(AMICRO.PERIOD)].AMEAN)/2.0
          NANO  = (SNANO[SORT(SNANO.PERIOD)].AMEAN   + ANANO[SORT(ANANO.PERIOD)].AMEAN)/2.0
          
          MAX_PP = MAX([MICRO+NANO],/NAN)
          MDATES = JD_ADD(DATE_2JD('2020'+MONTH_NUMBERS()),14,/DAY)
          
          MCOLOR = 'BLUE'
          NCOLOR = 'MEDIUM_SPRING_GREEN'
          PX = 120
          PY = 330

          IF FILE_MAKE(SUBAREA_FILE,[MCFILE],OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_MCFILE
          IF HAS(SENSORS,'PAN') THEN PYRANGE = [0,0.8] ELSE PYRANGE = [0,1.2]
          PLT = PLOT(MDATES,MICRO,YRANGE=PYRANGE,YTITLE='PP ' + UNITS('PPD',/NO_NAME),TITLE=TITLE,XTICKVALUE=MX.TICKV,FONT_SIZE=14,XRANGE=MXRANGE,DIMENSIONS=[600,400],$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=MX.TICKNAME,COLOR=MCOLOR,THICK=4,BUFFER=BUFFER,MARGIN=[0.15,0.1,0.05,0.1])
          NLT = PLOT(MDATES,NANO,YRANGE=PYRANGE,/OVERPLOT,COLOR=NCOLOR,THICK=4)
          SN = SYMBOL(PX,PY,   'HLINE',SYM_COLOR=NCOLOR,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=5,/DEVICE,/CURRENT,LABEL_STRING=' Nano + Picoplankton PP')
          SM = SYMBOL(PX,PY-20,'HLINE',SYM_COLOR=MCOLOR,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=5,/DEVICE,/CURRENT,LABEL_STRING=' Microplankton PP')
          PLT.SAVE, MCFILE
          PLT.CLOSE
          SKIP_MCFILE:
          
          IF FILE_MAKE(SUBAREA_FILE,[BPFILE],OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_BPFILE
          IF HAS(SENSORS,'PAN') THEN PYRANGE = [0,0.8] ELSE PYRANGE = [0,1.2]
          
          ; ANNUAL PRODUCTIVITY BAR PLOTS
          SMICRO = ADATA[WHERE(ADATA.SENSOR EQ SENSORS AND ADATA.PROD EQ 'MICROPP'    AND PERIOD_2DATE(ADATA.PERIOD) LT '20080101' AND PERIOD_2DATE(ADATA.PERIOD) GE '19980101',/NULL)]
          SNANO  = ADATA[WHERE(ADATA.SENSOR EQ SENSORS AND ADATA.PROD EQ 'NANOPICOPP' AND PERIOD_2DATE(ADATA.PERIOD) LT '20080101' AND PERIOD_2DATE(ADATA.PERIOD) GE '19980101',/NULL)]
          AMICRO = ADATA[WHERE(ADATA.SENSOR EQ SENSORA AND ADATA.PROD EQ 'MICROPP'    AND PERIOD_2DATE(ADATA.PERIOD) GE '20080101' AND PERIOD_2DATE(ADATA.PERIOD) LT '20170101',/NULL)]
          ANANO  = ADATA[WHERE(ADATA.SENSOR EQ SENSORA AND ADATA.PROD EQ 'NANOPICOPP' AND PERIOD_2DATE(ADATA.PERIOD) GE '20080101' AND PERIOD_2DATE(ADATA.PERIOD) LT '20170101',/NULL)]

          PMICRO = [SMICRO.AMEAN,AMICRO.AMEAN]*365
          PNANO  = [SNANO.AMEAN,ANANO.AMEAN]*365
          
          MAX_PP = MAX([PMICRO+PNANO],/NAN)
          ADATES = PERIOD_2JD([SMICRO.PERIOD,AMICRO.PERIOD])
          DCOLORS = LIST([0,170,188],[49,133,156],[0,43,79],[30,92,144],[0,70,127],[0,235,255],[0,120,217])
          DIMS = [800,600]
          POSITION = [100,70,700,550]
          w = WINDOW(DIMENSIONS=DIMS,BUFFER=BUFFER)
          P1 = PLOT(AXRANGE,[0,MAX_PP],YTITLE='PP ' + UNITS('PPY',/NO_NAME),TITLE=TITLE,XTICKVALUE=AX.TICKV,FONT_SIZE=14,XRANGE=AXRANGE,AXIS_STYLE=1,$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,/CURRENT,POSITION=POSITION,/DEVICE)
          BYRANGE = P1.YRANGE
          YTICKNAME = P1.YTICKNAME
          YTICKV  = P1.YTICKVALUE
          YMINOR = P1.YMINOR
          BXRANGE = P1.XRANGE

          MLBAR = BARPLOT(ADATES,PNANO+PMICRO,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=NPP1,FILL_COLOR=[0,235,255],LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          NLBAR = BARPLOT(ADATES,PNANO,      NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT, FILL_COLOR=[30,92,144],LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)

          A2 = AXIS('X',TARGET=P1,LOCATION='TOP',MAJOR=0,MINOR=0,COLOR='BLACK')
          P2 = PLOT(ADATES,(PMICRO/(PNANO+PMICRO))*100,AXIS_STYLE=0,COLOR='YELLOW',POSITION=POSITION,/DEVICE,/CURRENT,XTICKVALUE=AX.TICKV,XRANGE=AXRANGE,YRANGE=[20,30],THICK=4,SYMBOL='CIRCLE',/SYM_FILLED,LINESTYLE=0,BUFFER=BUFFER)
          A1 = AXIS('Y',TARGET=P2,LOCATION=[MAX(BXRANGE),0,0],TEXTPOS=1,MINOR=4,TICKFONT_SIZE=14,TEXT_COLOR='BLACK',TICKDIR=1,TITLE='Percent Microplankton Production (%)',TICKLEN=0.03,YRANGE=[20,30]) 
          
          X = [0,30,30,0,0] & Y = [0,0,15,15,0]
          PY1 = 20
          PY2 = 3
          PX1 = 200
          PX2 = 450
          T1 = TEXT(PX1+45,PY1+7.5,'Nano + Picoplankton',FONT_SIZE=13,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
          P1 = POLYGON(X,Y,POSITION=[PX1,PY1,PX1+40,PY1+15],FILL_COLOR=[30,92,144],/FILL_BACKGROUND,/CURRENT,/DEVICE)

          T3 = TEXT(PX2+45,PY1+7.5,'Microplankton',FONT_SIZE=13,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
          P3 = POLYGON(X,Y,POSITION=[PX2,PY1,PX2+40,PY1+15],FILL_COLOR=[0,235,255],/FILL_BACKGROUND,/CURRENT,/DEVICE)

          W.SAVE, BPFILE
          W.CLOSE
          SKIP_BPFILE:
          
  
        ;  IF FILE_MAKE(SUBAREA_FILE,[CCFILE],OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_CCFILE
          W = WINDOW(DIMENSIONS=[800,400],BUFFER=BUFFER)
          T = TEXT(0.5,0.9,TITLE,ALIGNMENT=0.5,/NORMAL,FONT_SIZE=14,FONT_STYLE='BOLD')
          POSITION = [0.1,0.2,0.45,0.8]
          P = PLOT(MXRANGE,[0,MAX_PP],YTITLE='PP ' + UNITS('PPD',/NO_NAME),TITLE='Monthly',XTICKVALUE=MX.TICKV,FONT_SIZE=14,POSITION=POSITION,XRANGE=MXRANGE,$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=MX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
          BYRANGE = P.YRANGE
          YTICKNAME = P.YTICKNAME
          YTICKV  = P.YTICKVALUE
          YMINOR = P.YMINOR
  
          MBAR1 = BARPLOT(MDATES,NANO+MICRO,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=NPP1,FILL_COLOR='YELLOW',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=MXRANGE,XTICKVALUE=MX.TICKV,XTICKNAME=MX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          NBAR1 = BARPLOT(MDATES,NANO,      NBARS=NBARS,INDEX=0,BOTTOM_VALUES=MBOT,FILL_COLOR='MEDIUM_AQUAMARINE',LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=MXRANGE,XTICKVALUE=MX.TICKV,XTICKNAME=MX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)

          ; ANNUAL PRODUCTIVITY BAR PLOTS
          SMICRO = ADATA[WHERE(ADATA.SENSOR EQ SENSORS AND ADATA.PROD EQ 'MICROPP'    AND PERIOD_2DATE(ADATA.PERIOD) LT '20080101' AND PERIOD_2DATE(ADATA.PERIOD) GE '19980101',/NULL)] 
          SNANO  = ADATA[WHERE(ADATA.SENSOR EQ SENSORS AND ADATA.PROD EQ 'NANOPICOPP' AND PERIOD_2DATE(ADATA.PERIOD) LT '20080101' AND PERIOD_2DATE(ADATA.PERIOD) GE '19980101',/NULL)]
          AMICRO = ADATA[WHERE(ADATA.SENSOR EQ SENSORA  AND ADATA.PROD EQ 'MICROPP'    AND PERIOD_2DATE(ADATA.PERIOD) GE '20080101' AND PERIOD_2DATE(ADATA.PERIOD) LT '20170101',/NULL)] 
          ANANO  = ADATA[WHERE(ADATA.SENSOR EQ SENSORA  AND ADATA.PROD EQ 'NANOPICOPP' AND PERIOD_2DATE(ADATA.PERIOD) GE '20080101' AND PERIOD_2DATE(ADATA.PERIOD) LT '20170101',/NULL)]
          
          MICRO = [SMICRO.AMEAN,AMICRO.AMEAN]*365
          NANO  = [SNANO.AMEAN,ANANO.AMEAN]*365
          
          MAX_PP = MAX([MICRO+NANO],/NAN)
          ADATES = PERIOD_2JD([SMICRO.PERIOD,AMICRO.PERIOD])
          POSITION = [0.6,0.2,0.95,0.8]
          
          P = PLOT(AXRANGE,[0,MAX_PP],YTITLE='PP ' + UNITS('PPY',/NO_NAME),TITLE='Annual',XTICKVALUE=AX.TICKV,FONT_SIZE=14,POSITION=POSITION,XRANGE=AXRANGE,$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
          BYRANGE = P.YRANGE
          YTICKNAME = P.YTICKNAME
          YTICKV  = P.YTICKVALUE
          YMINOR = P.YMINOR
  
          MLBAR = BARPLOT(ADATES,NANO+MICRO,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=NPP1,FILL_COLOR='YELLOW',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          NLBAR = BARPLOT(ADATES,NANO,      NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT, FILL_COLOR='MEDIUM_AQUAMARINE',LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)

          X = [0,30,30,0,0] & Y = [0,0,15,15,0]
          PY1 = 18
          PY2 = 3
          PX1 = 175
          PX2 = 425
          T1 = TEXT(PX1+45,PY1+7.5,'Nano + Picoplankton',FONT_SIZE=13,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
          P1 = POLYGON(X,Y,POSITION=[PX1,PY1,PX1+40,PY1+15],FILL_COLOR='MEDIUM_AQUAMARINE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
          
          T3 = TEXT(PX2+45,PY1+7.5,'Microplankton',FONT_SIZE=13,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
          P3 = POLYGON(X,Y,POSITION=[PX2,PY1,PX2+40,PY1+15],FILL_COLOR='YELLOW',/FILL_BACKGROUND,/CURRENT,/DEVICE)
          
  ;        W.SAVE, CCFILE
          W.CLOSE
          SKIP_CCFILE:
          
          IF FILE_MAKE(SUBAREA_FILE,[ACFILE],OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_ACFILE
          CASE NAME OF
            'GB_FULL':  YRANGE = [50,300]
            'MAB_FULL': YRANGE = [50,300]
            'GOM_FULL': YRANGE = [30,250]
            'SS_FULL':  YRANGE = [30,250]
            ELSE:       YRANGE = [40,300]
          ENDCASE
          
          IF HAS(SENSORS,'PAN') THEN BEGIN & YRANGE[0] = YRANGE[0]-30 & YRANGE[1] = YRANGE[1]-60 & ENDIF 
          PLT = PLOT(ADATES,MICRO,YRANGE=YRANGE,YTITLE='PP ' + UNITS('PPY',/NO_NAME),TITLE=TITLE,XTICKVALUE=AX.TICKV,FONT_SIZE=14,XRANGE=AXRANGE,DIMENSIONS=[600,400],$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=AX.TICKNAME,COLOR=MCOLOR,THICK=4,BUFFER=BUFFER,MARGIN=[0.15,0.1,0.05,0.1])
          NLT = PLOT(ADATES,NANO,YRANGE=YRANGE,/OVERPLOT,COLOR=NCOLOR,THICK=4)
          SN = SYMBOL(PX,PY,   'HLINE',SYM_COLOR=NCOLOR,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=5,/DEVICE,/CURRENT,LABEL_STRING=' Nano + Picoplankton PP')
          SM = SYMBOL(PX,PY-20,'HLINE',SYM_COLOR=MCOLOR,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=5,/DEVICE,/CURRENT,LABEL_STRING=' Microplankton PP')
          PLT.SAVE, ACFILE
          PLT.CLOSE
          SKIP_ACFILE:
          
          ; ANNUAL PRODUCTIVITY LINE PLOTS
          SMICRO = ADATA[WHERE(ADATA.SENSOR EQ SENSORS AND ADATA.PROD EQ 'MICROPP_PERCENTAGE'    AND PERIOD_2DATE(ADATA.PERIOD) LT '20080101' AND PERIOD_2DATE(ADATA.PERIOD) GE '19980101',/NULL)]
          SNANO  = ADATA[WHERE(ADATA.SENSOR EQ SENSORS AND ADATA.PROD EQ 'NANOPICOPP_PERCENTAGE' AND PERIOD_2DATE(ADATA.PERIOD) LT '20080101' AND PERIOD_2DATE(ADATA.PERIOD) GE '19980101',/NULL)]
          AMICRO = ADATA[WHERE(ADATA.SENSOR EQ SENSORA  AND ADATA.PROD EQ 'MICROPP_PERCENTAGE'    AND PERIOD_2DATE(ADATA.PERIOD) GE '20080101' AND PERIOD_2DATE(ADATA.PERIOD) LT '20170101',/NULL)]
          ANANO  = ADATA[WHERE(ADATA.SENSOR EQ SENSORA  AND ADATA.PROD EQ 'NANOPICOPP_PERCENTAGE' AND PERIOD_2DATE(ADATA.PERIOD) GE '20080101' AND PERIOD_2DATE(ADATA.PERIOD) LT '20170101',/NULL)]

          MICRO = [SMICRO.AMEAN,AMICRO.AMEAN]
          NANO  = [SNANO.AMEAN,ANANO.AMEAN]

          MAX_PP = MAX([MICRO+NANO],/NAN)
          ADATES = PERIOD_2JD([SMICRO.PERIOD,AMICRO.PERIOD])
          POSITION = [0.6,0.2,0.95,0.8]

          IF FILE_MAKE(SUBAREA_FILE,[APFILE],OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_APFILE
          MYRANGE = [.2,.3]
          PLT = PLOT(ADATES,MICRO/100,YRANGE=MYRANGE,YTITLE='Microplankton Fraction',TITLE=TITLE,XTICKVALUE=AX.TICKV,FONT_SIZE=14,XRANGE=AXRANGE,DIMENSIONS=[600,400],$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=AX.TICKNAME,COLOR='BLUE',THICK=4,BUFFER=BUFFER,MARGIN=[0.15,0.1,0.05,0.1])
     ;     NLT = PLOT(ADATES,NANO,YRANGE=MYRANGE,/OVERPLOT,COLOR=NCOLOR,THICK=4)
     ;     SN = SYMBOL(PX,PY,   'HLINE',SYM_COLOR=NCOLOR,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=5,/DEVICE,/CURRENT,LABEL_STRING=' Nano + Picoplankton PP')
     ;     SM = SYMBOL(PX,PY-20,'HLINE',SYM_COLOR=MCOLOR,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=5,/DEVICE,/CURRENT,LABEL_STRING=' Microplankton PP')
          PLT.SAVE, APFILE
          PLT.CLOSE
          SKIP_APFILE:
          
          ; MONTHLY MICRO PERCENT PRODUCTIVITY LINE PLOTS
          SMICRO = ODATA[WHERE(ODATA.SENSOR EQ SENSORS AND ODATA.PROD EQ 'MICROPP_PERCENTAGE',/NULL)] & SNANO = ODATA[WHERE(ODATA.SENSOR EQ SENSORS AND ODATA.PROD EQ 'NANOPICOPP_PERCENTAGE',/NULL)]
          AMICRO = ODATA[WHERE(ODATA.SENSOR EQ SENSORA  AND ODATA.PROD EQ 'MICROPP_PERCENTAGE',/NULL)] & ANANO = ODATA[WHERE(ODATA.SENSOR EQ SENSORA  AND ODATA.PROD EQ 'NANOPICOPP_PERCENTAGE',/NULL)]

          MICRO = (SMICRO[SORT(SMICRO.PERIOD)].AMEAN + AMICRO[SORT(AMICRO.PERIOD)].AMEAN)/2.0
          NANO  = (SNANO[SORT(SNANO.PERIOD)].AMEAN   + ANANO[SORT(ANANO.PERIOD)].AMEAN)/2.0

          MAX_PP = MAX([MICRO+NANO],/NAN)
          MDATES = JD_ADD(DATE_2JD('2020'+MONTH_NUMBERS()),14,/DAY)

          IF FILE_MAKE(SUBAREA_FILE,[MPFILE],OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
          CASE NAME OF
            'MAB_FULL': YRANGE = [.15,.30]
            'GB_FULL':  YRANGE = [.25,.30]
            ELSE:       YRANGE = [.20,.30]
          ENDCASE
          MLT = PLOT(MDATES,MICRO/100,YRANGE=YRANGE,YTITLE='Microplankton Fraction',TITLE=TITLE,XTICKVALUE=MX.TICKV,FONT_SIZE=14,XRANGE=MXRANGE,DIMENSIONS=[600,400],$
            YSTYLE=1,XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=MX.TICKNAME,COLOR='BLUE',THICK=4,BUFFER=BUFFER,MARGIN=[0.15,0.1,0.05,0.1])
     ;     NLT = PLOT(MDATES,NANO,YRANGE=YRANGE,/OVERPLOT,COLOR=NCOLOR,THICK=4)
     ;     SN = SYMBOL(PX,PY,   'HLINE',SYM_COLOR=NCOLOR,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=5,/DEVICE,/CURRENT,LABEL_STRING=' Nano + Picoplankton PP')
     ;     SM = SYMBOL(PX,PY-20,'HLINE',SYM_COLOR=MCOLOR,/SYM_FILLED,SYM_SIZE=4,SYM_THICK=5,/DEVICE,/CURRENT,LABEL_STRING=' Microplankton PP')
          MLT.SAVE, MPFILE
          MLT.CLOSE

          
        ENDFOR ; NAMES
      ENDFOR ; PALGS
    ENDFOR ; CALGS
    STOP
  ENDIF ; DO_PP_TIMESERIES_2017
  
  
; ********************************************
  IF DO_MONTHLY_TIMESERIES GE 1 THEN BEGIN
; ********************************************
    OVERWRITE = DO_MONTHLY_TIMESERIES GE 2
    
    BUFFER     = 0
    
    SUBAREAS   = ['ESTUARY_SHELF_LME','ECOREGIONS_FULL_NO_ESTUARIES']
    CDATASET   = ['OC-SEAWIFS-MLAC',      'OC-MODIS-LAC']
    PDATASET   = ['PP-SEP-1KM','PP-AQP-1KM']
    SENSORS    = ['SEAWIFS','MODIS']
    SUBPER     = 'A_ANNUAL_M_MANNUAL_MONTH'
    TS_SUB     = 'STATS'
    PERIODS    = 'M'
    MAP        = 'NEC'
    DATE_RANGE = ['19980101','20141231']
    SDATE      = DATE_2JD(['19970101000000','20071231235959'])
    MDATE      = DATE_2JD(['20080101000000','2014231235959'])
    TARGETS    = ['CHLOR_A','PPD']
    SENSORA    = 'SeaWiFS'
    SENSORB    = 'MODIS-Aqua'
    
    JOIN_TAGS = ['SENSOR','PERIOD','PERIOD_CODE','MASK','SUBAREA_CODE','SUBAREA_NAME','N_SUBAREA']
    FOR N=0, N_ELEMENTS(SENSORS)-1 DO BEGIN
      PFILES = []
      PDATA  = []
      FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO PFILES = [PFILES,FILE_SEARCH(!S.DATASETS+PDATASET(N)+SL+'NEC'+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-NEC-PXY_1024_1024-'+SUBAREAS(S)+'*-'+'FULL_PP_PRODS'+'*.SAVE')]
      PFILES = PFILES[WHERE(PFILES NE '',COUNT_PFILES)] & IF COUNT_PFILES EQ 0 THEN CONTINUE
      FOR S=0, N_ELEMENTS(PFILES)-1 DO IF S EQ 0 THEN PDATA = IDL_RESTORE(PFILES(S)) ELSE PDATA = STRUCT_CONCAT(PDATA,IDL_RESTORE(PFILES(S)))
      PDATA = STRUCT_CONCAT(CREATE_STRUCT('SENSOR',''),PDATA)
      PDATA.SENSOR = SENSORS(N)
      PDATA = PDATA[WHERE(PDATA.PERIOD_CODE EQ PERIODS)]
      PDATA = PDATA[WHERE(PERIOD_2JD(PDATA.PERIOD) GE DATE_2JD(DATE_RANGE[0]) AND PERIOD_2JD(PDATA.PERIOD) LE DATE_2JD(DATE_RANGE[1]))]
      PDATA = STRUCT_COPY(PDATA,TAGNAMES='FILE_MATH',/REMOVE)
      
      CFILES = []
      CDATA  = []
      FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO CFILES = [CFILES,FILE_SEARCH(!S.DATASETS+CDATASET(N)+SL+'NEC'+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-NEC-PXY_1024_1024-'+SUBAREAS(S)+'*-'+'MIN_OC_PRODS' +'*.SAVE')]
      CFILES = CFILES[WHERE(CFILES NE '', COUNT_CFILES)] & IF COUNT_CFILES EQ 0 THEN CONTINUE
      FOR S=0, N_ELEMENTS(CFILES)-1 DO IF S EQ 0 THEN CDATA = IDL_RESTORE(CFILES(S)) ELSE CDATA = STRUCT_CONCAT(CDATA,IDL_RESTORE(CFILES(S)))
      CDATA = STRUCT_CONCAT(CREATE_STRUCT('SENSOR',''),CDATA)
      CDATA.SENSOR = SENSORS(N)
      CDATA = CDATA[WHERE(CDATA.PERIOD_CODE EQ PERIODS)]
      CDATA = CDATA[WHERE(PERIOD_2JD(CDATA.PERIOD) GE DATE_2JD(DATE_RANGE[0]) AND PERIOD_2JD(CDATA.PERIOD) LE DATE_2JD(DATE_RANGE[1]))]
      TAGS = TAG_NAMES(CDATA)
      OK = WHERE(STRPOS(TAGS,'CHLOR_A_OC4') GE 0 OR STRPOS(TAGS,'CHLOR_A_OC3M') GE 0)
      NTAGS = REPLACE(TAGS[OK],['CHLOR_A_OC4','CHLOR_A_OC3M'],['CHLOR_A_OC','CHLOR_A_OC'])
      CDATA = STRUCT_RENAME(CDATA,TAGS[OK],NTAGS)
      CDATA = STRUCT_COPY(CDATA,TAGNAMES='FILE_MATH',/REMOVE)
      
      JDATA = STRUCT_JOIN(CDATA,PDATA,TAGNAMES=JOIN_TAGS)
      
      IF SENSORS(N) EQ 'SEAWIFS' THEN SDATA = JDATA
      IF SENSORS(N) EQ 'MODIS'   THEN MDATA = JDATA
      GONE, CDATA
      GONE, PDATA
      GONE, JDATA
    ENDFOR
    STAGS = TAG_NAMES(SDATA)
    MTAGS = TAG_NAMES(MDATA)
    OK = WHERE_MATCH(STAGS,MTAGS,COUNT,COMPLEMENT=COMPLEMENT,INVALID=INVALID,NINVALID=NINVALID)
    IF NINVALID EQ 1 THEN STOP
    CDATA = STRUCT_CONCAT(SDATA,MDATA)
    TAGS  = TAG_NAMES(CDATA)
    
    CODES      = WHERE_SETS(CDATA.SUBAREA_CODE)
    NAMES      = ['NE US Shelf (0-200m)','MID-ATLANTIC BIGHT','GEORGES BANK','GULF OF MAINE','SCOTIAN SHELF']
    TITLES     = ['Northeast Shelf LME', 'Mid-Atlantic Bight','Georges Bank','Gulf of Maine','Scotian Shelf']
    
    DATES    = LIST([19980101,20141231],[19980101,20150101])
    PRODSA  = LIST(['CHLOR_A-PAN','MICRO-PAN','NANOPICO-PAN'], ['PPD-VGPM2','MICROPP-MM_PAN_VGPM2','NANOPICOPP-MM_PAN_VGPM2'])
    PRODSB  = LIST(['CHLOR_A-PAN','MICRO-PAN','NANOPICO-PAN'], ['PPD-VGPM2','MICROPP-MM_PAN_VGPM2','NANOPICOPP-MM_PAN_VGPM2'])
    
    TPRODS  = ['Chlorophyll ' + UNITS('CHLOR_A',/NO_NAME),'Primary Production - VGPM2 ' + UNITS('PPD',/NO_NAME)]
    CTITLES = ['CHL ' + UNITS('CHLOR_A',/NO_NAME),'PP-VGPM2 '+UNITS('PPD',/NO_NAME)]
    LEGENDA = ['SeaWiFS','SeaWiFS']
    LEGENDB = ['MODIS', 'MODIS']
    MYRANGE = LIST([0,5],[0,3])
    AYRANGE = LIST([0,2],[0,1.2])
    MXYRANGE = LIST([0.1,10],[0.1,10])
    AXYRANGE = LIST([0.1,10],[0.1,10])
    SCALEA  = ['HIGH','LOW']
    SCALEB  = ['HIGH','LOW']
    LOGSA   = [1,1]
    LOGSB   = [1,1]
    LOGXY   = [1,1]
    
    WINX = 850
    WINY = 1100
    XSPACE = 20. & XPER = XSPACE/WINX
    CTITLE = ' '
    
    YMINOR=1
    FONTSIZE = 8.5
    SYMSIZE = 0.45
    THICK = 2
    FONT = 0
    YMARGIN = [0.3,0.3]
    XMARGIN = [4,1]
    COLORA = 'ORANGE_RED'
    COLORB = 'DARK_BLUE'
    COLORXY  = !COLOR.(WHERE(TAG_NAMES(!COLOR) EQ COLORA))
    COLORREG = !COLOR.(WHERE(TAG_NAMES(!COLOR) EQ COLORB))
    START_POS = LIST([0.03,0.85,0.95,0.94],[0.03,0.35,0.95,0.45])
    
    FOR C=0, N_ELEMENTS(CODES)-1 DO BEGIN
      SET   = CDATA(WHERE_SETS_SUBS(CODES(C)))
      CODE  = SET[0].SUBAREA_CODE
      NAME  = NAMES[WHERE(NAMES EQ SET[0].SUBAREA_NAME)]
      TITLE = TITLES[WHERE(NAMES EQ SET[0].SUBAREA_NAME)]
      
      TSAS = [] & ANNAS = []
      TSBS = [] & ANNBS = []
      
      PNGFILE = FIX_PATH(DIR_MONTHLY + REPLACE(STRUPCASE(TITLE),' ','_') + '-CHL_PP_SZ_CLASSES-SEAWIFS_MODIS.PNG')
      UPDATE = UPDATE_CHECK(INFILES=CFILES,OUTFILE=PNGFILE)
      IF UPDATE EQ 0 AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
      PRINT, 'Working on: ' + PNGFILE
      
      W = WINDOW(DIMENSIONS=[WINX,WINY],BUFFER=BUFFER)
      TXT = TEXT(0.5,0.97,TITLE,ALIGNMENT=0.5,FONT_SIZE=14)
      FOR TAR=0, N_ELEMENTS(TARGETS)-1 DO BEGIN
        PRODA  = PRODSA(TAR) & LOGA = LOGSA(TAR) & SSA = SCALEA(TAR)
        PRODB  = PRODSB(TAR) & LOGB = LOGSB(TAR) & SSB = SCALEA(TAR)
        LEGA   = LEGENDA(TAR)
        LEGB   = LEGENDB(TAR)
        TPROD  = TPRODS(TAR)
        CTITLE = CTITLES(TAR)
        XSCALE = SD_SCALES([1,250],PROD=VALIDS('PRODS',PRODA),SPECIAL_SCALE=SSA,/BIN2DATA) & YSCALE = SD_SCALES([1,250],PROD=VALIDS('PRODS',PRODB),SPECIAL_SCALE=SSB,/BIN2DATA)
        IF KEYWORD_SET(LOGA) THEN XRANGE = NICE_RANGE(ALOG10(XSCALE))ELSE XRANGE = NICE_RANGE(XSCALE)
        IF KEYWORD_SET(LOGB) THEN YRANGE = NICE_RANGE(ALOG10(YSCALE))ELSE YRANGE = NICE_RANGE(YSCALE)
        BINX=(XRANGE[1]-XRANGE[0])/100. & BINY=(YRANGE[1]-YRANGE[0])/100.
        XTITLE = UNITS(TPROD) + ' - ' + VALIDS('ALGS',PRODA) + ' Algorithm (' + SENSORA + ')'
        
        X     = DATE_2JD(DATES(TAR))
        AX    = DATE_AXIS(X,/MONTH, /YY_YEAR,STEP_SIZE=4)
        AYR   = DATE_AXIS(X,/YEAR)
        XTICKNAMES = REPLICATE(' ',N_ELEMENTS(AX.TICKNAME))
        
        OKAT = WHERE(TAGS EQ 'MEAN_' + REPLACE(PRODA[0],'-','_'))
        OKBT = WHERE(TAGS EQ 'MEAN_' + REPLACE(PRODB[0],'-','_'))
        OKAM = WHERE(TAGS EQ 'MEAN_' + REPLACE(PRODA[1],'-','_'))
        OKBM = WHERE(TAGS EQ 'MEAN_' + REPLACE(PRODB[1],'-','_'))
        OKAN = WHERE(TAGS EQ 'MEAN_' + REPLACE(PRODA(2),'-','_'))
        OKBN = WHERE(TAGS EQ 'MEAN_' + REPLACE(PRODB(2),'-','_'))
        
        OKA = WHERE(SET.(OKAN) NE MISSINGS(0.0) AND SET.(OKAM) NE MISSINGS(0.0) AND SET.SENSOR EQ 'SEAWIFS' AND PERIOD_2JD(SET.PERIOD) GE SDATE[0] AND PERIOD_2JD(SET.PERIOD) LE SDATE[1],COUNTA)
        OKB = WHERE(SET.(OKBN) NE MISSINGS(0.0) AND SET.(OKBM) NE MISSINGS(0.0) AND SET.SENSOR EQ 'MODIS'   AND PERIOD_2JD(SET.PERIOD) GE MDATE[0] AND PERIOD_2JD(SET.PERIOD) LE MDATE[1],COUNTB)
        JD  = PERIOD_2JD([SET(OKA).PERIOD,SET(OKB).PERIOD])
        XX  = [JD,REVERSE(JD)]
        SN  = SET(OKA).(OKAN) ; SEAWIFS NANO
        MN  = SET(OKB).(OKAN) ; MODIS NANO
        SM  = SET(OKA).(OKAM) ; SEAWIFS MICRO
        MM  = SET(OKB).(OKAM) ; MODIS MICRO
        STOT  = SN + SM       ; SEAWIFS TOTAL
        MTOT  = MN + MM       ; MODIS TOTAL
        SNP = SN/STOT         ; SEAWIFS PERCENT NANO
        MNP = MN/MTOT         ; MODIS PERCENT NANO
        SMP = SM/STOT         ; SEAWIFS PERCENT MICRO
        MMP = MM/MTOT         ; MODIS PERCENT MICRO
        
        YYN = [SN,MN,REPLICATE(0,COUNTA+COUNTB)]   ; [SET(OKA).(OKAN),                SET(OKB).(OKBN),               REPLICATE(0,COUNTA+COUNTB)]
        YYM = [SN+SM,MN+MM,REVERSE([SN,MN])]       ; [SET(OKA).(OKAN)+SET(OKA).(OKAM),SET(OKB).(OKBN)+SET(OKB).(OKBM),REVERSE([SET(OKA).(OKAN),SET(OKB).(OKBN)])]
        YPN = [SNP,MNP,REPLICATE(0,COUNTA+COUNTB)] ; [SET(OKA).(OKAN)/(SET(OKA).(OKAN)+SET(OKA).(OKAM)),SET(OKB).(OKBN)/(SET(OKB).(OKBN)+SET(OKB).(OKBM)),REPLICATE(0,COUNTA+COUNTB)]
        YPM = [SNP+SMP,MNP+MMP,REVERSE([SNP,MNP])] ; [SET(OKA).(OKAM)/(SET(OKA).(OKAN)+SET(OKA).(OKAM)),SET(OKB).(OKBM)/(SET(OKB).(OKBN)+SET(OKB).(OKBM)),REVERSE([SET(OKA).(OKAN)/(SET(OKA).(OKAN)+SET(OKA).(OKAM)),SET(OKB).(OKBN)/(SET(OKB).(OKBN)+SET(OKB).(OKBM))])]
        
        YRANGE = NICE_RANGE([0,MAX([STOT,MTOT],/NAN)+0.51])
        POSITION1 = START_POS(TAR)
        TXT = TEXT(POSITION1[0]+0.01,POSITION1(3)+0.005,TPROD,FONT_SIZE=12,FONT_STYLE='BOLD')
        PM = PLOT(AX.JD,YRANGE,YTITLE=UNITS(TPROD,/NO_NAME),XRANGE=AX.JD,YRANGE=YRANGE,FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XMAJOR=AX.TICKS,XMINOR=0,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,POSITION=POSITION1,/NODATA,/CURRENT)
        XTICKV = PM.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)
        TA = TEXT(MAX(SDATE),MAX(YRANGE),LEGA+'  ',ALIGNMENT=1,VERTICAL_ALIGNMENT=0,FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD',/DATA,TARGET=PM,CLIP=0)
        TB = TEXT(MAX(SDATE),MAX(YRANGE),'  '+LEGB,ALIGNMENT=0,VERTICAL_ALIGNMENT=0,FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD',/DATA,TARGET=PM,CLIP=0)
        FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGE,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)
        PT = PLOT(JD,[STOT,MTOT],COLOR='RED',/OVERPLOT,/CURRENT)
        PM = PLOT(JD,[SM,  MM],  COLOR='BLUE',/OVERPLOT,/CURRENT)
        PN = PLOT(JD,[SN,  MN],  COLOR='GREEN',/OVERPLOT,/CURRENT)
        
        POSITION2 = [POSITION1[0],POSITION1[1]-.15,POSITION1(2),POSITION1[1]-.05]
        ;   TXT = TEXT(POSITION1[0]+0.01,POSITION1(3)+0.005,TPROD,FONT_SIZE=12,FONT_STYLE='BOLD')
        PM = PLOT(AX.JD,YRANGE,YTITLE=UNITS(TPROD,/NO_NAME),XRANGE=AX.JD,YRANGE=YRANGE,FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XMAJOR=AX.TICKS,XMINOR=0,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,POSITION=POSITION2,/NODATA,/CURRENT)
        XTICKV = PM.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)
        
        POLYN = POLYGON(XX,YYN,FILL_COLOR=COLORA,/FILL_BACKGROUND,TARGET=PM,/DATA,LINESTYLE=6)
        POLYM = POLYGON(XX,YYM,FILL_COLOR=COLORB,/FILL_BACKGROUND,TARGET=PM,/DATA,LINESTYLE=6)
        FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGE,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)
        GR = PLOT([MAX(SDATE),MAX(SDATE)],YRANGE,COLOR='BLACK',THICK=3,/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)
        
        POSITION3 = [POSITION1[0],POSITION2[1]-.15,POSITION1(2),POSITION2[1]-.05]
        YRANGE = [0,1]
        ;  TXT = TEXT(POSITION2[0]+0.01,POSITION2(3)+0.005,TPROD,FONT_SIZE=12,FONT_STYLE='BOLD')
        PM = PLOT(AX.JD,YRANGE,YTITLE='Percent Composition (%)',XRANGE=AX.JD,YRANGE=YRANGE,FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XMAJOR=AX.TICKS,XMINOR=0,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,POSITION=POSITION3,/NODATA,/CURRENT)
        XTICKV = PM.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)
        POLYN = POLYGON(XX,YPN,FILL_COLOR=COLORA,/FILL_BACKGROUND,TARGET=PM,/DATA,LINESTYLE=6)
        POLYM = POLYGON(XX,YPM,FILL_COLOR=COLORB,/FILL_BACKGROUND,TARGET=PM,/DATA,LINESTYLE=6)
        FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGE,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)
        
        ;  P1 = PLOT(PERIOD_2JD(MA.PERIOD),MATPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='CIRCLE',SYM_SIZE=0.65,/SYM_FILLED)
        ;  P2 = PLOT(PERIOD_2JD(MB.PERIOD),MBTPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='CIRCLE',SYM_SIZE=0.65,/SYM_FILLED)
        ;  TA = TEXT(POSITION1[0]+.02,POSITION1(3)-0.02,'Microplankton',    FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+4,FONT_STYLE='BOLD')
        ;  TB = TEXT(POSITION1[0]+.02,POSITION1(3)-0.035,'Nano+picoplankton',FONT_COLOR=COLORA,FONT_SIZE=FONTSIZE+4,FONT_STYLE='BOLD')
      ENDFOR ; DATASETS
      PRINT, 'Writing: ' + PNGFILE
      STOP
      W.SAVE,PNGFILE,RESOLUTION=600
      W.CLOSE
    ENDFOR ; CODES
    
  ENDIF ; DO_MONTHLY_TIMESERIES  
  
    
; ********************************************
  IF DO_ANNUAL_PLOTS GE 1 THEN BEGIN
; ********************************************  
    
    DATE_RANGE = DATE_2JD(['19970901','20141231'])
    DATASETS   = ['OC-SEAWIFS-MLAC','PP-SEAWIFS_PAN-AVHRR-MLAC']
    PERIODS    = ['ANNUAL_SUM']
    DATES      = ['1998-2014']
    
    SUBAREAS   = ['ECOREGIONS_FULL_NO_ESTUARIES']
    CODES  = [ 7,5,6,8]
    NAMES  = ['MID_ATLANTIC_BIGHT','GEORGES_BANK','GULF_OF_MAINE','SCOTIAN_SHELF']
    TITLES = ['Mid-Atlantic Bight','Georges Bank','Gulf of Maine','Scotian Shelf']

    PALGS = ['VGPM2','OPAL']
    CALGS = ['PAN','OC']
    CDATASET   = ['OC-SEAWIFS-MLAC',  'OC-MODIS-LAC']
    FOR CTH=0, N_ELEMENTS(CALGS)-1 DO BEGIN
      CODES  = [ 7,5,6,8]
      NAMES  = ['MID_ATLANTIC_BIGHT','GEORGES_BANK','GULF_OF_MAINE','SCOTIAN_SHELF']
      TITLES = ['Mid-Atlantic Bight','Georges Bank','Gulf of Maine','Scotian Shelf']
      
      CALG = CALGS(CTH)
      DIR_PLOTS = DIR_PROJECTS + 'PLOTS-' + CALG + SL & DIR_TEST, DIR_PLOTS
      DIR_STATS = DIR_PROJECTS + 'DATA_BY_SUBAREA_' + CALG + SL + 'STATS-SAVE' + SL
      
      SDATE      = DATE_2JD(['19970101000000','20071231235959'])
      MDATE      = DATE_2JD(['20080101000000','20141231235959'])
      TARGETS    = ['CHLOR_A','PPD']
      SENSORA    = 'SeaWiFS'
      SENSORB    = 'MODIS-Aqua'

      CFILES = FILE_SEARCH(DIR_STATS+PERIODS+'-'+CALG+'-*CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV') ; PPD ALG DOES NOT MATTER BECAUSE ONLY PLOTTING CHL
      CHLPNG = FIX_PATH(DIR_PLOTS+'ANNUAL-CHLOROPHYLL_'+CALG+'-TIMESERIES.PNG')

      AX = DATE_AXIS([19980101,20140101],/YEAR,/YYYY,STEP_SIZE=2)
      DIMENSIONS=[780,760]
      BOTTOM = [410,410,80,80]
      LEFT   = 75
      LEFT2  = 450
      SPACE  = 60
      DIF    = 300
      
      PRODS = ['CHLOR_A_PAN','MICRO_PAN','NANOPICO_PAN']
      YTITLE = [UNITS('CHLOROPHYLL')]
      CYRANGE = [0,1.2]
      IF FILE_MAKE(CFILES,CHLPNG,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_CHLPNG
      W = WINDOW(DIMENSIONS=DIMENSIONS)
      FOR P=0, N_ELEMENTS(CODES)-1 DO BEGIN
        
        IF P MOD 2 EQ 0 THEN POS = [LEFT,BOTTOM(P),LEFT+DIF,BOTTOM(P)+DIF] ELSE POS = [LEFT2,BOTTOM(P),LEFT2+DIF,BOTTOM(P)+DIF]
        SDATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-SE-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
        ADATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-AQ-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
        CDATA = STRUCT_CONCAT(SDATA,ADATA)
        PANS = PLOT(DATE_2JD(CDATA.YEAR),CDATA.NCHL_ANNUAL_MEAN+CDATA.MCHL_ANNUAL_MEAN,XRANGE=AX.JD,XTICKVALUES=AX.TICKV,XTICKNAME=AX.TICKNAME,XMINOR=0,YMINOR=2,XTICKLEN=0.02,YTICKLEN=0.01,YRANGE=CYRANGE,POSITION=POS,$
          YTITLE=YTITLE,THICK=3,COLOR='BLACK', BUFFER=BUFFER,/CURRENT,/DEVICE)
        BOT = REPLICATE(0.0, N_ELEMENTS(CDATA))
        YY = [CDATA.MCHL_ANNUAL_MEAN,BOT]
        XX = DATE_2JD([CDATA.YEAR,REVERSE(CDATA.YEAR)])
        POLY = POLYGON(XX,YY,FILL_COLOR='RED',/FILL_BACKGROUND,TARGET=PANS,/DATA,LINESTYLE=6)
        YY = [CDATA.MCHL_ANNUAL_MEAN,REVERSE(CDATA.NCHL_ANNUAL_MEAN+CDATA.MCHL_ANNUAL_MEAN)]
        POLY = POLYGON(XX,YY,FILL_COLOR='BLUE',/FILL_BACKGROUND,TARGET=PANS,/DATA,LINESTYLE=6)
        D = TEXT(POS[0]+15,POS[1]+270,TITLES(P),FONT_SIZE=14,/DEVICE)
      ENDFOR
      S = TEXT(165,20,'Nano+Picoplankton',COLOR = 'BLUE', FONT_SIZE=14,/DEVICE)
      M = TEXT(555,20, 'Microplankton',   COLOR = 'RED',  FONT_SIZE=14,/DEVICE)
      X = [0,30,30,0,0] & Y = [0,0,15,15,0]
      PO = POLYGON(X,Y,POSITION=[125,20,155,35],FILL_COLOR='BLUE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
      PO = POLYGON(X,Y,POSITION=[520,20,550,35],FILL_COLOR='RED',/FILL_BACKGROUND,/CURRENT,/DEVICE)
     
      W.SAVE,CHLPNG,RESOLUTION=300
      W.CLOSE
      SKIP_CHLPNG:
      
        
        AX = DATE_AXIS([19980101,20140101],/YEAR,/YY,STEP_SIZE=2)
        AXRANGE = DATE_2JD([19970101,20150101])
        CFILES = FILE_SEARCH(DIR_STATS+PERIODS+'-'+CALG+'-*CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
        CHLPNG = FIX_PATH(DIR_PLOTS+'ANNUAL-CHLOROPHYLL_'+CALG+'-TIMESERIES-BAR.PNG')
        IF FILE_MAKE(CFILES,CHLPNG,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_CHLBAR
        W = WINDOW(DIMENSIONS=DIMENSIONS)
        FOR P=0, N_ELEMENTS(CODES)-1 DO BEGIN
          IF P MOD 2 EQ 0 THEN POS = [LEFT,BOTTOM(P),LEFT+DIF,BOTTOM(P)+DIF] ELSE POS = [LEFT2,BOTTOM(P),LEFT2+DIF,BOTTOM(P)+DIF]
          SDATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-SE-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
          ADATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-AQ-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
          CDATA = STRUCT_CONCAT(SDATA,ADATA)
          PANS = PLOT(AXRANGE,CYRANGE,XRANGE=AXRANGE,XTICKVALUES=AX.TICKV,XTICKNAME=AX.TICKNAME,XMINOR=0,YMINOR=2,XTICKLEN=0.02,YTICKLEN=0.01,YRANGE=CYRANGE,POSITION=POS,$
            YTITLE=YTITLE,THICK=3,COLOR='BLACK', BUFFER=BUFFER,/CURRENT,/DEVICE,/NODATA)
          BOT = REPLICATE(0.0, 12)
          ADATES = DATE_2JD(CDATA.YEAR)
          NBAR = BARPLOT(ADATES,CDATA.NCHL_ANNUAL_MEAN,                       NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT,                   FILL_COLOR='BLUE',  LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=CYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          MBAR = BARPLOT(ADATES,CDATA.NCHL_ANNUAL_MEAN+CDATA.MCHL_ANNUAL_MEAN,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=CDATA.NCHL_ANNUAL_MEAN,FILL_COLOR='ORANGE',LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=CYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          
          D = TEXT(POS[0]+15,POS[1]+270,TITLES(P),FONT_SIZE=14,/DEVICE)
        ENDFOR

        S = TEXT(165,20,'Nano+Picoplankton',COLOR = 'BLUE', FONT_SIZE=14,/DEVICE)
        M = TEXT(555,20, 'Microplankton',   COLOR = 'ORANGE',  FONT_SIZE=14,/DEVICE)
        X = [0,30,30,0,0] & Y = [0,0,15,15,0]
        PO = POLYGON(X,Y,POSITION=[125,20,155,35],FILL_COLOR='BLUE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
        PO = POLYGON(X,Y,POSITION=[520,20,550,35],FILL_COLOR='ORANGE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
        
        W.SAVE,CHLPNG,RESOLUTION=300
        W.CLOSE
        SKIP_CHLBAR:
        
        CFILES = FILE_SEARCH(DIR_STATS+PERIODS+'-*CHL_PRIMARY_PRODUCTION-*-STATS.SAVE')
        PPDPNG = FIX_PATH(DIR_PLOTS+'ANNUAL_PRIMARY_PRODUCTION-TIMESERIES.PNG')
        
        YTITLE = 'Primary Production (Million tonnes yr!U-1!N)'
        PYRANGE = [0,40]
        CFILES = FILE_SEARCH(DIR_STATS+PERIODS+'-'+CALG+'-*CHL_PRIMARY_PRODUCTION-*-STATS.SAV')
        CHLPNG = FIX_PATH(DIR_PLOTS+'ANNUAL-PRIMARY_PRODUCTION_'+CALG+'-TIMESERIES-BAR.PNG')
        IF FILE_MAKE(CFILES,PPDPNG,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, SKIP_PPDPNG
        
        W = WINDOW(DIMENSIONS=DIMENSIONS)
        FOR P=0, N_ELEMENTS(CODES)-1 DO BEGIN
          IF P MOD 2 EQ 0 THEN POS = [LEFT,BOTTOM(P),LEFT+DIF,BOTTOM(P)+DIF] ELSE POS = [LEFT2,BOTTOM(P),LEFT2+DIF,BOTTOM(P)+DIF]
          SDATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-SE-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
          ADATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-AQ-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
          VDATA = STRUCT_CONCAT(SDATA,ADATA)

          SDATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-SE-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-OPAL-STATS.SAV')
          ADATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-AQ-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-OPAL-STATS.SAV')
          ODATA = STRUCT_CONCAT(SDATA,ADATA)

          NBARS = 1
          PANS = PLOT(AXRANGE,PYRANGE,XRANGE=AXRANGE,XTICKVALUES=AX.TICKV,XTICKNAME=AX.TICKNAME,XMINOR=0,YMINOR=2,XTICKLEN=0.04,YTICKLEN=0.01,YRANGE=PYRANGE,POSITION=POS,$
            YTITLE=YTITLE,THICK=3,COLOR='BLACK', BUFFER=BUFFER,/CURRENT,/DEVICE,/NODATA)
          ADATES = DATE_2JD(VDATA.YEAR)
          BOT = REPLICATE(0, 12)
          NBAR = BARPLOT(ADATES,VDATA.NPP_ANNUAL_MTON/1E6,                      NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT, FILL_COLOR='MEDIUM_AQUAMARINE',LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=PYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          MBAR = BARPLOT(ADATES,VDATA.NPP_ANNUAL_MTON/1E6+VDATA.MPP_ANNUAL_MTON/1E6,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=VDATA.NPP_ANNUAL_MTON/1E6,FILL_COLOR='YELLOW',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=PYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          
        ;  NBAR = BARPLOT(ADATES,ODATA.NPP_ANNUAL_MTON/1E6,                      NBARS=NBARS,INDEX=1,BOTTOM_VALUES=BOT, FILL_COLOR='BLUE',             LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=PYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
        ;  MBAR = BARPLOT(ADATES,ODATA.NPP_ANNUAL_MTON/1E6+ODATA.MPP_ANNUAL_MTON/1E6,NBARS=NBARS,INDEX=1,BOTTOM_VALUES=ODATA.NPP_ANNUAL_MTON/1E6,FILL_COLOR='ORANGE',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=PYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          
          D = TEXT(POS[0]+15,POS[1]+270,TITLES(P),FONT_SIZE=14,/DEVICE)
        ENDFOR
        
        X = [0,30,30,0,0] & Y = [0,0,15,15,0]
        PY = 30
        PY2 = 10
        P1 = 95
        P2 = 495
        TO = TEXT(P1+45,PY +7.5,'Nano + Picoplankton',FONT_SIZE=12,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
       ; TO = TEXT(P1+45,PY2+7.5,'Nano + Picoplankton (OPAL)', FONT_SIZE=12,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
        PO = POLYGON(X,Y,POSITION=[P1,PY, P1+40,PY +15],FILL_COLOR='MEDIUM_AQUAMARINE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
       ; PO = POLYGON(X,Y,POSITION=[P1,PY2,P1+40,PY2+15],FILL_COLOR='BLUE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
        
        TO = TEXT(P2+45,PY +7.5,'Microplankton',FONT_SIZE=12,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
      ;  TO = TEXT(P2+45,PY2+7.5,'Microplankton (OPAL)',FONT_SIZE=12,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
        PO = POLYGON(X,Y,POSITION=[P2,PY, P2+40,PY +15],FILL_COLOR='YELLOW',/FILL_BACKGROUND,/CURRENT,/DEVICE)
       ; PO = POLYGON(X,Y,POSITION=[P2,PY2,P2+40,PY2+15],FILL_COLOR='ORANGE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
        
        W.SAVE,PPDPNG,RESOLUTION=300
        W.CLOSE
        SKIP_PPDPNG:
        
        FONT_SIZE = 15
        MARGIN = [0.1,0.11,0.1,0.09]
        CODES  = [ 7,5,6,8]
        NAMES  = ['NES_LME']
        TITLES = ['Northeast Shelf']
        PPDPNG = FIX_PATH(DIR_PLOTS+'ANNUAL_PRIMARY_PRODUCTION-NESLME-TIMESERIES.PNG')
        W = WINDOW(DIMENSIONS=[1000,500])
       
          SDATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-SE-NES_LME-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
          ADATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-AQ-NES_LME-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV')
          VDATA = STRUCT_CONCAT(SDATA,ADATA)

;          SDATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-SE-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-OPAL-STATS.SAV')
;          ADATA = IDL_RESTORE(DIR_STATS+PERIODS+'-'+CALG+'-AQ-'+NAMES(P)+'-CHL_PRIMARY_PRODUCTION-OPAL-STATS.SAV')
;          ODATA = STRUCT_CONCAT(SDATA,ADATA)

          NBARS = 1
          PYRANGE=[0,80]
          PANS = PLOT(AXRANGE,PYRANGE,XRANGE=AXRANGE,XTICKVALUES=AX.TICKV,XTICKNAME=['1998','2000','2002','2004','2006','2008','2010','2012','2014'],XMINOR=0,YMINOR=2,XTICKLEN=0.04,YTICKLEN=0.03,YRANGE=PYRANGE,$
            YTITLE=YTITLE,THICK=3,COLOR='BLACK', BUFFER=BUFFER,/CURRENT,/NODATA,  AXIS_STYLE=1, FONT_SIZE=FONT_SIZE, FONT_STYLE='BOLD',MARGIN=MARGIN)
          POSITION = PANS.POSITION
          ADATES = DATE_2JD(VDATA.YEAR)
          BOT = REPLICATE(0, 12)
          NBAR = BARPLOT(ADATES,VDATA.NPP_ANNUAL_MTON/1E6,                      NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT, FILL_COLOR=[30,92,144],LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=PYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=PANS.XTICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          MBAR = BARPLOT(ADATES,VDATA.NPP_ANNUAL_MTON/1E6+VDATA.MPP_ANNUAL_MTON/1E6,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=VDATA.NPP_ANNUAL_MTON/1E6,FILL_COLOR=[0,137,152],           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=PYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=PANS.XTICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)

     
          P2 = PLOT(ADATES,(VDATA.MPP_ANNUAL_MEAN/VDATA.TPP_ANNUAL_MEAN)*100,AXIS_STYLE=0,POSITION=POSITION,COLOR=[255,255,153],/CURRENT,XTICKVALUE=AX.TICKV,XRANGE=AXRANGE,YRANGE=[20,30],MARGIN=MARGIN,THICK=4,SYMBOL='CIRCLE',/SYM_FILLED,LINESTYLE=0)
;          PD = PLOT(XDATES,DIATOM,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=2,LAYOUT=LAYOUT,POSITION=POSITION)
;          PT = PLOT(XDATES,TCHLA,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=0,LAYOUT=LAYOUT,POSITION=POSITION)
          A1 = AXIS('Y',TARGET=P2,LOCATION=[MAX(PANS.XRANGE),0,0],TEXTPOS=1,MINOR=4,TICKFONT_SIZE=FONT_SIZE,TICKFONT_STYLE='BOLD',TEXT_COLOR='BLACK',TICKDIR=1,TITLE='Percent Microplankton Production (%)',TICKLEN=0.03,YRANGE=[20,30]) ;AXIS,YAXIS=1,YRANGE=[0,300],/SAVE, YTITLE=YTITLE2,CHARSIZE=CHARSIZE,COLOR=0
          A2 = AXIS('X',TARGET=PANS,LOCATION='TOP',MAJOR=0,MINOR=0,COLOR='BLACK')
          
        X = [0,30,30,0,0] & Y = [0,0,15,15,0]
        PY = 12
        PY2 = 10
        P1 = 275
        P2 = 550
        TO = TEXT(P1+45,PY +7.5,'Nano + Picoplankton',FONT_SIZE=12,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5,FONT_STYLE='BOLD')
        PO = POLYGON(X,Y,POSITION=[P1,PY, P1+40,PY +15],FILL_COLOR=[30,92,144],/FILL_BACKGROUND,/CURRENT,/DEVICE)
       
        TO = TEXT(P2+45,PY +7.5,'Microplankton',FONT_SIZE=12,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5,FONT_STYLE='BOLD')
        PO = POLYGON(X,Y,POSITION=[P2,PY, P2+40,PY +15],FILL_COLOR=[0,137,152],/FILL_BACKGROUND,/CURRENT,/DEVICE)
       
        W.SAVE,PPDPNG,RESOLUTION=300
        W.CLOSE
        
        
    ENDFOR
    
  ENDIF ; DO_ANNUAL_PLOTS
  
  
; *******************************************************
  IF DO_FINAL_COMPOSITES GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_FINAL_COMPOSITES GE 2
    
    
    BUFFER = 1
    
    MAP_IN = 'NEC'
    PAL = 'PAL_BR'
    
    LAND = READ_LANDMASK(MAP=MAP_IN,PX=1024,PY=1024,/STRUCT)
    LL = MAPS_2LONLAT(MAP_IN,PX=1024,PY=1024)
    IMG = BYTARR(1024,1024) & IMG(*) = 251
    IMG(LAND.LAND)  = 251
    IMG(LAND.OCEAN) = 254
    
    SUBAREAS   = ['ECOREGIONS_FULL_NO_ESTUARIES']
    MASK = STRUCT_READ(!S.SUBAREAS + 'MASK_SUBAREA-NEC-PXY_1024_1024-'+SUBAREAS+'.SAV',STRUCT=NSTRUCT)
    CODES  = [ 7,5,6,8]
    NAMES  = ['MID_ATLANTIC_BIGHT','GEORGES_BANK','GULF_OF_MAINE','SCOTIAN_SHELF']
    TITLES = ['Mid-Atlantic Bight','Georges Bank','Gulf of Maine','Scotian Shelf']

    PALGS = ['VGPM2','OPAL']
    CALGS = ['OC','PAN']
    
    FOR CTH=0, N_ELEMENTS(CALGS)-1 DO BEGIN
      CALG = CALGS(CTH)
      
      DIR_PLOTS = DIR_PROJECTS + 'PLOTS-' + CALG + SL & DIR_TEST, DIR_PLOTS
      DIR_STATS = DIR_PROJECTS + 'DATA_BY_SUBAREA_' + CALG + SL + 'STATS-SAVE' + SL
      
      SENSORS    = ['SE','AQ']
      CDATASETS   = ['OC-SEAWIFS-MLAC',  'OC-MODIS-LAC']
      FOR STH=0, N_ELEMENTS(SENSORS)-1 DO BEGIN
        IF CALG EQ 'PAN' THEN SEN = SENSORS(STH)+'P' ELSE SEN = SENSORS(STH)
        PDIR = !S.DATASETS + 'PP-'+SEN+'-1KM' + SL + MAP_IN + SL + 'STATS' + SL
        CDIR = !S.DATASETS + CDATASETS(STH)   + SL + MAP_IN + SL + 'STATS' + SL
        
        CFILE   = FILE_SEARCH(FIX_PATH(CDIR + 'CHLOR_A-PAN/ANNUAL*'+MAP_IN+'*MEAN.SAVE'))
        MCFILE  = FILE_SEARCH(FIX_PATH(CDIR + 'MICRO-PAN/ANNUAL*'+MAP_IN+'*MEAN.SAVE'))
        NCFILE  = FILE_SEARCH(FIX_PATH(CDIR + 'NANOPICO-PAN/ANNUAL*'+MAP_IN+'*MEAN.SAVE'))
        MCPFILE = FILE_SEARCH(FIX_PATH(CDIR + 'MICRO_PERCENTAGE-PAN/ANNUAL*'+MAP_IN+'*MEAN.SAVE'))
        NCPFILE = FILE_SEARCH(FIX_PATH(CDIR + 'NANOPICO_PERCENTAGE-PAN/ANNUAL*'+MAP_IN+'*MEAN.SAVE'))
        
        VFILE   = FILE_SEARCH(FIX_PATH(PDIR + 'PPD-VGPM2/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        VMFILE  = FILE_SEARCH(FIX_PATH(PDIR + 'MICROPP-MM_PAN_VGPM2/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        VNFILE  = FILE_SEARCH(FIX_PATH(PDIR + 'NANOPICOPP-MM_PAN_VGPM2/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        VMPFILE = FILE_SEARCH(FIX_PATH(PDIR + 'MICROPP_PER-MM_PAN_VGPM2/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        VNPFILE = FILE_SEARCH(FIX_PATH(PDIR + 'NANOPICOPP_PER-MM_PAN_VGPM2/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        
        OFILE   = FILE_SEARCH(FIX_PATH(PDIR + 'PPD-OPAL/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        OMFILE  = FILE_SEARCH(FIX_PATH(PDIR + 'MICROPP-MM_PAN_OPAL/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        ONFILE  = FILE_SEARCH(FIX_PATH(PDIR + 'NANOPICOPP-MM_PAN_OPAL/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        OMPFILE = FILE_SEARCH(FIX_PATH(PDIR + 'MICROPP_PER-MM_PAN_OPAL/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        ONPFILE = FILE_SEARCH(FIX_PATH(PDIR + 'NANOPICOPP_PER-MM_PAN_OPAL/ANNUAL*'+MAP_IN+'*STATS.SAV'))
        
        FOR SUB=0, N_ELEMENTS(CODES)-1 DO BEGIN
         
          CODE = CODES(SUB)
          NAME = NAMES(SUB)
          TITLE = TITLES(SUB)
          PNGFILE = FIX_PATH(DIR_PLOTS + NAME + '-PHYTO_COMPOSITE-' + CALG + '.PNG')
          
          MVFILE = DIR_STATS + 'MONTHLY_SUM-' + CALG + ['-SE-','-AQ-'] + NAME + '-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV'
          AVFILE = DIR_STATS + 'ANNUAL_SUM-'  + CALG + ['-SE-','-AQ-'] + NAME + '-CHL_PRIMARY_PRODUCTION-VGPM2-STATS.SAV'
          MOFILE = DIR_STATS + 'MONTHLY_SUM-' + CALG + ['-SE-','-AQ-'] + NAME + '-CHL_PRIMARY_PRODUCTION-OPAL-STATS.SAV'
          AOFILE = DIR_STATS + 'ANNUAL_SUM-'  + CALG + ['-SE-','-AQ-'] + NAME + '-CHL_PRIMARY_PRODUCTION-OPAL-STATS.SAV'
          FILES  = [MVFILE,AVFILE,MOFILE,AOFILE]
          IF FILE_MAKE(FILES,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
          MVDATA = STRUCT_CONCAT(IDL_RESTORE(MVFILE[0]),IDL_RESTORE(MVFILE[1]))        
          AVDATA = STRUCT_CONCAT(IDL_RESTORE(AVFILE[0]),IDL_RESTORE(AVFILE[1]))
          MODATA = STRUCT_CONCAT(IDL_RESTORE(MOFILE[0]),IDL_RESTORE(MOFILE[1]))
          AODATA = STRUCT_CONCAT(IDL_RESTORE(AOFILE[0]),IDL_RESTORE(AOFILE[1]))
     
          M = MAPS_SIZE('NEC')
          OUTLINE_FILE = DIR_PLOTS + 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_FULL_NO_ESTUARIES-OUTLINE'+NAME+'.PNG'
          IF FILE_TEST(OUTLINE_FILE) EQ 1 AND NOT KEYWORD_SET(OVERWRITE) THEN GOTO, SKIP_OUTLINE
          OK = WHERE(MASK EQ CODE,COUNT)
          IF COUNT GE 10 THEN BEGIN
            BLANK = BYTARR(M.PX,M.PY)
            BLANK[OK] = 255
            OUTLINE = IMAGE_OUTLINE(BLANK)
            OUTLINE(WHERE(OUTLINE EQ 1)) = 250
            WRITE_PNG, OUTLINE_FILE,OUTLINE,R,G,B
          ENDIF
          SKIP_OUTLINE:
          OUTLINE_COLORS = 0
          OUTLINE_THICK = 2
          
          
          LAND_COLOR = 251
          CSCALE = 'LOW'
          VSCALE = 'LOW'
          CPSCALE = '100'
          VPSCALE = '100'
          CGROUPS = ['MICRO','NANOPICO']
          CCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']
          PGROUPS = ['MICRO','NANOPICO']
          PCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']
          
          DATA = STRUCT_READ(CFILE,  STRUCT=CHL)
          DATA = STRUCT_READ(MCFILE, STRUCT=CMICRO)
          DATA = STRUCT_READ(NCFILE, STRUCT=CNANO)
          DATA = STRUCT_READ(MCPFILE,STRUCT=CMPER)
          DATA = STRUCT_READ(NCPFILE,STRUCT=CNPER)
          DATA = STRUCT_READ(VFILE,  STRUCT=VGPM)
          DATA = STRUCT_READ(VMFILE, STRUCT=VMICRO)
          DATA = STRUCT_READ(VNFILE, STRUCT=VNANO)
          DATA = STRUCT_READ(VMPFILE,STRUCT=VMPER)
          DATA = STRUCT_READ(VNPFILE,STRUCT=VNPER)
          DATA = STRUCT_READ(OFILE,  STRUCT=OPAL)
          DATA = STRUCT_READ(OMFILE, STRUCT=OMICRO)
          DATA = STRUCT_READ(ONFILE, STRUCT=ONANO)
          DATA = STRUCT_READ(OMPFILE,STRUCT=OMPER)
          DATA = STRUCT_READ(ONPFILE,STRUCT=ONPER)
          GONE, DATA
          
          W = WINDOW(DIMENSIONS=[800,1040],BUFFER=BUFFER)
          T    = TEXT(400,1020,TITLE,ALIGNMENT=0.5,/DEVICE,FONT_SIZE=14,FONT_STYLE='BOLD')
          TT   = TEXT([150,550],[1000,1000],['Chlorophyll','Primary Production'],ALIGNMENT=0.5,/DEVICE,FONT_SIZE=14)
          TS   = TEXT([70, 220,470,620],[685,685,685,685],['Micro','Nano+Pico','Micro','Nano+Pico'],FONT_SIZE=12,ALIGNMENT=0.5,/DEVICE)
          
          CIM  = STRUCT_SD_2IMAGE_NG(CHL, IMG_POSITION=[5,  705,295,995],USE_PROD='CHLOR_A',SPECIAL_SCALE=CSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          VIM  = STRUCT_SD_2IMAGE_NG(VGPM,IMG_POSITION=[405,705,695,995],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          
          CIM  = STRUCT_SD_2IMAGE_NG(CMICRO,IMG_POSITION=[5,  540,145,680],USE_PROD='CHLOR_A',SPECIAL_SCALE=CSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          CIM  = STRUCT_SD_2IMAGE_NG(CNANO, IMG_POSITION=[155,540,295,680],USE_PROD='CHLOR_A',SPECIAL_SCALE=CSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          CIM  = STRUCT_SD_2IMAGE_NG(CMPER, IMG_POSITION=[5,  390,145,530],USE_PROD='PERCENT',SPECIAL_SCALE=CPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          CIM  = STRUCT_SD_2IMAGE_NG(CNPER, IMG_POSITION=[155,390,295,530],USE_PROD='PERCENT',SPECIAL_SCALE=CPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          
          VIM  = STRUCT_SD_2IMAGE_NG(VMICRO,IMG_POSITION=[405,540,545,680],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          VIM  = STRUCT_SD_2IMAGE_NG(VNANO, IMG_POSITION=[555,540,695,680],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          VIM  = STRUCT_SD_2IMAGE_NG(VMPER, IMG_POSITION=[405,390,545,530],USE_PROD='PERCENT',SPECIAL_SCALE=VPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          VIM  = STRUCT_SD_2IMAGE_NG(VNPER, IMG_POSITION=[555,390,695,530],USE_PROD='PERCENT',SPECIAL_SCALE=VPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILE,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
          
          BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',SPECIAL_SCALE=CSCALE, PX=305,PY=985,CHARSIZE=10,BACKGROUND=252,XDIM=20,YDIM=260,PAL=PAL,VERTICAL=1,RIGHT=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('CHLOROPHYLL'),BUFFER=BUFFER)
          BAR = COLOR_BAR_SCALE_NG(PROD='PPD',    SPECIAL_SCALE=VSCALE, PX=705,PY=985,CHARSIZE=10,BACKGROUND=252,XDIM=20,YDIM=260,PAL=PAL,VERTICAL=1,RIGHT=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('PRIMARY_PRODUCTION'),BUFFER=BUFFER)
          BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',SPECIAL_SCALE=CSCALE, PX=305,PY=675,CHARSIZE=10,BACKGROUND=252,XDIM=20,YDIM=130,PAL=PAL,VERTICAL=1,RIGHT=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('CHLOROPHYLL'),BUFFER=BUFFER)
          BAR = COLOR_BAR_SCALE_NG(PROD='PERCENT',SPECIAL_SCALE=CPSCALE,PX=305,PY=525,CHARSIZE=10,BACKGROUND=252,XDIM=20,YDIM=130,PAL=PAL,VERTICAL=1,RIGHT=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('PERCENT'),BUFFER=BUFFER)
          BAR = COLOR_BAR_SCALE_NG(PROD='PPD',    SPECIAL_SCALE=CSCALE, PX=705,PY=675,CHARSIZE=10,BACKGROUND=252,XDIM=20,YDIM=130,PAL=PAL,VERTICAL=1,RIGHT=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('PRIMARY_PRODUCTION'),BUFFER=BUFFER)
          BAR = COLOR_BAR_SCALE_NG(PROD='PERCENT',SPECIAL_SCALE=VPSCALE,PX=705,PY=525,CHARSIZE=10,BACKGROUND=252,XDIM=20,YDIM=130,PAL=PAL,VERTICAL=1,RIGHT=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('PERCENT'),BUFFER=BUFFER)
          
        
        ;     ***** CHLOROPHYLL BAR PLOTS *****
          NBARS = 1
          MX = DATE_AXIS([20200101,20201231],/MONTH,/MID,/FYEAR,STEP_SIZE=1) & MXRANGE = DATE_2JD([20191215,20210115])
          MCHL = REPLICATE(0.0,12) & NCHL = MCHL
          
          BOT = REPLICATE(0, 12)
          MSETS = WHERE_SETS(MVDATA.MONTH)
          FOR MTH=0, N_ELEMENTS(MSETS)-1 DO BEGIN
            SUBS = WHERE_SETS_SUBS(MSETS(MTH))
            SET  = MVDATA(SUBS)
            MCHL(MTH) = MEAN(SET.MCHL_MEAN,/NAN)
            NCHL(MTH) = MEAN(SET.NCHL_MEAN,/NAN)
          ENDFOR
          IF MSETS NE [] THEN MDATES = JD_ADD(DATE_2JD('2020'+MSETS.VALUE),15,/DAY)
          
          MAX_CHL = MAX(MCHL+NCHL,/NAN)
          MCHL(WHERE(FINITE(MCHL) EQ 0)) = 0.0
          NCHL(WHERE(FINITE(NCHL) EQ 0)) = 0.0
          POSITION = [65,225,345,365]
          P = PLOT(MXRANGE,[0,MAX_CHL],YTITLE='CHL ' + UNITS('CHLOROPHYLL',/NO_NAME),TITLE='Monthly',XTICKVALUE=MX.TICKV,FONT_SIZE=11,POSITION=POSITION,XRANGE=MXRANGE,$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=MX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT,/DEVICE)
          BYRANGE = P.YRANGE
          YTICKNAME = P.YTICKNAME
          YTICKV  = P.YTICKVALUE
          YMINOR = P.YMINOR
          
          NBAR = BARPLOT(MDATES,NCHL,     NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT, FILL_COLOR='MEDIUM_AQUAMARINE',LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=MXRANGE,XTICKVALUE=MX.TICKV,XTICKNAME=MX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          MBAR = BARPLOT(MDATES,NCHL+MCHL,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=NCHL,FILL_COLOR='YELLOW',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=MXRANGE,XTICKVALUE=MX.TICKV,XTICKNAME=MX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          
          NBARS = 1
          AX = DATE_AXIS([19980101,20140101],/YEAR,/YY,STEP_SIZE=2)
          AXRANGE = DATE_2JD([19970101,20150101])
          MCHL = AVDATA.MCHL_ANNUAL_MEAN
          NCHL = AVDATA.NCHL_ANNUAL_MEAN
          ADATES = DATE_2JD(AVDATA.YEAR)
          BOT = REPLICATE(0.0, N_ELEMENTS(MCHL))
          MAX_CHL = MAX(MCHL+NCHL,/NAN)
          
          POSITION = [65,45,345,185]
          P = PLOT(AXRANGE,[0,MAX_CHL],YTITLE='CHL ' + UNITS('CHLOROPHYLL',/NO_NAME),TITLE='Annual',XTICKVALUE=AX.TICKV,FONT_SIZE=11,POSITION=POSITION,XRANGE=AXRANGE,$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT,/DEVICE)
          BYRANGE = P.YRANGE
          YTICKNAME = P.YTICKNAME
          YTICKV  = P.YTICKVALUE
          YMINOR = P.YMINOR
          
          IF NCHL NE [] THEN NBAR = BARPLOT(ADATES,NCHL,     NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT, FILL_COLOR='MEDIUM_AQUAMARINE',LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          IF MCHL NE [] THEN MBAR = BARPLOT(ADATES,NCHL+MCHL,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=NCHL,FILL_COLOR='YELLOW',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          
          ;     ***** PRODUCTIVITY BAR PLOTS *****
          NBARS = 2
          MX = DATE_AXIS([20200101,20201231],/MONTH,/MID,/FYEAR,STEP_SIZE=1) & MXRANGE = DATE_2JD([20191215,20210115])
          MVPP = REPLICATE(0.0,12) & NVPP = MVPP
          MOPP = REPLICATE(0.0,12) & NOPP = MOPP
          
          BOT = REPLICATE(0, 12)
          MSETS = WHERE_SETS(MVDATA.MONTH)
          FOR MTH=0, N_ELEMENTS(MSETS)-1 DO BEGIN
            SUBS = WHERE_SETS_SUBS(MSETS(MTH))
            SET  = MVDATA(SUBS)
            MVPP(MTH) = MEAN(SET.MPP_MEAN,/NAN)
            NVPP(MTH) = MEAN(SET.NPP_MEAN,/NAN)
          ENDFOR
          MVPP(WHERE(FINITE(MVPP) EQ 0)) = 0.0
          NVPP(WHERE(FINITE(NVPP) EQ 0)) = 0.0
          MVDATES = JD_ADD(DATE_2JD('2020'+MSETS.VALUE),15,/DAY)
          MAX_PP = MAX([MVPP+NVPP,MOPP+NOPP],/NAN)
          
          MSETS = WHERE_SETS(MODATA.MONTH)
          FOR MTH=0, N_ELEMENTS(MSETS)-1 DO BEGIN
            SUBS = WHERE_SETS_SUBS(MSETS(MTH))
            SET  = MODATA(SUBS)
            MOPP(MTH) = MEAN(SET.MPP_MEAN,/NAN)
            NOPP(MTH) = MEAN(SET.NPP_MEAN,/NAN)
          ENDFOR
          MOPP(WHERE(FINITE(MOPP) EQ 0)) = 0.0
          NOPP(WHERE(FINITE(NOPP) EQ 0)) = 0.0
          MODATES = JD_ADD(DATE_2JD('2020'+MSETS.VALUE),15,/DAY)
          MAX_PP = MAX(MVPP+NVPP,/NAN)
          
          POSITION = [460,225,740,365]
          P = PLOT(MXRANGE,[0,MAX_PP],YTITLE='PP ' + UNITS('PPD',/NO_NAME),TITLE='Monthly',XTICKVALUE=MX.TICKV,FONT_SIZE=11,POSITION=POSITION,XRANGE=MXRANGE,$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=MX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT,/DEVICE)
          BYRANGE = P.YRANGE
          YTICKNAME = P.YTICKNAME
          YTICKV  = P.YTICKVALUE
          YMINOR = P.YMINOR
          
          NVBAR = BARPLOT(MDATES,NVPP,     NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT, FILL_COLOR='MEDIUM_AQUAMARINE',LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=MXRANGE,XTICKVALUE=MX.TICKV,XTICKNAME=MX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          MVBAR = BARPLOT(MDATES,NVPP+MVPP,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=NVPP,FILL_COLOR='YELLOW',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=MXRANGE,XTICKVALUE=MX.TICKV,XTICKNAME=MX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          NOBAR = BARPLOT(MDATES,NOPP,     NBARS=NBARS,INDEX=1,BOTTOM_VALUES=BOT, FILL_COLOR='BLUE',             LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=MXRANGE,XTICKVALUE=MX.TICKV,XTICKNAME=MX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          MOBAR = BARPLOT(MDATES,NOPP+MOPP,NBARS=NBARS,INDEX=1,BOTTOM_VALUES=NOPP,FILL_COLOR='ORANGE',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=MXRANGE,XTICKVALUE=MX.TICKV,XTICKNAME=MX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          
          NBARS = 2
          AX = DATE_AXIS([19980101,20140101],/YEAR,/YY,STEP_SIZE=2)
          AXRANGE = DATE_2JD([19970101,20150101])
          MVPP = AVDATA.MPP_ANNUAL_MTON
          NVPP = AVDATA.NPP_ANNUAL_MTON
          MOPP = AODATA.MPP_ANNUAL_MTON
          NOPP = AODATA.NPP_ANNUAL_MTON
          ADATES = DATE_2JD(AODATA.YEAR)
          BOT = REPLICATE(0.0, N_ELEMENTS(MVPP))
          MAX_PP = MAX([MVPP+NVPP,MOPP+NOPP],/NAN)
          
          POSITION = [460,45,740,185]
          P = PLOT(AXRANGE,[0,MAX_PP],YTITLE='PP (Ton C yr!U-1!N)',TITLE='Annual',XTICKVALUE=AX.TICKV,FONT_SIZE=11,POSITION=POSITION,XRANGE=AXRANGE,$
            XMINOR=0,YMINOR=2,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT,/DEVICE)
          BYRANGE = P.YRANGE
          YTICKNAME = P.YTICKNAME
          YTICKV  = P.YTICKVALUE
          YMINOR = P.YMINOR
          
          NVBAR = BARPLOT(ADATES,NVPP,     NBARS=NBARS,INDEX=0,BOTTOM_VALUES=BOT, FILL_COLOR='MEDIUM_AQUAMARINE',LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          MVBAR = BARPLOT(ADATES,NVPP+MVPP,NBARS=NBARS,INDEX=0,BOTTOM_VALUES=NVPP,FILL_COLOR='YELLOW',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          NOBAR = BARPLOT(ADATES,NOPP,     NBARS=NBARS,INDEX=1,BOTTOM_VALUES=BOT, FILL_COLOR='BLUE',             LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          MOBAR = BARPLOT(ADATES,NOPP+MOPP,NBARS=NBARS,INDEX=1,BOTTOM_VALUES=NOPP,FILL_COLOR='ORANGE',           LINESTYLE=LINESTYLE,/OVERPLOT,YRANGE=BYRANGE,XRANGE=AXRANGE,XTICKVALUE=AX.TICKV,XTICKNAME=AX.TICKNAME,YTICKVALUE=YTICKV,YTICKNAME=YTICKNAME,YMINOR=YMINOR,BUFFER=BUFFER)
          
          X = [0,30,30,0,0] & Y = [0,0,15,15,0]
          PY = 8
          P1 = 60
          P2 = 460
          TO = TEXT(P1+45,PY+7.5,'Nano + Picoplankton (VGPM2 | OPAL)',FONT_SIZE=12,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
          PO = POLYGON(X,Y,POSITION=[P1,   PY,P1+20,PY+15],FILL_COLOR='MEDIUM_AQUAMARINE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
          PO = POLYGON(X,Y,POSITION=[P1+20,PY,P1+40,PY+15],FILL_COLOR='BLUE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
          
          TO = TEXT(P2+45,PY+7.5,'Microplankton (VGPM2 | OPAL)',FONT_SIZE=12,/DEVICE,ALIGNMENT=0,VERTICAL_ALIGNMENT=0.5)
          PO = POLYGON(X,Y,POSITION=[P2,   PY,P2+20,PY+15],FILL_COLOR='YELLOW',/FILL_BACKGROUND,/CURRENT,/DEVICE)
          PO = POLYGON(X,Y,POSITION=[P2+20,PY,P2+40,PY+15],FILL_COLOR='ORANGE',/FILL_BACKGROUND,/CURRENT,/DEVICE)
          
          PFILE, PNGFILE
          W.SAVE, PNGFILE, RESOLUTION=300
          W.CLOSE
          
        ENDFOR
      
      ENDFOR
    ENDFOR
STOP
  ENDIF ; DO_FINAL_COMPOSITES
  
  
  ; *******************************************************
  IF DO_MAP_COMPOSITES GE 1 THEN BEGIN
    ; *******************************************************
    OVERWRITE = DO_MAP_COMPOSITES GE 2
    
    DIR_PLOTS = DIR_PROJECTS + 'PLOTS' + SL
    DIR_STATS = DIR_PROJECTS + 'DATA_BY_SUBAREA' + SL + 'STATS-SAVE' + SL
    
    SUBAREAS   = ['NAFO_1_2J3K','NAFO_2_2J3KL','NAFO_3_2J3KLNO','NAFO_4_3LNO','NAFO_5_3M','NAFO_6_NS']
    TITLES     = ['2J3K','2J3KL','2J3KLNO','3LNO','3M','NS']
    
    BUFFER = 0
    MAP_IN = 'NAFO'
    PDIR = !S.DATASETS + 'PP-SEAWIFS_PAN-AVHRR-MLAC\NAFO\'
    CDIR = !S.DATASETS + 'OC-SEAWIFS-MLAC\NAFO\'
    
    LAND = READ_LANDMASK(MAP=MAP_IN,PX=1024,PY=1024,/STRUCT)
    LL = MAPS_2LONLAT(MAP_IN,PX=1024,PY=1024)
    IMG = BYTARR(1024,1024) & IMG(*) = 251
    IMG(LAND.LAND)  = 251
    IMG(LAND.OCEAN) = 254
    
    CFILE   = FILE_SEARCH(FIX_PATH(CDIR + 'STATS\CHLOR_A-PAN\ANNUAL*NAFO*MEAN.SAVE'))
    MCFILE  = FILE_SEARCH(FIX_PATH(CDIR + 'STATS\MICRO-PAN\ANNUAL*NAFO*MEAN.SAVE'))
    NCFILE  = FILE_SEARCH(FIX_PATH(CDIR + 'STATS\NANOPICO-PAN\ANNUAL*NAFO*MEAN.SAVE'))
    MCPFILE = FILE_SEARCH(FIX_PATH(CDIR + 'STATS\MICRO_PERCENTAGE-PAN\ANNUAL*NAFO*MEAN.SAVE'))
    NCPFILE = FILE_SEARCH(FIX_PATH(CDIR + 'STATS\NANOPICO_PERCENTAGE-PAN\ANNUAL*NAFO*MEAN.SAVE'))
    
    VFILE   = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\PPD-VGPM2\ANNUAL*NAFO*MEAN.SAVE'))
    VMFILE  = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\MICROPP-MARMAP_PAN_VGPM2\ANNUAL*NAFO*MEAN.SAVE'))
    VNFILE  = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\NANOPICOPP-MARMAP_PAN_VGPM2\ANNUAL*NAFO*MEAN.SAVE'))
    VMPFILE = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2\ANNUAL*NAFO*MEAN.SAVE'))
    VNPFILE = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2\ANNUAL*NAFO*MEAN.SAVE'))
    
    OFILE   = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\PPD-OPAL\ANNUAL*NAFO*MEAN.SAVE'))
    OMFILE  = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\MICROPP-MARMAP_PAN_OPAL\ANNUAL*NAFO*MEAN.SAVE'))
    ONFILE  = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\NANOPICOPP-MARMAP_PAN_OPAL\ANNUAL*NAFO*MEAN.SAVE'))
    OMPFILE = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\MICROPP_PERCENTAGE-MARMAP_PAN_OPAL\ANNUAL*NAFO*MEAN.SAVE'))
    ONPFILE = FILE_SEARCH(FIX_PATH(PDIR + 'STATS\NANOPICOPP_PERCENTAGE-MARMAP_PAN_OPAL\ANNUAL*NAFO*MEAN.SAVE'))
    
    FILES = [CFILE,MCFILE,NCFILE,MCPFILE,NCPFILE,$
      VFILE,VMFILE,VNFILE,VMPFILE,VNPFILE,$
      OFILE,OMFILE,ONFILE,OMPFILE,ONPFILE]
      
    PNGFILE = FIX_PATH(DIR_PLOTS + 'CHL_PP_MAP_COMPOSITE.PNG')
    IF GET_MTIME(PNGFILE) GT MAX(GET_MTIME(FILES)) AND NOT KEYWORD_SET(OVERWRITE) THEN GOTO, SKIP_MAP_COMPOSITE
    
    ;   OUTLINE_FILES = !S.IMAGES + 'MASK_SUBAREA-NAFO-PXY_1024_1024-'+SUBAREAS+'-OUTLINE.PNG'
    OUTLINE_COLORS = 0
    OUTLINE_THICK = 2
    
    LANDMASK_FILE = !S.IMAGES + 'MASK_LAND-NAFO-PXY_1024_1024.PNG'
    LAND_COLOR = 251
    CSCALE = 'LOW'
    VSCALE = 'LOW'
    CPSCALE = '100'
    VPSCALE = '100'
    CGROUPS = ['MICRO','NANOPICO']
    CCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']
    PGROUPS = ['MICRO','NANOPICO']
    PCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']
    
    DATA = STRUCT_SD_READ(CFILE,  STRUCT=CHL)
    DATA = STRUCT_SD_READ(MCFILE, STRUCT=CMICRO)
    DATA = STRUCT_SD_READ(NCFILE, STRUCT=CNANO)
    DATA = STRUCT_SD_READ(MCPFILE,STRUCT=CMPER)
    DATA = STRUCT_SD_READ(NCPFILE,STRUCT=CNPER)
    DATA = STRUCT_SD_READ(VFILE,  STRUCT=VGPM)
    DATA = STRUCT_SD_READ(VMFILE, STRUCT=VMICRO)
    DATA = STRUCT_SD_READ(VNFILE, STRUCT=VNANO)
    DATA = STRUCT_SD_READ(VMPFILE,STRUCT=VMPER)
    DATA = STRUCT_SD_READ(VNPFILE,STRUCT=VNPER)
    DATA = STRUCT_SD_READ(OFILE,  STRUCT=OPAL)
    DATA = STRUCT_SD_READ(OMFILE, STRUCT=OMICRO)
    DATA = STRUCT_SD_READ(ONFILE, STRUCT=ONANO)
    DATA = STRUCT_SD_READ(OMPFILE,STRUCT=OMPER)
    DATA = STRUCT_SD_READ(ONPFILE,STRUCT=ONPER)
    GONE, DATA
    
    W = WINDOW(DIMENSIONS=[1100,960],BUFFER=BUFFER)
    
    CIM  = STRUCT_SD_2IMAGE_NG(CMICRO,IMG_POSITION=[15, 280,185,450],USE_PROD='CHLOR_A',SPECIAL_SCALE=CSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    CIM  = STRUCT_SD_2IMAGE_NG(CNANO, IMG_POSITION=[195,280,365,450],USE_PROD='CHLOR_A',SPECIAL_SCALE=CSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    CIM  = STRUCT_SD_2IMAGE_NG(CMPER, IMG_POSITION=[15, 55,185,225],USE_PROD='PERCENT',SPECIAL_SCALE=CPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    CIM  = STRUCT_SD_2IMAGE_NG(CNPER, IMG_POSITION=[195,55,365,225],USE_PROD='PERCENT',SPECIAL_SCALE=CPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',SPECIAL_SCALE=CSCALE, PX=77,PY=265,CHARSIZE=10,BACKGROUND=252,XDIM=225,YDIM=10,PAL='PAL_SW3',VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('CHLOR_A'),BUFFER=BUFFER)
    BAR = COLOR_BAR_SCALE_NG(PROD='PERCENT',SPECIAL_SCALE=CPSCALE,PX=77,PY=40, CHARSIZE=10,BACKGROUND=252,XDIM=225,YDIM=10,PAL='PAL_SW3',VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('PERCENT'),BUFFER=BUFFER)
    
    VIM  = STRUCT_SD_2IMAGE_NG(VMICRO,IMG_POSITION=[375,280,545,450],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    VIM  = STRUCT_SD_2IMAGE_NG(VNANO, IMG_POSITION=[555,280,725,450],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    VIM  = STRUCT_SD_2IMAGE_NG(VMPER, IMG_POSITION=[375,55, 545,225],USE_PROD='PERCENT',SPECIAL_SCALE=VPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    VIM  = STRUCT_SD_2IMAGE_NG(VNPER, IMG_POSITION=[555,55, 725,225],USE_PROD='PERCENT',SPECIAL_SCALE=VPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    BAR = COLOR_BAR_SCALE_NG(PROD='PPD',    SPECIAL_SCALE=VSCALE, PX=437,PY=265,CHARSIZE=10,BACKGROUND=252,XDIM=225,YDIM=10,PAL=PAL,VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE='VGPM2 ' + UNITS('PPD'),BUFFER=BUFFER)
    BAR = COLOR_BAR_SCALE_NG(PROD='PERCENT',SPECIAL_SCALE=VPSCALE,PX=437,PY=40, CHARSIZE=10,BACKGROUND=252,XDIM=225,YDIM=10,PAL=PAL,VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE='VGPM2 ' + UNITS('PERCENT'),BUFFER=BUFFER)
    
    OIM  = STRUCT_SD_2IMAGE_NG(OMICRO,IMG_POSITION=[735,280,905, 450],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    OIM  = STRUCT_SD_2IMAGE_NG(ONANO, IMG_POSITION=[915,280,1085,450],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    OIM  = STRUCT_SD_2IMAGE_NG(OMPER, IMG_POSITION=[735,55, 905, 225],USE_PROD='PERCENT',SPECIAL_SCALE=VPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    OIM  = STRUCT_SD_2IMAGE_NG(ONPER, IMG_POSITION=[915,55, 1085,225],USE_PROD='PERCENT',SPECIAL_SCALE=VPSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    BAR = COLOR_BAR_SCALE_NG(PROD='PPD',    SPECIAL_SCALE=VSCALE, PX=797,PY=265,CHARSIZE=10,BACKGROUND=252,XDIM=225,YDIM=10,PAL=PAL,VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE='OPAL ' + UNITS('PPD'),BUFFER=BUFFER)
    BAR = COLOR_BAR_SCALE_NG(PROD='PERCENT',SPECIAL_SCALE=VPSCALE,PX=797,PY=40, CHARSIZE=10,BACKGROUND=252,XDIM=225,YDIM=10,PAL=PAL,VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE='OPAL ' + UNITS('PERCENT'),BUFFER=BUFFER)
    
    TS   = TEXT([100,280,460,640,820,1000],[460,460,460,460,460,460],['Micro','Nano+Pico','Micro','Nano+Pico','Micro','Nano+Pico'],FONT_SIZE=12,ALIGNMENT=0.5,/DEVICE)
    
    BAR = COLOR_BAR_SCALE_NG(PROD='CHLOR_A',SPECIAL_SCALE=CSCALE, PX=77, PY=530,CHARSIZE=12,BACKGROUND=252,XDIM=225,YDIM=15,PAL=PAL,VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE=UNITS('CHLOR_A'),BUFFER=BUFFER)
    BAR = COLOR_BAR_SCALE_NG(PROD='PPD',    SPECIAL_SCALE=VSCALE, PX=437,PY=530,CHARSIZE=12,BACKGROUND=252,XDIM=225,YDIM=15,PAL=PAL,VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE='VGPM2 ' + UNITS('PPD'),BUFFER=BUFFER)
    BAR = COLOR_BAR_SCALE_NG(PROD='PPD',    SPECIAL_SCALE=VSCALE, PX=797,PY=530,CHARSIZE=12,BACKGROUND=252,XDIM=225,YDIM=15,PAL=PAL,VERTICAL=0,BOTTOM=1,FONT='HELVETICA',/CURRENT,TITLE='OPAL '  + UNITS('PPD'),BUFFER=BUFFER)
    
    CIM  = STRUCT_SD_2IMAGE_NG(CHL, IMG_POSITION=[15, 550,365, 900],USE_PROD='CHLOR_A',SPECIAL_SCALE=CSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    VIM  = STRUCT_SD_2IMAGE_NG(VGPM,IMG_POSITION=[375,550,725, 900],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    OIM  = STRUCT_SD_2IMAGE_NG(OPAL,IMG_POSITION=[735,550,1085,900],USE_PROD='PPD',    SPECIAL_SCALE=VSCALE,/ADD_OUTLINE,/ADD_LAND,/ADD_COAST,LAND_COLOR=LAND_COLOR,OUTLINE_FILE=OUTLINE_FILES,OUTLINE_COLOR=OUTLINE_COLORS,OUTLINE_THICK=OUTLINE_THICK,/CURRENT,MARGIN=MARGIN,/DEVICE,BUFFER=BUFFER)
    
 ;   T    = TEXT(550,940,' ',ALIGNMENT=0.5,/DEVICE,FONT_SIZE=14,FONT_STYLE='BOLD')
    TT   = TEXT([190,550,910],[910,910,910],['Chlorophyll','Primary Production - VGPM2','Primary Production - OPAL'],ALIGNMENT=0.5,/DEVICE,FONT_SIZE=14)
    
    W.SAVE, PNGFILE, RESOLUTION=300
    W.CLOSE
    
    SKIP_MAP_COMPOSITE:
    STOP
  ENDIF ; DO_MAP_COMPOSITES
  
  
; *******************************************************
  IF DO_BOUNDARIES GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_BOUNDARIES GE 2  
    
    MASK_FILE = !S.IMAGES + 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_FULL_NO_ESTUARIES.SAVE'    
    MASK = STRUCT_SD_READ(MASK_FILE,STRUCT=STRUCT)
    LAND = READ_LANDMASK(MAP='NEC',/STRUCT)
    DIR_OUT = DIR_PLOTS
    LL=MAPS_2LONLAT('NEC',PX=1024,PY=1024)
    CODES = [5,6,7,8]
    FOR NTH = 0L, N_ELEMENTS(CODES)-1 DO BEGIN    
      BLANK = MASK & BLANK(*,*) = 0
      OK_SUBAREA = WHERE(MASK EQ CODES[NTH],COUNT_SUBAREA)
      BLANK(OK_SUBAREA) = 255      
      OK_SUB =WHERE(STRUCT.SUBAREA_CODE EQ CODES[NTH]) 
      OUTLINE = IMAGE_OUTLINE(BLANK,STRUCT=STRUCT_OUTLINE)
      PAL_SW3,R,G,B
      BLANK(*) = 255
      SETS = WHERE_SETS(STRUCT_OUTLINE.INDEX)
      COLORS = [50,230,80,140,200,170]      
      FOR STH=0, N_ELEMENTS(SETS)-1 DO BEGIN
        BLANK(*,*) = 255
        BLANK(OK_SUBAREA) = 254 
        BLANK(LAND.LAND) = 252
        BLANK(LAND.COAST) = 0
        SUBS = WHERE_SETS_SUBS(SETS(STH))
        SET  = STRUCT_OUTLINE(SUBS)
        LL_STRUCT=REPLICATE(STRUCT_2MISSINGS(CREATE_STRUCT('SUBAREA','','CODE',0L,'INDEX',0L,'LON',0.0,'LAT',0.0,'XX',0L,'YY',0L)),N_ELEMENTS(SET))
        FOR S=0, N_ELEMENTS(SET)-1 DO LL_STRUCT(S).LAT = LL.LAT(SET(S).X,SET(S).Y)
        FOR S=0, N_ELEMENTS(SET)-1 DO LL_STRUCT(S).LON = LL.LON(SET(S).X,SET(S).Y)
        LL_STRUCT.SUBAREA = STRUCT.SUBAREA_NAME(OK_SUB[0])
        LL_STRUCT.CODE = STRUCT.SUBAREA_CODE(OK_SUB[0])
        LL_STRUCT.INDEX = STH+1
        LL_STRUCT.XX = SET.X
        LL_STRUCT.YY = SET.Y       
        IF STH EQ 0 THEN TXT = 'PRIMARY' ELSE TXT = 'EXCLUSION_' + NUM2STR(STH+1)
        CSVFILE = DIR_OUT + 'MASK_SUBAREA-NEC_ECOREGIONS-'+STRUCT.SUBAREA_NAME(OK_SUB) + '_' + NUM2STR(STRUCT.SUBAREA_CODE(OK_SUB)) + '-' + TXT + '.CSV'        
        STRUCT_2CSV,CSVFILE,STRUCT_COPY(LL_STRUCT,TAGNAMES=['LON','LAT'])
        IF NTH EQ 0 AND STH EQ 0 THEN OUTSTRUCT = LL_STRUCT ELSE OUTSTRUCT = STRUCT_CONCAT(OUTSTRUCT,LL_STRUCT)
        FOR S=0, N_ELEMENTS(SET)-1 DO BLANK(SET(S).X,SET(S).Y) = COLORS(STH) 
        WRITE_PNG,DIR_OUT + 'MASK_SUBAREA-NEC_ECOREGIONS-'+STRUCT.SUBAREA_NAME(OK_SUB) + '_' + NUM2STR(STRUCT.SUBAREA_CODE(OK_SUB)) + '-' + TXT + '.PNG',BLANK,R,G,B
      ENDFOR

    ;  WRITE_PNG,DIR_OUT + 'MASK_SUBAREA-NEC_ECOREGIONS-'+STRUCT.SUBAREA_NAME(OK_SUB) + '_' + NUM2STR(STRUCT.SUBAREA_CODE(OK_SUB)) + '.PNG',BLANK,R,G,B
    ENDFOR  
    STRUCT_2CSV,DIR_OUT+  'MASK_SUBAREA-NEC_ECOREGIONS-OUTLINES.CSV',OUTSTRUCT
  ENDIF ; DO_BOUNDARIES
  
  
; *******************************************************
  IF DO_DAILY_COMPARE GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_DAILY_COMPARE GE 2
    
    BUFFER = 0
    
    DATE_RANGE = DATE_2JD(['19970101','20151231'])
    SUBAREAS   = ['ESTUARY_SHELF_LME','ECOREGIONS_FULL_NO_ESTUARIES']
    DATASETS   = ['OC-SEAWIFS-MLAC','OC-MODIS-LAC']
    SUBPER     = 'A_ANNUAL_M_MANNUAL_MONTH'
    TS_SUB     = 'STATS'
    PERIODS    = 'M'
    CODES      = ['NE US Shelf (0-200m)','MID-ATLANTIC BIGHT','GEORGES BANK','GULF OF MAINE','SCOTIAN SHELF']
    DATES      = ['1997-2015']
    
    PY = [0,100]
    WIDTH = 6
    
    
    PY = [0,100]
    WIDTH = 6
    CFILES = []
    FOR D=0, N_ELEMENTS(DATASETS)-1 DO BEGIN
      FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO CFILES = [CFILES,FILE_SEARCH(!S.DATASETS+DATASETS(D)+SL+'NEC'+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-NEC-PXY_1024_1024-'+SUBAREAS(S)+'*-MIN_OC_PRODS.SAVE')]
    ENDFOR
    OK = WHERE(CFILES NE '') & CFILES=CFILES[OK]
    CDATA = STRUCT_2MISSINGS(CREATE_STRUCT('SENSOR',''))
    FOR S=0, N_ELEMENTS(CFILES)-1 DO CDATA = STRUCT_CONCAT(CDATA,IDL_RESTORE(CFILES(S)))
    TEMP = STRUCT_2MISSINGS(CREATE_STRUCT('N_CHLOR_A_OC',0L,'MIN_CHLOR_A_OC',0.0,'MAX_CHLOR_A_OC',0.0,'MED_CHLOR_A_OC',0.0,'MEAN_CHLOR_A_OC',0.0,$
      'GMEAN_CHLOR_A_OC',0.0,'AMEAN_CHLOR_A_OC',0.0,'SUM_CHLOR_A_OC',0.0,'VAR_CHLOR_A_OC',0.0,'STD_CHLOR_A_OC',0.0,'GSTD_CHLOR_A_OC',0.0,'ASTD_CHLOR_A_OC',0.0,'CV_CHLOR_A_OC',0.0))
    CDATA = STRUCT_CONCAT(CDATA,TEMP)
    TEMP_TAGS = TAG_NAMES(TEMP)
    TAGS = TAG_NAMES(CDATA)
    FOR T=0, N_ELEMENTS(TEMP_TAGS)-1 DO BEGIN
      TPOS = WHERE(TAGS EQ TEMP_TAGS(T))
      SPOS = WHERE(TAGS EQ REPLACE(TEMP_TAGS(T),'OC','OC4'))
      MPOS = WHERE(TAGS EQ REPLACE(TEMP_TAGS(T),'OC','OC3M'))
      OK = WHERE(CDATA.(SPOS) NE MISSINGS(CDATA.(SPOS)),COUNT)
      IF COUNT GE 1 THEN CDATA[OK].(TPOS) = CDATA[OK].(SPOS)
      OK = WHERE(CDATA.(MPOS) NE MISSINGS(CDATA.(MPOS)),COUNT)
      IF COUNT GE 1 THEN CDATA[OK].(TPOS) = CDATA[OK].(MPOS)
    ENDFOR
    OK = WHERE(STRPOS(CDATA.FIRST_NAME_CHLOR_A_OC4,'SEAWIFS') GE 0 OR STRPOS(CDATA.FIRST_NAME_CHLOR_A_PAN,'SEAWIFS'))
    CDATA[OK].SENSOR = 'SEAWIFS'
    OK = WHERE(STRPOS(CDATA.FIRST_NAME_CHLOR_A_OC3M,'MODIS') GE 0 OR STRPOS(CDATA.FIRST_NAME_CHLOR_A_PAN,'MODIS') GE 0)
    CDATA[OK].SENSOR = 'MODIS'
    OK = WHERE(CDATA.PERIOD NE MISSINGS(CDATA.PERIOD))
    CDATA = CDATA[OK]
    CDATA = CDATA[WHERE(PERIOD_2JD(CDATA.PERIOD) GE DATE_RANGE[0] AND PERIOD_2JD(CDATA.PERIOD) LE DATE_RANGE[1])]
    
    FOR N=0, N_ELEMENTS(CODES)-1 DO BEGIN
      PNGFILE = FIX_PATH(DIR_PLOTS+PERIODS+'_'+TS_SUB+'-NEC-TIMESERIES-'+CODES(N)+'.PNG')
      IF GET_MTIME(PNGFILE) GT MIN(GET_MTIME(CFILES)) AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
      W = WINDOW(DIMENSIONS=[1400,1000])
      D = TEXT(0.5,0.96,DATES[0]+'!C'+CODES(N),FONT_SIZE=14,ALIGNMENT=0.5)
      
      AXMON = DATE_AXIS([20200101,20201231],/MONTH,/MID,/FYEAR)
      AXA = DATE_AXIS([19970101,20150101],/YEAR,/YY)
      AXM = DATE_AXIS([19970101,20151231],/MONTH,STEP=4,MAX_LABELS=70)
      MYRANGE = LIST([0,2.5],[0,2.5],[0,0.8],[0,1.5])
      
      TOP    = [0.95, 0.725, 0.5,.275]
      LEFT   = 0.05
      RIGHT  = 0.95
      PLDIF  = 0.17
      SPACE  = 0.05
      
      PRODS = ['CHLOR_A_OC','CHLOR_A_PAN','MICRO_PAN','NANOPICO_PAN']
      YTITLE = UNITS(['CHLOR_A','CHLOR_A','MICRO','MICRO'])
      LABELS = ['NASA OC','PAN','MICRO','NANO-PICO'] & LPOS = [.92,.66,.42,.16]
      FOR P=0, N_ELEMENTS(PRODS)-1 DO BEGIN
        IF PRODS(P) EQ 'PAR' THEN POS = WHERE(TAGS EQ 'MEAN_'+PRODS(P)) ELSE POS = WHERE(TAGS EQ 'GMEAN_'+PRODS(P))
        MPOS = [LEFT, TOP(P)-PLDIF,RIGHT, TOP(P)]
        
        OKS = WHERE(CDATA.SENSOR EQ 'SEAWIFS' AND CDATA.PERIOD_CODE EQ PERIODS AND CDATA.SUBAREA_NAME EQ CODES(N))
        OKM = WHERE(CDATA.SENSOR EQ 'MODIS'   AND CDATA.PERIOD_CODE EQ PERIODS AND CDATA.SUBAREA_NAME EQ CODES(N))
        PANS = PLOT(PERIOD_2JD(CDATA(OKS).PERIOD),CDATA(OKS).(POS),XRANGE=AXM.JD,XTICKVALUES=AXM.TICKV,XTICKNAME=AXM.TICKNAME,XMINOR=3,YMINOR=2,XTICKLEN=0.04,YTICKLEN=0.01,YRANGE=MYRANGE(P),POSITION=MPOS,$
          YTITLE=YTITLE(P),THICK=4,COLOR='RED', BUFFER=BUFFER,/CURRENT)
        PANM = PLOT(PERIOD_2JD(CDATA(OKM).PERIOD),CDATA(OKM).(POS),XRANGE=AXM.JD,YRANGE=MYRANGE(P),YMINOR=2,YTICKLEN=0.01,THICK=2,  COLOR='BLUE',BUFFER=BUFFER,/CURRENT,/OVERPLOT)
        LPOS = PANS.POSITION
        LTXT = TEXT(0.87,LPOS(3)-0.03,LABELS(P),FONT_SIZE=12,COLOR='BLACK',FONT_STYLE='BOLD')
        IF P EQ 0 THEN STXT = TEXT(0.07,0.93,'SeaWiFS',FONT_SIZE=12,COLOR='RED',FONT_STYLE='BOLD')
        IF P EQ 0 THEN MTXT = TEXT(0.07,0.91,'MODIS',  FONT_SIZE=12,COLOR='BLUE',FONT_STYLE='BOLD')
        
      ENDFOR
      W.SAVE,PNGFILE,RESOLUTION=300
      W.CLOSE
    ENDFOR
    STOP
  ENDIF ; DO_DAILY_COMPARE
  

; *******************************************************
  IF DO_PAN_OC_COMPARE GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_PAN_OC_COMPARE GE 2
    
    BUFFER = 0
    
    MAP = 'NEC'
    DATE_RANGE = DATE_2JD(['19970901','20151231'])
    SUBAREAS   = ['ESTUARY_SHELF_LME','ECOREGIONS_FULL_NO_ESTUARIES']
    CODES      = [32,5,6,7,8]
    DATASETS   = ['OC-SEAWIFS-MLAC','PP-SEAWIFS_PAN-AVHRR-MLAC','PP-SEAWIFS-AVHRR-MLAC',$
                  'OC-MODIS-LAC',   'PP-MODIS_PAN-AVHRR-LAC',   'PP-MODIS-AVHRR-LAC']
    SUBPER     = ['A_ANNUAL_M_MANNUAL_MONTH']
    PERIODS    = ['M_','A_','MONTH_']
    OUTPER     = ['M','A']
    TS_SUB     = 'STATS'
    PERSTR     = [2,2,6]
    TITLES     = ['NE US Shelf (0-200m)','MID-ATLANTIC BIGHT','GEORGES BANK','GULF OF MAINE','SCOTIAN SHELF']
    PNGTITLES  = ['NES_LME','MAB','GB','GOM','SS']
    DATES      = ['1997-2015']
    
    PY = [0,100]
    WIDTH = 6
    CFILES = []
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO CFILES = [CFILES,FILE_SEARCH(!S.DATASETS+DATASETS[0]+SL+MAP+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-'+MAP+'-PXY_1024_1024-'+SUBAREAS(S)+'*-MIN_OC_PRODS.SAVE')]
    OK = WHERE(CFILES NE '') & CFILES=CFILES[OK]
    SDATA = IDL_RESTORE(CFILES[0])
    FOR S=1, N_ELEMENTS(CFILES)-1 DO SDATA = STRUCT_CONCAT(SDATA,IDL_RESTORE(CFILES(S)))
    SDATA = STRUCT_MERGE(REPLICATE(CREATE_STRUCT('SENSOR','SEAWIFS'),N_ELEMENTS(SDATA)),SDATA)
    TAGS  = TAG_NAMES(SDATA)
    OKS   = WHERE(STRPOS(TAGS,'OC4') GE 0)
    SDATA = STRUCT_RENAME(SDATA,TAGS(OKS),REPLACE(TAGS(OKS),'OC4','OC'))
    
    CFILES = []
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO CFILES = [CFILES,FILE_SEARCH(!S.DATASETS+DATASETS(3)+SL+MAP+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-'+MAP+'-PXY_1024_1024-'+SUBAREAS(S)+'*-MIN_OC_PRODS.SAVE')]
    OK = WHERE(CFILES NE '') & CFILES=CFILES[OK]
    MDATA = IDL_RESTORE(CFILES[0])
    FOR S=1, N_ELEMENTS(CFILES)-1 DO MDATA = STRUCT_CONCAT(MDATA,IDL_RESTORE(CFILES(S)))
    MDATA = STRUCT_MERGE(REPLICATE(CREATE_STRUCT('SENSOR','MODIS'),N_ELEMENTS(MDATA)),MDATA)
    TAGS  = TAG_NAMES(MDATA)
    OKS   = WHERE(STRPOS(TAGS,'OC3M') GE 0)
    MDATA = STRUCT_RENAME(MDATA,TAGS(OKS),REPLACE(TAGS(OKS),'OC3M','OC'))
    CDATA = STRUCT_CONCAT(SDATA, MDATA)
    
    OK = WHERE(CDATA.PERIOD NE MISSINGS(CDATA.PERIOD)) & CDATA = CDATA[OK]
    CDATA = CDATA[WHERE(PERIOD_2JD(CDATA.PERIOD) GE DATE_RANGE[0] AND PERIOD_2JD(CDATA.PERIOD) LE DATE_RANGE[1])]
    
    PFILES = []
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO PFILES = [PFILES,FILE_SEARCH(!S.DATASETS+DATASETS[1]+SL+MAP+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-'+MAP+'-PXY_1024_1024-'+SUBAREAS(S)+'*-FULL_PP_PRODS.SAVE')]
    OK = WHERE(PFILES NE '') & PFILES=PFILES[OK]
    SDATA = IDL_RESTORE(PFILES[0])
    FOR S=1, N_ELEMENTS(PFILES)-1 DO SDATA = STRUCT_CONCAT(SDATA,IDL_RESTORE(PFILES(S)))
    SDATA = STRUCT_MERGE(REPLICATE(CREATE_STRUCT('SENSOR','SEAWIFS'),N_ELEMENTS(SDATA)),SDATA)
        
    PFILES = []
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO PFILES = [PFILES,FILE_SEARCH(!S.DATASETS+DATASETS(4)+SL+MAP+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-'+MAP+'-PXY_1024_1024-'+SUBAREAS(S)+'*-FULL_PP_PRODS.SAVE')]
    OK = WHERE(PFILES NE '') & PFILES=PFILES[OK]
    MDATA = IDL_RESTORE(PFILES[0])
    FOR S=1, N_ELEMENTS(PFILES)-1 DO MDATA = STRUCT_CONCAT(MDATA,IDL_RESTORE(PFILES(S)))
    MDATA = STRUCT_MERGE(REPLICATE(CREATE_STRUCT('SENSOR','MODIS'),N_ELEMENTS(MDATA)),MDATA)    
    
    PDATA = STRUCT_CONCAT(SDATA, MDATA)    
    OK = WHERE(PDATA.PERIOD NE MISSINGS(PDATA.PERIOD)) & PDATA = PDATA[OK]
    PDATA = PDATA[WHERE(PERIOD_2JD(PDATA.PERIOD) GE DATE_RANGE[0] AND PERIOD_2JD(PDATA.PERIOD) LE DATE_RANGE[1])]
    
    OFILES = []
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO OFILES = [OFILES,FILE_SEARCH(!S.DATASETS+DATASETS(2)+SL+MAP+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-'+MAP+'-PXY_1024_1024-'+SUBAREAS(S)+'*-FULL_PP_PRODS.SAVE')]
    OK = WHERE(OFILES NE '') & OFILES=OFILES[OK]
    SDATA = IDL_RESTORE(OFILES[0])
    FOR S=1, N_ELEMENTS(OFILES)-1 DO SDATA = STRUCT_CONCAT(SDATA,IDL_RESTORE(OFILES(S)))
    SDATA = STRUCT_MERGE(REPLICATE(CREATE_STRUCT('SENSOR','SEAWIFS'),N_ELEMENTS(SDATA)),SDATA)
    
    OFILES = []
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO OFILES = [OFILES,FILE_SEARCH(!S.DATASETS+DATASETS(5)+SL+MAP+SL+'TS_SUBAREAS-'+TS_SUB+SL+SUBPER+'*MASK_SUBAREA-'+MAP+'-PXY_1024_1024-'+SUBAREAS(S)+'*-FULL_PP_PRODS.SAVE')]
    OK = WHERE(OFILES NE '') & OFILES=OFILES[OK]
    MDATA = IDL_RESTORE(OFILES[0])
    FOR S=1, N_ELEMENTS(OFILES)-1 DO MDATA = STRUCT_CONCAT(MDATA,IDL_RESTORE(OFILES(S)))    
    MDATA = STRUCT_MERGE(REPLICATE(CREATE_STRUCT('SENSOR','MODIS'),N_ELEMENTS(MDATA)),MDATA)
    
    ODATA = STRUCT_CONCAT(SDATA, MDATA)    
    OK = WHERE(ODATA.PERIOD NE MISSINGS(ODATA.PERIOD)) & ODATA = ODATA[OK]
    ODATA = ODATA[WHERE(PERIOD_2JD(ODATA.PERIOD) GE DATE_RANGE[0] AND PERIOD_2JD(ODATA.PERIOD) LE DATE_RANGE[1])]
        
    FOR N=0, N_ELEMENTS(CODES)-1 DO BEGIN
      PNGFILE = FIX_PATH(DIR_PLOTS + 'CHL_ALG_COMPARE-NEC-TIMESERIES-'+PNGTITLES(N)+'.PNG')
      UPDATE = UPDATE_CHECK(INFILES=[CFILES,PFILES,OFILES],OUTFILES=PNGFILE)
      IF UPDATE EQ 0 AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
      W = WINDOW(DIMENSIONS=[1400,1000])
      D = TEXT(0.5,0.96,DATES[0]+'!C'+TITLES(N),FONT_SIZE=14,ALIGNMENT=0.5)
      
      AXMON = DATE_AXIS([20200101,20201231],/MONTH,/MID,/FYEAR)
      AXA = DATE_AXIS([19970101,20150101],/YEAR,/YY)
      AXM = DATE_AXIS([19970101,20151231],/MONTH,STEP=4,MAX_LABELS=70)
      MYRANGE = LIST([0,2.0],[0,2.0],[0,1.2])
      AYRANGE = LIST([0,1.5],[0,1.2],[0,1.0])
      OYRANGE = LIST([0,1.5],[0,1.2],[0,1.0])
      
      TOP    = [0.95, 0.63, 0.31]
      LEFT   = 0.05
      LEFT2  = 0.55
      RIGHT  = 0.95
      RIGHT2 = 0.45
      PLDIF  = 0.12
      SPACE  = 0.05
      
      CTITLE = UNITS('CHL')
      PTITLE = 'VGPM2 ' + UNITS('PPD',/NO_NAME)
      OTITLE = 'OPAL '  + UNITS('PPD',/NO_NAME)
      
      MPOS = [LEFT, TOP[0]-PLDIF,        RIGHT, TOP[0]]
      APOS = [LEFT, TOP[0]-PLDIF*2-SPACE,RIGHT2,TOP[0]-PLDIF-SPACE]
      OPOS = [LEFT2,TOP[0]-PLDIF*2-SPACE,RIGHT, TOP[0]-PLDIF-SPACE]
      SYM_SIZE = 0.75
      
      OKS = WHERE(CDATA.PERIOD_CODE EQ 'M' AND CDATA.SUBAREA_CODE EQ CODES(N) AND CDATA.SENSOR EQ 'SEAWIFS')
      SPANM = PLOT(PERIOD_2JD(CDATA(OKS).PERIOD),CDATA(OKS).GMEAN_CHLOR_A_PAN,XRANGE=AXM.JD,XTICKVALUES=AXM.TICKV,XTICKNAME=AXM.TICKNAME,XMINOR=3,YMINOR=2,XTICKLEN=0.04,YTICKLEN=0.01,YRANGE=MYRANGE[0],POSITION=MPOS,$
        YTITLE=CTITLE,SYMBOL='CIRCLE',SYM_FILLED=0,SYM_SIZE=.9,THICK=1.5,COLOR='RED', BUFFER=BUFFER,/CURRENT)
      SOC4M = PLOT(PERIOD_2JD(CDATA(OKS).PERIOD),CDATA(OKS).GMEAN_CHLOR_A_OC, XRANGE=AXM.JD,YRANGE=MYRANGE[0],YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=0,SYM_SIZE=.9,THICK=1,  COLOR='BLUE',BUFFER=BUFFER,/CURRENT,/OVERPLOT)
      OKM = WHERE(CDATA.PERIOD_CODE EQ 'M' AND CDATA.SUBAREA_CODE EQ CODES(N) AND CDATA.SENSOR EQ 'MODIS')
      MOC3M = PLOT(PERIOD_2JD(CDATA(OKM).PERIOD),CDATA(OKM).GMEAN_CHLOR_A_PAN,XRANGE=AXM.JD,YRANGE=MYRANGE[0],YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=1,SYM_SIZE=SYM_SIZE,THICK=1, COLOR='GREEN',BUFFER=BUFFER,/CURRENT,/OVERPLOT)
      MPANM = PLOT(PERIOD_2JD(CDATA(OKM).PERIOD),CDATA(OKM).GMEAN_CHLOR_A_OC, XRANGE=AXM.JD,YRANGE=MYRANGE[0],YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=1,SYM_SIZE=SYM_SIZE,THICK=1, COLOR='ORANGE',BUFFER=BUFFER,/CURRENT,/OVERPLOT)
      
      
      OKS = WHERE(CDATA.PERIOD_CODE EQ 'A' AND CDATA.SUBAREA_CODE EQ CODES(N) AND CDATA.SENSOR EQ 'SEAWIFS')
      OKM = WHERE(CDATA.PERIOD_CODE EQ 'A' AND CDATA.SUBAREA_CODE EQ CODES(N) AND CDATA.SENSOR EQ 'MODIS')
      SBARS = BARPLOT(PERIOD_2JD(CDATA(OKS).PERIOD),CDATA(OKS).GMEAN_CHLOR_A_PAN,INDEX=0,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='RED',   YRANGE=AYRANGE[0],XMINOR=0,YTITLE=CTITLE,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      SBARS = BARPLOT(PERIOD_2JD(CDATA(OKM).PERIOD),CDATA(OKM).GMEAN_CHLOR_A_PAN,INDEX=1,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='GREEN', YRANGE=AYRANGE[0],XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      SBARM = BARPLOT(PERIOD_2JD(CDATA(OKS).PERIOD),CDATA(OKS).GMEAN_CHLOR_A_OC, INDEX=2,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='BLUE',  YRANGE=AYRANGE[0],XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      SBARM = BARPLOT(PERIOD_2JD(CDATA(OKM).PERIOD),CDATA(OKM).GMEAN_CHLOR_A_OC, INDEX=3,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='ORANGE',YRANGE=AYRANGE[0],XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)


      OKS = WHERE(CDATA.PERIOD_CODE EQ 'MONTH' AND CDATA.SUBAREA_CODE EQ CODES(N) AND CDATA.GMEAN_CHLOR_A_PAN NE MISSINGS(0.0) AND CDATA.SENSOR EQ 'SEAWIFS') & SDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(CDATA(OKS).PERIOD))),14,/DAY) & SRTS = SORT(SDATES)
      OKM = WHERE(CDATA.PERIOD_CODE EQ 'MONTH' AND CDATA.SUBAREA_CODE EQ CODES(N) AND CDATA.GMEAN_CHLOR_A_PAN NE MISSINGS(0.0) AND CDATA.SENSOR EQ 'MODIS')   & MDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(CDATA(OKM).PERIOD))),14,/DAY) & SRTM = SORT(MDATES)
      BARS = BARPLOT(SDATES(SRTS),CDATA(OKS(SRTS)).GMEAN_CHLOR_A_PAN,INDEX=0,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='RED',   YRANGE=OYRANGE[0],XMINOR=0,YTITLE=CTITLE,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      BARS = BARPLOT(MDATES(SRTM),CDATA(OKM(SRTM)).GMEAN_CHLOR_A_PAN,INDEX=1,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='GREEN', YRANGE=OYRANGE[0],XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      BARM = BARPLOT(SDATES(SRTS),CDATA(OKS(SRTS)).GMEAN_CHLOR_A_OC, INDEX=2,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='BLUE',  YRANGE=OYRANGE[0],XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      BARM = BARPLOT(MDATES(SRTM),CDATA(OKM(SRTM)).GMEAN_CHLOR_A_OC, INDEX=3,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='ORANGE',YRANGE=OYRANGE[0],XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      
      MPOS = [LEFT, TOP[1]-PLDIF,        RIGHT, TOP[1]]
      APOS = [LEFT, TOP[1]-PLDIF*2-SPACE,RIGHT2,TOP[1]-PLDIF-SPACE]
      OPOS = [LEFT2,TOP[1]-PLDIF*2-SPACE,RIGHT, TOP[1]-PLDIF-SPACE]
      
      SOKP = WHERE(PDATA.PERIOD_CODE EQ 'M' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.SENSOR EQ 'SEAWIFS')
      MOKP = WHERE(PDATA.PERIOD_CODE EQ 'M' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.SENSOR EQ 'MODIS')
      SOKO = WHERE(ODATA.PERIOD_CODE EQ 'M' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.SENSOR EQ 'SEAWIFS')
      MOKO = WHERE(ODATA.PERIOD_CODE EQ 'M' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.SENSOR EQ 'MODIS')
      SPANM = PLOT(PERIOD_2JD(PDATA(SOKP).PERIOD),PDATA(SOKP).GMEAN_PPD_VGPM2,XRANGE=AXM.JD,YRANGE=MYRANGE[1],YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=0,THICK=1.5,COLOR='RED',   BUFFER=BUFFER,/CURRENT,XTICKVALUES=AXM.TICKV,XTICKNAME=AXM.TICKNAME,XMINOR=3,XTICKLEN=0.04,POSITION=MPOS,YTITLE=PTITLE)             
      MOC4M = PLOT(PERIOD_2JD(PDATA(MOKP).PERIOD),PDATA(MOKP).GMEAN_PPD_VGPM2,XRANGE=AXM.JD,YRANGE=MYRANGE[1],YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=1,THICK=1,  COLOR='GREEN', BUFFER=BUFFER,/CURRENT,/OVERPLOT)
      SOC4M = PLOT(PERIOD_2JD(ODATA(SOKO).PERIOD),ODATA(SOKO).GMEAN_PPD_VGPM2,XRANGE=AXM.JD,YRANGE=MYRANGE[1],YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=0,THICK=1,  COLOR='BLUE',  BUFFER=BUFFER,/CURRENT,/OVERPLOT)      
      MOC4M = PLOT(PERIOD_2JD(ODATA(MOKO).PERIOD),ODATA(MOKO).GMEAN_PPD_VGPM2,XRANGE=AXM.JD,YRANGE=MYRANGE[1],YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=1,THICK=1,  COLOR='ORANGE',BUFFER=BUFFER,/CURRENT,/OVERPLOT)

      SOKP = WHERE(PDATA.PERIOD_CODE EQ 'A' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.SENSOR EQ 'SEAWIFS')
      MOKP = WHERE(PDATA.PERIOD_CODE EQ 'A' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.SENSOR EQ 'MODIS')
      SOKO = WHERE(ODATA.PERIOD_CODE EQ 'A' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.SENSOR EQ 'SEAWIFS')
      MOKO = WHERE(ODATA.PERIOD_CODE EQ 'A' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.SENSOR EQ 'MODIS')
      SBARP = BARPLOT(PERIOD_2JD(PDATA(SOKP).PERIOD),PDATA(SOKP).GMEAN_PPD_VGPM2,INDEX=0,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='RED',   YRANGE=AYRANGE[1],XMINOR=0,YTITLE=PTITLE,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      MBARP = BARPLOT(PERIOD_2JD(PDATA(MOKP).PERIOD),PDATA(MOKP).GMEAN_PPD_VGPM2,INDEX=1,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='GREEN', YRANGE=AYRANGE[1],XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
 			SBARO = BARPLOT(PERIOD_2JD(ODATA(SOKO).PERIOD),ODATA(SOKO).GMEAN_PPD_VGPM2,INDEX=2,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='BLUE',  YRANGE=AYRANGE[1],XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      MBARO = BARPLOT(PERIOD_2JD(ODATA(MOKO).PERIOD),ODATA(MOKO).GMEAN_PPD_VGPM2,INDEX=3,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='ORANGE',YRANGE=AYRANGE[1],XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      
      SOKP = WHERE(PDATA.PERIOD_CODE EQ 'MONTH' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.GMEAN_PPD_VGPM2 NE MISSINGS(0.0) AND PDATA.SENSOR EQ 'SEAWIFS') & SPDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(PDATA(SOKP).PERIOD))),14,/DAY) & SSRTP = SORT(SPDATES)
      MOKP = WHERE(PDATA.PERIOD_CODE EQ 'MONTH' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.GMEAN_PPD_VGPM2 NE MISSINGS(0.0) AND PDATA.SENSOR EQ 'MODIS')   & MPDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(PDATA(MOKP).PERIOD))),14,/DAY) & MSRTP = SORT(MPDATES)
      SOKO = WHERE(ODATA.PERIOD_CODE EQ 'MONTH' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.GMEAN_PPD_VGPM2 NE MISSINGS(0.0) AND ODATA.SENSOR EQ 'SEAWIFS') & SODATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(ODATA(SOKO).PERIOD))),14,/DAY) & SSRTO = SORT(SODATES)
      MOKO = WHERE(ODATA.PERIOD_CODE EQ 'MONTH' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.GMEAN_PPD_VGPM2 NE MISSINGS(0.0) AND ODATA.SENSOR EQ 'MODIS')   & MODATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(ODATA(MOKO).PERIOD))),14,/DAY) & MSRTO = SORT(MODATES)
      SBARP = BARPLOT(SPDATES(SSRTP),PDATA(SOKP(SSRTP)).GMEAN_PPD_VGPM2,INDEX=0,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='RED',   YRANGE=OYRANGE[1],XMINOR=0,YTITLE=PTITLE,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      MBARP = BARPLOT(MPDATES(MSRTP),PDATA(MOKO(MSRTP)).GMEAN_PPD_VGPM2,INDEX=1,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='GREEN', YRANGE=OYRANGE[1],XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      SBARO = BARPLOT(SODATES(SSRTO),ODATA(SOKP(SSRTO)).GMEAN_PPD_VGPM2,INDEX=2,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='BLUE',  YRANGE=OYRANGE[1],XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      MBARO = BARPLOT(MODATES(MSRTO),ODATA(MOKO(MSRTO)).GMEAN_PPD_VGPM2,INDEX=3,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='ORANGE',YRANGE=OYRANGE[1],XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
            
      MPOS = [LEFT, TOP(2)-PLDIF,        RIGHT, TOP(2)]
      APOS = [LEFT, TOP(2)-PLDIF*2-SPACE,RIGHT2,TOP(2)-PLDIF-SPACE]
      OPOS = [LEFT2,TOP(2)-PLDIF*2-SPACE,RIGHT, TOP(2)-PLDIF-SPACE]
      
      SOKP = WHERE(PDATA.PERIOD_CODE EQ 'M' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.SENSOR EQ 'SEAWIFS')
      MOKP = WHERE(PDATA.PERIOD_CODE EQ 'M' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.SENSOR EQ 'MODIS')
      SOKO = WHERE(ODATA.PERIOD_CODE EQ 'M' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.SENSOR EQ 'SEAWIFS')
      MOKO = WHERE(ODATA.PERIOD_CODE EQ 'M' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.SENSOR EQ 'MODIS')
      SPANM = PLOT(PERIOD_2JD(PDATA(SOKP).PERIOD),PDATA(SOKP).GMEAN_PPD_OPAL,XRANGE=AXM.JD,YRANGE=MYRANGE(2),YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=0,THICK=1.5,COLOR='RED',   BUFFER=BUFFER,/CURRENT,XTICKVALUES=AXM.TICKV,XTICKNAME=AXM.TICKNAME,XMINOR=3,XTICKLEN=0.04,POSITION=MPOS,YTITLE=OTITLE)
      MOC4M = PLOT(PERIOD_2JD(PDATA(MOKP).PERIOD),PDATA(MOKP).GMEAN_PPD_OPAL,XRANGE=AXM.JD,YRANGE=MYRANGE(2),YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=1,THICK=1,  COLOR='GREEN', BUFFER=BUFFER,/CURRENT,/OVERPLOT)
      SOC4M = PLOT(PERIOD_2JD(ODATA(SOKO).PERIOD),ODATA(SOKO).GMEAN_PPD_OPAL,XRANGE=AXM.JD,YRANGE=MYRANGE(2),YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=0,THICK=1,  COLOR='BLUE',  BUFFER=BUFFER,/CURRENT,/OVERPLOT)
      MOC4M = PLOT(PERIOD_2JD(ODATA(MOKO).PERIOD),ODATA(MOKO).GMEAN_PPD_OPAL,XRANGE=AXM.JD,YRANGE=MYRANGE(2),YMINOR=2,YTICKLEN=0.01,SYMBOL='CIRCLE',SYM_FILLED=1,THICK=1,  COLOR='ORANGE',BUFFER=BUFFER,/CURRENT,/OVERPLOT)
      
      SOKP = WHERE(PDATA.PERIOD_CODE EQ 'A' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.SENSOR EQ 'SEAWIFS')
      MOKP = WHERE(PDATA.PERIOD_CODE EQ 'A' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.SENSOR EQ 'MODIS')
      SOKO = WHERE(ODATA.PERIOD_CODE EQ 'A' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.SENSOR EQ 'SEAWIFS')
      MOKO = WHERE(ODATA.PERIOD_CODE EQ 'A' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.SENSOR EQ 'MODIS')
      SBARP = BARPLOT(PERIOD_2JD(PDATA(SOKP).PERIOD),PDATA(SOKP).GMEAN_PPD_OPAL,INDEX=0,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='RED',   YRANGE=AYRANGE(2),XMINOR=0,YTITLE=OTITLE,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      MBARP = BARPLOT(PERIOD_2JD(PDATA(MOKP).PERIOD),PDATA(MOKP).GMEAN_PPD_OPAL,INDEX=1,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='GREEN', YRANGE=AYRANGE(2),XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
 			SBARO = BARPLOT(PERIOD_2JD(ODATA(SOKO).PERIOD),ODATA(SOKO).GMEAN_PPD_OPAL,INDEX=2,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='BLUE',  YRANGE=AYRANGE(2),XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      MBARO = BARPLOT(PERIOD_2JD(ODATA(MOKO).PERIOD),ODATA(MOKO).GMEAN_PPD_OPAL,INDEX=3,NBARS=4,XRANGE=AXA.JD,FILL_COLOR='ORANGE',YRANGE=AYRANGE(2),XMINOR=0,POSITION=APOS,/CURRENT,XTICKVALUES=AXA.TICKV,XTICKNAME=AXA.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      
      SOKP = WHERE(PDATA.PERIOD_CODE EQ 'MONTH' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.GMEAN_PPD_OPAL NE MISSINGS(0.0) AND PDATA.SENSOR EQ 'SEAWIFS') & SPDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(PDATA(SOKP).PERIOD))),14,/DAY) & SSRTP = SORT(SPDATES)
      MOKP = WHERE(PDATA.PERIOD_CODE EQ 'MONTH' AND PDATA.SUBAREA_CODE EQ CODES(N) AND PDATA.GMEAN_PPD_OPAL NE MISSINGS(0.0) AND PDATA.SENSOR EQ 'MODIS')   & MPDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(PDATA(MOKP).PERIOD))),14,/DAY) & MSRTP = SORT(MPDATES)
      SOKO = WHERE(ODATA.PERIOD_CODE EQ 'MONTH' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.GMEAN_PPD_OPAL NE MISSINGS(0.0) AND ODATA.SENSOR EQ 'SEAWIFS') & SODATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(ODATA(SOKO).PERIOD))),14,/DAY) & SSRTO = SORT(SODATES)
      MOKO = WHERE(ODATA.PERIOD_CODE EQ 'MONTH' AND ODATA.SUBAREA_CODE EQ CODES(N) AND ODATA.GMEAN_PPD_OPAL NE MISSINGS(0.0) AND ODATA.SENSOR EQ 'MODIS')   & MODATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(ODATA(MOKO).PERIOD))),14,/DAY) & MSRTO = SORT(MODATES)
      SBARP = BARPLOT(SPDATES(SSRTP),PDATA(SOKP(SSRTP)).GMEAN_PPD_OPAL,INDEX=0,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='RED',   YRANGE=OYRANGE(2),XMINOR=0,YTITLE=OTITLE,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      MBARP = BARPLOT(MPDATES(MSRTP),PDATA(MOKP(MSRTP)).GMEAN_PPD_OPAL,INDEX=1,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='GREEN', YRANGE=OYRANGE(2),XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      SBARO = BARPLOT(SODATES(SSRTO),ODATA(SOKO(SSRTO)).GMEAN_PPD_OPAL,INDEX=2,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='BLUE',  YRANGE=OYRANGE(2),XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      MBARO = BARPLOT(MODATES(MSRTO),ODATA(MOKO(MSRTO)).GMEAN_PPD_OPAL,INDEX=3,NBARS=4,XRANGE=AXMON.JD,FILL_COLOR='ORANGE',YRANGE=OYRANGE(2),XMINOR=0,POSITION=OPOS,/CURRENT,XTICKVALUES=AXMON.TICKV,XTICKNAME=AXMON.TICKNAME,XTICKLEN=0.04,YTICKLEN=0.02,YMINOR=3)
      
      STXT = TEXT(0.07,TOP[0]-0.02,'SeaWiFS PAN',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='RED')  & STXT = TEXT(0.17,TOP[0]-0.02,'MODIS PAN', FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='GREEN')
      MTXT = TEXT(0.07,TOP[0]-0.04,'SeaWiFS OC4',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='BLUE') & MTXT = TEXT(0.17,TOP[0]-0.04,'MODIS OC3M',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='ORANGE')
            
      STXT = TEXT(0.07,TOP[1]-0.02,'SeaWiFS PAN',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='RED')  & STXT = TEXT(0.17,TOP[1]-0.02,'MODIS PAN', FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='GREEN')
      MTXT = TEXT(0.07,TOP[1]-0.04,'SeaWiFS OC4',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='BLUE') & MTXT = TEXT(0.17,TOP[1]-0.04,'MODIS OC3M',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='ORANGE')
      
      STXT = TEXT(0.07,TOP(2)-0.02,'SeaWiFS PAN',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='RED')  & STXT = TEXT(0.17,TOP(2)-0.02,'MODIS PAN', FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='GREEN')
      MTXT = TEXT(0.07,TOP(2)-0.04,'SeaWiFS OC4',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='BLUE') & MTXT = TEXT(0.17,TOP(2)-0.04,'MODIS OC3M',FONT_SIZE=12,FONT_STYLE='BOLD',COLOR='ORANGE')  
 stop     
      W.SAVE,PNGFILE,RESOLUTION=300
      W.CLOSE
    ENDFOR
    STOP
  ENDIF ; DO_PAN_OC_COMPARE
  
; *******************************************************   
  IF KEY(DO_TRANSFER_EFFICIENCIES) THEN BEGIN
; *******************************************************   
    OVERWRITE = DO_TRANSFER_EFFICIENCIES GE 2
    
    FILE = DIR_DATA + 'NES_TRANSFER_EFFICIENCIES.csv'
    TE = CSV_READ(FILE)
    TLS = ['TL1','TL2','TL3','TL4']
    LABELS = 'Trophic Level ' + ['I','II','III','IV','V']
    XDIM = 700 & YDIM = 250
    W = WINDOW(DIMENSIONS=[XDIM,YDIM*N_ELEMENTS(TLS)],BUFFER=BUFFER)
    FOR N=0, N_ELEMENTS(TLS)-1 DO BEGIN
      XDATA = FLOAT(TE.(WHERE(TAG_NAMES(TE) EQ TLS(N))))
      HDATA = HISTOGRAM(XDATA,NBINS=21,MIN=0,MAX=0.5,LOCATION=BINS)
      XRANGE = [0,0.5] & YRANGE = [0,20]
      
      IF N GE 1 THEN XTICKNAME = REPLICATE('',N_ELEMENTS(XTICKNAME)) ELSE XTICKNAME = ['0.0','0.05','0.1','0.15','0.2','0.25','0.3','0.35','0.4','0.45','0.5']
      IF N EQ 0 THEN XTITLE = 'Transfer Efficiency' ELSE XTITLE = ''
      
      POSITION = [100,75+(N*220),XDIM-50,275+(N*220)]
      PL = BARPLOT(BINS,HDATA,FILL_COLOR=[30,92,144],YRANGE=YRANGE,XRANGE=XRANGE,POSITION=POSITION,/DEVICE,/CURRENT,BUFFER=BUFFER,HISTOGRAM=1,WIDTH=0.9,FONT_SIZE=18,$
        LINESTYLE=0,COLOR=[0,137,152],THICK=3,XTICKVALUE=XTICKVALUE,XTICKNAME=XTICKNAME,XMAJOR=11,XMINOR=1,YMINOR=4,XTICKDIR=1,AXIS_STYLE=1,XTITLE=XTITLE,YTITLE=YTITLE,XTICKFONT_STYLE='BOLD',YTICKFONT_STYLE='BOLD',FONT_STYLE='BOLD')
      XTICKNAME = PL.XTICKNAME
      A1 = AXIS('Y',TARGET=PL,LOCATION='RIGHT',MAJOR=0,MINOR=0)
      A2 = AXIS('X',TARGET=PL,LOCATION='TOP',  MAJOR=0,MINOR=0)
      T = TEXT(POSITION(2)-15,POSITION(3)-30,LABELS(N),ALIGNMENT=1,/DEVICE,FONT_STYLE='BOLD',FONT_SIZE=16)
      
    ENDFOR
    T = TEXT(POSITION[0]-60,YDIM*N_ELEMENTS(TLS)/2,'Frequency',ALIGNMENT=0.5,ORIENTATION=90,FONT_SIZE=22,FONT_STYLE='BOLD',/DEVICE)
    W.SAVE, DIR_PLOTS + 'NES_TRANSFER_EFFICIENCIES.PNG'
    W.CLOSE
  STOP
  ENDIF  ; DO_TRANSFER_EFFICIENCIES
  
; *******************************************************
  IF KEY(DO_LANDINGS) THEN BEGIN
; *******************************************************
    OVERWRITE = DO_LANDINGS GE 2

    
    YMAX = [1500,2000]
    
    EPUS = ['NES','GB','GOM','MAB','SS']
    TITLES = ['NE Shelf Landings','Georges Bank', 'Gulf of Maine', 'Mid-Atlantic Bight', 'Scotian Shelf']
    YRANGES = LIST([0,1500],[0,1000],[0,200],[0,800],[0,400])
    
    FOR ETH=0, N_ELEMENTS(EPUS)-1 DO BEGIN
      IF EPUS(ETH) EQ 'NES' THEN TITLE = TITLES(ETH) + ' ' + ['(Live Weight)', '(Meat Weight)'] ELSE TITLE = TITLES(ETH)
      IF EPUS(ETH) EQ 'NES' THEN WT = ['LIVEWT','MEATWT'] ELSE WT = 'LIVEWT'
      IF EPUS(ETH) EQ 'NES' THEN YEAR = '2014' ELSE YEAR = '2012'

     
      FOR WTH=0, N_ELEMENTS(WT)-1 DO BEGIN
        IF EPUS(ETH) EQ 'NES' THEN FILE = DIR_DATA + 'NES_LANDINGS_'+WT(WTH)+'_'+YEAR+'.csv' $
                              ELSE FILE = DIR_DATA + 'NES_ECOREGIONS_LANDINGS_BY_FUNCTIONAL_GROUP.csv'
        PNGFILE = DIR_PLOTS + EPUS(ETH) + '_LANDINGS_'+WT(WTH)+'_'+YEAR+'.PNG'
        IF FILE_MAKE(FILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
        
        LD = CSV_READ(FILE)
        LD = LD[WHERE(LD.YEAR GE '1964' AND LD.YEAR LE YEAR)]
        XDATES = YEAR_RANGE('1964',YEAR)
        
        W = WINDOW(DIMENSIONS=[1200,800],BUFFER=BUFFER)
        
        DCOLORS = LIST([0,170,188],[49,133,156],[0,43,79],[30,92,144],[0,70,127],[0,235,255],[0,120,217])
        YELLOW  = [255,255,145]
        
        XTITLE  = 'Year'
        YTITLE  = 'Landings (10!E3!N mt)'
        MARGIN  = [0.12,0.08,0.04,0.08]
        FONT_SIZE = 22
        LABEL_FONT_SIZE = 13
        XRANGE = ['1964',YEAR]
        YRANGE = YRANGES(ETH)
  
        BOTTOM = 0
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))
        IF EPUS(ETH) NE 'NES' THEN DGROUPS = EPUS(ETH) + '_' + ['CRUSTACEANS','MOLLUSCS','FLATS','PRINCIPAL','PELAGICS','ELASMOBRANCHS','OTHER'] $
                              ELSE DGROUPS =                   ['CRUSTACEANS','MOLLUSCS','FLATFISH','PRINCIPAL_GROUNDFISH','PELAGICS','ELASMOBRANCHS','OTHER']
        LGD =                                                  ['Crustaceans','Molluscs','Flatfish','Principal Groundfish','Pelagics','Elasmobranchs','Other']
        FOR NTH = 0L, N_ELEMENTS(DGROUPS)-1 DO BEGIN
          COLOR = DCOLORS[NTH]
          GROUP = DGROUPS[NTH]
          PER = FLOAT(LD.(WHERE(TAG_NAMES(LD) EQ GROUP,/NULL)))/1000
          PER(WHERE(PER EQ MISSINGS(PER),/NULL)) = 0.0
          IF NTH EQ 0 THEN BEGIN
            BOT = REPLICATE(0, N_ELEMENTS(XDATES))
            P = PLOT(XDATES,BOT,TITLE=TITLE(WTH),XTITLE=XTITLE,YTITLE=YTITLE,XMINOR=1,XMAJOR=11,YMAJOR=6,YRANGE=YRANGE,/NODATA,BUFFER=BUFFER,XSTYLE=1,/CURRENT,MARGIN=MARGIN,XTICKLEN=0.01,YTICKLEN=0.01,XTICKFONT_STYLE='BOLD',YTICKFONT_STYLE='BOLD',FONT_STYLE='BOLD',FONT_SIZE=FONT_SIZE)
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=COLOR,COLOR=YELLOW,/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=0)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=COLOR,COLOR=YELLOW,/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=0)
          BOTTOM = PER1
        ENDFOR
  
        XPOS = 0.81
        YPOS = 0.90
        FOR SY=0, N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS,YPOS-SY*0.03,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=DCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=LABEL_FONT_SIZE,LABEL_POSITION='R',/NORMAL)
  
        
        W.SAVE, PNGFILE
        W.CLOSE
      ENDFOR
    ENDFOR  
      STOP
  ENDIF  ; DO_TRANSFER_EFFICIENCIES
  
  
; *******************************************************
  IF DO_PP_COMPOSITE GE 1 THEN BEGIN
; *******************************************************  
    OVERWRITE = DO_PP_COMPOSITE GE 2
    PRODS = ['PPD-VGPM2','MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2','NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2']
    DIRS = FIX_PATH(!S.DATASETS + 'PP-SEAWIFS-AVHRR-MLAC\NEC\STATS\' + PRODS + SL)
    FILES = []
    FOR D=0, N_ELEMENTS(DIRS)-1 DO BEGIN
      FILES = [FILES,FILE_SEARCH(DIRS(D) + 'ANNUAL_*' + PRODS(D) + '*MEAN.SAVE')]
    ENDFOR
    DATA = STRUCT_SD_READ(FILES[0],STRUCT=STRUCT)
    STRUCT.IMAGE = STRUCT.IMAGE*365
    W = WINDOW(DIMENSIONS=[1536,512],BUFFER=1)
    IM1 = STRUCT_SD_2IMAGE_NG(STRUCT,/ADD_LAND,/ADD_COAST,USE_PROD='PPY',SPECIAL_SCALE='LOW_MID',$
      /ADD_OUTLINE,OUTLINE_FILE=!S.IMAGES+'MASK_OUTLINE-NEC-PXY_1024_1024-LME.PNG',OUTLINE_COLOR=0,OUTLINE_THICK=3,BATHS=300,BATHY_COLOR=0,BATHY_THICK=2,BUFFER=1,LAYOUT=[3,1,1],/CURRENT)
    DATA = STRUCT_SD_READ(FILES[1],STRUCT=STRUCT)
    IM2 = STRUCT_SD_2IMAGE_NG(STRUCT,/ADD_LAND,/ADD_COAST,USE_PROD='PERCENT',SPECIAL_SCALE='50',$
      /ADD_OUTLINE,OUTLINE_FILE=!S.IMAGES+'MASK_OUTLINE-NEC-PXY_1024_1024-LME.PNG',OUTLINE_COLOR=0,OUTLINE_THICK=3,BATHS=300,BATHY_COLOR=0,BATHY_THICK=2,BUFFER=1,LAYOUT=[3,1,2],/CURRENT)
    DATA = STRUCT_SD_READ(FILES(2),STRUCT=STRUCT)
    IM3 = STRUCT_SD_2IMAGE_NG(STRUCT,/ADD_LAND,/ADD_COAST,USE_PROD='PERCENT',SPECIAL_SCALE='50_100',$
      /ADD_OUTLINE,OUTLINE_FILE=!S.IMAGES+'MASK_OUTLINE-NEC-PXY_1024_1024-LME.PNG',OUTLINE_COLOR=0,OUTLINE_THICK=3,BATHS=300,BATHY_COLOR=0,BATHY_THICK=2,BUFFER=1,LAYOUT=[3,1,3],/CURRENT)
      
    BAR = COLOR_BAR_SCALE_NG(PROD='PPY',    SPECIAL_SCALE='LOW_MID', PX=20,  PY=448,CHARSIZE=11,/DEVICE,BACKGROUND=BACKGROUND,XDIM=256,YDIM=20,PAL='PAL_SW3',TITLE='Total ' + UNITS('PPY'))
    BAR = COLOR_BAR_SCALE_NG(PROD='PERCENT',SPECIAL_SCALE='50',      PX=532, PY=448,CHARSIZE=11,/DEVICE,BACKGROUND=BACKGROUND,XDIM=256,YDIM=20,PAL='PAL_SW3',TITLE='Percent Microplankton Production (%)')
    BAR = COLOR_BAR_SCALE_NG(PROD='PERCENT',SPECIAL_SCALE='50_100',  PX=1044, PY=448,CHARSIZE=11,/DEVICE,BACKGROUND=BACKGROUND,XDIM=256,YDIM=20,PAL='PAL_SW3',TITLE='Percent Nano+Picoplankton Production (%)')
    
    W.SAVE, FIX_PATH(!S.PROJECTS + 'ECOAP\FISHERIES\DOC\NEC_PP_COMPOSITEP_v2.PNG'),RESOLUTION=600
    W.CLOSE
    STOP
  ENDIF


  ; *******************************************************
  IF DO_MARMAP_PLOT GE 1 THEN BEGIN
    ; *******************************************************
    OVERWRITE = DO_MARMAP_PLOT GE 2
    SL = DELIMITER(/PATH)
    MAR = READALL(DIR_DATA + 'MARMAP-ECOREGIONS-CHL-PPD-SURFACE-SIZE_FRACTION-STATS.csv')
    DATE = JD_2DATE(PERIOD_2JD(MAR.PERIOD))
    CPER = FLOAT(MAR.CHL_PER_NET_MEAN)*100
    PPER = FLOAT(MAR.PP_PER_NET_MEAN)*100
    YTITLE = 'Percent Microplankton Chlorophyll (%)'
    XTITLE = 'Percent Microplankton Production (%)'
    PARAMS = [2,3,4,8]

    ;    P = PLOT(CPER,PPER,COLOR=[0,137,152],FONT_SIZE=14,SYMBOL='CIRCLE',/SYM_FILLED,XCOLOR=[0,69,126],YCOLOR=[0,69,126],XTITLE=XTITLE,YTITLE=YTITLE,XRANGE=[0,100],YRANGE=[0,100],YSTYLE=1,LINESTYLE=6)
    ;    P = PLOT([0,80],[0,80*0.822],THICK=4,COLOR=[0,69,126],/OVERPLOT)
    ;    P.SAVE,DIR_PLOTS + 'MARMAP_CHL-PPD-SIZE_FRACTION.PNG',RESOLUTION=600
    ;    P.CLOSE
    ;    W=WINDOW(DIMENSIONS=[800,640],BACKGROUND_COLOR=[30,92,144])
    ;    P = PLOT(CPER,PPER,COLOR='WHITE',FONT_SIZE=18,SYMBOL='CIRCLE',/SYM_FILLED,BACKGROUND_COLOR=[30,92,144],XCOLOR='WHITE',YCOLOR='WHITE',XTITLE=XTITLE,YTITLE=YTITLE,XRANGE=[0,100],YRANGE=[0,100],YSTYLE=1,LINESTYLE=6,/CURRENT)
    ;    P = PLOT([0,80],[0,80*0.822],THICK=4,COLOR=[0,137,152],/OVERPLOT)
    ;    P.SAVE,DIR_PLOTS + 'MARMAP_CHL-PPD-SIZE_FRACTION-WHITE2.PNG',RESOLUTION=600
    ;    P.CLOSE
    W=WINDOW(DIMENSIONS=[800,640],BACKGROUND_COLOR='WHITE')
    P = PLOT(CPER,PPER,COLOR=[30,92,144],FONT_SIZE=18,FONT_STYLE='BOLD',SYMBOL='CIRCLE',/SYM_FILLED,XCOLOR=[30,92,144],YCOLOR=[30,92,144],XTITLE=XTITLE,YTITLE=YTITLE,XRANGE=[0,100],YRANGE=[0,100],YSTYLE=1,LINESTYLE=6,/CURRENT)
    P = PLOT([0,80],[0,80*0.822],THICK=5,COLOR=[0,137,152],/OVERPLOT)
    P.SAVE,DIR_PLOTS + 'MARMAP_CHL-PPD-SIZE_FRACTION-WHITE2.PNG',RESOLUTION=600
    P.CLOSE

    STOP

  ENDIF ; DO_MARMAP_PLOT




; *******************************************************
  IF DO_MAKE_BROWSES GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_MAKE_BROWSES GE 2
    MAP = 'NEC'
    PERIODS  = ['ANNUAL','MONTH','A']    
    PRODS    = LIST(['CHLOR_A-PAN','CHLOR_A-OC4','PAR','MICRO-PAN','MICRO_PERCENTAGE-PAN','NANO-PAN','NANO_PERCENTAGE-PAN','NANOPICO-PAN','NANOPICO_PERCENTAGE-PAN','PICO-PAN','PICO_PERCENTAGE-PAN'],$
                    ['CHLOR_A-PAN','CHLOR_A-OC3M','PAR','MICRO-PAN','MICRO_PERCENTAGE-PAN','NANO-PAN','NANO_PERCENTAGE-PAN','NANOPICO-PAN','NANOPICO_PERCENTAGE-PAN','PICO-PAN','PICO_PERCENTAGE-PAN'],$
                    ['PPD-VGPM2'],$
                    ['PPD-VGPM2'])
    TYPES    = LIST(['ANOMS','STATS'],['STATS'],['STATS'],['STATS'])                
    DATASETS = ['OC-SEAWIFS-MLAC','OC-MODIS-LAC','PP-SEAWIFS-AVHRR-MLAC','PP-SEAWIFS_PAN-AVHRR-MLAC']
    DO_DATASETS = [0,0,1,0]
    FOR D=0, N_ELEMENTS(DATASETS)-1 DO BEGIN
      IF DO_DATASETS(D) EQ 0 THEN CONTINUE
      LPRODS = PRODS(D)   
      ATYPES = TYPES(D)
      FOR T=0, N_ELEMENTS(ATYPES)-1 DO BEGIN   
        FOR P=0, N_ELEMENTS(LPRODS)-1 DO BEGIN
          FILES = []
          FILES = [FILES,FILE_SEARCH(FIX_PATH(!S.DATASETS + DATASETS(D) + SL + MAP + SL + ATYPES(T) + SL + LPRODS(P) + SL + [PERIODS] + '_*' + LPRODS(P) + '-MEAN.SAVE'))]
          IF FILES[0] EQ '' THEN CONTINUE
          FP = FILE_PARSE(FILES)       
          DIR_OUT = REPLACE(FP[0].DIR,ATYPES(T),ATYPES(T)+'_BROWSE')
          DIR_TEST,DIR_OUT
          FOR F=0, N_ELEMENTS(FILES)-1 DO BEGIN             
            PNGFILE = DIR_OUT + REPLACE(FP(F).NAME_EXT,FP(F).EXT,'PNG')
            IF FILE_TEST(PNGFILE) EQ 1 AND GET_MTIME(PNGFILE) GT GET_MTIME(FILES(F)) THEN CONTINUE          
            DATA = STRUCT_SD_READ(FILES(F),STRUCT=STRUCT)
            STRUCT.IMAGE = STRUCT.IMAGE*365
            IM = STRUCT_SD_2IMAGE_NG(STRUCT,/ADD_LAND,/ADD_COAST,/ADD_COLORBAR,/ADD_BATHY,USE_PROD='PPY',COLORBAR_TITLE='Total ' + UNITS('PPY'),SPECIAL_SCALE='LOW_MID',$
              /ADD_OUTLINE,OUTLINE_FILE=!S.IMAGES+'MASK_OUTLINE-NEC-PXY_1024_1024-LME.PNG',OUTLINE_COLOR=253,OUTLINE_THICK=3,BATHS=300,BATHY_COLOR=0,BATHY_THICK=2,BUFFER=0)
            PRINT, 'Writing ' + PNGFILE
            IM.SAVE, PNGFILE
            IM.CLOSE
          ENDFOR
        ENDFOR    
      ENDFOR
    ENDFOR  
    
    stop
   
  ENDIF ; DO_MAKE_BROWSES
  
; *******************************************************
  IF DO_GIOVANNI_FILES GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_GIOVANNI_FILES GE 2
    
    DASH = DELIMITER(/DASH)
    SL   = DELIMITER(/PATH)
    
    
    SATS = ['A','S']
    DIR_OUT = FIX_PATH(!S.PROJECTS + 'ECOAP/TEST_DATA/TS_SUBAREAS/') & DIR_TEST, DIR_OUT
    FOR NTH=0, N_ELEMENTS(SATS)-1 DO BEGIN
    
      FILES = FILE_SEARCH(FIX_PATH(!S.PROJECTS + 'ECOAP/TEST_DATA/'+SATS[NTH]+'*YR*.hdf'))
      FP = PARSE_IT(FILES[0])
      IF STRMID(FP.FIRST_NAME,0,1) EQ 'A' THEN SENSOR = 'MODIS' ELSE SENSOR = 'SEAWIFS'
      ALG_TEST  = VALID_ALG_CHECK(IN_PROD='CHLOR_A',OUT_PROD=OUTPRODS,SENSOR=SENSOR,ALG=ALG)       
      FILE_LABEL = SENSOR+DASH+'CHLOR_A'+DASH+ALG
      SAVEFILE=DIR_OUT+'A'+dash+'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_TEST'+dash+FILE_LABEL+'.SAVE' 
      IF GET_MTIME(SAVEFILE) GT MIN(GET_MTIME(FILES)) AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
            
      TEMPLATE=STRUCT_2MISSINGS(CREATE_STRUCT('PERIOD','','PERIOD_CODE','','FIRST_NAME','','MASK','','SUBAREA_CODE',0,'SUBAREA_NAME','','N_SUBAREA',0L,$
        'N',0L,'MIN',0.0,'MAX',0.0,'MED',0.0,'MEAN',0.0,'GMEAN',0.0,'AMEAN',0.0,'SUM',0.0,'VAR',0.0,'STD',0.0,'GSTD',0.0,'ASTD',0.0,'CV',0.0))
      STRUCT = REPLICATE(TEMPLATE, N_ELEMENTS(FILES))
          
      FOR N=0, N_ELEMENTS(FILES)-1 DO BEGIN
        FP = PARSE_IT(FILES(N))
        S = READ_HDF_2STRUCT(FILES(N))
        IMG = S.SD.L3M_DATA.IMAGE 
        OK = WHERE(IMG EQ S.SD.(0).FILL[0])
        IMG[OK] = MISSINGS(0.0)
        IMG = ROTATE(IMG,7)
        IF N EQ 0 THEN BEGIN 
          SZ=SIZE(IMG,/STRUCT)      
;          LAT=(FINDGEN(SZ.DIMENSIONS[1])*S.SD.G3FAKEDIM0.STRIDE[0])-90 ; latitude
;          LON=(FINDGEN(SZ.DIMENSIONS[0])*S.SD.G3FAKEDIM1.STRIDE[0])-180 ; longitude
          
          LAT = ((FINDGEN(S.GLOBAL.NUMBER_OF_LINES[0]))  *S.GLOBAL.LATITUDE_STEP[0]) +S.GLOBAL.SOUTHERNMOST_LATITUDE[0]
          LON = ((FINDGEN(S.GLOBAL.NUMBER_OF_COLUMNS[0]))*S.GLOBAL.LONGITUDE_STEP[0])+S.GLOBAL.WESTERNMOST_LONGITUDE[0]
          
          LATS = FLTARR(SZ.DIMENSIONS[0],SZ.DIMENSIONS[1]) & LATS(*) = MISSINGS(0.0) & FOR L=0, N_ELEMENTS(LON)-1 DO LATS(L,*) = LAT
          LONS = FLTARR(SZ.DIMENSIONS[0],SZ.DIMENSIONS[1]) & LONS(*) = MISSINGS(0.0) & FOR L=0, N_ELEMENTS(LAT)-1 DO LONS(*,L) = TRANSPOSE(LON)
          OK_MAP = WHERE(LATS GE 42 AND LATS LE 43 AND LONS GE -70 AND LONS LE -69,COUNT_MAP)
        ENDIF  
              
        STRUCT(N).PERIOD            = 'A_' + STRMID(SATDATE_2DATE(FP.FIRST_NAME),0,4)
        STRUCT(N).PERIOD_CODE       = 'A'
        STRUCT(N).FIRST_NAME        = FP.FIRST_NAME        
        STRUCT(N).MASK              = 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_TEST'
        STRUCT(N).SUBAREA_CODE      = 5
        STRUCT(N).SUBAREA_NAME      = 'TEST'
        STRUCT(N).N_SUBAREA         = COUNT_MAP        
        STRUCT(N).N                 = 0
        
        _DATA = IMG(OK_MAP)  ;       ===> Apply subscripts for this subarea
        OK_GOOD = WHERE(_DATA NE MISSINGS(_DATA),COUNT_GOOD)   ;       ===> Get non-missing data
        IF COUNT_GOOD GE 1 THEN BEGIN ;        ===> Fill in the stats portion of the structure
          _STATS = STATS(_DATA(OK_GOOD),TRANSFORM='ALOG',/QUIET)
          STRUCT(N).N     = _STATS.N
          STRUCT(N).MIN   = _STATS.MIN
          STRUCT(N).MAX   = _STATS.MAX
          STRUCT(N).MED   = _STATS.MED
          STRUCT(N).MEAN  = _STATS.MEAN
          STRUCT(N).SUM   = TOTAL(_DATA(OK_GOOD))
          STRUCT(N).GMEAN = _STATS.GMEAN
          STRUCT(N).AMEAN = _STATS.AMEAN
          STRUCT(N).VAR   = _STATS.VAR
          STRUCT(N).STD   = _STATS.STD
          STRUCT(N).GSTD = _STATS.GSTD
          STRUCT(N).ASTD = _STATS.ASTD
          STRUCT(N).CV    = _STATS.CV
        ENDIF;IF COUNT_GOOD GE 1 THEN BEGIN        
      ENDFOR
      SAVE,FILENAME=SAVEFILE,STRUCT,/COMPRESS
      STRUCT_2CSV,REPLACE(SAVEFILE,'.SAVE','.CSV'),OUTSTRUCT
    ENDFOR  
    
  ENDIF  ; DO_GIOVANNI_FILES


; *******************************************************
  IF DO_ANNUAL_TIMESERIES GE 1 THEN BEGIN
; *******************************************************
  	OVERWRITE = DO_ANNUAL_TIMESERIES GE 2

		MAP = 'NEC'
		SUBAREAS = 'MASK_SUBAREA-NEC-PXY_1024_1024-'+['ECOREGIONS_TEST'];,'ECOREGIONS_NESLME_US']
		PERIODS  = ['A','M']
		DO_FIG   = [1,1]
		MONTHS   = ['','04']	
		YRANGES  = LIST([0.5,2.5],[0.0,6.0])
		TITLES   = ['ANNUAL','APRIL']	
		CODES = 32
		SPROD = 'CHLOR_A-OC4'
		MPROD = 'CHLOR_A-OC3M'
		COLORA = 'DARK_BLUE'
		COLORB = 'ORANGE_RED'

    FOR STH=0, N_ELEMENTS(SUBAREAS)-1 DO BEGIN
      SUBAREA = SUBAREAS(STH)
    
  		FILES1 = FILE_SEARCH(!S.DATASETS + 'OC-SEAWIFS-MLAC' + SL + MAP + SL + 'TS_SUBAREAS' + SL + 'A_ANNUAL_M_MANNUAL_MONTH-*' + SUBAREA + '*CHLOR_A*.SAVE')
  		FILES9 = FILE_SEARCH(!S.DATASETS + 'OC-SEAWIFS-9'    + SL + MAP + SL + 'TS_SUBAREAS' + SL + 'A_ANNUAL_M_MANNUAL_MONTH-*' + SUBAREA + '*CHLOR_A*.SAVE')
  		FILEM1 = FILE_SEARCH(!S.DATASETS + 'OC-MODIS-LAC'    + SL + MAP + SL + 'TS_SUBAREAS' + SL + 'A_ANNUAL_M_MANNUAL_MONTH-*' + SUBAREA + '*CHLOR_A*.SAVE')
  		FILEM4 = FILE_SEARCH(!S.DATASETS + 'OC-MODIS-4'      + SL + MAP + SL + 'TS_SUBAREAS' + SL + 'A_ANNUAL_M_MANNUAL_MONTH-*' + SUBAREA + '*CHLOR_A*.SAVE')
  		
  		LABELS = ['SeaWiFS (1km)','MODIS (1km)', 'SeaWiFS (9km-KH)', 'MODIS (4km-KH)', 'SeaWiFS (9km-OC)', 'MODIS (4km-OC)']
  		SYMBOLS = ['CIRCLE','CIRCLE','TRIANGLE','TRIANGLE','STAR','STAR']
  		SYMFILL = [0,0,1,1,1,1]
  		COLORS = [COLORA,COLORB,COLORA,COLORB,COLORA,COLORB]
  
  		DATAS1 = IDL_RESTORE(FILES1)
  		DATAS9 = IDL_RESTORE(FILES9)
  		DATAM1 = IDL_RESTORE(FILEM1)
  		DATAM4 = IDL_RESTORE(FILEM4)
  		  		
  		FOR PTH=0, N_ELEMENTS(PERIODS)-1 DO BEGIN
  		  IF DO_FIG(PTH) EQ 0 THEN CONTINUE
  		  SAVEFILE = FIX_PATH(!S.PROJECTS + 'ECOAP\PLOTS\'+TITLES(PTH)+'-SEAWIFS_MODIS-'+SUBAREA+'-CHLOR_A-OC.PNG')
  		  IF GET_MTIME(SAVEFILE) GT MIN(GET_MTIME([FILES1,FILES9,FILEM1,FILEM4])) AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
  		  _DATAS1 = DATAS1[WHERE(DATAS1.PERIOD_CODE EQ PERIODS(PTH))]
  		  _DATAS9 = DATAS9[WHERE(DATAS9.PERIOD_CODE EQ PERIODS(PTH))]
  		  _DATAM1 = DATAM1[WHERE(DATAM1.PERIOD_CODE EQ PERIODS(PTH))]
  		  _DATAM4 = DATAM4[WHERE(DATAM4.PERIOD_CODE EQ PERIODS(PTH))]
  		    		  
  		  IF MONTHS(PTH) NE '' THEN BEGIN
  		    _DATAS1 = _DATAS1[WHERE(STRMID(_DATAS1.PERIOD,6,2) EQ MONTHS(PTH))]
  		    _DATAS9 = _DATAS9[WHERE(STRMID(_DATAS9.PERIOD,6,2) EQ MONTHS(PTH))]
  		    _DATAM1 = _DATAM1[WHERE(STRMID(_DATAM1.PERIOD,6,2) EQ MONTHS(PTH))]
  		    _DATAM4 = _DATAM4[WHERE(STRMID(_DATAM4.PERIOD,6,2) EQ MONTHS(PTH))]
  		  ENDIF  
  		  
  		  DATES1 = DATE_2JD(DATE_2YEAR(PERIOD_2DATE(_DATAS1.PERIOD)))
  		  DATES9 = DATE_2JD(DATE_2YEAR(PERIOD_2DATE(_DATAS9.PERIOD)))
  		  DATEM1 = DATE_2JD(DATE_2YEAR(PERIOD_2DATE(_DATAM1.PERIOD)))
  		  DATEM4 = DATE_2JD(DATE_2YEAR(PERIOD_2DATE(_DATAM4.PERIOD)))
  		  	
    		AYR = DATE_AXIS([19970101,20150101],/YEAR,/YY_YEAR)
    		YRANGE = YRANGES(PTH)
    		PA = PLOT(AYR.JD,YRANGE,YTITLE=UNITS('CHLOROPHYLL'),TITLE=TITLES(PTH),FONT_SIZE=12,YTICKLEN=0.025,YMINOR=3,XRANGE=AYR.JD,XMAJOR=AYR.TICKS,XMINOR=0,XTICKNAME=AYR.TICKNAME,XTICKLEN=0,XTICKVALUES=AYR.TICKV,DIMENSIONS=[600,300],/NODATA)
    		XTICKV = PA.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)
    		FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],PA.YRANGE,COLOR='LIGHT_GREY',/OVERPLOT,XRANGE=AYR.JD,YRANGE=YRANGE)
;    		P1 = PLOT(DATES1,_DATAS1.MEAN_CHLOR_A_OC4, XRANGE=AYR.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORA,SYMBOL='CIRCLE',SYM_SIZE=1.5)
;    		P2 = PLOT(DATEM1,_DATAM1.MEAN_CHLOR_A_OC3M,XRANGE=AYR.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='CIRCLE',SYM_SIZE=1.5)
    		
    		P1 = PLOT(DATES9,_DATAS9.MEAN_CHLOR_A_OC4, XRANGE=AYR.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORA,SYMBOL='TRIANGLE',SYM_SIZE=1.25,/SYM_FILLED)
    		P2 = PLOT(DATEM4,_DATAM4.MEAN_CHLOR_A_OC3M,XRANGE=AYR.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='TRIANGLE',SYM_SIZE=1.25,/SYM_FILLED)
    		IF SUBAREA EQ 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_TEST' AND PERIODS(PTH) EQ 'M' THEN BEGIN
    		  FILEMT = FIX_PATH(!S.PROJECTS + 'ECOAP/TEST_DATA/TS_SUBAREAS/M-MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_TEST-MODIS-CHLOR_A-OC3M.SAVE')  
    		  FILEST = FIX_PATH(!S.PROJECTS + 'ECOAP/TEST_DATA/TS_SUBAREAS/M-MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_TEST-SEAWIFS-CHLOR_A-OC4.SAVE') 
    		  DATAMT = IDL_RESTORE(FILEMT)
    		  DATAST = IDL_RESTORE(FILEST)
    		  DATEMT = DATE_2JD(DATE_2YEAR(PERIOD_2DATE(DATAMT.PERIOD)))
    		  DATEST = DATE_2JD(DATE_2YEAR(PERIOD_2DATE(DATAST.PERIOD)))
    		  P1 = PLOT(DATEST,DATAST.AMEAN,XRANGE=AYR.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORA,SYMBOL='STAR',SYM_SIZE=1.25,/SYM_FILLED,LINESTYLE=2)
    		  P2 = PLOT(DATEMT,DATAMT.AMEAN,XRANGE=AYR.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='STAR',SYM_SIZE=1.25,/SYM_FILLED,LINESTYLE=2)    		  
    		ENDIF
    		
    		IF SUBAREA EQ 'MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_TEST' AND PERIODS(PTH) EQ 'A' THEN BEGIN
    		  FILEMT = FIX_PATH(!S.PROJECTS + 'ECOAP/TEST_DATA/TS_SUBAREAS/A-MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_TEST-MODIS-CHLOR_A-OC3M.SAVE')
    		  FILEST = FIX_PATH(!S.PROJECTS + 'ECOAP/TEST_DATA/TS_SUBAREAS/A-MASK_SUBAREA-NEC-PXY_1024_1024-ECOREGIONS_TEST-SEAWIFS-CHLOR_A-OC4.SAVE')
    		  DATAMT = IDL_RESTORE(FILEMT)
    		  DATAST = IDL_RESTORE(FILEST)
    		  DATEMT = DATE_2JD(DATE_2YEAR(PERIOD_2DATE(DATAMT.PERIOD)))
    		  DATEST = DATE_2JD(DATE_2YEAR(PERIOD_2DATE(DATAST.PERIOD)))
    		  P1 = PLOT(DATEST,DATAST.AMEAN,XRANGE=AYR.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORA,SYMBOL='STAR',SYM_SIZE=1.25,/SYM_FILLED,LINESTYLE=2)
    		  P2 = PLOT(DATEMT,DATAMT.AMEAN,XRANGE=AYR.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='STAR',SYM_SIZE=1.25,/SYM_FILLED,LINESTYLE=2)
    		ENDIF
    		
    		_LABELS = LABELS(2:*)
    		_COLORS = COLORS(2:*)  
    		_SYMBOL = SYMBOLS(2:*)
    		FOR N=0, N_ELEMENTS(_LABELS)-1 DO SY = SYMBOL(0.2,0.84-(N*0.055),'HLINE',    SYM_COLOR=_COLORS(N),/SYM_FILLED,/CURRENT,/NORMAL,SYM_SIZE=3)
    		FOR N=0, N_ELEMENTS(_LABELS)-1 DO SY = SYMBOL(0.2,0.84-(N*0.055),_SYMBOL(N),SYM_COLOR=_COLORS(N),SYM_FILLED=SYMFILL(N),/CURRENT,/NORMAL,LABEL_STRING='   '+_LABELS(N),LABEL_POSITION='R',LABEL_COLOR=_COLORS(N))
    			
    		PA.SAVE, SAVEFILE
    		PA.CLOSE
    	ENDFOR	
    ENDFOR		


  ENDIF ; DO_ANNUAL_TIMESERIES
  
; *******************************************************
  IF KEY(DO_COMPARE_PLOTS_2017) THEN BEGIN
; *******************************************************
    SNAME = DO_COMPARE_PLOTS_2017
    PRINT, 'Running: ' + 'DO_COMPARE_PLOTS_2017'
    SWITCHES,DO_COMPARE_PLOTS_2017,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATASETS=DATASETS,DATERANGE=DATERANGE

    MP = 'NEC'
    DIR_OUT = DIR_DATA + 'COMPARE_PLOTS_2018' + SL & DIR_TEST, DIR_OUT
   
    SUBAREA = 'NES_ECOREGIONS'
    NAMES    = ['NES','SS','GOM','GB','MAB'] + '_full'
    
    SUBAREAFILES = FLS(!S.IDL_SHAPEFILES + 'NES_ECOREGIONS' + SL + [NAMES] + '.shp')
    SUBTITLES = ['Northeast Shelf LME','Scotian Shelf','Gulf of Maine','Georges Bank','Mid-Atlantic Bight']
    
    FILE_PERIODS = ['D','W','M','A']
    TITLE_PERIODS = ['Daily', 'Weekly', 'Monthly', 'Annual']
   
    IF DATASETS EQ [] THEN BEGIN
      DATASETS = ['PP-SEAWIFS','PP-SEAPAN','PP-SEA15','PP-MODIS','PP-MODPAN','PP-MOD15','PP-SA','PP-SAP','SEAWIFS','MODISA','SA','SEAWIFS15','MODISA15','MODISAD3','SEAWIFSD3','SAD3','AVHRR','SSTD3','SST']  
    ENDIF
DATASETS = (['PP-SINTERP','PP-MINTERP']);['PP-SEAWIFS','PP-SEA15','PP-MODIS','PP-MOD15','PP-SEA18','PP-MOD18','PP-SA','MODISA','SEAWIFS'])
    BUFFER = 0 
    WINX = 790
    WINY = 1024
    CTITLE = ' '

    YMINOR=1
    FONTSIZE = 8.5
    SYMSIZE = 0.45
    THICK = 2
    FONT = 0
    YMARGIN = [0.3,0.3]
    XMARGIN = [4,1]
    COLORA = 'ORANGE_RED'
    COLORB = 'DARK_BLUE'
    COLORXY = !COLOR.(WHERE(TAG_NAMES(!COLOR) EQ COLORB))

    FOR DTH=0, N_ELEMENTS(DATASETS)-1 DO BEGIN
      DATASET = DATASETS(DTH)
      CASE DATASET OF
        'SEAWIFS15':  BEGIN & DATASETA='OC-SEAWIFS-1KM'          & DATASETB='OC-SEAWIFS-1KM'     & YEARS=[1997,2010] & PROD=LIST(['CHLOR_A-OCI', 'CHLOR_A-OCX'],['CHLOR_A-OCI', 'CHLOR_A-PAN'],['CHLOR_A-OCX','CHLOR_A-PAN']) & END
        'MODISA15':   BEGIN & DATASETA='OC-MODISA-1KM'           & DATASETB='OC-MODISA-1KM'      & YEARS=[2002,2017] & PROD=LIST(['CHLOR_A-OCI', 'CHLOR_A-OCX'],['CHLOR_A-OCI', 'CHLOR_A-PAN'],['CHLOR_A-OCX','CHLOR_A-PAN']) & END
        'SEAWIFSD3':  BEGIN & DATASETA='OC-SEAWIFS-MLAC'         & DATASETB='OC-SEAWIFS-1KM'     & YEARS=[1997,2010] & PROD=LIST(['CHLOR_A-OC4', 'CHLOR_A-OCI'],'CHLOR_A-PAN','PAR') & END
        'MODISAD3':   BEGIN & DATASETA='OC-MODIS-LAC'            & DATASETB='OC-MODISA-1KM'      & YEARS=[2002,2017] & PROD=LIST(['CHLOR_A-OC3M','CHLOR_A-OCI'],'CHLOR_A-PAN','PAR') & END
        'SEAWIFS':    BEGIN & DATASETA='OC-SEAWIFS-MLAC'         & DATASETB='OC-SEAWIFS-1KM'     & YEARS=[1997,2010] & PROD=LIST('MICRO-PAN',['CHLOR_A-OC4', 'CHLOR_A-OCI'],['CHLOR_A-OC4', 'CHLOR_A-OCX'],'MICRO-PAN','MICRO_PERCENTAGE-PAN','NANOPICO-PAN','NANOPICO_PERCENTAGE-PAN','CHLOR_A-PAN','PAR') & END
        'MODISA':     BEGIN & DATASETA='OC-MODIS-LAC'            & DATASETB='OC-MODISA-1KM'      & YEARS=[2002,2017] & PROD=LIST(['CHLOR_A-OC3M','CHLOR_A-OCI'],['CHLOR_A-OC3M','CHLOR_A-OCX'],'MICRO-PAN','MICRO_PERCENTAGE-PAN','NANOPICO-PAN','NANOPICO_PERCENTAGE-PAN','CHLOR_A-PAN','PAR') & END
        'SA':         BEGIN & DATASETA='OC-SEAWIFS-1KM'          & DATASETB='OC-MODISA-1KM'      & YEARS=[1997,2017] & PROD=['CHLOR_A-OCI','PAR','CHLOR_A-PAN'] & END
        'SAD3':       BEGIN & DATASETA='OC-SEAWIFS-1KM'          & DATASETB='OC-MODISA-1KM'      & YEARS=[1997,2017] & PROD=['CHLOR_A-OCI','PAR','CHLOR_A-PAN'] & END
        'AVHRR':      BEGIN & DATASETA='SST-AVHRR-5.2'           & DATASETB='SST-AVHRR-4KM'      & YEARS=[1981,2014] & PROD=['SST'] & END
        'SST':        BEGIN & DATASETA='SST-AVHRR-4KM'           & DATASETB='SST-MUR-1KM'        & YEARS=[1997,2017] & PROD=LIST(['SST-N_11UM','SST']) & END
        'SSTD3':      BEGIN & DATASETA='SST-PAT-4'               & DATASETB='SST-MUR-1KM'        & YEARS=[1997,2017] & PROD=LIST(['SST-N_11UM','SST']) & END
        'PP-SEAWIFS': BEGIN & DATASETA='PP-SEAWIFS-PAT-MLAC'     & DATASETB='PP-SEAWIFS-1KM'     & YEARS=[1997,2010] & PROD=LIST(['MICROPP-MARMAP_PAN_VGPM2','MICROPP'],['MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2','MICROPP_PERCENTAGE'],['NANOPICOPP-MARMAP_PAN_VGPM2','NANOPICOPP'],['NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2','NANOPICOPP_PERCENTAGE'],'PPD-VGPM2') & END
        'PP-SEAPAN':  BEGIN & DATASETA='PP-SEAWIFS_PAN-PAT-MLAC' & DATASETB='PP-SEAWIFS_PAN-1KM' & YEARS=[1997,2010] & PROD=LIST('PPD-VGPM2',['MICROPP-MARMAP_PAN_VGPM2','MICROPP'],['MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2','MICROPP_PERCENTAGE'],['NANOPICOPP-MARMAP_PAN_VGPM2','NANOPICOPP'],['NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2','NANOPICOPP_PERCENTAGE']) & END
        'PP-MODIS':   BEGIN & DATASETA='PP-MODIS-PAT-LAC'        & DATASETB='PP-MODISA-1KM'      & YEARS=[2002,2017] & PROD=LIST('PPD-VGPM2',['MICROPP-MARMAP_PAN_VGPM2','MICROPP'],['MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2','MICROPP_PERCENTAGE'],['NANOPICOPP-MARMAP_PAN_VGPM2','NANOPICOPP'],['NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2','NANOPICOPP_PERCENTAGE']) & END
        'PP-MODPAN':  BEGIN & DATASETA='PP-MODIS_PAN-PAT-LAC'    & DATASETB='PP-MODISA_PAN-1KM'  & YEARS=[2002,2017] & PROD=LIST('PPD-VGPM2',['MICROPP-MARMAP_PAN_VGPM2','MICROPP'],['MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2','MICROPP_PERCENTAGE'],['NANOPICOPP-MARMAP_PAN_VGPM2','NANOPICOPP'],['NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2','NANOPICOPP_PERCENTAGE']) & END
        'PP-SEA15':   BEGIN & DATASETA='PP-SEAWIFS_PAN-1KM'      & DATASETB='PP-SEAWIFS-1KM'     & YEARS=[1997,2010] & PROD=['PPD-VGPM2','MICROPP','MICROPP_PERCENTAGE','NANOPICOPP','NANOPICOPP_PERCENTAGE'] & END
        'PP-MOD15':   BEGIN & DATASETA='PP-MODISA_PAN-1KM'       & DATASETB='PP-MODISA-1KM'      & YEARS=[2002,2017] & PROD=['PPD-VGPM2','MICROPP','MICROPP_PERCENTAGE','NANOPICOPP','NANOPICOPP_PERCENTAGE'] & END
        'PP-SA':      BEGIN & DATASETA='PP-SEAWIFS-1KM'          & DATASETB='PP-MODISA-1KM'      & YEARS=[1997,2017] & PROD=['PPD-VGPM2','MICROPP','MICROPP_PERCENTAGE','NANOPICOPP','NANOPICOPP_PERCENTAGE'] & END
        'PP-SAP':     BEGIN & DATASETA='PP-SEAWIFS_PAN-1KM'      & DATASETB='PP-MODISA_PAN-1KM'  & YEARS=[1997,2017] & PROD=['PPD-VGPM2','MICROPP','MICROPP_PERCENTAGE','NANOPICOPP','NANOPICOPP_PERCENTAGE'] & END
        'PP-SEA18':   BEGIN & DATASETA='PP/R2017/SEAWIFS'        & DATASETB='PP/SEAWIFS'         & YEARS=[1997,2010] & PROD=LIST(['MICROPP-MARMAP_PAN_VGPM2','MICROPP'],['MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2','MICROPP_PERCENTAGE'],['NANOPICOPP-MARMAP_PAN_VGPM2','NANOPICOPP'],['NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2','NANOPICOPP_PERCENTAGE'],'PPD-VGPM2') & END
        'PP-MOD18':   BEGIN & DATASETA='PP/R2017/MODISA'         & DATASETB='PP/MODISA'          & YEARS=[1997,2010] & PROD=LIST(['MICROPP-MARMAP_PAN_VGPM2','MICROPP'],['MICROPP_PERCENTAGE-MARMAP_PAN_VGPM2','MICROPP_PERCENTAGE'],['NANOPICOPP-MARMAP_PAN_VGPM2','NANOPICOPP'],['NANOPICOPP_PERCENTAGE-MARMAP_PAN_VGPM2','NANOPICOPP_PERCENTAGE'],'PPD-VGPM2') & END
        'PP-MINTERP': BEGIN & DATASETA='PP-MODISA'               & DATASETB='PP-MODISA'          & YEARS=[2002,2017] & PROD=LIST(['PPD-VGPM2_PAR','PPD-VGPM2_INTPAR']) & END
        'PP-SINTERP': BEGIN & DATASETA='PP-SEAWIFS'              & DATASETB='PP-SEAWIFS'         & YEARS=[1997,2010] & PROD=LIST(['PPD-VGPM2_PAR','PPD-VGPM2_INTPAR']) & END
      ENDCASE

      X  = DATE_2JD(YEARS) & AX  = DATE_AXIS(X,/MONTH, /YY_YEAR,STEP_SIZE=4) & AYR = DATE_AXIS(X,/YEAR)
      XTICKNAMES = REPLICATE(' ',N_ELEMENTS(AX.TICKNAME))
      FOR PTH=0, N_ELEMENTS(PROD)-1 DO BEGIN
        IF N_ELEMENTS(PROD(PTH)) EQ 2 THEN PRODS = PROD(PTH) ELSE PRODS = REPLICATE(PROD(PTH),2)
        OPRODS = PRODS
        
        CASE VALIDS('PRODS',PRODS[1]) OF
          'CHLOR_A'             : BEGIN & DYRANGE='0,10'   & WYRANGE='0,3'    & MYRANGE='0,3'   & AYRANGE='0,2'    & SCALE='NARROW' & LOG=1 & TPROD='Chlorophyll'          & ANOM='RATIO' & END
          'MICRO'               : BEGIN & DYRANGE='0,5'    & WYRANGE='0,3'    & MYRANGE='0,3'   & AYRANGE='0,2'    & SCALE='NARROW' & LOG=1 & TPROD='Micro Chlorophyll'    & ANOM='RATIO' & END
          'NANOPICO'           : BEGIN & DYRANGE='0,8'    & WYRANGE='0,3'    & MYRANGE='0,3'   & AYRANGE='0,2'    & SCALE='NARROW' & LOG=1 & TPROD='NanoPico Chlorophyll' & ANOM='RATIO' & END
          'MICRO_PERCENTAGE'    : BEGIN & DYRANGE='0,40'   & WYRANGE='0,40'   & MYRANGE='O,40'  & AYRANGE='0,40'   & SCALE=''       & LOG=0 & TPROD='Micro CHL (%)' & ANOM = 'DIF' & END
          'NANOPICO_PERCENTAGE': BEGIN & DYRANGE='0,80'   & WYRANGE='0,80'   & MYRANGE='O,80'  & AYRANGE='0,80'   & SCALE=''       & LOG=0 & TPROD='NanoPico CHL (%)' & ANOM = 'DIF' & END
          'PAR'                 : BEGIN & DYRANGE='0,80'   & WYRANGE='0,80'   & MYRANGE='0,80'  & AYRANGE='30,40'  & SCALE=''       & LOG=0 & TPROD='PAR'                  & ANOM='DIF'   & END
          'PPD'                 : BEGIN & DYRANGE='0,4'    & WYRANGE='0,4'    & MYRANGE='0,4'   & AYRANGE='0,2'    & SCALE='NARROW' & LOG=1 & TPROD='Primary Production'   & ANOM='RATIO' & END
          'MICROPP'           : BEGIN & DYRANGE='0,1'    & WYRANGE='0,1'    & MYRANGE='0,1'   & AYRANGE='0,0.5'  & SCALE='NARROW' & LOG=1 & TPROD='Microplankton PP'     & ANOM='RATIO' & END
          'NANOPICOPP'        : BEGIN & DYRANGE='0,3'    & WYRANGE='0,3'    & MYRANGE='0,3'   & AYRANGE='0,1'    & SCALE='NARROW' & LOG=1 & TPROD='NanoPico PP'          & ANOM='RATIO' & END
          'MICROPP_PERCENTAGE'       : BEGIN & DYRANGE='0,40'   & WYRANGE='0,40'   & MYRANGE='O,40'  & AYRANGE='0,40'   & SCALE=''       & LOG=0 & TPROD='Micro PP (%)' & ANOM = 'DIF' & END
          'NANOPICOPP_PERCENTAGE'    : BEGIN & DYRANGE='0,80'   & WYRANGE='0,80'   & MYRANGE='O,80'  & AYRANGE='0,80'   & SCALE=''       & LOG=0 & TPROD='NanoPico PP (%)' & ANOM = 'DIF' & END
          'SST'                 : BEGIN & DYRANGE='-1,30'  & WYRANGE='-1,30'  & MYRANGE='-1,30' & AYRANGE='-1,30'  & SCALE='LOW'    & LOG=0 & TPROD='Temperature'          & ANOM='DIF'   & END
          'RRS_443'             : BEGIN & DYRANGE='0,.008' & WYRANGE='0,.004' & MYRANGE='0,.004'& AYRANGE='0,.004' & SCALE=''       & LOG=0 & TPROD='RRS 443'              & ANOM='DIF'   & END
        ENDCASE
        
        DSETS = [DATASETA,DATASETB]
        NPROD = PRODS
        
        FOR D=0, N_ELEMENTS(DSETS)-1 DO BEGIN        
          NDIR = []
          CASE DSETS(D) OF
            'OC-SEAWIFS-MLAC':         BEGIN & LEGEND='SeaWiFS 2010' & DIR=!S.ARCHIVE+DSETS(D)+SL+MP    +SL+'STATS'+SL+PRODS(D)+SL & SDIR=[]                          & STARGET='MEAN'  & END
            'OC-MODIS-LAC':            BEGIN & LEGEND='MODISA 2010'  & DIR=!S.ARCHIVE+DSETS(D)+SL+MP    +SL+'STATS'+SL+PRODS(D)+SL & SDIR=[]                          & STARGET='MEAN'  & END
            'OC-SEAWIFS-1KM':          BEGIN & LEGEND='SeaWiFS 2015' & DIR=!S.SEADAS +DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & NDIR=REPLACE(DIR,'STATS'+SL+PRODS(D),'NC') & END
            'OC-MODISA-1KM':           BEGIN & LEGEND='MODISA 2015'  & DIR=!S.MODIS  +DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & NDIR=REPLACE(DIR,'STATS'+SL+PRODS(D),'NC') & END
            'PP-SEAWIFS-PAT-MLAC':     BEGIN & LEGEND='SeaWiFS 2010' & DIR=!S.ARCHIVE+DSETS(D)+SL+MP    +SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='MEAN'  & END
            'PP-SEAWIFS_PAN-PAT-MLAC': BEGIN & LEGEND='SeaWiFS Pan 2010' & DIR=!S.ARCHIVE+DSETS(D)+SL+MP    +SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='MEAN'  & END
            'PP-SEAWIFS-1KM':          BEGIN & LEGEND='SeaWiFS 2015'     & DIR=!S.PP    +DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'PP-SEAWIFS_PAN-1KM':      BEGIN & LEGEND='SeaWiFS Pan 2015' & DIR=!S.PP    +DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'PP/R2017/SEAWIFS':        BEGIN & LEGEND='SeaWiFS 2017 (PAR interp)' & DIR=!S.ARCHIVE + DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'PP-SEAWIFS':              BEGIN & LEGEND='SeaWiFS 2017 (PAR filled)' & DIR=!S.PP    +DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'PP-MODIS_PAN-PAT-LAC':    BEGIN & LEGEND='MODISA Pan 2010'  & DIR=!S.ARCHIVE+DSETS(D)+SL+MP    +SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='MEAN'  & END
            'PP-MODIS-PAT-LAC':        BEGIN & LEGEND='MODISA OCx 2010'  & DIR=!S.ARCHIVE+DSETS(D)+SL+MP    +SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='MEAN'  & END
            'PP-MODISA-1KM':           BEGIN & LEGEND='MODISA 2015'      & DIR=!S.PP    +DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'PP-MODISA_PAN-1KM':       BEGIN & LEGEND='MODISA Pan 2015'  & DIR=!S.PP    +DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'PP/R2017/MODISA':         BEGIN & LEGEND='MODISA 2017 (PAR interp)' & DIR=!S.ARCHIVE + DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'PP-MODISA':               BEGIN & LEGEND='MODISA 2017 (PAR filled)' & DIR=!S.PP     +DSETS(D)+SL+'L3B2'+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END    
            'SST-MUR-1KM':             BEGIN & LEGEND='MUR 2016'     & DIR=!S.DATASETS+DSETS(D)+SL+MP   +SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'SST-AVHRR-4KM':           BEGIN & LEGEND='AVHRR 2012'   & DIR=!S.DATASETS+DSETS(D)+SL+MP   +SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END
            'SST-AVHRR-5.2':           BEGIN & LEGEND='AVHRR 2016'   & DIR=!S.DATASETS+'SST-AVHRR-4KM'+SL+'AVHRR_5.2'+SL+MP+SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='STATS' & END 
            'SST-PAT-4':               BEGIN & LEGEND='SST PAT'      & DIR=!S.ARCHIVE+DSETS(D)+SL+MP    +SL+'STATS'+SL+PRODS(D)+SL & SDIR=REPLACE(DIR,'STATS','SAVE') & STARGET='MEAN'  & END
          ENDCASE  
          
          IF DSETS(D) EQ 'OC-SEAWIFS-1KM'  AND PRODS(D) EQ 'CHLOR_A-OCI' THEN NPROD(D) = 'CHL'
          IF DSETS(D) EQ 'OC-MODIS-LAC'    AND PRODS(D) EQ 'CHLOR_A-OCI' THEN NPROD(D) = 'CHL'
          IF DSETS(D) EQ 'OC-SEAWIFS-1KM'  AND PRODS(D) EQ 'CHLOR_A-OCX' THEN NPROD(D) = 'CHL'
          IF DSETS(D) EQ 'OC-MODIS-LAC'    AND PRODS(D) EQ 'CHLOR_A-OCX' THEN NPROD(D) = 'CHL'
          IF DSETS(D) EQ 'OC-SEAWIFS-1KM'  AND PRODS(D) EQ 'PAR'         THEN NPROD(D) = 'PAR'
          IF DSETS(D) EQ 'OC-MODIS-LAC'    AND PRODS(D) EQ 'PAR'         THEN NPROD(D) = 'PAR'
          IF DSETS(D) EQ 'OC-SEAWIFS-1KM'  AND HAS(PRODS(D),'RRS')       THEN NPROD(D) = 'RRS'
          IF DSETS(D) EQ 'OC-MODISA-1KM'   AND HAS(PRODS(D),'RRS')       THEN NPROD(D) = 'RRS'
          IF DSETS(D) EQ 'OC-SEAWIFS-MLAC' AND PRODS(D) EQ 'CHLOR_A-OCI' THEN DIR = REPLACE(DIR,PRODS(D),'CHLOR_A-OC4')
          IF DSETS(D) EQ 'OC-SEAWIFS-MLAC' AND PRODS(D) EQ 'CHLOR_A-OCX' THEN DIR = REPLACE(DIR,PRODS(D),'CHLOR_A-OC4')
          IF DSETS(D) EQ 'OC-MODIS-LAC'    AND PRODS(D) EQ 'CHLOR_A-OCI' THEN DIR = REPLACE(DIR,PRODS(D),'CHLOR_A-OC3M')
          IF DSETS(D) EQ 'OC-MODIS-LAC'    AND PRODS(D) EQ 'CHLOR_A-OCX' THEN DIR = REPLACE(DIR,PRODS(D),'CHLOR_A-OC3M')
          IF HAS(DATASET,'D3') THEN BEGIN
            STARGET = 'INTERP*'
            SDIR = []
            NDIR = []
            IF DSETS(D) EQ 'OC-SEAWIFS-MLAC' THEN DIR = REPLACE(DIR,'STATS'+SL+PRODS(D),'TS_IMAGES'+SL+PRODS(D)+SL+'SAVE')
            IF DSETS(D) EQ 'OC-SEAWIFS-1KM'  THEN DIR = REPLACE(DIR,'STATS','INTERP_SAVE')
            IF DSETS(D) EQ 'OC-MODIS-LAC'    THEN DIR = REPLACE(DIR,'STATS'+SL+PRODS(D),'TS_IMAGES'+SL+PRODS(D)+SL+'SAVE')
            IF DSETS(D) EQ 'OC-MODISA-1KM'   THEN DIR = REPLACE(DIR,'STATS','INTERP_SAVE')
            IF DSETS(D) EQ 'SST-PAT-4'       THEN DIR = REPLACE(DIR,'STATS'+SL+PRODS(D),'TS_IMAGES'+SL+PRODS(D)+SL+'SAVE')
            IF DSETS(D) EQ 'SST-MUR-1KM'     THEN SDIR = REPLACE(DIR,'STATS','SAVE')
            PNGTAG = '-INTERP_D3'
          ENDIF ELSE PNGTAG = ''
          
          IF NPROD(D) EQ 'MICRO-PAN' OR NPROD(D) EQ 'NANOPICO-PAN' OR NPROD(D) EQ 'MICRO_PERCENTAGE' OR NPROD(D) EQ 'NANOPICO_PERCENTAGE' THEN SDIR = REPLACE(SDIR,NPROD(D),'PHYTO')
          IF NPROD(D) EQ 'MICROPP' OR NPROD(D) EQ 'NANOPICOPP' OR NPROD(D) EQ 'MICROPP_PERCENTAGE' OR NPROD(D) EQ 'NANOPICOPP_PERCENTAGE' THEN SDIR = REPLACE(SDIR,['SAVE',NPROD(D)],['STATS','PPD_SIZE-MAR'])
          
          FILES = FLS(DIR+[FILE_PERIODS]+'_*'+STARGET+'.SAV*',DATERANGE=YEARS)
          IF NDIR NE [] THEN FILES = [FILES,FLS(NDIR+'*'+NPROD(D)+'.nc',DATERANGE=YEARS)]
          IF SDIR NE [] THEN FILES = [FILES,FLS(SDIR+[FILE_PERIODS]+'_*.SAV*',DATERANGE=YEARS)]
  
          IF D EQ 0 THEN FILESA = FILES  ELSE FILESB = FILES
          IF D EQ 0 THEN LEGA   = LEGEND ELSE LEGB   = LEGEND
          IF SAME(DSETS) AND ~SAME(PRODS) THEN BEGIN & LEGA = PRODS[0] & LEGB = PRODS[1] & ENDIF
          IF D EQ 0 THEN DIRA   = REPLACE(DIR,['STATS',PRODS(D)+SL],['SUBAREAS','']) ELSE DIRB = REPLACE(DIR,['STATS',PRODS(D)+SL],['SUBAREAS',''])
          
          CASE PRODS(D) OF
            'PPD-VGPM2_INTPAR': PRODS(D) = 'PPD-VGPM2'
            'PPD-VGPM2_FILLED': PRODS(D) = 'PPD-VGPM2'
            'PPD-VGPM2_PAR':    PRODS(D) = 'PPD-VGPM2'
            ELSE: PRODS(D) = PRODS(D)
          ENDCASE  
            
          ANN = FLS(DIR+'ANNUAL_*' + ['MEAN','STATS']+'.SAV*')
          IF D EQ 0 THEN ANNA = ANN ELSE ANNB = ANN
          IF DSETS(D) EQ 'OC-SEAWIFS-1KM' OR DATASET EQ 'OC-MODISA-1KM' THEN PRODS(D) = REPLACE(PRODS(D),['MICRO-PAN','NANOPICO-PAN'],['MICRO','NANO'])
        ENDFOR
        VERBOSE=0
        
        IF (PRODS_READ(PRODS[1])).LOG EQ 1 THEN LOGLOG = 1 ELSE LOGLOG = 0 & IF KEY(LOGLOG) THEN ANOM='RATIO' ELSE ANOM='DIF'

        SUBAREA = 'NES_EPU_NOESTUARIES'
        NAMES = ['MAB','GOM','SS','GB']
        SUBTITLES = ['Northeast Shelf LME','Scotian Shelf','Gulf of Maine','Georges Bank','Mid-Atlantic Bight']
        STRUCT = READ_SHPFILE(SUBAREA, MAPP='NEC', COLOR=COLOR, VERBOSE=VERBOSE, NORMAL=NORMAL, AROUND=AROUND)
        SHPS=STRUCT.(0)
        OUTLINE = []
        FOR F=0, N_ELEMENTS(NAMES)-1 DO BEGIN
          POS = WHERE(TAG_NAMES(SHPS) EQ STRUPCASE(NAMES(F)),/NULL)
          OUTLINE = [OUTLINE,SHPS.(POS).OUTLINE]
        ENDFOR
        
        FA = PARSE_IT(FILESA[0],/ALL) & FB = PARSE_IT(FILESB[0],/ALL) 
        PRINT, 'Extracting data for DATASET: ' + DATASET + ' (PROD = ' + PRODS[0] + ')'
        SAVEFILEA = DIRA + INAME_MAKE(SENSOR=FA[0].SENSOR, SATELLITE=FA[0].SATELLITE, METHOD=FA[0].METHOD, COVERAGE=FA[0].COVERAGE, MAP=FA[0].MAP) + '-' + OPRODS[0] + '-SUBAREAS.SAV' 
        SAVEFILEB = DIRB + INAME_MAKE(SENSOR=FB[0].SENSOR, SATELLITE=FB[0].SATELLITE, METHOD=FB[0].METHOD, COVERAGE=FB[0].COVERAGE, MAP=FB[0].MAP) + '-' + OPRODS[1] + '-SUBAREAS.SAV' 
        SUBAREAS_EXTRACT,FILESA,PROD=PRODS[0],SUBREGIONS=SUBREGIONS,SHP_FILES=SHP_FILES,DIR_OUT=DIR_OUT,DIR_SHP=DIR_SHP,SAVEFILE=SAVEFILEA,INIT=INIT,VERBOSE=VERBOSE
        SUBAREAS_EXTRACT,FILESB,PROD=PRODS[1],SUBREGIONS=SUBREGIONS,SHP_FILES=SHP_FILES,DIR_OUT=DIR_OUT,DIR_SHP=DIR_SHP,SAVEFILE=SAVEFILEB,INIT=INIT,VERBOSE=VERBOSE
        
        IF FILE_MAKE(SAVEFILEA,REPLACE(SAVEFILEA,[DIRA,'.SAV'],[DIR_OUT,'.CSV'])) EQ 1 THEN FILE_COPY, REPLACE(SAVEFILEA,'.SAV','.CSV'), DIR_OUT, /OVERWRITE
        IF FILE_MAKE(SAVEFILEB,REPLACE(SAVEFILEB,[DIRB,'.SAV'],[DIR_OUT,'.CSV'])) EQ 1 THEN FILE_COPY, REPLACE(SAVEFILEB,'.SAV','.CSV'), DIR_OUT, /OVERWRITE
        
        ADATA = IDL_RESTORE(SAVEFILEA) & OKA = WHERE(TAG_NAMES(ADATA) EQ 'AMEAN') 
        BDATA = IDL_RESTORE(SAVEFILEB) & OKB = WHERE(TAG_NAMES(BDATA) EQ 'AMEAN')
    ;    OUTLINE_SUBS = STRUCT.(0).(WHERE(TAG_NAMES(STRUCT.(0)) EQ SUBAREA + '_OUTLINE',/NULL))
        FOR CTH=0, N_ELEMENTS(NAMES)-1 DO BEGIN
          ANAME = STRUPCASE(NAMES(CTH))
          SHP = STRUCT_GET(SHPS,ANAME)
          IF SHP EQ [] THEN STOP
          SHP_BINS = SHP.SUBS
          SHP_OUTLINE = SHP.OUTLINE
          ADAT = ADATA[WHERE(ADATA.SUBAREA EQ ANAME)]
          BDAT = BDATA[WHERE(BDATA.SUBAREA EQ ANAME)]
          PERIODS = [ADAT.PERIOD,BDAT.PERIOD] & PERIODS = PERIODS[SORT(PERIODS)] & PERIODS = PERIODS[UNIQ(PERIODS)]
          IF SAME([DATASETA,DATASETB]) THEN TDATASET = DATASETA ELSE TDATASET = DATASETA + '_' + DATASETB
          IF SAME(PRODS) THEN TPRODS = PRODS[0] ELSE TPRODS = PRODS[0] + '_' + PRODS[1]
          PNGFILE = DIR_OUT + TDATASET + '-' + MP + '-NES_ECOREGIONS-' + ANAME + '-' + TPRODS + PNGTAG + '.PNG'
          
          IF FILE_MAKE([SAVEFILEA,SAVEFILEB],PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
            XTITLE = UNITS(TPROD) + ' - ' + VALIDS('ALGS',PRODA) + ' Algorithm (' + VALIDS('SENSORS',DATASETA) + ')'
            YTITLE = UNITS(TPROD) + ' - ' + VALIDS('ALGS',PRODB) + ' Algorithm (' + VALIDS('SENSORS',DATASETB) + ')'

            CDATA = REPLICATE(STRUCT_2MISSINGS(CREATE_STRUCT('PERIOD','','PERIOD_CODE','','DATA_A',0.0,'DATA_B',0.0)),N_ELEMENTS(PERIODS))
            CDATA.PERIOD = PERIODS
            CDATA.PERIOD_CODE = VALIDS('PERIOD_CODES',PERIODS)
            OK = WHERE_MATCH(CDATA.PERIOD,ADAT.PERIOD,COUNT,VALID=VALID,COMPLEMENT=COMPLEMENT) & CDATA[OK].DATA_A = ADAT(VALID).(OKB)
            OK = WHERE_MATCH(CDATA.PERIOD,BDAT.PERIOD,COUNT,VALID=VALID,COMPLEMENT=COMPLEMENT) & CDATA[OK].DATA_B = BDAT(VALID).(OKB)
            
            W = WINDOW(DIMENSIONS=[WINX,WINY],BUFFER=BUFFER)
            TITLE = SUBTITLES(CTH) + ' ' + TPROD
            TXT = TEXT(0.5,0.97,TITLE,ALIGNMENT=0.5,FONT_SIZE=14)
            OK = WHERE(CDATA.PERIOD_CODE EQ 'D',COUNTD)
            
            PLOT_PERIODS = ['D','W','M','A']
            POSITION = LIST([0.08,0.81,0.96,0.96],$
                            [0.08,0.65,0.96,0.80],$
                            [0.08,0.49,0.96,0.64],$
                            [0.08,0.33,0.96,0.48])
            TPOS = [.940,.780,.620,460]  
            RANGES = [DYRANGE,WYRANGE,MYRANGE,AYRANGE]
            FOR N=0, N_ELEMENTS(PLOT_PERIODS)-1 DO BEGIN
              AA = CDATA[WHERE(CDATA.PERIOD_CODE EQ PLOT_PERIODS(N) AND CDATA.DATA_A NE MISSINGS(0.0),/NULL)] 
              BB = CDATA[WHERE(CDATA.PERIOD_CODE EQ PLOT_PERIODS(N) AND CDATA.DATA_B NE MISSINGS(0.0),/NULL)]
              YRANGE = STR_SEP(RANGES(N),','); NICE_RANGE(MINMAX([AA.DATA_A,BB.DATA_B]))
              IF N EQ N_ELEMENTS(PLOT_PERIODS)-1 THEN XTICKNAME=AX.TICKNAME ELSE XTICKNAME=XTICKNAMES
              PD = PLOT(AX.JD,YRANGE,YTITLE=UNITS(TPROD,/NO_NAME),FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XMAJOR=AX.TICKS,XMINOR=3,XTICKNAME=XTICKNAME,XTICKVALUES=AX.TICKV,POSITION=POSITION(N),/NODATA,/CURRENT)
              POS = PD.POSITION
              XTICKV = PD.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)
              FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGE,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)
              IF AA NE [] THEN P1 = PLOT(PERIOD_2JD(AA.PERIOD),AA.DATA_A,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,LINESTYLE=6,COLOR=COLORA,SYMBOL='CIRCLE',SYM_SIZE=0.45,/SYM_FILLED)
              IF BB NE [] THEN P2 = PLOT(PERIOD_2JD(BB.PERIOD),BB.DATA_B,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,LINESTYLE=6,COLOR=COLORB,SYMBOL='CIRCLE',SYM_SIZE=0.45)
              TD = TEXT(.095,POS(3)-0.02,TITLE_PERIODS(N),FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
              TA = TEXT(.095,POS(3)-0.035,LEGA,FONT_COLOR=COLORA,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
              TB = TEXT(.095,POS(3)-0.05,LEGB,FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
            ENDFOR

            POS = LIST([0.095, 0.175,0.2675,0.295],$
                       [0.3175,0.175,0.49,  0.295],$
                       [0.54,  0.175,0.7125,0.295],$
                       [0.7625,0.175,0.935, 0.295])
            XTITLE = UNITS(TPROD) + ' - ' + VALIDS('ALGS',PRODA) + '!C(' + VALIDS('SENSORS',DATASETA) + ')'
            YTITLE = UNITS(TPROD) + ' - ' + VALIDS('ALGS',PRODB) + '!C(' + VALIDS('SENSORS',DATASETB) + ')'
            PERIOD_CODES = ['D','W','M','A']
            FOR LTH=0, N_ELEMENTS(PERIOD_CODES)-1 DO BEGIN
              PAL_36
              APOS = POS(LTH)
              STATS_POS = [APOS[0]-0.01 + 0.012, APOS(3)+0.005 - 0.06]
              OKXY = WHERE(CDATA.PERIOD_CODE EQ PERIOD_CODES(LTH) AND CDATA.DATA_A NE MISSINGS(0.0) AND CDATA.DATA_B NE MISSINGS(0.0),COUNTXY)
              IF COUNTXY EQ 0 THEN CONTINUE
              RANGE = NICE_RANGE(MINMAX([CDATA(OKXY).DATA_A,CDATA(OKXY).DATA_B]))
              P = PLOTXY_NG(CDATA(OKXY).DATA_A,CDATA(OKXY).DATA_B,DECIMALS=3,LOGLOG=LOGLOG,/QUIET,/CURRENT,MODEL='RMA',PARAMS=[5,6,7,11],POSITION=APOS,CHARSIZE=FONTSIZE,PSYM='CIRCLE',$
                XTITLE='',YTITLE='',SYM_COLOR=COLORXY,SYMSIZE=SYMSIZE,THICK=THICK,XRANGE=NICE_RANGE(RANGE),YRANGE=NICE_RANGE(RANGE),/GRID_NONE,MARGIN=MARGIN,STATS_CHARSIZE=STATS_CHARSIZE,$
                STATS_POS=STATS_POS,/ONE2ONE,ONE_COLOR=253,ONE_THICK=ONE_THICK,ONE_LINESTYLE=ONE_LINESTYLE,BUFFER=BUFFER) ; XTICKNAME=XTICKNAME,YTICKNAME=YTICKNAME,
              TD = TEXT(APOS(2)-0.005,.18,TITLE_PERIODS(LTH),FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD',ALIGNMENT=1.0)
            ENDFOR
            TX = TEXT(0.5, 0.16,  LEGA,ALIGNMENT=0.5,FONT_SIZE=FONTSIZE)
            TY = TEXT(0.065,0.23, LEGB,ALIGNMENT=0.5,FONT_SIZE=FONTSIZE,ORIENTATION=90)

            PAL='PAL_BR'
            IPOSITIONS = LIST([0.09,0.0,0.27,0.15],$
                             [0.31,0.0,0.49,0.15],$
                             [0.53,0.0,0.71,0.15],$
                             [0.7625,0.025,0.935,0.15])
            
            IF ANNA EQ [] OR ANNB EQ [] THEN GOTO, SKIP_IMAGES
            
            DA = STRUCT_READ(ANNA,STRUCT=ASTRUCT,MAP_OUT=MP) & IF N_TAGS(ASTRUCT) EQ 1 THEN ASTRUCT=ASTRUCT.(0) 
            DB = STRUCT_READ(ANNB,STRUCT=BSTRUCT,MAP_OUT=MP) & IF N_TAGS(BSTRUCT) EQ 1 THEN BSTRUCT=BSTRUCT.(0) 
            
            ADAT = MAPS_BLANK(ASTRUCT.MAP) & BDAT = ADAT & RDAT = ADAT
            ADAT(SHP_BINS) = DA(SHP_BINS) & BDAT(SHP_BINS) = DB(SHP_BINS)
            OKXY = WHERE(ADAT NE MISSINGS(0.0) AND BDAT NE MISSINGS(0.0))
            IF KEY(LOGLOG) THEN RDAT(OKXY) = ADAT(OKXY)/BDAT(OKXY) ELSE RDAT(OKXY) = ADAT(OKXY) - BDAT(OKXY)      

            ABYT = PRODS_2BYTE(ADAT,PROD=ASTRUCT.PROD,MP=ASTRUCT.MAP,/ADD_COAST)        ; & ABYT(OUTLINE_SUBS) = 0
            BBYT = PRODS_2BYTE(BDAT,PROD=BSTRUCT.PROD,MP=BSTRUCT.MAP,/ADD_COAST)        ; & BBYT(OUTLINE_SUBS) = 0
            RBYT = PRODS_2BYTE(RDAT,PROD=ANOM,MP=ASTRUCT.MAP,/ADD_COAST,LAND_COLOR=254) ; & RBYT(OUTLINE_SUBS) = 0

            POSITION = IPOSITIONS[0] & PX = WINX*(POSITION[0]-0.01) & PY = WINY*(POSITION(3)-0.005)
            APNG = IMAGE(ABYT,RGB_TABLE=CPAL_READ('PAL_BR'),POSITION=POSITION,/CURRENT)
            PRODS_COLORBAR, ASTRUCT.PROD, IMG=APNG, LOG=LOGLOG, ORIENTATION=1, TITLE=CTITLE, FONT_SIZE=8, POSITION=[PX,PY-140,PX+5,PY], TEXTPOS=0, /DEVICE, PAL='PAL_BR'

            
            POSITION = IPOSITIONS[1] & PX = WINX*(POSITION[0]-0.01) & PY = WINY*(POSITION(3)-0.005)
            BPNG = IMAGE(BBYT,RGB_TABLE=CPAL_READ('PAL_BR'),POSITION=POSITION,/CURRENT)
            PRODS_COLORBAR, BSTRUCT.PROD, IMG=BPNG, LOG=LOGLOG, ORIENTATION=1, TITLE=CTITLE, FONT_SIZE=8, POSITION=[PX,PY-140,PX+5,PY], TEXTPOS=0, /DEVICE, PAL='PAL_BR'

            POSITION = IPOSITIONS(2) & PX = WINX*(POSITION[0]-0.01) & PY = WINY*(POSITION(3)-0.005)
            RPNG = IMAGE(RBYT,RGB_TABLE=CPAL_READ('PAL_ANOMG'),POSITION=POSITION,/CURRENT)
            PRODS_COLORBAR, ANOM, IMG=RPNG, LOG=LOGLOG, ORIENTATION=1, TITLE=CTITLE, FONT_SIZE=8, POSITION=[PX,PY-140,PX+5,PY], TEXTPOS=0, /DEVICE, PAL='PAL_BR'

            TX = TEXT(0.095,0.14,LEGA,FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)
            TY = TEXT(0.315,0.14,LEGB,FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)
            TA = TEXT(0.535,0.14,'Anomaly !C'+ANOM,FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)

            POSITION=IPOSITIONS(3)
            STATS_POS = [POSITION[0] + 0.012, POSITION(3) - 0.06]
            OKXY = WHERE(ADAT NE MISSINGS(0.0) AND BDAT NE MISSINGS(0.0))
            XSCALE = FLOAT([(PRODS_READ(ASTRUCT.PROD)).LOWER,(PRODS_READ(ASTRUCT.PROD)).UPPER])
            YSCALE = FLOAT([(PRODS_READ(BSTRUCT.PROD)).LOWER,(PRODS_READ(BSTRUCT.PROD)).UPPER])
            P = PLOTXY_NG(ADAT(OKXY),BDAT(OKXY),DECIMALS=3,LOGLOG=LOGLOG,/QUIET,/CURRENT,MODEL='RMA',PARAMS=[5,6,7,11],POSITION=POSITION,CHARSIZE=FONTSIZE,PSYM='CIRCLE',$
              XTITLE='',YTITLE='',SYM_COLOR=COLORXY,SYMSIZE=SYMSIZE,THICK=THICK,XRANGE=XSCALE,YRANGE=YSCALE,/GRID_NONE,MARGIN=MARGIN,STATS_CHARSIZE=STATS_CHARSIZE,$
              STATS_POS=STATS_POS,/ONE2ONE,ONE_COLOR=253,ONE_THICK=ONE_THICK,ONE_LINESTYLE=ONE_LINESTYLE)
            GONE, ADAT
            GONE, BDAT
            TX = TEXT(0.85,0.002,LEGA,ALIGNMENT=0.5,FONT_SIZE=FONTSIZE)
            TY = TEXT(0.73,0.085,LEGB,ALIGNMENT=0.5,FONT_SIZE=FONTSIZE,ORIENTATION=90)

            SKIP_IMAGES:
            P, 'Writing ' + PNGFILE
            W.SAVE,PNGFILE,RESOLUTION=600
            W.CLOSE
          ENDFOR
        ENDFOR
    ENDFOR ; DATASETA
    STOP

  ENDIF ; DO_COMPARE_PLOTS_2017  
  
  
; *******************************************************
  IF DO_COMPARE_PLOTS GE 1 THEN BEGIN        
; *******************************************************  
    OVERWRITE = DO_COMPARE_PLOTS GE 2
    
    MAP = 'NEC'
    SUBAREAS = 'MASK_SUBAREA-NEC-PXY_1024_1024-' + ['ESTUARY_SHELF_LME'];,'ECOREGIONS_FULL_NO_ESTUARIES']
    CODES    = LIST([32],[5,6,7,8])
    NAMES    = LIST(['NESLME'],['SS','GOM','GB','MAB'])
    SUBTITLES = LIST(['Northeast Shelf LME'],['Scotian Shelf','Gulf of Maine','Georges Bank','Mid-Atlantic Bight'])
    
    PERIODS = ['D','W','M','A']
    TITLE_PERIODS = ['Daily', 'Weekly', 'Monthly', 'Annual']
    
    DO_PLOT  = [0,                0,                0,             0,             0,            0,                       1]    
    DATASETA = ['OC-SEAWIFS-MLAC','OC-SEAWIFS-MLAC','OC-MODIS-LAC','SST-AVHRR-4','SST-AVHRR-4','PP-SEAWIFS_PAN-PAT-MLAC','PP-MODIS_PAN-PAT-LAC']
    DATASETB = ['OC-MODIS-LAC',   'OC-SEAWIFS-MLAC','OC-MODIS-LAC','SST-MODIS-4','SST-MUR-1KM','PP-SEP-1KM',             'PP-AQP-1KM']  
    YEARS    = LIST([1997,2015],  [1998,2007],      [2003,2015],   [1985,2015],  [2003,2015],   [1998,2007],             [2002,2015])
    ANOMS    = ['RATIO',          'RATIO',          'RATIO',       'DIF',        'DIF',        'RATIO',                  'RATIO']
    
    PRODSA  = LIST(['CHLOR_A-OC4', 'CHLOR_A-PAN'],['CHLOR_A-OC4'],['CHLOR_A-OC3M'],['SST'],       ['SST'],['PPD-VGPM2','PPD-OPAL'],['PPD-VGPM2','PPD-OPAL'])
    PRODSB  = LIST(['CHLOR_A-OC3M','CHLOR_A-PAN'],['CHLOR_A-PAN'],['CHLOR_A-PAN'], ['SST-N_11UM'],['SST'],['PPD-VGPM2','PPD-OPAL'],['PPD-VGPM2','PPD-OPAL'])
    TPRODS  = LIST(['Chlorophyll','Chlorophyll'] ,['Chlorophyll'],['Chlorophyll'],['Sea Surface Temperature'],['Sea Surface Temperature'],['Primary Production','Primary Production'],['Primary Production','Primary Production'])
    LEGENDA = LIST(['SeaWiFS OC4','SeaWiFS PAN'] ,['SeaWiFS OC4'],['MODIS OC3M'],['SST AVHRR'],['SST AVHRR'],['Productivity VGPM2 - OLD','Productivity OPAL - OLD'],['Productivity VGPM2 - OLD','Productivity OPAL - OLD'])
    LEGENDB = LIST(['MODIS OC3M','MODIS PAN']    ,['SeaWiFS PAN'],['MODIS PAN'],['SST MODIS'],['SST MUR'],  ['Productivity VGPM2 - NEW','Productivity OPAL - NEW'],['Productivity VGPM2 - NEW','Productivity OPAL - NEW'])
    DYRANGE = LIST([0,10],   [0,10],   [0,10],   [-1,30],[-1,30],[0,4],[0,4])
    WYRANGE = LIST([0,3],    [0,3],    [0,3],    [-1,30],[-1,30],[0,4],[0,4])
    MYRANGE = LIST([0,3],    [0,3],    [0,3],    [-1,30],[-1,30],[0,4],[0,4])
    AYRANGE = LIST([0.4,1.6],[0.4,1.6],[0.4,1.6],[-1,30],[-1,30],[0,2],[0,2])
    SCALEA  = LIST(['NARROW','NARROW'],['NARROW'],['NARROW'],['LOW'],['LOW'],['LOW','LOW'],['LOW','LOW'])
    SCALEB  = LIST(['NARROW','NARROW'],['NARROW'],['NARROW'],['LOW'],['LOW'],['LOW','LOW'],['LOW','LOW'])    
    LOGSA   = LIST([1,1],[1],[1],[0],[0],[1,1],[1,1])
    LOGSB   = LIST([1,1],[1],[1],[0],[0],[1,1],[1,1])
    LOGXY   = LIST([1,1],[1],[1],[0],[0],[1,1],[1,1])
    
    
    WINX = 790
    WINY = 1024
    CTITLE = ' '
    
    YMINOR=1
    FONTSIZE = 8.5    
    SYMSIZE = 0.45
    THICK = 2
    FONT = 0
    YMARGIN = [0.3,0.3]
    XMARGIN = [4,1]
    COLORA = 'ORANGE_RED'
    COLORB = 'DARK_BLUE'    
    COLORXY = !COLOR.(WHERE(TAG_NAMES(!COLOR) EQ COLORB))
        
    FOR DTH=0, N_ELEMENTS(DATASETA)-1 DO BEGIN   
      IF DO_PLOT(DTH) EQ 0 THEN CONTINUE
      PRODA = PRODSA(DTH) & LOGA = LOGSA(DTH) & SSA = SCALEA(DTH) & SENSORA = VALID_SENSORS(DATASETA(DTH))
      PRODB = PRODSB(DTH) & LOGB = LOGSB(DTH) & SSB = SCALEA(DTH) & SENSORB = VALID_SENSORS(DATASETB(DTH))
      LEGA  = LEGENDA(DTH)
      LEGB  = LEGENDB(DTH)    
      TPROD = TPRODS(DTH)
      ANOM  = ANOMS(DTH)
      X  = DATE_2JD(YEARS(DTH)) & AX  = DATE_AXIS(X,/MONTH, /YY_YEAR,STEP_SIZE=4) & AYR = DATE_AXIS(X,/YEAR)    
			XTICKNAMES = REPLICATE(' ',N_ELEMENTS(AX.TICKNAME))     
      FOR STH=0, N_ELEMENTS(SUBAREAS)-1 DO BEGIN
        SUBAREAFILE = !S.SUBAREAS + SUBAREAS(STH) + '.SAV'
        MASK = STRUCT_READ(SUBAREAFILE)
        SCODES = CODES(STH)
        SNAMES = NAMES(STH)
        STITLE = SUBTITLES(STH)
        TSA = FILE_SEARCH(!S.DATASETS + DATASETA(DTH) + SL + MAP + SL + 'TS_SUBAREAS-STATS' + SL + 'A_ANNUAL_M_*MONTH*' + SUBAREAS(STH) + '*.SAVE') & IF TSA[0] EQ '' THEN CONTINUE         
        TSB = FILE_SEARCH(!S.DATASETS + DATASETB(DTH) + SL + MAP + SL + 'TS_SUBAREAS-STATS' + SL + 'A_ANNUAL_M_*MONTH*' + SUBAREAS(STH) + '*.SAVE') & IF TSB[0] EQ '' THEN CONTINUE
        TDA = FILE_SEARCH(!S.DATASETS + DATASETA(DTH) + SL + MAP + SL + 'TS_SUBAREAS-'+['SAVE','STATS'] + SL + 'D-*' + SUBAREAS(STH) + '*.SAVE') & IF TDA[0] EQ '' THEN CONTINUE
        TDB = FILE_SEARCH(!S.DATASETS + DATASETB(DTH) + SL + MAP + SL + 'TS_SUBAREAS-'+['SAVE','STATS'] + SL + 'D-*' + SUBAREAS(STH) + '*.SAVE') & IF TDB[0] EQ '' THEN CONTINUE        
        TWA = FILE_SEARCH(!S.DATASETS + DATASETA(DTH) + SL + MAP + SL + 'TS_SUBAREAS-STATS' + SL + 'W_WEEK-*' + SUBAREAS(STH) + '*.SAVE') & IF TWA[0] EQ '' THEN CONTINUE
        TWB = FILE_SEARCH(!S.DATASETS + DATASETB(DTH) + SL + MAP + SL + 'TS_SUBAREAS-STATS' + SL + 'W_WEEK-*' + SUBAREAS(STH) + '*.SAVE') & IF TWB[0] EQ '' THEN CONTINUE
        DATA  = STRUCT_CONCAT(STRUCT_CONCAT(IDL_RESTORE(TSA),IDL_RESTORE(TDA)),IDL_RESTORE(TWA))
        DATB  = STRUCT_CONCAT(STRUCT_CONCAT(IDL_RESTORE(TSB),IDL_RESTORE(TDB)),IDL_RESTORE(TWB))
        TAGSA = TAG_NAMES(DATA)
        TAGSB = TAG_NAMES(DATB)
        FOR PTH=0, N_ELEMENTS(PRODA)-1 DO BEGIN          
          OKA = WHERE(TAGSA EQ 'MEAN_' + REPLACE(PRODA(PTH),'-','_'))
          OKB = WHERE(TAGSB EQ 'MEAN_' + REPLACE(PRODB(PTH),'-','_'))
          FOR CTH=0, N_ELEMENTS(SCODES)-1 DO BEGIN
            PNGFILE = DIR_PLOTS + DATASETA(DTH) + '_' + DATASETB(DTH) + '-' + MAP + '-' + SUBAREAS(STH) + '-' + SNAMES(CTH) + '-' + PRODA(PTH) + '_' + PRODB(PTH) + '.PNG'
            IF FILE_MAKE([TSA,TSB,TWA,TWB,TDA,TDB],PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
            XSCALE = SD_SCALES([1,250],PROD=VALIDS('PRODS',PRODA),SPECIAL_SCALE=SSA(PTH),/BIN2DATA) & YSCALE = SD_SCALES([1,250],PROD=VALIDS('PRODS',PRODB),SPECIAL_SCALE=SSB(PTH),/BIN2DATA)
            IF KEYWORD_SET(LOGA(PTH)) THEN XRANGE = NICE_RANGE(ALOG10(XSCALE))ELSE XRANGE = NICE_RANGE(XSCALE)                  
            IF KEYWORD_SET(LOGB(PTH)) THEN YRANGE = NICE_RANGE(ALOG10(YSCALE))ELSE YRANGE = NICE_RANGE(YSCALE)
            BINX=(XRANGE[1]-XRANGE[0])/100. & BINY=(YRANGE[1]-YRANGE[0])/100.
            XTITLE = UNITS(TPROD(PTH)) + ' - ' + VALIDS('ALGS',PRODA) + ' Algorithm (' + SENSORA + ')'
            YTITLE = UNITS(TPROD(PTH)) + ' - ' + VALIDS('ALGS',PRODB) + ' Algorithm (' + SENSORB + ')'
            
            DA = DATA[WHERE(DATA.PERIOD_CODE EQ 'D' AND DATA.SUBAREA_CODE EQ SCODES(CTH))] & DAPROD = DA.(OKA) & DB = DATB[WHERE(DATB.PERIOD_CODE EQ 'D' AND DATB.SUBAREA_CODE EQ SCODES(CTH))] & DBPROD = DB.(OKB)
            WA = DATA[WHERE(DATA.PERIOD_CODE EQ 'W' AND DATA.SUBAREA_CODE EQ SCODES(CTH))] & WAPROD = WA.(OKA) & WB = DATB[WHERE(DATB.PERIOD_CODE EQ 'W' AND DATB.SUBAREA_CODE EQ SCODES(CTH))] & WBPROD = WB.(OKB)
            MA = DATA[WHERE(DATA.PERIOD_CODE EQ 'M' AND DATA.SUBAREA_CODE EQ SCODES(CTH))] & MAPROD = MA.(OKA) & MB = DATB[WHERE(DATB.PERIOD_CODE EQ 'M' AND DATB.SUBAREA_CODE EQ SCODES(CTH))] & MBPROD = MB.(OKB)  
            AA = DATA[WHERE(DATA.PERIOD_CODE EQ 'A' AND DATA.SUBAREA_CODE EQ SCODES(CTH))] & AAPROD = AA.(OKA) & AB = DATB[WHERE(DATB.PERIOD_CODE EQ 'A' AND DATB.SUBAREA_CODE EQ SCODES(CTH))] & ABPROD = AB.(OKB)          
            
            CDATA = REPLICATE(STRUCT_2MISSINGS(CREATE_STRUCT('PERIOD','','PERIOD_CODE','','DATA_A',0.0,'DATA_B',0.0)),N_ELEMENTS(DATA))
            CDATA.PERIOD = DATA.PERIOD
            CDATA.PERIOD_CODE = DATA.PERIOD_CODE
            CDATA.DATA_A = DATA.(OKA)
            OK = WHERE_MATCH(CDATA.PERIOD,DATB.PERIOD,COUNT,VALID=VALID,COMPLEMENT=COMPLEMENT)            
            CDATA[OK].DATA_B   = DATB(VALID).(OKB)
            CDATA = CDATA[WHERE(CDATA.DATA_A NE MISSINGS(0.0) AND CDATA.DATA_B NE MISSINGS(0.0))]
            
;              OKXY = WHERE(CDATA.PERIOD_CODE EQ 'M' AND CDATA.DATA_B LT 2.5)
;              RANGE = MINMAX([CDATA(OKXY).DATA_A,CDATA(OKXY).DATA_B])
;              P = PLOTXY_NG(CDATA(OKXY).DATA_A,CDATA(OKXY).DATA_B,DECIMALS=3,LOGLOG=LOGLOG,/QUIET,MODEL='RMA',PARAMS=[2,3,4,8],CHARSIZE=14,PSYM='CIRCLE',$
;                XTITLE='SeaWiFS OC4 ' + UNITS('CHLOR_A',/NO_NAME),YTITLE='MODIS OC3M ' + UNITS('CHLOR_A',/NO_NAME),SYM_COLOR=COLORXY,SYMSIZE=1.5,THICK=THICK,XRANGE=[0.1,2.5],YRANGE=[0.1,2.5],/GRID_NONE,MARGIN=MARGIN,STATS_CHARSIZE=12,$
;                STATS_POS=[0.15,0.7],XTICKNAME=XTICKNAME,YTICKNAME=YTICKNAME,/ONE2ONE,ONE_COLOR=253,ONE_THICK=ONE_THICK,ONE_LINESTYLE=ONE_LINESTYLE,BUFFER=0)
;              P.SAVE, FIX_PATH('D:\PROJECTS\ECOAP\RETREAT_2012\PLOTS\MONTH_XY-' + DATASETA(DTH) + '_' + DATASETB(DTH) + '-' + MAP + '-' + SUBAREAS(STH) + '-' + SNAMES(CTH) + '-' + PRODA(PTH) + '_' + PRODB(PTH) + '.PNG')
;              P.CLOSE                                 	
            
            W = WINDOW(DIMENSIONS=[WINX,WINY])   
            TITLE = STITLE(CTH) + ' ' + TPROD(PTH)  
            TXT = TEXT(0.5,0.97,TITLE,ALIGNMENT=0.5,FONT_SIZE=14)     
            IF N_ELEMENTS(DAPROD) GT 1 AND N_ELEMENTS(DBPROD) GT 1 THEN BEGIN
	            YRANGE = DYRANGE(DTH)
	            PD = PLOT(AX.JD,YRANGE,YTITLE=UNITS(TPROD(PTH),/NO_NAME),FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XMAJOR=AX.TICKS,XMINOR=3,XTICKNAME=XTICKNAMES,XTICKVALUES=AX.TICKV,POSITION=[0.08,0.81,0.96,0.96],/NODATA,/CURRENT)
	            XTICKV = PD.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)          
	            FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGE,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)            
	            P1 = PLOT(PERIOD_2JD(DA.PERIOD),DAPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,LINESTYLE=6,COLOR=COLORA,SYMBOL='CIRCLE',SYM_SIZE=0.45,/SYM_FILLED)
	            P2 = PLOT(PERIOD_2JD(DB.PERIOD),DBPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,LINESTYLE=6,COLOR=COLORB,SYMBOL='CIRCLE',SYM_SIZE=0.45)
	            TD = TEXT(.09,.940,TITLE_PERIODS[0],FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
							TA = TEXT(.09,.925,LEGA(PTH),FONT_COLOR=COLORA,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
							TB = TEXT(.09,.910,LEGB(PTH),FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
					  ENDIF		
						
						IF N_ELEMENTS(WAPROD) GT 1 AND N_ELEMENTS(WBPROD) GT 1 THEN BEGIN
	            YRANGE = WYRANGE(DTH)
	            PW = PLOT(AX.JD,YRANGE,YTITLE=UNITS(TPROD(PTH),/NO_NAME),FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XMAJOR=AX.TICKS,XMINOR=3,XTICKNAME=XTICKNAMES,XTICKVALUES=AX.TICKV,POSITION=[0.08,0.65,0.96,0.80],/NODATA,/CURRENT)
	            XTICKV = PW.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)          
	            FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGE,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)
	            P1 = PLOT(PERIOD_2JD(WA.PERIOD),WAPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORA,SYMBOL='CIRCLE',SYM_SIZE=0.5,/SYM_FILLED)
	            P2 = PLOT(PERIOD_2JD(WB.PERIOD),WBPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='CIRCLE',SYM_SIZE=0.5)
	            TD = TEXT(.09,.780,TITLE_PERIODS[1],FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
	            TA = TEXT(.09,.765,LEGA(PTH),FONT_COLOR=COLORA,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
							TB = TEXT(.09,.750,LEGB(PTH),FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
					  ENDIF		
            
            YRANGE = MYRANGE(DTH)
            PM = PLOT(AX.JD,YRANGE,YTITLE=UNITS(TPROD(PTH),/NO_NAME),FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XMAJOR=AX.TICKS,XMINOR=3,XTICKNAME=XTICKNAMES,XTICKVALUES=AX.TICKV,POSITION=[0.08,0.49,0.96,0.64],/NODATA,/CURRENT)
            XTICKV = PM.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)          
            FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGE,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)
            P1 = PLOT(PERIOD_2JD(MA.PERIOD),MAPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORA,SYMBOL='CIRCLE',SYM_SIZE=0.65,/SYM_FILLED)
            P2 = PLOT(PERIOD_2JD(MB.PERIOD),MBPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='CIRCLE',SYM_SIZE=0.65)
            TD = TEXT(.09,.620,TITLE_PERIODS(2),FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')    
						TA = TEXT(.09,.605,LEGA(PTH),FONT_COLOR=COLORA,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
						TB = TEXT(.09,.590,LEGB(PTH),FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')     
            
            YRANGE = AYRANGE(DTH)
            PA = PLOT(AX.JD,YRANGE,YTITLE=UNITS(TPROD(PTH),/NO_NAME),FONT_SIZE=FONTSIZE,YMINOR=YMINOR,XMAJOR=AX.TICKS,XMINOR=3,XTICKNAME=AX.TICKNAME,XTICKVALUES=AX.TICKV,POSITION=[0.08,0.33,0.96,0.48],/NODATA,/CURRENT)
            XTICKV = PA.XTICKVALUES & OK = WHERE(JD_2MONTH(XTICKV) EQ '01',COUNT)          
            FOR G=1,COUNT-1 DO GR = PLOT([XTICKV(OK(G)),XTICKV(OK(G))],YRANGE,COLOR='GREY',/OVERPLOT,XRANGE=AX.JD,YRANGE=YRANGE)          
            P1 = PLOT(PERIOD_2JD(AA.PERIOD),AAPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORA,SYMBOL='CIRCLE',SYM_SIZE=2.0,/SYM_FILLED)
            P2 = PLOT(PERIOD_2JD(AB.PERIOD),ABPROD,XRANGE=AX.JD,YRANGE=YRANGE,/OVERPLOT,/CURRENT,COLOR=COLORB,SYMBOL='CIRCLE',SYM_SIZE=2.0)                         
						TD = TEXT(.09,.460,TITLE_PERIODS(3),FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
						TA = TEXT(.09,.445,LEGA(PTH),FONT_COLOR=COLORA,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
						TB = TEXT(.09,.430,LEGB(PTH),FONT_COLOR=COLORB,FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD')
           
            
            POSITIONS = LIST([0.095, 0.175,0.2675,0.295],$
                             [0.3175,0.175,0.49,  0.295],$
                             [0.54,  0.175,0.7125,0.295],$
                             [0.7625,0.175,0.935, 0.295])
            XTITLE = UNITS(TPROD(PTH)) + ' - ' + VALIDS('ALGS',PRODA) + '!C(' + SENSORA + ')'
            YTITLE = UNITS(TPROD(PTH)) + ' - ' + VALIDS('ALGS',PRODB) + '!C(' + SENSORB + ')'
            PERIOD_CODES = ['D','W','M','A']            
            FOR LTH=0, N_ELEMENTS(PERIOD_CODES)-1 DO BEGIN              
              _XTITLE = ''
              _YTITLE = ''
              PAL_36
              POSITION = POSITIONS(LTH)
              STATS_POS = [POSITION[0]-0.01 + 0.012, POSITION(3)+0.005 - 0.06]
              IF KEYWORD_SET(LOGXY(PTH)) THEN LOGLOG = 1 ELSE LOGLOG = 0
              OKXY = WHERE(CDATA.PERIOD_CODE EQ PERIOD_CODES(LTH))
              RANGE = MINMAX([CDATA(OKXY).DATA_A,CDATA(OKXY).DATA_B])
              P = PLOTXY_NG(CDATA(OKXY).DATA_A,CDATA(OKXY).DATA_B,DECIMALS=3,LOGLOG=LOGLOG,/QUIET,/CURRENT,MODEL='RMA',PARAMS=[2,3,4,8],POSITION=POSITION,CHARSIZE=FONTSIZE,PSYM='CIRCLE',$
                XTITLE='',YTITLE='',SYM_COLOR=COLORXY,SYMSIZE=SYMSIZE,THICK=THICK,XRANGE=NICE_RANGE(RANGE),YRANGE=NICE_RANGE(RANGE),/GRID_NONE,MARGIN=MARGIN,STATS_CHARSIZE=STATS_CHARSIZE,$
                XTICKNAME=XTICKNAME,YTICKNAME=YTICKNAME,STATS_POS=STATS_POS,/ONE2ONE,ONE_COLOR=253,ONE_THICK=ONE_THICK,ONE_LINESTYLE=ONE_LINESTYLE,BUFFER=BUFFER)
              TD = TEXT(POSITION(2)-0.005,.18,TITLE_PERIODS(LTH),FONT_SIZE=FONTSIZE+2,FONT_STYLE='BOLD',ALIGNMENT=1.0)                   
            ENDFOR 
            TX = TEXT(0.5, 0.16,LEGA(PTH),ALIGNMENT=0.5,FONT_SIZE=FONTSIZE)
            TY = TEXT(0.065,0.23, LEGB(PTH),ALIGNMENT=0.5,FONT_SIZE=FONTSIZE,ORIENTATION=90)
            
            
            PAL='PAL_SW3'          
            POSITIONS = LIST([0.09,0.0,0.27,0.15],$
            	               [0.31,0.0,0.49,0.15],$
            	               [0.53,0.0,0.71,0.15],$
            	               [0.7625,0.025,0.935,0.15])
            ANNA = FILE_SEARCH(!S.DATASETS + DATASETA(DTH) + SL + MAP + SL + 'STATS' + SL + PRODA(PTH) + SL + 'ANNUAL*-'+['MEAN','STATS']+'.SAV*')
            ANNB = FILE_SEARCH(!S.DATASETS + DATASETB(DTH) + SL + MAP + SL + 'STATS' + SL + PRODB(PTH) + SL + 'ANNUAL*-'+['MEAN','STATS']+'.SAV*')
            ADAT = STRUCT_READ(ANNA,STRUCT=ASTRUCT) & IF N_ELEMENTS(TAG_NAMES(ASTRUCT)) EQ 1 THEN ASTRUCT = ASTRUCT.(0)
            BDAT = STRUCT_READ(ANNB,STRUCT=BSTRUCT) & IF N_ELEMENTS(TAG_NAMES(BSTRUCT)) EQ 1 THEN BSTRUCT = BSTRUCT.(0)
            RSTRUCT = MAKE_ANOM_SAVES(FILEA=ANNA,FILEB=ANNB,DIR_OUT=DIR_TEMP,ANOM=ANOM,/RETURN_STRUCT)
            POSITION = POSITIONS[0] & PX = WINX*(POSITION[0]-0.01) & PY = WINY*(POSITION(3)-0.005)
						ABAR = COLOR_BAR_SCALE_NG(PROD=VALIDS('PRODS',PRODA(PTH)),PX=PX,PY=PY,CHARSIZE=FONTSIZE-1,XDIM=5,YDIM=140,PAL=PAL,LAYOUT=LAYOUT,NO_NAME=1,NO_UNIT=1,VERTICAL=1,LEFT=1,FONT='HELVETICA',TITLE=CTITLE)
            APNG = STRUCT_SD_2IMAGE_NG(ASTRUCT,USE_PROD=VALIDS('PRODS',PRODA(PTH)),/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SPECIAL_SCALE,PAL=PAL,IMG_POSITION=POSITION,/CURRENT,BACKGROUND=255)
            POSITION = POSITIONS[1] & PX = WINX*(POSITION[0]-0.01) & PY = WINY*(POSITION(3)-0.005)
            BBAR = COLOR_BAR_SCALE_NG(PROD=VALIDS('PRODS',PRODB(PTH)),PX=PX,PY=PY,CHARSIZE=FONTSIZE-1,XDIM=5,YDIM=140,PAL=PAL,LAYOUT=LAYOUT,NO_NAME=1,NO_UNIT=1,VERTICAL=1,LEFT=1,FONT='HELVETICA',TITLE=CTITLE)
            BPNG = STRUCT_SD_2IMAGE_NG(BSTRUCT,USE_PROD=VALIDS('PRODS',PRODB(PTH)),/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SPECIAL_SCALE,PAL=PAL,IMG_POSITION=POSITION,/CURRENT,BACKGROUND=255)
            POSITION = POSITIONS(2) & PX = WINX*(POSITION[0]-0.01) & PY = WINY*(POSITION(3)-0.005)
            RBAR = COLOR_BAR_SCALE_NG(PROD=RSTRUCT.MATH,PX=PX,PY=PY,CHARSIZE=FONTSIZE-1,XDIM=5,YDIM=140,PAL='PAL_ANOMG',LAYOUT=LAYOUT,NO_NAME=1,NO_UNIT=1,VERTICAL=1,LEFT=1,FONT='HELVETICA',TITLE=CTITLE)
            RPNG = STRUCT_SD_2IMAGE_NG(RSTRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SPECIAL_SCALE,PAL='PAL_ANOMG',IMG_POSITION=POSITION,/CURRENT,BACKGROUND=255)          
            TX = TEXT(0.095,0.14,LEGA(PTH),FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)
            TY = TEXT(0.315,0.14,LEGB(PTH),FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)
            TA = TEXT(0.535,0.14,'Anomaly !C'+ANOM,FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)
            
            POSITION=POSITIONS(3)
            STATS_POS = [POSITION[0] + 0.012, POSITION(3) - 0.06]
            OKXY = WHERE(ADAT NE MISSINGS(0.0) AND BDAT NE MISSINGS(0.0) AND MASK EQ SCODES(CTH))
 
            P = PLOTXY_NG(ADAT(OKXY),BDAT(OKXY),DECIMALS=3,LOGLOG=LOGLOG,/QUIET,/CURRENT,MODEL='RMA',PARAMS=[2,3,4,8],POSITION=POSITION,CHARSIZE=FONTSIZE,PSYM='CIRCLE',$
                XTITLE='',YTITLE='',SYM_COLOR=COLORXY,SYMSIZE=SYMSIZE,THICK=THICK,XRANGE=NICE_RANGE(XSCALE),YRANGE=NICE_RANGE(YSCALE),/GRID_NONE,MARGIN=MARGIN,STATS_CHARSIZE=STATS_CHARSIZE,$
                XTICKNAME=XTICKNAME,YTICKNAME=YTICKNAME,STATS_POS=STATS_POS,/ONE2ONE,ONE_COLOR=253,ONE_THICK=ONE_THICK,ONE_LINESTYLE=ONE_LINESTYLE)     						
            GONE, ADAT
            GONE, BDAT
            TX = TEXT(0.85,0.002,LEGA(PTH),ALIGNMENT=0.5,FONT_SIZE=FONTSIZE)
            TY = TEXT(0.73,0.085,LEGB(PTH),ALIGNMENT=0.5,FONT_SIZE=FONTSIZE,ORIENTATION=90)
            
            P, 'Writing ' + PNGFILE
            W.SAVE,PNGFILE,RESOLUTION=600
            W.CLOSE                     
          ENDFOR 
        ENDFOR
      ENDFOR
    ENDFOR      
    STOP
        
  ENDIF ; DO_COMPARE_PLOTS
  
; *******************************************************
  IF DO_MONTH_COMPARE GE 1 THEN BEGIN        
; *******************************************************  
    OVERWRITE = DO_MONTH_COMPARE GE 2
    
    MAP = 'NEC'
    PAL='PAL_BR'          
    FONTSIZE = 8.5    
    PERIODS = ['A_2010','M_2010'] ; ['D','W','M','A']
    TITLE_PERIODS = '2010' ;['Daily', 'Weekly', 'Monthly', 'Annual']
    
    DO_PLOT  = [0,                0,                0,             0,             0,            0,                       1]
    DATASETA = ['OC-SEAWIFS-MLAC','OC-SEAWIFS-MLAC','OC-MODIS-LAC','SST-AVHRR-4','SST-PAT-4','PP-SEAWIFS_PAN-PAT-MLAC','PP-MODIS_PAN-AVHRR-LAC']
    DATASETB = ['OC-MODIS-LAC',   'OC-SEAWIFS-MLAC','OC-MODIS-LAC','SST-MODIS-4','SST-MUR-1KM','PP-SEP-1KM',             'PP-AQP-1KM']
    YEARS    = LIST([1997,2015],  [1998,2007],      [2003,2015],   [1985,2015],  [2003,2015],   [1998,2007],             [2002,2015])
    ANOMS    = ['RATIO',          'RATIO',          'RATIO',       'DIF',        'DIF',        'RATIO',                  'RATIO']
    PRODSA  = LIST(['CHLOR_A-OC4', 'CHLOR_A-PAN'],['CHLOR_A-OC4'],['CHLOR_A-OC3M'],['SST'],['SST-N_11UM'],['PPD-VGPM2','PPD-OPAL'],['PPD-VGPM2'])
    PRODSB  = LIST(['CHLOR_A-OC3M','CHLOR_A-PAN'],['CHLOR_A-PAN'],['CHLOR_A-PAN'], ['SST-N_11UM'],['SST'],['PPD-VGPM2','PPD-OPAL'],['PPD-VGPM2'])
    TPRODS  = LIST(['Chlorophyll','Chlorophyll'] ,['Chlorophyll'],['Chlorophyll'],['Sea Surface Temperature'],['Sea Surface Temperature'],['Primary Production','Primary Production'],['Primary Production','Primary Production'])
    LEGENDA = LIST(['SeaWiFS OC4','SeaWiFS PAN'] ,['SeaWiFS OC4'],['MODIS OC3M'],['SST AVHRR'],['SST PAT'],['Productivity VGPM2 - OLD','Productivity OPAL - OLD'],['Productivity VGPM2 - PAT','Productivity OPAL - PAT'])
    LEGENDB = LIST(['MODIS OC3M','MODIS PAN']    ,['SeaWiFS PAN'],['MODIS PAN'],['SST MODIS'],['SST MUR'],  ['Productivity VGPM2 - NEW','Productivity OPAL - NEW'],['Productivity VGPM2 - MUR','Productivity OPAL - MUR'])
    DYRANGE = LIST([0,10],   [0,10],   [0,10],   [-1,30],[-1,30],[0,4],[0,4])
    WYRANGE = LIST([0,3],    [0,3],    [0,3],    [-1,30],[-1,30],[0,4],[0,4])
    MYRANGE = LIST([0,3],    [0,3],    [0,3],    [-1,30],[-1,30],[0,4],[0,4])
    AYRANGE = LIST([0.4,1.6],[0.4,1.6],[0.4,1.6],[-1,30],[-1,30],[0,2],[0,2])
    SCALEA  = LIST(['NARROW','NARROW'],['NARROW'],['NARROW'],['LOW'],['LOW'],['LOW','LOW'],['LOW','LOW'])
    SCALEB  = LIST(['NARROW','NARROW'],['NARROW'],['NARROW'],['LOW'],['LOW'],['LOW','LOW'],['LOW','LOW'])
    SCALER  = LIST(['',''],            [''],      [''],      ['4'],  ['4'],  ['', ''],     ['',   ''])
    LOGSA   = LIST([1,1],[1],[1],[0],[0],[1,1],[1,1])
    LOGSB   = LIST([1,1],[1],[1],[0],[0],[1,1],[1,1])
    LOGXY   = LIST([1,1],[1],[1],[0],[0],[1,1],[1,1])
    
    FOR DTH=0, N_ELEMENTS(DATASETA)-1 DO BEGIN
      IF DO_PLOT(DTH) EQ 0 THEN CONTINUE
	    PRODA = PRODSA(DTH) & LOGA = LOGSA(DTH) & SSA = SCALEA(DTH) & SENSORA = VALID_SENSORS(DATASETA(DTH)) & LEGA  = LEGENDA(DTH)
	    PRODB = PRODSB(DTH) & LOGB = LOGSB(DTH) & SSB = SCALEA(DTH) & SENSORB = VALID_SENSORS(DATASETB(DTH)) & LEGB  = LEGENDB(DTH)
	    TPROD = TPRODS(DTH)
	    ANOM  = ANOMS(DTH)
	    SSR   = SCALER(DTH)
	    FOR RTH=0, N_ELEMENTS(PERIODS)-1 DO BEGIN
		    FOR PTH=0, N_ELEMENTS(PRODA)-1 DO BEGIN          
	        POSITION = LIST([0,0,512,512],$
	         	              [512,0,1024,512],$
	         	              [1024,0,1536,512])
	        AFILES = FILE_SEARCH(!S.DATASETS + DATASETA(DTH) + SL + MAP + SL + 'STATS' + SL + PRODA(PTH) + SL + PERIODS(RTH)+'*-' + ['MEAN','STATS']+'.SAV*')
	        BFILES = FILE_SEARCH(!S.DATASETS + DATASETB(DTH) + SL + MAP + SL + 'STATS' + SL + PRODB(PTH) + SL + PERIODS(RTH)+'*-' + ['MEAN','STATS']+'.SAV*')
	        FA = PARSE_IT(AFILES) & AFILES = AFILES[SORT(FA.MONTH_START)] & FA = FA[SORT(FA.MONTH_START)]  
	        FB = PARSE_IT(BFILES)
	        FOR NTH=0, N_ELEMENTS(AFILES)-1 DO BEGIN
	          TITLE = FA[NTH].PERIOD 
	          PNGFILE = DIR_PLOTS + TITLE + '-' + DATASETA(DTH) + '_' + DATASETB(DTH) + '-' + MAP + '-' + PRODA(PTH) + '_' + PRODB(PTH) + '.PNG'
	          OK = WHERE(FB.PERIOD_CODE EQ FA[NTH].PERIOD_CODE AND FB.MONTH_START EQ FA[NTH].MONTH_START,COUNT)
	          IF COUNT EQ 0 THEN CONTINUE
	          IF FILE_MAKE([AFILES[NTH],BFILES[OK]],PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE

	          W = WINDOW(DIMENSIONS=[1536,512])
	          TXT = TEXT(0.5,0.97,TITLE,ALIGNMENT=0.5,FONT_SIZE=14)

		        ADAT = STRUCT_READ(AFILES[NTH],STRUCT=ASTRUCT) & IF N_ELEMENTS(TAG_NAMES(ASTRUCT)) EQ 1 THEN ASTRUCT = ASTRUCT.(0)
		        BDAT = STRUCT_READ(BFILES[OK], STRUCT=BSTRUCT) & IF N_ELEMENTS(TAG_NAMES(BSTRUCT)) EQ 1 THEN BSTRUCT = BSTRUCT.(0)
            RSTRUCT = MAKE_ANOM_SAVES(FILEA=AFILES[NTH],FILEB=BFILES[OK],DIR_OUT=DIR_TEMP,ANOM=ANOM,/RETURN_STRUCT)
            
            XDIM = 220 & YDIM = 10
            BARFONT = 10
            POS = POSITION[0] & PX = POS[0]+15 & PY = POS(3)-60
						APNG = STRUCT_SD_2IMAGE_NG(ASTRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SSA(PTH),PAL=PAL,USE_PROD=VALIDS('PRODS',PRODA(PTH)),IMG_POSITION=POS,/DEVICE,/CURRENT,BACKGROUND=255)
						ABAR = COLOR_BAR_SCALE_NG(PROD=PRODA(PTH),SPECIAL_SCALE=SSA(PTH),PX=PX,PY=PY,CHARSIZE=10,YDIM=YDIM,XDIM=XDIM,PAL=PAL,FONT='HELVETICA',TITLE=LEGA(PTH))
            
            POS = POSITION[1] & PX = POS[0]+15 & PY = POS(3)-60
            BPNG = STRUCT_SD_2IMAGE_NG(BSTRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SSB(PTH),PAL=PAL,USE_PROD=VALIDS('PRODS',PRODB(PTH)),IMG_POSITION=POS,/DEVICE,/CURRENT,BACKGROUND=255)
            BBAR = COLOR_BAR_SCALE_NG(PROD=PRODB(PTH),SPECIAL_SCALE=SSB(PTH),PX=PX,PY=PY,CHARSIZE=10,YDIM=YDIM,XDIM=XDIM,PAL=PAL,FONT='HELVETICA',TITLE=LEGB(PTH))
            
            POS = POSITION(2) & PX = POS[0]+15 & PY = POS(3)-60
            RPNG = STRUCT_SD_2IMAGE_NG(RSTRUCT,/ADD_LAND,/ADD_COAST,SPECIAL_SCALE=SSR(PTH),PAL='PAL_ANOMG',IMG_POSITION=POS,/DEVICE,/CURRENT,BACKGROUND=255)     
            RBAR = COLOR_BAR_SCALE_NG(PROD=ANOM,SPECIAL_SCALE=SSR(PTH),PX=PX,PY=PY,CHARSIZE=10,YDIM=YDIM,XDIM=XDIM,PAL='PAL_ANOMG',FONT='HELVETICA',TITLE=LEGA(PTH)+' - '+LEGB(PTH))
;            TX = TEXT(0.03,0.95,LEGA(PTH),FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)
;            TY = TEXT(0.36,0.95,LEGB(PTH),FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)
;            TA = TEXT(0.69,0.95,'Anomaly !C'+ANOM,FONT_SIZE=FONTSIZE+1,VERTICAL_ALIGNMENT=1.0)
            P, 'Writing ' + PNGFILE
            W.SAVE,PNGFILE,RESOLUTION=600
            WAIT, 2
            W.CLOSE
          ENDFOR 
        ENDFOR
      ENDFOR
    ENDFOR
    STOP
  ENDIF ; DO_MONTH_COMPARE

; *******************************************************
  IF DO_PHYTO_PLOTS GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_PHYTO_PLOTS GE 2
    
    SL = DELIMITER(/PATH)
    
    DATE_RANGE = DATE_2JD(['19980101','20071231'])
    SUBAREAS = ['ECOREGIONS_FULL_NO_ESTUARIES','ESTUARY_SHELF_LME']
    PDATASET = ['PP-SEAWIFS_PAN-AVHRR-MLAC']
    CDATASET = ['OC-SEAWIFS-MLAC']
    SUBPER   = ['A_ANNUAL_M_MANNUAL_MONTH']
    PERIODS  = ['M_2007','MONTH','A_','M_'+NUM2STR(INDGEN(10)+1998)]
    OUTPER   = ['M_2007','MONTH','A','M_'+NUM2STR(INDGEN(10)+1998)]
    DATES    = ['2007','Climatology (1998-2007)',NUM2STR(INDGEN(10)+1998),'Annual Mean (1998-2007)']
    DOPER    = [1,0,0,0,0,0,0,0,0,0,0,0,0]
    PERSTR   = [6,5,2,REPLICATE(6,N_ELEMENTS(PERIODS)-2)]
    TITLES   = ['NE Shelf','Mid-Atlantic Bight','Georges Bank','Gulf of Maine','Scotian Shelf']
    CODES    = [32,7,5,6,8]
    NAMES    = ['NESLME','MAB','GB','GOM','SS']
    
        
    PY = [0,100]        
    WIDTH = 6
    
    PFILES = [] & CFILES = []
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO PFILES = [PFILES,FILE_SEARCH(!S.DATASETS+PDATASET+SL+'NEC'+SL+'TS_SUBAREAS'+SL+SUBPER+'*MASK_SUBAREA-NEC-PXY_1024_1024-'+SUBAREAS(S)+'*-MULTI_PRODS.SAVE')]
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO CFILES = [CFILES,FILE_SEARCH(!S.DATASETS+CDATASET+SL+'NEC'+SL+'TS_SUBAREAS'+SL+SUBPER+'*MASK_SUBAREA-NEC-PXY_1024_1024-'+SUBAREAS(S)+'*-MULTI_PRODS.SAVE')]
    
    PDATA = IDL_RESTORE(PFILES[0])
    CDATA = IDL_RESTORE(CFILES[0])      
    FOR S=1, N_ELEMENTS(PFILES)-1 DO PDATA = STRUCT_CONCAT(PDATA,IDL_RESTORE(PFILES(S)))
    FOR S=1, N_ELEMENTS(CFILES)-1 DO CDATA = STRUCT_CONCAT(CDATA,IDL_RESTORE(CFILES(S)))
    COMBO = STRUCT_JOIN(CDATA, PDATA, TAGNAMES=['PERIOD','PERIOD_CODE','MASK','SUBAREA_CODE','SUBAREA_NAME','N_SUBAREA'])    
    TAGS = TAG_NAMES(COMBO)
    CPOSC = WHERE(TAGS EQ 'MEAN_CHLOR_A_PAN')
    DPOSC = WHERE(TAGS EQ 'MEAN_DIATOM_PAN')
    TPOSC = WHERE(TAGS EQ 'MEAN_TCHL_A_PAN')
    PPOSV = WHERE(TAGS EQ 'MEAN_PPD_VGPM2')
    PPOSO = WHERE(TAGS EQ 'MEAN_PPD_OPAL') 
    DPOSV = WHERE(TAGS EQ 'MEAN_MICROPP_MARMAP_PAN_VGPM2')
    DPOSO = WHERE(TAGS EQ 'MEAN_MICROPP_MARMAP_PAN_OPAL')
    
    FOR PTH =0, N_ELEMENTS(PERIODS)-1 DO BEGIN  
      
      MDATA = COMBO[WHERE(STRMID(COMBO.PERIOD,0,PERSTR(PTH)) EQ PERIODS(PTH))]
      IF PERIODS(PTH) EQ 'A_' THEN MDATA = MDATA[WHERE(PERIOD_2JD(MDATA.PERIOD) GE DATE_RANGE[0] AND PERIOD_2JD(MDATA.PERIOD) LE DATE_RANGE[1])]
      AX = DATE_AXIS([20200101,20201231],/MONTH,/MID,/FYEAR)
      XRANGE = DATE_2JD([20200101,20201231])
      
       IF PERIODS(PTH) EQ 'A_' THEN BEGIN
        AX = DATE_AXIS([19980101,20070101],/YEAR,/YY)
        XRANGE = DATE_2JD([19980101,20070107])
      ENDIF
      
      ;W = WINDOW(DIMENSIONS=[1750,1300])      
      COUNTER = 1
      YPOS  = [0.95,0.77,0.59,0.41,0.23]
      YDIF  = 0.14
      XDIF  = 0.18  
      XPOS0 = 0.04
      XPOS1 = 0.285 
      XPOS2 = 0.53
      XPOS3 = 0.775
      FOR N=3, N_ELEMENTS(CODES)-1 DO BEGIN
       ; LAYOUT = [3,5,COUNTER]        
        PNGFILE = FIX_PATH(DIR_PLOTS + OUTPER(PTH)+'-NESLME-SIZE_CLASS_PERCENTAGES-WITH_PHYTO-' + NAMES(N) + '.PNG')
        IF GET_MTIME(PNGFILE) GT MIN(GET_MTIME([PFILES,CFILES])) AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
       
        ADATA = MDATA[WHERE(MDATA.SUBAREA_CODE EQ CODES(N) AND MDATA.(WHERE(TAGS EQ 'FIRST_NAME_CHLOR_A_PAN')) NE '')] & ADATA = ADATA[SORT(DATE_2DOY(PERIOD_2DATE(ADATA.PERIOD)))]
        VDATA = MDATA[WHERE(MDATA.SUBAREA_CODE EQ CODES(N) AND MDATA.(WHERE(TAGS EQ 'FIRST_NAME_PPD_VGPM2')) NE '')]   & VDATA = VDATA[SORT(DATE_2DOY(PERIOD_2DATE(VDATA.PERIOD)))]
        ODATA = MDATA[WHERE(MDATA.SUBAREA_CODE EQ CODES(N) AND MDATA.(WHERE(TAGS EQ 'FIRST_NAME_PPD_OPAL')) NE '')]    & ODATA = ODATA[SORT(DATE_2DOY(PERIOD_2DATE(ODATA.PERIOD)))]
        
        XDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(ADATA.PERIOD))),14,/DAY)
        IF PERIODS(PTH) EQ 'A_' THEN XDATES = PERIOD_2JD(ADATA.PERIOD)
        
        DGROUPS = ['DIATOM', 'DINOFLAGELLATE','BROWN',            'GREEN',            'CRYPTOPHYTE','PICO']
        DCOLORS = ['CRIMSON','BLUE',   'ORANGE','MEDIUM_AQUAMARINE','YELLOW',    'AQUA']
        LGD     = ['Diatoms','Dinoflagellates','Brown Algae','Green Algae','Cryptophytes','Picoplankton']  
        CGROUPS = ['MICRO','NANO','PICO']
        CCOLORS = ['YELLOW','MEDIUM_BLUE','ORANGE_RED']
        PGROUPS = ['MICRO','NANOPICO']
        PCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']
        MARGIN  = [0.12,0.12,0.12,0.17]
        FONT_SIZE = 12
        IF PERIODS(PTH) EQ 'A_' THEN CYRANGE = [0.2,0.8] ELSE CYRANGE = [0,2.0] 
        IF PERIODS(PTH) EQ 'A_' THEN PYRANGE = [0.0,0.8] ELSE PYRANGE = [0,1.2]
        
        BOTTOM = 0
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))    
        TOT = ADATA.(CPOSC) 
        DIATOM = ADATA.(DPOSC)        
        TCHLA = ADATA.MEAN_DIATOM_PAN+ADATA.MEAN_DINOFLAGELLATE_PAN+ADATA.MEAN_BROWN_ALGAE_PAN+ADATA.MEAN_GREEN_ALGAE_PAN+ADATA.MEAN_CRYPTOPHYTE_PAN+ADATA.MEAN_PICO_PAN
        FOR NTH = 0L, N_ELEMENTS(DGROUPS)-1 DO BEGIN
          GROUP = DGROUPS[NTH]
          POS = WHERE(TAGS EQ 'MEAN_' + GROUP + '_PERCENTAGE_PAN')
          PER = ADATA.(POS)      
          OK = WHERE(PER EQ MISSINGS(PER),COUNT) & IF COUNT GE 1 THEN PER[OK] = 0.0
          IF NTH EQ 0 THEN BEGIN              
            IF N EQ 0 THEN TITLE = 'Chlorophyll !8a!N!X!C'+TITLES(N) ELSE TITLE = TITLES(N)
         ;   POSITION = [XPOS0,YPOS(N)-YDIF,XPOS0+XDIF,YPOS(N)]
            P = PLOT(XDATES,REPLICATE(0,N_ELEMENTS(ADATA)),YTITLE='Composition (%)',XTICKVALUE=AX.TICKV,FONT_SIZE=FONT_SIZE,TITLE=TITLE,POSITION=POSITION,$
              XMINOR=0,YRANGE=[0,100],AXIS_STYLE=1,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT)
            BOT = REPLICATE(0, N_ELEMENTS(ADATA))
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=DCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=DCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          BOTTOM = PER1
        ENDFOR  
        P2 = PLOT(XDATES,TOT,COLOR='BLACK',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=0,LAYOUT=LAYOUT,POSITION=POSITION)  
        PD = PLOT(XDATES,DIATOM,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=2,LAYOUT=LAYOUT,POSITION=POSITION)    
        PT = PLOT(XDATES,TCHLA,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=0,LAYOUT=LAYOUT,POSITION=POSITION)
        A1 = AXIS('Y',TARGET=P2,LOCATION=[MAX(P.XRANGE),0,0],TEXTPOS=1,MINOR=4,TICKFONT_SIZE=FONT_SIZE,TEXT_COLOR='BLACK',TICKDIR=1,TITLE='Chlorophyll !8a!N!X '+UNITS('CHLOR_A',/NO_NAME),TICKLEN=0.05,YRANGE=CYRANGE) ;AXIS,YAXIS=1,YRANGE=[0,300],/SAVE, YTITLE=YTITLE2,CHARSIZE=CHARSIZE,COLOR=0
        A2 = AXIS('X',TARGET=P,LOCATION=[MIN(P.XRANGE),100,0],MAJOR=0,MINOR=0,COLOR='BLACK')
        D = TEXT(0.5,0.96,DATES(PTH),FONT_SIZE=14,ALIGNMENT=0.5)
        
        XPOS = [0.15,0.41,0.69,0.15,0.41,0.69]
        YPOS = 0.065 & YPOS2 = 0.035
        FOR SY=0, 2 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=DCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=FONT_SIZE,LABEL_POSITION='R',/NORMAL)            
        FOR SY=3, N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS(SY),YPOS2,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=DCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=FONT_SIZE,LABEL_POSITION='R',/NORMAL)
                
        P.SAVE, PNGFILE, RESOLUTION=300, BIT_DEPTH=2      
        P.CLOSE 
         
        
        BOTTOM = 0
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))    
        TOT = ADATA.(CPOSC) 
        FOR NTH = 0L, N_ELEMENTS(CGROUPS)-1 DO BEGIN
          GROUP = CGROUPS[NTH]
          POS = WHERE(TAGS EQ 'MEAN_' + GROUP + '_PERCENTAGE_PAN')
          PER = ADATA.(POS)      
          OK = WHERE(PER EQ MISSINGS(PER),COUNT) & IF COUNT GE 1 THEN PER[OK] = 0.0
          IF NTH EQ 0 THEN BEGIN              
            IF N EQ 0 THEN TITLE = 'Chlorophyll !8a!N!X!C'+TITLES(N) ELSE TITLE = TITLES(N)
            POSITION = [XPOS1,YPOS(N)-YDIF,XPOS1+XDIF,YPOS(N)]
            P = PLOT(XDATES,REPLICATE(0,N_ELEMENTS(ADATA)),YTITLE='Composition (%)',XTICKVALUE=AX.TICKV,FONT_SIZE=11,TITLE=TITLE,POSITION=POSITION,$
              XMINOR=0,YRANGE=[0,100],AXIS_STYLE=1,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
            BOT = REPLICATE(0, N_ELEMENTS(ADATA))
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=CCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=CCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          BOTTOM = PER1
        ENDFOR  
        P2 = PLOT(XDATES,TOT,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=0,LAYOUT=LAYOUT,POSITION=POSITION)      
        PD = PLOT(XDATES,DIATOM,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=2,LAYOUT=LAYOUT,POSITION=POSITION)
        A1 = AXIS('Y',TARGET=P2,LOCATION=[MAX(P.XRANGE),0,0],TEXTPOS=1,MINOR=2,TICKFONT_SIZE=11,TEXT_COLOR='BLACK',TICKDIR=1,TITLE=UNITS('CHLOR_A',/NO_NAME),TICKLEN=0.05,YRANGE=CYRANGE) ;AXIS,YAXIS=1,YRANGE=[0,300],/SAVE, YTITLE=YTITLE2,CHARSIZE=CHARSIZE,COLOR=0
        A2 = AXIS('X',TARGET=P,LOCATION=[MIN(P.XRANGE),100,0],MAJOR=0,MINOR=0,COLOR='BLACK')
              
        XDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(VDATA.PERIOD))),14,/DAY)        
        IF PERIODS(PTH) EQ 'A_' THEN XDATES = PERIOD_2JD(VDATA.PERIOD)
        BOTTOM = 0
        COUNTER = COUNTER + 1  
        LAYOUT = [3,5,COUNTER]
        TOT = VDATA.(PPOSV)   
        DIATOM = VDATA.(DPOSV)
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))    
        FOR NTH = 0L, N_ELEMENTS(PGROUPS)-1 DO BEGIN
          GROUP = PGROUPS[NTH]
          POS = WHERE(TAGS EQ 'MEAN_PPD_' + GROUP + '_PERCENTAGE_MARMAP_PAN_VGPM2')
          PER = VDATA.(POS)      
          OK = WHERE(PER EQ MISSINGS(PER),COUNT) & IF COUNT GE 1 THEN PER[OK] = 0.0
          IF NTH EQ 0 THEN BEGIN                     
            IF N EQ 0 THEN TITLE = 'Primary Production (VGPM-Eppley)!C'+TITLES(N) ELSE TITLE = TITLES(N)
            POSITION = [XPOS2,YPOS(N)-YDIF,XPOS2+XDIF,YPOS(N)]
            P = PLOT(XDATES,REPLICATE(0,N_ELEMENTS(VDATA)),YTITLE='Composition (%)',XTICKVALUE=AX.TICKV,FONT_SIZE=11,TITLE=TITLE,POSITION=POSITION,$
              XMINOR=0,YRANGE=[0,100],AXIS_STYLE=1,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
            BOT = REPLICATE(0, N_ELEMENTS(VDATA))
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=PCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=PCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          BOTTOM = PER1
        ENDFOR  
        P2 = PLOT(XDATES,TOT,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=0,LAYOUT=LAYOUT,POSITION=POSITION,YRANGE=PYRANGE)      
        PD = PLOT(XDATES,DIATOM,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=PYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=2,LAYOUT=LAYOUT,POSITION=POSITION)
        A1 = AXIS('Y',TARGET=P2,LOCATION=[MAX(P.XRANGE),0,0],TEXTPOS=1,MINOR=2,TICKFONT_SIZE=11,TEXT_COLOR='BLACK',TICKDIR=1,TITLE=UNITS('PPD',/NO_NAME),TICKLEN=0.05,YRANGE=PYRANGE) ;AXIS,YAXIS=1,YRANGE=[0,300],/SAVE, YTITLE=YTITLE2,CHARSIZE=CHARSIZE,COLOR=0
        A2 = AXIS('X',TARGET=P,LOCATION=[MIN(P.XRANGE),100,0],MAJOR=0,MINOR=0,COLOR='BLACK')
         
        COUNTER = COUNTER + 1  
        LAYOUT = [3,5,COUNTER]
        XDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(ODATA.PERIOD))),14,/DAY)
        IF PERIODS(PTH) EQ 'A_' THEN XDATES = PERIOD_2JD(ODATA.PERIOD)
        BOTTOM = 0
        TOT = ODATA.(PPOSV)   
        DIATOM = ODATA.(DPOSV)
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))    
        FOR NTH = 0L, N_ELEMENTS(PGROUPS)-1 DO BEGIN
          GROUP = PGROUPS[NTH]
          POS = WHERE(TAGS EQ 'MEAN_PPD_' + GROUP + '_PERCENTAGE_MARMAP_PAN_VGPM2')
          PER = ODATA.(POS)      
          OK = WHERE(PER EQ MISSINGS(PER),COUNT) & IF COUNT GE 1 THEN PER[OK] = 0.0
          IF NTH EQ 0 THEN BEGIN             
            IF N EQ 0 THEN TITLE = 'Primary Production (OPAL)!C'+TITLES(N) ELSE TITLE = TITLES(N)
            POSITION = [XPOS3,YPOS(N)-YDIF,XPOS3+XDIF,YPOS(N)]
            P = BARPLOT(XDATES,REPLICATE(0,N_ELEMENTS(ODATA)),YTITLE='Composition (%)',XTICKVALUE=AX.TICKV,FONT_SIZE=11,TITLE=TITLE,POSITION=POSITION,$
              XMINOR=0,YRANGE=[0,100],AXIS_STYLE=1,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
            BOT = REPLICATE(0, N_ELEMENTS(ODATA))
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=PCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=PCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          BOTTOM = PER1
        ENDFOR          
      ENDFOR
      
      
      LGD = ['Microplankton','Nanoplankton','Picoplankton']  
      LGCOLORS = ['YELLOW','MEDIUM_BLUE','ORANGE_RED']      
      XPOS = [0.3,0.39,0.345]
      FOR SY=0, N_ELEMENTS(LGD)-2 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      S = SYMBOL(XPOS(2),YPOS2,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(2),/SYM_FILLED,LABEL_STRING=LGD(2),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      
      LGD = ['Microplankton','Nano+Picoplankton']  
      LGCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']      
      XPOS = [0.535,0.615]
      FOR SY=0, N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      XPOS = [0.78,0.860]
      FOR SY=0,N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      
        
;      LGD = ['Microplankton','Nanoplankton','Picoplankton','Nano+Picoplankton']  
;      LGCOLORS = ['YELLOW','MEDIUM_BLUE','ORANGE_RED','MEDIUM_AQUAMARINE']      
;      XPOS = [0.31,0.41,0.51,0.61]
;      YPOS = 0.03
;      FOR SY=0, N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      
      W.SAVE, PNGFILE, RESOLUTION=300, BIT_DEPTH=2      
      W.CLOSE 
    ENDFOR


  ENDIF ; DO_PHYTO_PLOTS

; *******************************************************
  IF DO_PHYTO_COMPOSITION_PLOTS GE 1 THEN BEGIN
; *******************************************************
    OVERWRITE = DO_PHYTO_COMPOSITION_PLOTS GE 2
    
    SL = DELIMITER(/PATH)
    
    DATE_RANGE = DATE_2JD(['19980101','20071231'])
    SUBAREAS = ['ECOREGIONS_FULL_NO_ESTUARIES','ESTUARY_SHELF_LME']
    PDATASET = ['PP-SEAWIFS_PAN-AVHRR-MLAC']
    CDATASET = ['OC-SEAWIFS-MLAC']
    SUBPER   = ['A_ANNUAL_M_MANNUAL_MONTH']
    PERIODS  = ['MONTH','M_'+NUM2STR(INDGEN(10)+1998),'A_']
    OUTPER   = ['MONTH','M_'+NUM2STR(INDGEN(10)+1998),'A']
    PERSTR   = [5,REPLICATE(6,N_ELEMENTS(PERIODS)-2),2]
    TITLES   = ['NE Shelf','Mid-Atlantic Bight','Georges Bank','Gulf of Maine','Scotian Shelf']
    CODES    = [32,7,5,6,8]
    DATES    = ['Climatology (1998-2007)',NUM2STR(INDGEN(10)+1998),'Annual Mean (1998-2007)']
        
    PY = [0,100]        
    WIDTH = 6
    
    PFILES = [] & CFILES = []
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO PFILES = [PFILES,FILE_SEARCH(!S.DATASETS+PDATASET+SL+'NEC'+SL+'TS_SUBAREAS'+SL+SUBPER+'*MASK_SUBAREA-NEC-PXY_1024_1024-'+SUBAREAS(S)+'*-MULTI_PRODS.SAVE')]
    FOR S=0, N_ELEMENTS(SUBAREAS)-1 DO CFILES = [CFILES,FILE_SEARCH(!S.DATASETS+CDATASET+SL+'NEC'+SL+'TS_SUBAREAS'+SL+SUBPER+'*MASK_SUBAREA-NEC-PXY_1024_1024-'+SUBAREAS(S)+'*-MULTI_PRODS.SAVE')]
    
    PDATA = IDL_RESTORE(PFILES[0])
    CDATA = IDL_RESTORE(CFILES[0])      
    FOR S=1, N_ELEMENTS(PFILES)-1 DO PDATA = STRUCT_CONCAT(PDATA,IDL_RESTORE(PFILES(S)))
    FOR S=1, N_ELEMENTS(CFILES)-1 DO CDATA = STRUCT_CONCAT(CDATA,IDL_RESTORE(CFILES(S)))
    COMBO = STRUCT_JOIN(CDATA, PDATA, TAGNAMES=['PERIOD','PERIOD_CODE','MASK','SUBAREA_CODE','SUBAREA_NAME','N_SUBAREA'])    
    TAGS = TAG_NAMES(COMBO)
    CPOSC = WHERE(TAGS EQ 'MEAN_CHLOR_A_PAN')
    DPOSC = WHERE(TAGS EQ 'MEAN_DIATOM_PAN')
    PPOSV = WHERE(TAGS EQ 'MEAN_PPD_VGPM2')
    PPOSO = WHERE(TAGS EQ 'MEAN_PPD_OPAL') 
    DPOSV = WHERE(TAGS EQ 'MEAN_MICROPP_MARMAP_PAN_VGPM2')
    DPOSO = WHERE(TAGS EQ 'MEAN_MICROPP_MARMAP_PAN_OPAL')
    
    FOR PTH =0, N_ELEMENTS(PERIODS)-1 DO BEGIN  
      PNGFILE = FIX_PATH(DIR_PLOTS + OUTPER(PTH)+'-NESLME-SIZE_CLASS_PERCENTAGES-WITH_PHYTO.PNG')
      IF GET_MTIME(PNGFILE) GT MIN(GET_MTIME([PFILES,CFILES])) AND NOT KEYWORD_SET(OVERWRITE) THEN CONTINUE
      MDATA = COMBO[WHERE(STRMID(COMBO.PERIOD,0,PERSTR(PTH)) EQ PERIODS(PTH))]
      IF PERIODS(PTH) EQ 'A_' THEN MDATA = MDATA[WHERE(PERIOD_2JD(MDATA.PERIOD) GE DATE_RANGE[0] AND PERIOD_2JD(MDATA.PERIOD) LE DATE_RANGE[1])]
      AX = DATE_AXIS([20200101,20201231],/MONTH,/MID,/FYEAR)
      XRANGE = DATE_2JD([20200101,20201231])
      
      IF PERIODS(PTH) EQ 'A_' THEN BEGIN
        AX = DATE_AXIS([19980101,20070101],/YEAR,/YY)
        XRANGE = DATE_2JD([19980101,20070107])
      ENDIF
      
      W = WINDOW(DIMENSIONS=[1750,1300])
      D = TEXT(0.5,0.98,DATES(PTH),FONT_SIZE=14,ALIGNMENT=0.5)
      COUNTER = 1
      YPOS  = [0.95,0.77,0.59,0.41,0.23]
      YDIF  = 0.14
      XDIF  = 0.18  
      XPOS0 = 0.04
      XPOS1 = 0.285 
      XPOS2 = 0.53
      XPOS3 = 0.775
      FOR N=0, N_ELEMENTS(CODES)-1 DO BEGIN
        LAYOUT = [3,5,COUNTER]        
        ADATA = MDATA[WHERE(MDATA.SUBAREA_CODE EQ CODES(N) AND MDATA.(WHERE(TAGS EQ 'FIRST_NAME_CHLOR_A_PAN')) NE '')] & ADATA = ADATA[SORT(DATE_2DOY(PERIOD_2DATE(ADATA.PERIOD)))]
        VDATA = MDATA[WHERE(MDATA.SUBAREA_CODE EQ CODES(N) AND MDATA.(WHERE(TAGS EQ 'FIRST_NAME_PPD_VGPM2')) NE '')]   & VDATA = VDATA[SORT(DATE_2DOY(PERIOD_2DATE(VDATA.PERIOD)))]
        ODATA = MDATA[WHERE(MDATA.SUBAREA_CODE EQ CODES(N) AND MDATA.(WHERE(TAGS EQ 'FIRST_NAME_PPD_OPAL')) NE '')]    & ODATA = ODATA[SORT(DATE_2DOY(PERIOD_2DATE(ODATA.PERIOD)))]
        
        XDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(ADATA.PERIOD))),14,/DAY)
        IF PERIODS(PTH) EQ 'A_' THEN XDATES = PERIOD_2JD(ADATA.PERIOD)
        
        DGROUPS = ['DIATOM', 'DINOFLAGELLATE','BROWN',            'GREEN',            'CRYPTOPHYTE','PICO']
        DCOLORS = ['CRIMSON','BLUE',   'ORANGE','MEDIUM_AQUAMARINE','YELLOW',    'AQUA']
        LGD     = ['Diatoms','Dinoflagellates','Brown Algae','Green Algae','Cryptophytes','Picoplankton']  
        CGROUPS = ['MICRO','NANO','PICO']
        CCOLORS = ['YELLOW','MEDIUM_BLUE','ORANGE_RED']
        PGROUPS = ['MICRO','NANOPICO']
        PCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']
        MARGIN  = [0.15,0.15,0.15,0.2]
        IF PERIODS(PTH) EQ 'A_' THEN CYRANGE = [0.2,0.8] ELSE CYRANGE = [0,1.2] 
        IF PERIODS(PTH) EQ 'A_' THEN PYRANGE = [0.0,0.8] ELSE PYRANGE = [0,1.2]
        
        BOTTOM = 0
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))    
        TOT = ADATA.(CPOSC) 
        DIATOM = ADATA.(DPOSC)
        FOR NTH = 0L, N_ELEMENTS(DGROUPS)-1 DO BEGIN
          GROUP = DGROUPS[NTH]
          POS = WHERE(TAGS EQ 'MEAN_' + GROUP + '_PERCENTAGE_PAN')
          PER = ADATA.(POS)      
          OK = WHERE(PER EQ MISSINGS(PER),COUNT) & IF COUNT GE 1 THEN PER[OK] = 0.0
          IF NTH EQ 0 THEN BEGIN              
            IF N EQ 0 THEN TITLE = 'Chlorophyll !8a!N!X!C'+TITLES(N) ELSE TITLE = TITLES(N)
            POSITION = [XPOS0,YPOS(N)-YDIF,XPOS0+XDIF,YPOS(N)]
            P = PLOT(XDATES,REPLICATE(0,N_ELEMENTS(ADATA)),YTITLE='Composition (%)',XTICKVALUE=AX.TICKV,FONT_SIZE=11,TITLE=TITLE,POSITION=POSITION,$
              XMINOR=0,YRANGE=[0,100],AXIS_STYLE=1,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
            BOT = REPLICATE(0, N_ELEMENTS(ADATA))
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=DCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=DCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          BOTTOM = PER1
        ENDFOR  
        P2 = PLOT(XDATES,TOT,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=0,LAYOUT=LAYOUT,POSITION=POSITION)  
        PD = PLOT(XDATES,DIATOM,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=2,LAYOUT=LAYOUT,POSITION=POSITION)    
        A1 = AXIS('Y',TARGET=P2,LOCATION=[MAX(P.XRANGE),0,0],TEXTPOS=1,MINOR=2,TICKFONT_SIZE=11,TEXT_COLOR='BLACK',TICKDIR=1,TITLE=UNITS('CHLOR_A',/NO_NAME),TICKLEN=0.05,YRANGE=CYRANGE) ;AXIS,YAXIS=1,YRANGE=[0,300],/SAVE, YTITLE=YTITLE2,CHARSIZE=CHARSIZE,COLOR=0
        A2 = AXIS('X',TARGET=P,LOCATION=[MIN(P.XRANGE),100,0],MAJOR=0,MINOR=0,COLOR='BLACK')
        
        BOTTOM = 0
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))    
        TOT = ADATA.(CPOSC) 
        FOR NTH = 0L, N_ELEMENTS(CGROUPS)-1 DO BEGIN
          GROUP = CGROUPS[NTH]
          POS = WHERE(TAGS EQ 'MEAN_' + GROUP + '_PERCENTAGE_PAN')
          PER = ADATA.(POS)      
          OK = WHERE(PER EQ MISSINGS(PER),COUNT) & IF COUNT GE 1 THEN PER[OK] = 0.0
          IF NTH EQ 0 THEN BEGIN              
            IF N EQ 0 THEN TITLE = 'Chlorophyll !8a!N!X!C'+TITLES(N) ELSE TITLE = TITLES(N)
            POSITION = [XPOS1,YPOS(N)-YDIF,XPOS1+XDIF,YPOS(N)]
            P = PLOT(XDATES,REPLICATE(0,N_ELEMENTS(ADATA)),YTITLE='Composition (%)',XTICKVALUE=AX.TICKV,FONT_SIZE=11,TITLE=TITLE,POSITION=POSITION,$
              XMINOR=0,YRANGE=[0,100],AXIS_STYLE=1,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
            BOT = REPLICATE(0, N_ELEMENTS(ADATA))
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=CCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=CCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          BOTTOM = PER1
        ENDFOR  
        P2 = PLOT(XDATES,TOT,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=0,LAYOUT=LAYOUT,POSITION=POSITION)      
        PD = PLOT(XDATES,DIATOM,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=CYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=2,LAYOUT=LAYOUT,POSITION=POSITION)
        A1 = AXIS('Y',TARGET=P2,LOCATION=[MAX(P.XRANGE),0,0],TEXTPOS=1,MINOR=2,TICKFONT_SIZE=11,TEXT_COLOR='BLACK',TICKDIR=1,TITLE=UNITS('CHLOR_A',/NO_NAME),TICKLEN=0.05,YRANGE=CYRANGE) ;AXIS,YAXIS=1,YRANGE=[0,300],/SAVE, YTITLE=YTITLE2,CHARSIZE=CHARSIZE,COLOR=0
        A2 = AXIS('X',TARGET=P,LOCATION=[MIN(P.XRANGE),100,0],MAJOR=0,MINOR=0,COLOR='BLACK')
              
        XDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(VDATA.PERIOD))),14,/DAY)        
        IF PERIODS(PTH) EQ 'A_' THEN XDATES = PERIOD_2JD(VDATA.PERIOD)
        BOTTOM = 0
        COUNTER = COUNTER + 1  
        LAYOUT = [3,5,COUNTER]
        TOT = VDATA.(PPOSV)   
        DIATOM = VDATA.(DPOSV)
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))    
        FOR NTH = 0L, N_ELEMENTS(PGROUPS)-1 DO BEGIN
          GROUP = PGROUPS[NTH]
          POS = WHERE(TAGS EQ 'MEAN_PPD_' + GROUP + '_PERCENTAGE_MARMAP_PAN_VGPM2')
          PER = VDATA.(POS)      
          OK = WHERE(PER EQ MISSINGS(PER),COUNT) & IF COUNT GE 1 THEN PER[OK] = 0.0
          IF NTH EQ 0 THEN BEGIN                     
            IF N EQ 0 THEN TITLE = 'Primary Production (VGPM-Eppley)!C'+TITLES(N) ELSE TITLE = TITLES(N)
            POSITION = [XPOS2,YPOS(N)-YDIF,XPOS2+XDIF,YPOS(N)]
            P = PLOT(XDATES,REPLICATE(0,N_ELEMENTS(VDATA)),YTITLE='Composition (%)',XTICKVALUE=AX.TICKV,FONT_SIZE=11,TITLE=TITLE,POSITION=POSITION,$
              XMINOR=0,YRANGE=[0,100],AXIS_STYLE=1,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
            BOT = REPLICATE(0, N_ELEMENTS(VDATA))
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=PCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=PCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          BOTTOM = PER1
        ENDFOR  
        P2 = PLOT(XDATES,TOT,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=0,LAYOUT=LAYOUT,POSITION=POSITION,YRANGE=PYRANGE)      
        PD = PLOT(XDATES,DIATOM,COLOR='GREY',/CURRENT,AXIS_STYLE=0,XTICKVALUE=AX.TICKV,XRANGE=P.XRANGE,YRANGE=PYRANGE,MARGIN=MARGIN,THICK=3,LINESTYLE=2,LAYOUT=LAYOUT,POSITION=POSITION)
        A1 = AXIS('Y',TARGET=P2,LOCATION=[MAX(P.XRANGE),0,0],TEXTPOS=1,MINOR=2,TICKFONT_SIZE=11,TEXT_COLOR='BLACK',TICKDIR=1,TITLE=UNITS('PPD',/NO_NAME),TICKLEN=0.05,YRANGE=PYRANGE) ;AXIS,YAXIS=1,YRANGE=[0,300],/SAVE, YTITLE=YTITLE2,CHARSIZE=CHARSIZE,COLOR=0
        A2 = AXIS('X',TARGET=P,LOCATION=[MIN(P.XRANGE),100,0],MAJOR=0,MINOR=0,COLOR='BLACK')
         
        COUNTER = COUNTER + 1  
        LAYOUT = [3,5,COUNTER]
        XDATES = JD_ADD(YDOY_2JD('2020',DATE_2DOY(PERIOD_2DATE(ODATA.PERIOD))),14,/DAY)
        IF PERIODS(PTH) EQ 'A_' THEN XDATES = PERIOD_2JD(ODATA.PERIOD)
        BOTTOM = 0
        TOT = ODATA.(PPOSV)   
        DIATOM = ODATA.(DPOSV)
        PER1 = REPLICATE(0,N_ELEMENTS(XDATES))    
        FOR NTH = 0L, N_ELEMENTS(PGROUPS)-1 DO BEGIN
          GROUP = PGROUPS[NTH]
          POS = WHERE(TAGS EQ 'MEAN_PPD_' + GROUP + '_PERCENTAGE_MARMAP_PAN_VGPM2')
          PER = ODATA.(POS)      
          OK = WHERE(PER EQ MISSINGS(PER),COUNT) & IF COUNT GE 1 THEN PER[OK] = 0.0
          IF NTH EQ 0 THEN BEGIN             
            IF N EQ 0 THEN TITLE = 'Primary Production (OPAL)!C'+TITLES(N) ELSE TITLE = TITLES(N)
            POSITION = [XPOS3,YPOS(N)-YDIF,XPOS3+XDIF,YPOS(N)]
            P = BARPLOT(XDATES,REPLICATE(0,N_ELEMENTS(ODATA)),YTITLE='Composition (%)',XTICKVALUE=AX.TICKV,FONT_SIZE=11,TITLE=TITLE,POSITION=POSITION,$
              XMINOR=0,YRANGE=[0,100],AXIS_STYLE=1,XSTYLE=1,XTICKNAME=AX.TICKNAME,/NODATA,BUFFER=BUFFER,MARGIN=MARGIN,LAYOUT=LAYOUT,/CURRENT)
            BOT = REPLICATE(0, N_ELEMENTS(ODATA))
            YY = [PER,BOT]
            XX = [XDATES,REVERSE(XDATES)]
            POLY = POLYGON(XX,YY,FILL_COLOR=PCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          ENDIF
          PER1 = PER + PER1
          YY = [PER1,REVERSE(BOTTOM)]
          XX = [XDATES,REVERSE(XDATES)]
          IF NTH GE 1 THEN POLY = POLYGON(XX,YY,FILL_COLOR=PCOLORS[NTH],/FILL_BACKGROUND,TARGET=P,/DATA,LINESTYLE=6)
          BOTTOM = PER1
        ENDFOR          
      ENDFOR
      
      XPOS = [0.035,0.085,0.17,0.035,0.1,0.17]
      YPOS = 0.06 & YPOS2 = 0.04
      FOR SY=0, 2 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=DCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)            
      FOR SY=3, N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS(SY),YPOS2,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=DCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
         
      LGD = ['Microplankton','Nanoplankton','Picoplankton']  
      LGCOLORS = ['YELLOW','MEDIUM_BLUE','ORANGE_RED']      
      XPOS = [0.3,0.39,0.345]
      FOR SY=0, N_ELEMENTS(LGD)-2 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      S = SYMBOL(XPOS(2),YPOS2,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(2),/SYM_FILLED,LABEL_STRING=LGD(2),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      
      LGD = ['Microplankton','Nano+Picoplankton']  
      LGCOLORS = ['YELLOW','MEDIUM_AQUAMARINE']      
      XPOS = [0.535,0.615]
      FOR SY=0, N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      XPOS = [0.78,0.860]
      FOR SY=0,N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      
        
;      LGD = ['Microplankton','Nanoplankton','Picoplankton','Nano+Picoplankton']  
;      LGCOLORS = ['YELLOW','MEDIUM_BLUE','ORANGE_RED','MEDIUM_AQUAMARINE']      
;      XPOS = [0.31,0.41,0.51,0.61]
;      YPOS = 0.03
;      FOR SY=0, N_ELEMENTS(LGD)-1 DO S = SYMBOL(XPOS(SY),YPOS,'SQUARE',SYM_SIZE=1.5,SYM_COLOR='WHITE',SYM_FILL_COLOR=LGCOLORS(SY),/SYM_FILLED,LABEL_STRING=LGD(SY),LABEL_FONT_SIZE=12,LABEL_POSITION='R',/NORMAL)
      
      W.SAVE, PNGFILE, RESOLUTION=300, BIT_DEPTH=2      
      W.CLOSE 
    ENDFOR
STOP
      
    
  ENDIF ; DO_PHYTO_COMPOSITION_PLOTS
  



END; #####################  End of Routine ################################



