; $ID:	PP_OPAL_DEMO.PRO,	2020-07-08-15,	USER-KJWH	$
;######################################################################################################
	PRO PP_OPAL_DEMO

;+
; NAME:
;		PP_OPAL_DEMO
;
; PURPOSE:

;		THIS PROCEDURE IS A DEMO FOR PP_OPAL.PRO

; CATEGORY:
;		ALGORITHMS
;
; CALLING SEQUENCE:	PP_OPAL_DEMO
; INPUTS:	NONE
;
;	OUTPUTS: DEPENDS ON SWITCHES

;
; MODIFICATION HISTORY:
;			WRITTEN APRIL 2007 BY J.O'REILLY, 28 TARZWELL DRIVE, NMFS, NOAA 02882 (JAY.O'REILLY@NOAA.GOV)
;			APR 6,2013,JOR,FORMATING; ADDED SWITCHES,CD,CURR;
;     AUG 14,2014,JOR, TESTED WRITEING PROFILES TO A FILE
;     SEP,11,2014,JOR, ADDED STEP DO_WRITE_PROFILES 
;     MAY 29,2015,JOR, MODIFIED DO_OPAL_VS_EK AND OTHER RESPONSE PLOTS TO MAKE B&W PLOTS FOR JOURNAL PUB
;     aug 02,2015,jor NOW USING SEABASS KX PROFILE FOR DO_VERT_PROFILES & DO_USE_KX_PROFILE
;     JUL 04,2016,JOR: SAVEFILE = !S.DATA + ROUTINE_NAME + '-VALIDATE.SAVE'

;      
;            
; ;######################################################################################################
;-
;*****************************
ROUTINE_NAME  = 'PP_OPAL_DEMO'
;*****************************


;CCCCC     CONSTANTS     CCCCC
BATHY_FILE=!S.DATA +'SRTM30-SMI-PXY_4320_2160-BATHY.SAVE'  
LAND_MASK = READ_LANDMASK('SMI',/LAND)
PROJECT = 'OPAL'
DIR_FIGS = DIR_PROJECT(PROJECT,DIR='FIGS')& DIR_TEST,DIR_FIGS
DIR_SAV = DIR_PROJECT(PROJECT,DIR='SAV') & DIR_TEST,DIR_SAV
FONT_HELVETICA
SMI_PX =4320 & SMI_PY=2160
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||
;
;plt_xy
;SSSSS     SWITCHES     SSSSS
DO_TEST_VERSIONS  = 0
DO_OPAL_VS_MARRA  = 0

;===> OPAL RESPONSES
DO_OPAL_VARS      = ''
DO_PLOT_OPAL_VARS  = ''
DO_OPAL_VS_EK     = ''
DO_OPAL_VS_EUFRACT    = ''
DO_OPAL_VS_N_LAYERS = ''
DO_OPAL_100_VS_200_LAYERS = 0
DO_EUFRACT          = 0
DO_VALIDATE_OPAL  = 2
DO_PROFILES       = 0
DO_PP_ARRAY       = 0
DO_SETS_KX        = 0
DO_OPAL_BASELINE  = 0
DO_OPAL_SURFACE   = 0
DO_MARCH30_1998   = 0
DO_LME_PPY_CSV = 0
DO_PLOT_LME_ANNUAL_CYCLE = 0
DO_COMPARE_GLOBAL_KIM_JAY = 0
DO_WRITE_PROFILES        = 0
DO_1000_RUNS             = 0
DO_USE_KX_PROFILE         = ''
DO_VERT_PROFILES          = ''
DO_TANH                   = ''

;SSSSS     SWITCHES     SSSSS

IF DO_TEST_VERSIONS GE 1 THEN BEGIN
   OPAL = PP_OPAL(CHL = 1., SST = 15., PAR=55., KX = 0.02) 
   P,OPAL
ENDIF;IF DO_TEST_VERSIONS GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||

IF DO_OPAL_VS_MARRA GE 1 THEN BEGIN
  OPAL = PP_OPAL(CHL = 1., SST = 15., PAR=55., KX = 0.02,EK = 15.1,STRUCT=STRUCT)
  MARRA = PP_MARRA(CHL_SAT = 1, SST = 15, PAR=55,BOTTOM_FLAG=BOTTOM_FLAG,K_PAR=_k_par)
  P,'OPAL: ',OPAL
  P,'MARRA: ',MARRA

  STOP
ENDIF;IF DO_OPAL_VS_MARRA GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||
;
;

;*******************************
IF KEY(DO_OPAL_VARS) THEN BEGIN
;*******************************
  SWITCHES,DO_OPAL_VARS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  ;===> CHL
  CHLS = INTERVAL([0.001,64],0.1) & VAR = 'CHL'
D = CREATE_STRUCT('MODEL','OPAL','VAR',VAR,'CHL',0.0,'PAR',0.0,'SST',0.0,'KX',0.0,'PPD',0.0)
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(CHLS)-1 DO BEGIN
    CHL = CHLS[NTH]
    PPD = PP_OPAL(CHL = CHL, SST = 15.0, PAR=55, KX = 0.02,STRUCT=STRUCT)
   DB.CHL = STRUCT.CHL
   DB.PAR = STRUCT.PAR
   DB.SST = STRUCT.SST
   DB.SST = STRUCT.SST
   DB.PPD = STRUCT.PPD
   IF NONE(DB) THEN DB = D ELSE DB = [DB,D]
  ENDFOR;FOR _EK = 0,N_ELEMETS(EKS)-1 DO BEGIN
;===> PAR
PARS = INTERVAL([0,70],0.1) & VAR = 'PAR'
D = CREATE_STRUCT('MODEL','OPAL','VAR',VAR,'CHL',0.0,'PAR',0.0,'SST',0.0,'KX',0.0,'PPD',0.0)
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(PARS)-1 DO BEGIN
  PAR = PARS[NTH]
  PPD = PP_OPAL(CHL = 1., SST = 15.0, PAR=PAR, KX = 0.02,STRUCT=STRUCT)
  D.CHL = STRUCT.CHL
  D.PAR = STRUCT.PAR
  D.SST = STRUCT.SST
  D.SST = STRUCT.SST
  D.PPD = STRUCT.PPD
   IF NONE(DB) THEN DB = D ELSE DB = [DB,D]
ENDFOR;FOR _EK = 0,N_ELEMETS(EKS)-1 DO BEGIN

;===> SST
 SSTS = INTERVAL([-3.0,35.0],0.1) & VAR = 'SST'
D = CREATE_STRUCT('MODEL','OPAL','VAR',VAR,'CHL',0.0,'PAR',0.0,'SST',0.0,'KX',0.0,'PPD',0.0)

 ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
 FOR NTH = 0,N_ELEMENTS(SSTS)-1 DO BEGIN
   SST = SSTS[NTH]
   PPD = PP_OPAL(CHL = 1., SST = SST, PAR=55., KX = 0.02,STRUCT=STRUCT)
   D.CHL = STRUCT.CHL
   D.PAR = STRUCT.PAR
   D.SST = STRUCT.SST
   D.PPD = STRUCT.PPD
   IF NONE(DB) THEN DB = D ELSE DB = [DB,D]
 ENDFOR;FOR _EK = 0,N_ELEMETS(EKS)-1 DO BEGIN
 ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;===> KX
KXS = INTERVAL([.001,10.0],0.01) & VAR = 'KX'
D = CREATE_STRUCT('MODEL','OPAL','VAR',VAR,'CHL',0.0,'PAR',0.0,'SST',0.0,'KX',0.0,'PPD',0.0)
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(KXS)-1 DO BEGIN
  KX = KXS[NTH]
  PPD = PP_OPAL(CHL = 1., SST = 15, PAR=55., KX = KX,STRUCT=STRUCT)
  D.CHL = STRUCT.CHL
  D.PAR = STRUCT.PAR
  D.KX = STRUCT.KX
  D.PPD = STRUCT.PPD
  IF NONE(DB) THEN DB = D ELSE DB = [DB,D]

ENDFOR;FOR NTH = 0,N_ELEMENTS(KXS)-1 DO BEGIN
PN,DB
FILE = DIR_SAV + 'DO_OPAL_VARS.SAV'
STRUCT_WRITE,DB,FILE=FILE
ENDIF;IF KEY(DO_OPAL_VARS) THEN BEGIN
;||||||||||||||||||||||||||||||||||||
;
;************************************
IF KEY(DO_PLOT_OPAL_VARS) THEN BEGIN
  ;**********************************
  SWITCHES,DO_PLOT_OPAL_VARS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  FILE = DIR_SAV + 'DO_OPAL_VARS.SAV'
  DB = STRUCT_READ(FILE) & PN,DB
  IF STOPP THEN STOP
  OK = WHERE(DB.VAR EQ 'CHL') & D = DB[OK]
  P1 = PLOT(D.CHL,D.PPD, COLOR = 'BLACK', THICK = 5,$
    TITLE = '',XTITLE = 'CHL',YTITLE = UNITS('PPD'), NAME = 'CHL',FONT_SIZE = 24)
  XPOS = 0.25 & YPOS = 0.9
  LEG = LEGEND(TARGET=[P1], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
  ;;TXT = ['SST = 15','PAR = 55','KX = 0.02'] & 
  TXT = ['SST = 15'+ UNITS('SST',/NO_NAME),'PAR = 55'+ UNITS('PAR',/NO_NAME),'KX = 0.02'+ UNITS('A_CDOM',/NO_NAME)] & 
  T = TEXT(0.085,0.49,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18)

  P1.SAVE, DIR_FIGS +'DO_OPAL_VS_VAR_CHL.PNG'
  P1.CLOSE
  OK = WHERE(DB.VAR EQ 'PAR') & D = DB[OK]
  P1 = PLOT(D.PAR,D.PPD, COLOR = 'BLACK', THICK = 5,$
    TITLE = '',XTITLE = 'PAR',YTITLE = UNITS('PPD'), NAME = 'PAR',FONT_SIZE = 24)

  XPOS = 0.25 & YPOS = 0.9
  LEG = LEGEND(TARGET=[P1], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
  TXT = ['CHL = 1', 'SST = 15', 'KX = 0.02'] & 
  TXT = ['CHL = 1' + UNITS('CHL',/NO_NAME),'SST = 15'+ UNITS('SST',/NO_NAME),'KX = 0.02'+ UNITS('A_CDOM',/NO_NAME)] & 

  T = TEXT(0.085,0.50,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18)
  P1.SAVE, DIR_FIGS +'DO_OPAL_VS_VAR_PAR.PNG'
  P1.CLOSE
  OK = WHERE(DB.VAR EQ 'SST') & D = DB[OK]
  P1 = PLOT(D.SST,D.PPD, COLOR = 'BLACK', THICK = 5,$
    TITLE = '',XTITLE = 'SST',YTITLE = UNITS('PPD'), NAME = 'SST',FONT_SIZE = 24)

  XPOS = 0.25 & YPOS = 0.9
  LEG = LEGEND(TARGET=[P1], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
  TXT = ['CHL = 1','PAR = 55','KX = 0.02'] & 
  TXT = ['CHL = 1'+ UNITS('CHL',/NO_NAME),'PAR = 55'+ UNITS('PAR',/NO_NAME),'KX = 0.02'+ UNITS('A_CDOM',/NO_NAME)] & 

  T = TEXT(0.085,0.5,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18)
  P1.SAVE, DIR_FIGS +'DO_OPAL_VS_VAR_SST.PNG'
  P1.CLOSE

  OK = WHERE(DB.VAR EQ 'KX') & D = DB[OK]
  P1 = PLOT(D.KX,D.PPD, COLOR = 'BLACK', THICK = 5,$
    TITLE = '',XTITLE = 'KX',YTITLE = UNITS('PPD'), NAME = 'KX',FONT_SIZE = 24)

  XPOS = 0.25 & YPOS = 0.9
  LEG = LEGEND(TARGET=[P1], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
  TXT = ['CHL = 1'+ UNITS('CHL',/NO_NAME),'SST = 15'+ UNITS('SST',/NO_NAME),'PAR = 55'+ UNITS('PAR',/NO_NAME)] & 
  T = TEXT(0.085,0.49,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18)
  P1.SAVE, DIR_FIGS +'DO_OPAL_VS_VAR_KX.PNG'
  P1.CLOSE

  FILES = FILE_SEARCH(DIR_FIGS,'DO_OPAL_VS_VAR_*.PNG')
 
  PLT_MERGE,FILES,/OVERWRITE,DIR_OUT=DIR_FIGS,COLS = 2,ROWS = 2,$
    NAME = 'CHL-PAR-SST-KX',ORDER = [0,2,3,1],/ADD_LETTER


ENDIF;IF KEY(DO_PLOT_OPAL_VARS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||
;
;
;*******************************
IF KEY(DO_OPAL_VS_EK) THEN BEGIN
;*******************************
  ,'DO_OPAL_VS_EK'
  SWITCHES,DO_OPAL_VS_EK,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP

  EKS = INTERVAL([14.0,22.0],0.01)
  DB = REPLICATE(CREATE_STRUCT('MODEL','OPAL','EK',0.0,'CHL',0.0,'PAR',0.0,'SST',0.0,'PPD',0.0),N_ELEMENTS(EKS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(EKS)-1 DO BEGIN
    EK = EKS[NTH]
    PPD = PP_OPAL(CHL = 1., SST = 15., PAR=55., KX = 0.02,EK = EK,STRUCT=STRUCT)
   DB[NTH].CHL = STRUCT.CHL 
   DB[NTH].PAR = STRUCT.PAR 
   DB[NTH].SST = STRUCT.SST 
   DB[NTH].EK = STRUCT.EK     
   DB[NTH].PPD = STRUCT.PPD
  ENDFOR;FOR _EK = 0,N_ELEMETS(EKS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  P1 = PLOT(DB.EK,DB.PPD, COLOR = 'BLACK', THICK = 5,$
          TITLE = '',XTITLE = 'EK',YTITLE = UNITS('PPD'), NAME = 'EK',FONT_SIZE = 24)
      
  XPOS = 0.25 & YPOS = 0.9
  LEG = LEGEND(TARGET=[P1], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
  TXT = ['CHL = 1','SST = 15','PAR = 55','KX = 0.02'] & 
  TXT = ['CHL = ' + ROUNDS(1.,2)+ UNITS('CHL',/NO_NAME) , 'SST = 15'+ UNITS('SST',/NO_NAME),'PAR = 55'+ UNITS('PAR',/NO_NAME),'KX = 0.02'+ UNITS('A_CDOM',/NO_NAME)] & 

  T = TEXT(0.10,0.385,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18) 
  P1.SAVE, DIR_FIGS +'DO_OPAL_VS_EK.PNG'  
  P1.CLOSE 
  CSV_WRITE,DIR_SAV +'DO_OPAL_VS_EK.CSV',DB       
  ,'DO_OPAL_VS_EK'
       
ENDIF;IF KEY(DO_OPAL_VS_EK) THEN BEGIN

;||||||||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(DO_OPAL_VS_EUFRACT) THEN BEGIN
  ;*******************************
  ,'DO_OPAL_VS_EUFRACT'
  SWITCHES,DO_OPAL_VS_EUFRACT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  CHLS = INTERVAL([0.01,0.10],0.01)
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _CHL = 0,NOF(CHLS)-1 DO BEGIN
    CHL = CHLS(_CHL)
  EUFRACTS = INTERVAL([0.001,.10],0.001)
 ; EUFRACTS = 0.001
  DB = REPLICATE(CREATE_STRUCT('MODEL','OPAL','EUFRACT',0.0,'ZEU',0.0,'CHL',0.0,'PAR',0.0,'SST',0.0,'PPD',0.0),N_ELEMENTS(EUFRACTS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(EUFRACTS)-1 DO BEGIN
    EUFRACT = EUFRACTS[NTH]
    PPD = PP_OPAL(CHL = CHL, SST = 15., PAR=55., KX = 0.02,EUFRACT = EUFRACT,STRUCT=STRUCT)
    DB[NTH].CHL = STRUCT.CHL
    DB[NTH].PAR = STRUCT.PAR
    DB[NTH].SST = STRUCT.SST
    DB[NTH].EUFRACT = STRUCT.EUFRACT
    DB[NTH].PPD = STRUCT.PPD[0]
    DB[NTH].ZEU = STRUCT.ZEU[0]
  ENDFOR;FOR _EUFRACT = 0,N_ELEMETS(EUFRACTS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  P1 = PLOT(DB.EUFRACT,DB.PPD, COLOR = 'BLACK', THICK = 5,$
    TITLE = '',XTITLE = 'EUFRACT',YTITLE = UNITS('PPD'), NAME = 'EUFRACT',FONT_SIZE = 14,/XLOG)

  XPOS = 0.75 & YPOS = 0.9
  LEG = LEGEND(TARGET=[P1], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
    Z = 'Zeu = ' + ROUNDS(DB[0].ZEU[0],1) + ' m'
  TXT = ['CHL = ' + ROUNDS(CHL,2)+ UNITS('CHL',/NO_NAME) , 'SST = 15'+ UNITS('SST',/NO_NAME),'PAR = 55'+ UNITS('PAR',/NO_NAME),'KX = 0.02'+ UNITS('A_CDOM',/NO_NAME),Z] & 
  T = TEXT(0.52,0.285,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18)
 
  SUF = REPLACE('-CHL-' + ROUNDS(CHL,2),'.',',')
  P1.SAVE, DIR_FIGS +'DO_OPAL_VS_EUFRACT' + SUF + '.PNG'
  P1.CLOSE
  
ENDFOR;FOR _CHL = 0,NOF(CHLS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  CSV_WRITE,DIR_SAV +'DO_OPAL_VS_EUFRACT.CSV',DB
  ,'DO_OPAL_VS_EUFRACT'

ENDIF;IF KEY(DO_OPAL_VS_EUFRACT) THEN BEGIN

;||||||||||||||||||||||||||||||||||||||||



;***************************************
IF KEY(DO_OPAL_VS_N_LAYERS) THEN BEGIN
;***************************************  
  ,'DO_OPAL_VS_N_LAYERS'
  SWITCHES,DO_OPAL_VS_N_LAYERS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP

  LAYERS = INTERVAL([1,3],BASE = 10,0.05)
  DB = REPLICATE(CREATE_STRUCT('MODEL','OPAL','SST',0.0,'CHL',0.0,'PAR',0.0,'N_LAYERS',0.0,'PPD',0.0),N_ELEMENTS(LAYERS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(LAYERS)-1 DO BEGIN
    N_LAYERS = LAYERS[NTH]
    PPD = PP_OPAL(CHL = 1., SST = 15, PAR=55., KX = 0.02,LAYERS=N_LAYERS,STRUCT=STRUCT)
   DB[NTH].CHL = STRUCT.CHL
   DB[NTH].PAR = STRUCT.PAR
   DB[NTH].SST = STRUCT.SST
   DB[NTH].N_LAYERS = STRUCT.NLAYERS
   DB[NTH].PPD = STRUCT.PPD
  ENDFOR;FOR _EK = 0,N_ELEMETS(EKS)-1 DO BEGIN
  P,'OPAL: ',OPAL
  YTITLE = UNITS('PPD')
  DB = STRUCT_2NUM(DB)
  ;===> CHANGE PPD TO 3 DECIMAL PLACES SO THE Y-AXIS IS NOT TRUNCATED
  Y = FLOAT(ROUNDS(DB.PPD,3))
  P1 = PLOT(DB.N_LAYERS,DB.PPD, COLOR = 'BLACK', THICK = 5,XRANGE = [10,1000],/XLOG,$
    TITLE = '',XTITLE = 'N_LAYERS',YTITLE = UNITS('PPD'), NAME = 'N_LAYERS',FONT_SIZE = 22)

  XPOS = 0.75 & YPOS = 0.75
  LEG = LEGEND(TARGET=[P1], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
  TXT = ['CHL = 1','SST = 15','PAR = 55'] & 
  T = TEXT(0.51,0.32,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18)
  P1.SAVE, DIR_FIGS +'DO_OPAL_VS_N_LAYERS.PNG'
  P1.CLOSE

  CSVFILE = DIR_SAV +'DO_OPAL_VS_N_LAYERS.CSV'
  CSV_WRITE,CSVFILE,DB 
  ,'DO_OPAL_VS_N_LAYERS'
ENDIF;IF KEY(DO_OPAL_VS_N_LAYERS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||
;
;
;
;***************************************
IF DO_OPAL_100_VS_200_LAYERS GE 1 THEN BEGIN
  ;***************************************
  ,'DO_OPAL_100_VS_200_LAYERS'
  LAYERS = [100,200]
  DB = REPLICATE(CREATE_STRUCT('MODEL','OPAL','SST',0.0,'CHL',0.0,'PAR',0.0,'N_LAYERS',0.0,'PPD',0.0),N_ELEMENTS(LAYERS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(LAYERS)-1 DO BEGIN
    TIMER
    FOR TRIAL = 1,2000 DO BEGIN
    N_LAYERS = LAYERS[NTH]
    PPD = PP_OPAL(CHL = 1., SST = 15, PAR=55., KX = 0.02,N_LAYERS=N_LAYERS,STRUCT=STRUCT)
   DB[NTH].CHL = STRUCT.CHL
   D.PAR = STRUCT.PAR
   D.SST = STRUCT.SST
   DB[NTH].N_LAYERS = STRUCT.N_LAYERS
   DB[NTH].PPD = STRUCT.PPD
  ENDFOR;FOR NTH = 0,N_ELEMENTS(LAYERS)-1 DO BEGIN
    TIMER,/STOP & P,N_LAYERS & WAIT,3
    ENDFOR;FOR TRIAL = 1,100 DO BEGIN
  
  ,'DO_OPAL_100_VS_200_LAYERS'
ENDIF;IF DO_OPAL_100_VS_200_LAYERS GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||
;
;;***************************************
IF DO_EUFRACT GE 1 THEN BEGIN
  ;***************************************
  ,'DO_EUFRACT'
  EUFRACTS = INTERVAL([-4,-2],BASE = 10,0.05)
  DB = REPLICATE(CREATE_STRUCT('MODEL','OPAL','SST',0.0,'CHL',0.0,'PAR',0.0,'EUFRACT',0.0,'PPD',0.0),N_ELEMENTS(EUFRACTS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(EUFRACTS)-1 DO BEGIN
    EUFRACT = EUFRACTS[NTH]
    PPD = PP_OPAL(CHL = 0.02, SST = 15, PAR=55., KX = 0.02,EUFRACT= EUFRACT,STRUCT=STRUCT)
   DB[NTH].CHL = STRUCT.CHL
   DB[NTH].PAR = STRUCT.PAR
   DB[NTH].SST = STRUCT.SST
   DB[NTH].EUFRACT = STRUCT.EUFRACT
   DB[NTH].PPD = STRUCT.PPD
  ENDFOR;FOR NTH = 0,N_ELEMENTS(LAYERS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
; 

  PLT_XY,DB.EUFRACT,DB.PPD,/LIN_ADD, LIN_COLOR = 'BLUE', LIN_THICK = 5,$
  TITLE = '',XTITLE ='EUFRACT',YTITLE = UNITS('PPD'),$
  FILE = FILE,/GRID_ADD,BACKGROUND = 'LIGHT GREY',OBJ=OBJ,/XLOG
  A = ARROW([0.01,0.01],[MM(DB.PPD)], /DATA,  COLOR='RED',THICK=5, HEAD_SIZE= 1,ARROW_STYLE=1)
  P,MM(DB.PPD)
  FILE =!S.IDL_TEMP +'PP_VS_EUFRACT.PNG'
  OBJ.SAVE,FILE
 ; FILE_COPY,FILE,DIR_PROJECT(DIR='FIGS'),/OVERWRITE,/VERB
  ,'DO_EUFRACT'
  
ENDIF;IF DO_EUFRACT GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||
;
;



;*********************************
IF DO_MARCH30_1998 GE 1 THEN BEGIN
;*********************************
IF DO_MARCH30_1998 EQ 3 THEN STOP
  DIR = GET_SMI()
  DIR_IN = DIR.STATS
  FILES = FILE_SEARCH(DIR_IN,'D_19980330*.SAVE') 
  OK = WHERE_STRING(FILES,'KD_490',COUNT)
  IF COUNT GE 1 THEN FILES = REMOVE(FILES,OK)
  & PL,FILES
  IF N_ELEMENTS(FILES) NE 4 THEN MESSAGE,'ERROR: IN FILES'


CHL_FILE=FILES(WHERE_STRING(FILES,'CHLOR_A')) & P,CHL_FILE
PAR_FILE=FILES(WHERE_STRING(FILES,'PAR')) & P,PAR_FILE
SST_FILE=FILES(WHERE_STRING(FILES,'SST')) & P,SST_FILE
ADG_443_FILE=FILES(WHERE_STRING(FILES,'ADG_443')) & P,ADG_443_FILE

CHL = STATS_READ(CHL_FILE)    & PFILE,CHL_FILE,/R
PAR     = STATS_READ(PAR_FILE)    & PFILE,PAR_FILE,/R
SST     = STATS_READ(SST_FILE)    & PFILE,SST_FILE,/R
ADG_443 = STATS_READ(ADG_443_FILE)& PFILE,ADG_443_FILE,/R
BOTTOM_DEPTH=STRUCT_SD_READ(BATHY_FILE)& PFILE,BATHY_FILE,/X
INFILE = [CHL_FILE,PAR_FILE,SST_FILE,ADG_443_FILE,BATHY_FILE]
 KX=ADG_443
 ; ####### MAKE ARRAY TO HOLD PPD FROM OPAL #####
      PPD_OPAL = REPLICATE(MISSINGS(0.0),[SMI_PX,SMI_PY])
   
   
   OK_OPAL = WHERE($
      LAND_MASK EQ 0 AND $
      CHL NE MISSINGS(CHL) AND $
      PAR NE MISSINGS(PAR) AND $
      SST NE MISSINGS(SST) AND $
      KX NE MISSINGS(KX) AND $
      BOTTOM_DEPTH NE MISSINGS(BOTTOM_DEPTH) , $
      COUNT_OPAL)  
      IF N_ELEMENTS(INITIALIZE) EQ 0 THEN INITIALIZE = 1 ELSE INITIALIZE = 0

PPD= PP_OPAL(INITIALIZE = INITIALIZE, $
      ;   *** REQUIRED INPUT ***          (ONE VALUE OR ARRAY, SST_SAT AND PAR MUST MATCH SIZE OF CHL)
          CHL       = CHL(OK_OPAL),        $; REMOTELY-SENSED CHLOROPHLL CONCENTRATION (MG M-3)
          PAR           = PAR(OK_OPAL),            $; PAR (EINSTEIN M-2 D-1)
          SST           = SST(OK_OPAL),            $; SEA SURFACE TEMPERATURE (DEGREES C)
          KX            = KX(OK_OPAL),             $; ABSORPTION BY 'OTHER: I.E. CDOM ABSORPTION AT 443NM'
          BOTTOM_DEPTH  = BOTTOM_DEPTH(OK_OPAL)); BOTTOM DEPTH (M)
 PPD_OPAL(OK_OPAL) = PPD
 JAY_PP=PPD_OPAL
JAY_PP_NORTHEAST = GET_LME_DATA(JAY_PP,7) & S=STATS(JAY_PP_NORTHEAST) & PRINT,'STATS -JAY  ',S.N,S.MEAN


KIM_SAVE = !S.DATA+'D_19980330-PP-Z-PSAT-SMI-PXY_4320_2160-PPD-OPAL.SAVE' & PF,KIM_SAVE,/X
KIM_PP = STRUCT_SD_READ(KIM_SAVE,STRUCT=STRUCT)
KIM_PP_NORTHEAST = GET_LME_DATA(KIM_PP,7) & S=STATS(KIM_PP_NORTHEAST,/BASIC) & PRINT,'STATS -KIM  ',S.N,S.MEAN
STOP
ENDIF;IF DO_MARCH30_1998 GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||



;******************************
IF DO_VALIDATE_OPAL GE 1 THEN BEGIN
;******************************
,'DO_VALIDATE_OPAL'
  SAVEFILE = !S.DATA + ROUTINE_NAME + '-VALIDATE.SAVE' 
;  PP = PP_OPAL(CHL_SAT = 1.0, SST = 15, PAR=55, KX = 0.02, /INITIALIZE)
;  SAVE,FILENAME = SAVEFILE,PP & PFILE,SAVEFILE,/W
  PP = IDL_RESTORE(SAVEFILE) & PFILE,SAVEFILE,/R
  ST,PP
  PPD = PP_OPAL(CHL = 1, SST = 15, PAR=55, KX = 0.02)
  ;===> SINCE PP_OPAL TABLE DOES NOT EXIST THEN INITIALIZE AND MAKE IT AND PPD WILL BE A STRUCTURE 
  IF IDLTYPE(PPD) EQ 'STRUCT' THEN PPD = PPD.PPD
  IF PP.PPD EQ PPD THEN PRINT, ROUNDS(PPD,4)+ ' IS THE CORRECT PPD VALUE'
  IF PP.PPD EQ PPD THEN PRINT, ROUNDS(PPD,4)+ ' IS THE CORRECT PPD VALUE'
  IF PP.PPD EQ PPD THEN PRINT, ROUNDS(PPD,4)+ ' IS THE CORRECT PPD VALUE'
  ,'DO_VALIDATE_OPAL'
ENDIF;IF DO_VALIDATE_OPAL GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||

;******************************
IF DO_PROFILES GE 1 THEN BEGIN
;******************************
PRINT,' ===>  IF YOU PROVIDE ONLY ONE SET OF INPUT VALUES AND THE KEYWORD STRUCT THEN 
PRINT,'       RETURN A STRUCTURE WITH ALL DATA'
CHL = [0.01,0.1,1,10,100]
PSFILE = DIR_OUT + ROUTINE_NAME + '-PROFILES.PS' 
  PSPRINT,FILENAME = PSFILE,/COLOR,/FULL
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(CHL)-1 DO BEGIN
    CHL_SAT = CHL[NTH]
    PAGE_TITLE = 'CHLOR_A = '+ROUNDS(CHL_SAT,2)
    PP = PP_OPAL(CHL = CHL, SST = 15, PAR=55, KX = 0.01, /STRUCT)
    !P.MULTI=[0,2,2]
    YRANGE=[MAX(PP.DEPTH),-0.1]
    PAL36,R,G,B
    PLOT, PP.PROFILE_CHL,   PP.DEPTH, YRANGE=YRANGE, /YNOZERO,/YSTYLE, TITLE='CHL',/NODATA
    OPLOT,PP.PROFILE_CHL,   PP.DEPTH, COLOR= TC(21),THICK=3
  
    PLOT, PP.PROFILE_KCHL,  PP.DEPTH, YRANGE=YRANGE, /YNOZERO,/YSTYLE, TITLE='KCHL',/NODATA
    OPLOT,PP.PROFILE_KCHL,  PP.DEPTH, COLOR= TC(21),THICK=3
  
    PLOT, PP.PROFILE_KPAR,  PP.DEPTH, YRANGE=YRANGE, /YNOZERO,/YSTYLE, TITLE='KPAR',/NODATA
    OPLOT,PP.PROFILE_KPAR,  PP.DEPTH, COLOR= TC(21),THICK=3
  
    PLOT, PP.PROFILE_PP,    PP.DEPTH, YRANGE=YRANGE , /YNOZERO,/YSTYLE,TITLE='PP',/NODATA
    OPLOT,PP.PROFILE_PP,    PP.DEPTH, COLOR= TC(21),THICK=3
    XYOUTS,0.5,0.995,/NORMAL,PAGE_TITLE,ALIGN = 0.5,CHARSIZE = 2
  ENDFOR;FOR NTH = 0,N_ELEMENTS(CHL)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  PSPRINT & PFILE,PSFILE,/W
ENDIF;IF DO_PROFILES GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||


;*****************************
IF DO_PP_ARRAY GE 1 THEN BEGIN
;*****************************
PRINT,'	EXAMPLE OF PROVIDING SEVERAL INPUTS RESULTS IN A PP ARRAY (NOT A STRUCTURE)'

	PPD = PP_OPAL(CHL = [0.01,0.1,10,100], SST = [15,15,15,15], PAR=[55,55,55,55], KX = [0.01,0.2, 0.5,1.0])
	HELP, PPD
	PRINT,'PPD:  '+ROUNDS(PPD,4)
STOP

ENDIF;IF DO_PP_ARRAY GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||
;********************************
IF DO_OPAL_BASELINE GE 1 THEN BEGIN
;********************************
  ,'DO_OPAL_BASELINE'

  PRINT,' EXAMPLE OF PROVIDING RANGES OF INPUTS FOR A MODEL BASELINE'
   VERSION = 'MAR;16;2014'
 ; VERSION = 'MAY;10;2013
  CHLS = INTERVAL([-9,6],0.05,BASE = 2) & P,MM(CHLS)
  PARS = INTERPOL([0,70],N_ELEMENTS(CHLS)) & P,MM(PARS)
  SSTS = INTERPOL([-3,35],N_ELEMENTS(CHLS)) & P,MM(SSTS)
  KXS = INTERPOL([0.001,1],N_ELEMENTS(CHLS)) & P,MM(KXS)
  IF N_ELEMENTS([CHLS,PARS,SSTS,KXS]) NE 1204 THEN STOP
  
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF    
      FOR NTH = 0,N_ELEMENTS(CHLS)-1 DO BEGIN
        POF,NTH,CHLS
        CHL = CHLS[NTH]
        PAR = PARS[NTH]
        SST = SSTS[NTH]
        KX = KXS[NTH]
        
        D = CREATE_STRUCT('YMD','','MODEL','','VERSION','','PAR','','SST','','KX','','CHL','','PPD','')
        PPD = PP_OPAL(CHL = CHL, SST = SST, PAR=PAR, KX = KX)
        
        D.YMD = DATE_FORMAT(DATE_NOW(),/YMD)
        D.MODEL = 'OPAL'
        D.VERSION = VERSION
        D.CHL = CHL
        D.PAR = PAR
        D.SST = SST
        D.KX = KX
        IF IDLTYPE(PPD) EQ 'STRUCT' THEN D.PPD = ROUNDS(PPD.PPD,4) ELSE D.PPD = PPD
        IF  N_ELEMENTS(DB) EQ 0 THEN DB = D ELSE DB = STRUCT_CONCAT(DB,D);[DB,D]
   
    ENDFOR;FOR NTH = 0,N_ELEMENTS(CHL)-1 DO BEGIN
    DIR_OUT=GET_DIR()
    CSVFILE = DIR_OUT + 'DO_OPAL_BASELINE-'+VERSION + '.CSV'
    STRUCT_2CSV,CSVFILE,DB & PFILE,CSVFILE,/W
    ,'DO_OPAL_BASELINE'
    
ENDIF;IF DO_OPAL_BASELINE GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||
;
;
;
;;*************************************
IF DO_OPAL_SURFACE GE 1 THEN BEGIN
  ;*************************************
    DB = CSV_READ('DO_OPAL_BASELINE-MAR;16;2014.CSV')
    TITLE='OPAL VS CHL & PAR'
    FONT_SIZE= 21
    X = FLOAT(DB.CHL) & XTITLE = UNITS('CHLOR_A')
    Y = FLOAT(DB.PAR) & YTITLE = UNITS('PAR')
    Z = FLOAT(DB.PPD) & ZTITLE = UNITS('PPD')
    
    ;#####> TRIANGULATION   #####:
    TRIANGULATE, X, Y, TR, B
 
    W = WINDOW(DIMENSIONS = [1000,1000],WINDOW_TITLE = ROUTINE_NAME)  
  ; SHOW LINEAR SURFACE:
  S = SURFACE(TRIGRID(X, Y, Z, TR), TITLE=TITLE, LAYOUT=[0], /CURRENT,$
  XTITLE = XTITLE,YTITLE = YTITLE,ZTITLE = ZTITLE,FONT_SIZE=FONT_SIZE)
WAIT,4 & W.CLOSE  
  
    W = WINDOW(DIMENSIONS = [1000,1000],WINDOW_TITLE = ROUTINE_NAME)
  ; SHOW SMOOTH QUINTIC SURFACE:
  S = SURFACE(TRIGRID(X, Y, Z, TR, /QUINTIC),TITLE=TITLE, STYLE=1, /CURRENT,$
  XTITLE = XTITLE,YTITLE = YTITLE,ZTITLE = ZTITLE,FONT_SIZE=FONT_SIZE)
WAIT,4 & W.CLOSE  
  
  W = WINDOW(DIMENSIONS = [1000,1000],WINDOW_TITLE = ROUTINE_NAME)
  ; SHOW SMOOTH EXTRAPOLATED SURFACE:
  S = SURFACE(TRIGRID(X, Y, Z, TR, EXTRA = B),TITLE=TITLE, /CURRENT,$
  XTITLE = XTITLE,YTITLE = YTITLE,ZTITLE = ZTITLE,FONT_SIZE=FONT_SIZE)
WAIT,4 & W.CLOSE
  W = WINDOW(DIMENSIONS = [1000,1000],WINDOW_TITLE = ROUTINE_NAME)
  ; SET OUTPUT GRID SIZE TO 12 X 24:
  S = SURFACE( TRIGRID(X, Y, Z, TR, NX=N_ELEMENTS(X), NY=N_ELEMENTS(Y)),TITLE='12X24 GRID', STYLE=1, /CURRENT,$
  XTITLE = XTITLE,YTITLE = YTITLE,ZTITLE = ZTITLE,FONT_SIZE=FONT_SIZE)
WAIT,4 & W.CLOSE  
  STOP
ENDIF;IF DO_OPAL_SURFACE GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||
;
;
;
;*****************************
IF DO_SETS_KX GE 1 THEN BEGIN
;*****************************  SKIPPING
OVERWRITE = DO_SETS_KX EQ 2
PRINT,' CALIBRATION DATA SET 1998-03-30 MEAN PPD SHOULD BE 3.52667 '
  MAP = 'SMI' & MAP_IN = MAP   
SMI_PX = 4320 & SMI_PY = 2160
DIR_OUT = !S.IDL_TEMP
MAP_OUT = 'NORTHEAST_US_CONTINENTAL_SHELF_J' 
DIR= GET_SMI()
  BATHY_FILE=!S.DATA +'SRTM30-SMI-PXY_4320_2160-BATHY.SAVE' & PF,BATHY_FILE,/X
TARGETS = '19980330' & PRINT,TARGETS & WAIT,2
DO_PNG = 1

CHL_FILES     = FILE_SEARCH(DIR.STATS,'D_'+ TARGETS +'*CHLOR_A-MEAN.SAVE') & PN,CHL_FILES,'CHL_FILES' & PRINT,CHL_FILES 
PAR_FILES     = FILE_SEARCH(DIR.STATS,'D_'+ TARGETS +'*PAR-MEAN.SAVE') & PN,PAR_FILES,'PAR_FILES' & P,PAR_FILES
SST_FILES     = FILE_SEARCH(DIR.STATS,'D_'+ TARGETS +'*SST-*') & P,SST_FILES
ADG_443_FILES = FILE_SEARCH(DIR.STATS,'D_'+ TARGETS +'*ADG_443-MEAN.SAVE') & PN,ADG_443_FILES,'ADG_443_FILES' & P,ADG_443_FILES 
  
FN_CHL = FILE_PARSE(CHL_FILES)          & DATE_CHL =      STRMID(PERIOD_2DATE(FN_CHL.FIRST_NAME),0,8)
FN_PAR = FILE_PARSE(PAR_FILES)          & DATE_PAR =      STRMID(PERIOD_2DATE(FN_PAR.FIRST_NAME),0,8)
FN_SST = FILE_PARSE(SST_FILES)          & DATE_SST =      STRMID(PERIOD_2DATE(FN_SST.FIRST_NAME),0,8)
FN_ADG_443 = FILE_PARSE(ADG_443_FILES)  & DATE_ADG_443 =  STRMID(PERIOD_2DATE(FN_ADG_443.FIRST_NAME),0,8)

;===> CONCATENATE ALL FILES IN A SPECIFIC ORDER 
;    REQUIRED FOR WHERE_SETS TO WORK PROPERLY
FILES = [CHL_FILES,PAR_FILES,SST_FILES,ADG_443_FILES]
SETS= WHERE_SETS([DATE_CHL,DATE_PAR,DATE_SST,DATE_ADG_443]) & PN,SETS,'SETS'
OK = WHERE(SETS.N EQ 4,COUNT) & SETS=SETS[OK]  & PN,SETS,'SETS OF 4'
DATES = SETS.VALUE & PERIOD = 'D_' + DATES
KX_METHODS='A_CDOM_443_NO_BOTTOM'
;KX_METHODS=['A_CDOM_443_UNCONSTRAINED','A_CDOM_443_CONSTRAINED', 'A_CDOM_300_2_ACDOM_443','A_CDOM_0_02']
KX_METHODS = 'A_CDOM_300_2_ACDOM_443'
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _KX_METHOD = 0,N_ELEMENTS(KX_METHODS) -1 DO BEGIN
    KX_METHOD = KX_METHODS(_KX_METHOD)
    ;########################################################################################
    FOR _SET = 0,N_ELEMENTS(SETS)-1 DO BEGIN   ; MAIN LOOP ON SETS OF FILES
    ;######################################################################################
      SET = SETS(_SET)    
      POF,_SET,SETS
      SUBS = WHERE_SETS_SUBS(SET)
      ;===> INFO FOR SAVEFILE
      PERIOD_TXT='D_' + SET.VALUE 
      PP_FILE = DIR_OUT + PERIOD_TXT +'-'+ MAP_OUT+ '-OPAL-PPD-'+KX_METHOD + '.SAVE'
      IF OVERWRITE EQ 0 AND FILE_TEST(PP_FILE) EQ 1 THEN BEGIN
        PRINT,'SKIPPING  ' + PP_FILE
        CONTINUE ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      ENDIF;IF OVERWRITE EQ 0 AND FILE_TEST(PP_FILE) EQ 1 THEN BEGIN
      
    ;$$$$$    READ THE DATA FILES     $$$$$  PRODS = ['CHLOR_A', 'PAR','SST','ADG_443']     
      CHL_FILE = FILES(SUBS[0]) &       CHL = STATS_READ(CHL_FILE)    & PFILE,CHL_FILE,/R
      PAR_FILE = FILES(SUBS[1]) &       PAR     = STATS_READ(PAR_FILE)    & PFILE,PAR_FILE,/R
      SST_FILE = FILES(SUBS(2))&        SST     = STATS_READ(SST_FILE)    & PFILE,SST_FILE,/R
      ADG_443_FILE = FILES(SUBS(3)) &A_CDOM_443 = STATS_READ(ADG_443_FILE)& PFILE,ADG_443_FILE,/R
      BOTTOM_DEPTH                              = STRUCT_SD_READ(BATHY_FILE)  & PFILE,BATHY_FILE,/R 
      
      INFILE = [CHL_FILE,PAR_FILE,SST_FILE,ADG_443_FILE]
      COVERAGE='9KM'
      ALG= 'OPAL'
      DATA_UNITS=UNITS('PPD')   
     
     
      ;******************************
      IF MAP_OUT NE MAP_IN THEN BEGIN
      ;******************************
        BOTTOM_DEPTH = MAP_REMAP(TEMPORARY(BOTTOM_DEPTH),MAP_IN = MAP_IN,MAP_OUT=MAP_OUT,PX_OUT=512, PY_OUT=512)
        CHL      = MAP_REMAP(TEMPORARY(CHL),MAP_IN = MAP_IN,MAP_OUT=MAP_OUT,PX_OUT=512, PY_OUT=512)
        PAR          = MAP_REMAP(TEMPORARY(PAR),MAP_IN = MAP_IN,MAP_OUT=MAP_OUT,PX_OUT=512, PY_OUT=512)
        SST          = MAP_REMAP(TEMPORARY(SST),MAP_IN = MAP_IN,MAP_OUT=MAP_OUT,PX_OUT=512, PY_OUT=512)
        A_CDOM_443   = MAP_REMAP(TEMPORARY(A_CDOM_443),MAP_IN = MAP_IN,MAP_OUT=MAP_OUT,PX_OUT=512, PY_OUT=512)
      ENDIF;  IF MAP_OUT NE MAP_IN THEN BEGIN
        
        ;######## ENSURE CHLINPUTS FOR OPAL ARE PRESENT #########      
        OK_OPAL = WHERE(  CHL      NE MISSINGS(CHL),COUNT_OPAL )   
        
       IF COUNT_OPAL EQ 0 THEN CONTINUE ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       
 ;$$$$$  ##################################################################  $$$$$
  ;**************************************************
       IF KX_METHOD EQ  'A_CDOM_443_UNCONSTRAINED' THEN BEGIN
       ;**************************************************
        KX =   A_CDOM_443 
        NOTES=" KX = GSM_ADG_443 "
      ENDIF;IF KX_METHOD EQ  'A_CDOM_443_UNCONSTRAINED' THEN BEGIN
      ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||
      
 
       ;**************************************************
       IF KX_METHOD EQ  'A_CDOM_443_CONSTRAINED' THEN BEGIN
       ;**************************************************
        KX =   A_CDOM_443 
          ;##### CONSTRAIN NON-MISSING KX BETWEEN 0.001 AND 1 
        OK_KX = WHERE(KX NE MISSINGS(KX),COUNT_KX)
        KX(OK_KX) =   0.001 > KX(OK_KX)  < 1
        NOTES=" KX = GSM_ADG_443  = 0.001 > KX  < 1 "
      ENDIF;IF KX_METHOD =  'A_CDOM_443_CONSTRAINED' THEN BEGIN
      ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||
      
      ;**************************************************
       IF KX_METHOD EQ  'A_CDOM_443_NO_BOTTOM' THEN BEGIN
       ;**************************************************
        KX =   A_CDOM_443 
       
        NOTES=" KX = GSM_ADG_443 -NO_BOTTOM "
      ENDIF;IF KX_METHOD =  'A_CDOM_443_NO_BOTTOM' THEN BEGIN
      ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||
       
       ;**************************************
        IF KX_METHOD EQ  'A_CDOM_300_2_ACDOM_443' THEN BEGIN
       ;**************************************
          A_CDOM_443 =  A_CDOM_300_2_A_CDOM_443(A_CDOM_443) 
          KX = TEMPORARY(A_CDOM_443)  
          NOTES=" KX =  A_CDOM_300 =  A_CDOM_443*EXP(-0.021*(443-300)) "
        ENDIF;IF KX_METHOD =  'A_CDOM_300_2_ACDOM_443' THEN BEGIN
      ;||||||||||||||||||||||||||||||||||||||||||||
      
      ;****************************************
      IF KX_METHOD EQ 'A_CDOM_0_02' THEN BEGIN
      ;****************************************
        KX =   A_CDOM_443 
        OK_KX = WHERE(KX NE MISSINGS(KX),COUNT_KX)
        KX(OK_KX) =   0.02
        NOTES=" KX = 0.02 "
      ENDIF; IF KX_METHOD EQ 'A_CDOM_0_02' THEN BEGIN
      ;||||||||||||||||||||||||||||||||||||||||||||||
      TIMER
      
 
        
      ;||||||||||||||||||||||||||||||||||||||
      ;===> ENSURE THAT ALL ARRAYS INPUT TO PP_OPAL ARE SAME DIMENSIONS
       SZ_CHL       = SIZEXYZ(CHL)
       SZ_BOTTOM_DEPTH  = SIZEXYZ(BOTTOM_DEPTH)
       SZ_PAR           = SIZEXYZ(PAR)
       SZ_SST           = SIZEXYZ(SST)
       SZ_KX            = SIZEXYZ(KX)
       
       
       IF  SZ_CHL.PX NE SZ_BOTTOM_DEPTH.PX OR $
       SZ_CHL.PY NE SZ_BOTTOM_DEPTH.PY OR $
       SZ_PAR.PX     NE SZ_BOTTOM_DEPTH.PX OR $
       SZ_PAR.PY     NE SZ_BOTTOM_DEPTH.PY OR $
       SZ_SST.PX     NE SZ_BOTTOM_DEPTH.PX OR $
       SZ_SST.PY     NE SZ_BOTTOM_DEPTH.PY OR $
       SZ_KX.PX      NE SZ_BOTTOM_DEPTH.PX OR $
       SZ_KX.PY      NE SZ_BOTTOM_DEPTH.PY THEN BEGIN
        ERROR = 'ARRAY DIMENSIONS FOR BOTTOM DEPTH, CHL, PAR, SST, AND KX MUST BE EQUAL  '
        MESSAGE,ERROR
       ENDIF;IF  SZ_CHL.PX NE SZ_BOTTOM_DEPTH.PX OR $
       
      ; ####### MAKE ARRAY TO HOLD PPD FROM OPAL #####
      PPD_OPAL = CHL & PPD_OPAL(*) = MISSINGS(PPD_OPAL)
            
       IF N_ELEMENTS(INITIALIZE) EQ 0 THEN INITIALIZE = 1 ELSE INITIALIZE = 0
        
;        PASS ONLY COMPLETE DATA SETS[OK_OPAL] TO PP_OPAL FOR EFFICIENCY
      IF KX_METHOD EQ  'A_CDOM_443_CONSTRAINED_NO_BOTTOM' THEN BEGIN
      GONE,BOTTOM_DEPTH
        
       PPD= PP_OPAL(INITIALIZE = INITIALIZE, $
  ;   *** REQUIRED INPUT ***          (ONE VALUE OR ARRAY, SST_SAT AND PAR MUST MATCH SIZE OF CHL)
      CHL       = CHL,        $; REMOTELY-SENSED CHLOROPHLL CONCENTRATION (MG M-3)
      PAR           = PAR,            $; PAR (EINSTEIN M-2 D-1)
      SST           = SST,            $; SEA SURFACE TEMPERATURE (DEGREES C)
      KX            = KX             ); ABSORPTION BY 'OTHER: I.E. CDOM'
  
      ENDIF ELSE BEGIN      
     
           
     PPD= PP_OPAL(INITIALIZE = INITIALIZE, $
  ;   *** REQUIRED INPUT ***          (ONE VALUE OR ARRAY, SST_SAT AND PAR MUST MATCH SIZE OF CHL)
      CHL       = CHL,        $; REMOTELY-SENSED CHLOROPHLL CONCENTRATION (MG M-3)
      PAR           = PAR,            $; PAR (EINSTEIN M-2 D-1)
      SST           = SST,            $; SEA SURFACE TEMPERATURE (DEGREES C)
      KX            = KX,             $; ABSORPTION BY 'OTHER: I.E. CDOM'
  
  ;   *** OPTIONAL INPUT ***          (MUST MATCH SIZE OF CHL)
      BOTTOM_DEPTH  = BOTTOM_DEPTH); BOTTOM DEPTH (M)
       ENDELSE; IF KX_METHOD EQ  'A_CDOM_443_CONSTRAINED_NO_BOTTOM' THEN BEGIN
      ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
      
  ;===> REFORM PPD TO 2 DIMENSIONS
  IF MAP_OUT NE 'SMI' THEN PPD = FLOAT(REFORM(PPD,512,512))
    IF MAP_OUT EQ 'SMI' THEN PPD = FLOAT(REFORM(PPD,SMI_PX,SMI_PY))
      ;##### ASSIGN OUTPUT FROM OPAL TO THE 2D PPD_OPAL ARRAY FROM ABOVE  #####
      PRINT
      
      PPD_OPAL = PPD
      OK = WHERE(PPD_OPAL NE MISSINGS(PPD_OPAL))
      S=STATS(PPD_OPAL[OK])
      REPORT,TARGETS + '   ' +KX_METHOD + '  '  +'MEAN(PPD_OPAL)' + ROUNDS(S.MEAN,4)
      ;===> REFORM PPD TO 2 DIMENSIONS
;      IF MAP_OUT NE 'SMI' THEN PPD = FLOAT(REFORM(PPD,512,512))
;      IF MAP_OUT EQ 'SMI' THEN PPD = FLOAT(REFORM(PPD,SMI_PX,SMI_PY))
      
      ;===> WRITE STRUCTURE
            STRUCT_SD_WRITE,PP_FILE,PROD='PPD',  ASTAT='DATA',KX_METHOD =KX_METHOD,$
                        IMAGE=PPD_OPAL,      MISSING_CODE=MISSINGS(PPD), $
                        MASK=MASK,        CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
                        SCALING=SCALING,  INTERCEPT=INTERCEPT,  SLOPE=SLOPE,TRANSFORMATION=TRANSFORMATION,$
                        DATA_UNITS=DATA_UNITS,PERIOD=PERIOD_TXT, $
                        SENSOR=SENSOR,$
                        SATELLITE=SATELLITE,$
                        COVERAGE=COVERAGE,$
                        ALG=ALG,$
                        INFILE=INFILE,$
                        NOTES=NOTES,ERROR=ERROR
            TIMER,/STOP
      
  IF DO_PNG GE 1 THEN BEGIN
    STRUCT_SD_2PNG,PP_FILE,/ADD_COLORBAR,/ADD_LAND,OVERWRITE=OVERWRITE
    PFILE,PP_FILE,/W
  ENDIF;IF DO_PNG GE 1 THEN BEGIN      
ENDFOR;FOR _SET = 0,N_ELEMENTS(SETS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

ENDFOR;  FOR _KX_METHOD = 0,N_ELEMENTS(KX_METHODS) -1 DO BEGIN


ENDIF;IF DO_SETS_KX GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||
;


;
;**************************************
IF DO_LME_PPY_CSV GE 1 THEN BEGIN
  ;**************************************
  DB= IDL_RESTORE('F:\SMI\LME_DATA\UNEP_MAIN-D_PPD.SAVE') & PN,DB
  SETS = WHERE_SETS(DB.MAP) & PN,SETS,' MAPS '
  MAPS = SETS.VALUE & PL,MAPS
  CSV = REPLICATE(CREATE_STRUCT('MAP','','PPY',0.0),N_ELEMENTS(MAPS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  
    AMAP = MAPS[NTH]
    OK = WHERE(DB.MAP EQ AMAP)
    D = DB[OK]
    PL,D.AMEAN
    PL,D.MED
    OK = WHERE(FINITE(D.AMEAN) EQ 1,COUNT,COMPLEMENT = COMPLEMENT) & P,(100.0* COUNT)/N_ELEMENTS(D)
    JD = PERIOD_2JD(D.PERIOD) & YF = JD_2DYEAR(JD)
    AX = DATE_AXIS(JD,/ENDS) & ST,AX
    ;PLOT,AX.JD,Y, XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,/XSTYLE, XTITLE=AX.TITLE
    
    P = PLOT(JD,D.AMEAN,THICK = 3,YTITLE = UNITS('PPD'),FONT_SIZE = 12,XTICKNAME = AX.TICKNAME)
    P = PLOT(JD,REPLICATE(1,N_ELEMENTS(JD)),/OVERPLOT,COLOR = 'MAGENTA',THICK = 5,TITLE =AMAP )
    
    ;CSV_WRITE,'JUNK.CSV',D(OK)
    PPY = ROUNDS(TOTAL(D.AMEAN,/NAN))
    ANN = PPY +UNITS('PPY',/NO_NAME)
    T = TEXT(0.60,0.75,/NORMAL,ANN,FONT_SIZE = 25,COLOR = 'DARK RED')
    PNGFILE = !S.IDL_TEMP + 'PP_OPAL' + '-' + AMAP + '.PNG'
    P.SAVE, PNGFILE,  RESOLUTION=RES,WIDTH = 800,HEIGHT = 800 ,BORDER = 10
    PFILE,PNGFILE,/W
    P.CLOSE
    CSV[NTH].MAP = AMAP
    CSV[NTH].PPY = PPY
  ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  CSVFILE = DIR_SAV + 'DO_LME_PPY_CSV.CSV'
  CSV_WRITE,CSVFILE,CSV & PF,CSVFILE
  
ENDIF;IF DO_LME_PPY_CSV GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||

;***************************************
IF DO_PLOT_LME_ANNUAL_CYCLE GE 1 THEN BEGIN
;***************************************
DB= IDL_RESTORE('F:\SMI\LME_DATA\UNEP_MAIN-D_PPD.SAVE') & PN,DB
SETS = WHERE_SETS(DB.MAP) & PN,SETS,' MAPS '
MAPS = SETS.VALUE & PL,MAPS

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN

  AMAP = MAPS[NTH]
  OK = WHERE(DB.MAP EQ AMAP)
  D = DB[OK]
  PL,D.AMEAN
  PL,D.MED
  OK = WHERE(FINITE(D.AMEAN) EQ 1,COUNT,COMPLEMENT = COMPLEMENT) & P,(100.0* COUNT)/N_ELEMENTS(D)
  JD = PERIOD_2JD(D.PERIOD) & YF = JD_2DYEAR(JD)
  AX = DATE_AXIS(JD,/ENDS) & ST,AX
  ;PLOT,AX.JD,Y, XTICKS=AX.TICKS,XTICKNAME=AX.TICKNAME,XTICKV=AX.TICKV,/XSTYLE, XTITLE=AX.TITLE
  
  P = PLOT(JD,D.AMEAN,THICK = 3,YTITLE = UNITS('PPD'),FONT_SIZE = 12,XTICKNAME = AX.TICKNAME)
  P = PLOT(JD,REPLICATE(1,N_ELEMENTS(JD)),/OVERPLOT,COLOR = 'MAGENTA',THICK = 5,TITLE =AMAP )
  
  ;CSV_WRITE,'JUNK.CSV',D(OK)
  ANN = ROUNDS(TOTAL(D.AMEAN,/NAN)) +UNITS('PPY',/NO_NAME)
  T = TEXT(0.60,0.75,/NORMAL,ANN,FONT_SIZE = 25,COLOR = 'DARK RED')
  PNGFILE = !S.IDL_TEMP + 'PP_OPAL' + '-' + AMAP + '.PNG'
  P.SAVE, PNGFILE,  RESOLUTION=RES,WIDTH = 800,HEIGHT = 800 ,BORDER = 10
  PFILE,PNGFILE,/W
  P.CLOSE
ENDFOR;FOR NTH = 0,N_ELEMENTS(MAPS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
STOP
ENDIF;IF DO_PLOT_LME_ANNUAL_CYCLE GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||............

;*******************************************
IF DO_COMPARE_GLOBAL_KIM_JAY GE 1 THEN BEGIN
;*******************************************
FILE_KIM ="C:\IDL\KIM-IDL\D_19980330-SEA_AV4-9-GEQ-PXY_4096_2048-PPD-OPAL.SAVE"
PP_KIM = STRUCT_SD_READ(FILE_KIM,STRUCT = S)
;===> REMAP BIG GEQ TO SMALLER GEQ
PP_KIM= MAP_REMAP(PP_KIM,MAP_IN = 'GEQ',MAP_OUT = 'GEQ',PX_OUT = 4320,PY_OUT = 2160)
STATS_K_PP = STATS(PP_KIM)
KIM_PP_NORTHEAST = GET_LME_DATA(PP_KIM,7)
SK_NE = STATS(KIM_PP_NORTHEAST)
FILE_JAY = !S.PROGRAMS + 'D_19980330-OPAL-PPD.SAVE'
PP_JAY = STATS_READ(FILE_JAY)
STATS_J_PP = STATS(PP_JAY)
JAY_PP_NORTHEAST = GET_LME_DATA(PP_JAY,7)
SJ_NE =STATS(JAY_PP_NORTHEAST)
P,STATS_K_PP.MIN,STATS_J_PP.MIN
P,STATS_K_PP.MAX,STATS_J_PP.MAX
P,STATS_K_PP.MED,STATS_J_PP.MED
P,STATS_K_PP.MEAN,STATS_J_PP.MEAN

P,SK_NE.MIN,SJ_NE.MIN
P,SK_NE.MAX,SJ_NE.MAX
P,SK_NE.MED,SJ_NE.MED

P,SK_NE.MIN/SJ_NE.MIN
P,SK_NE.MAX/SJ_NE.MAX
P,SK_NE.MED/SJ_NE.MED

STOP
ENDIF;IF DO_COMPARE_GLOBAL_KIM_JAY GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||

;************************************
IF DO_WRITE_PROFILES GE 1 THEN BEGIN
;************************************
  LAYERS = 100
  FILE = !S.IDL_TEMP + REPLACE(ROUTINE_NAME,'_','-') +'-' +'NLAYERS' + '_'+ ROUNDS(LAYERS) + '-'+ STRMID(DATE_NOW(),0,8)+ '.SAV'
  IF FILE_TEST(FILE) EQ 1 THEN BEGIN
    CLOSE,/ALL
    FILE_DELETE,FILE,/VERBOSE
  ENDIF;IF FILE_TEST(FILE) EQ 0 THEN BEGIN

  ;FFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR CHL = 1.0, 100.0 DO BEGIN 
    IF CHL EQ 1.0 THEN INIT = 1 ELSE INIT = 0  
    PPD = PP_OPAL(CHL = CHL, SST = 16.0, PAR=40., KX = 0.01,N_LAYERS=100,STRUCT=S,/FILE,INIT=INIT)
    IF FILE_TEST(FILE) EQ 0 THEN  OPENW,1,FILE
    WRITEU,1,S
    IF CHL EQ 100.0 THEN CLOSE,1
  ENDFOR;FOR CHL = 1.0, 4.0 DO BEGIN
STOP
GONE,S
T = PP_STRUCT()
 OPENR,1,FILE
;FFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 1,100 DO BEGIN 
  READU,1,T & P,T.SEQ,T.CHL
ENDFOR;FOR NTH = 1,4 DO BEGIN
ENDIF;IF DO_WRITE_PROFILES GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||| 


;*******************************
IF DO_1000_RUNS GE 1 THEN BEGIN
;*******************************
  ,'DO_1000_RUNS'
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR CHL = 1.0,1000.0 DO BEGIN 
    IF CHL EQ 1. THEN INIT = 1 ELSE INIT = 0
    IF CHL EQ 1000. THEN CLOSE = 1 ELSE CLOSE = 0

    PPD = PP_OPAL(CHL = CHL, SST = 16.0, PAR=40., KX = 0.01,LAYERS=100,STRUCT=S,/PROFILES,INIT=INIT,CLOSE=CLOSE)
    P,'SEQUENCE ',S.SEQ,' CHL ',S.CHL,' PPD ',S.PPD
  ENDFOR;FOR CHL = 1.0,1000.0 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
 ,'DO_1000_RUNS' 
ENDIF;IF DO_1000_RUNS GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||

;************************************
IF KEY(DO_USE_KX_PROFILE) THEN BEGIN
;************************************
  SWITCHES,DO_USE_KX_PROFILE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  
    CHLS = INTERVAL([-3,2],BASE = 10,0.125)
    DB = REPLICATE(CREATE_STRUCT('MODEL','OPAL','CHL',0.0,'PAR',0.0,'SST',0.0,'PPA',0.0,'PPB',0.0),N_ELEMENTS(CHLS))
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_ELEMENTS(CHLS)-1 DO BEGIN
      CHL = CHLS[NTH]
      PPA = PP_OPAL(CHL = CHL, SST = 15., PAR=55., KX = 0.02,STRUCT=STRUCT)
      DB[NTH].CHL = STRUCT.CHL
      DB[NTH].PAR = STRUCT.PAR
      DB[NTH].SST = STRUCT.SST
      DB[NTH].PPA = STRUCT.PPD
      PPB = PP_OPAL(CHL = CHL, SST = 15., PAR=55., KX = 0.02,STRUCT=STRUCT,/USE_KX_PROFILE)
      DB[NTH].PPB = STRUCT.PPD
    ENDFOR;FOR NTH = 0,N_ELEMENTS(CHLS)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    P1 = PLOT(DB.CHL,(DB.PPB-DB.PPA), COLOR = 'BLUE', THICK = 5,/XLOG,$
      TITLE = '',XTITLE = UNITS('CHL'),YTITLE = UNITS('PPD'), NAME = 'KX_PROFILE-KX_UNIFORM',FONT_SIZE = 12,MARGIN = [0.15,.15,.05,.05])

    XPOS = 0.65 & YPOS = 0.25
    LEG = LEGEND(TARGET=[P1], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
    TXT = ['CHL = 1','SST = 15','PAR = 55','KX = 0.02'] & 
    TXT = [ 'SST = 15'+ UNITS('SST',/NO_NAME),'PAR = 55'+ UNITS('PAR',/NO_NAME)] & 
    T = TEXT(0.05,0.45,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 12)
    P1.SAVE, DIR_FIGS +'DO_USE_KX_PROFILE.PNG'
    ;WAIT,7
    P1.CLOSE    
    CSV_WRITE,DIR_SAV +'DO_USE_KX_PROFILE.CSV',DB
    ,'DO_USE_KX_PROFILE'
ENDIF;IF KEY(DO_USE_KX_PROFILE) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||

;************************************
IF KEY(DO_VERT_PROFILES) THEN BEGIN
  ;************************************
  SWITCHES,DO_VERT_PROFILES,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP

  CHL = 0.2  
  PP = PP_OPAL(CHL = CHL, SST = 15., PAR=55., KX = 0.0,STRUCT=PPA,/PROFILES)
  PP = PP_OPAL(CHL = CHL, SST = 15., PAR=55., KX = 0.02,STRUCT=PPB,/USE_KX_PROFILE,/PROFILES)
  
  P1 = PLOT(1000*PPA.PROFILE_PP,-1*PPA.Z, COLOR = 'GREEN', THICK = 5,$
    TITLE = '',XTITLE = UNITS('PP_MGCM3D'),YTITLE = UNITS('DEPTH'), NAME = 'KX_UNIFORM',FONT_SIZE = 12,MARGIN = [0.15,.15,.05,.05])
  P2 = PLOT(1000*PPB.PROFILE_PP,-1*PPA.Z, COLOR = 'BLUE', THICK = 5,$
    TITLE = '',XTITLE = UNITS('PP_MGCM3D'),YTITLE = UNITS('DEPTH'), NAME = 'KX_PROFILE',FONT_SIZE = 12,MARGIN = [0.15,.15,.05,.05],/CURRENT,/OVERPLOT)

  XPOS = 0.40 & YPOS = 0.95
  LEG = LEGEND(TARGET=[P1,P2], POSITION=[XPOS,YPOS], /RELATIVE, /AUTO_TEXT_COLOR)
  TXT = ['CHL = 1','SST = 15','PAR = 55','KX = 0.02'] & 
  TXT = ['CHL ='+ ROUNDS(CHL,2)+ UNITS('CHLOR_A',/NO_NAME), 'SST = 15'+ UNITS('SST',/NO_NAME),'PAR = 55'+ UNITS('PAR',/NO_NAME),'KX_surface = 0.02'+ UNITS('ADG_443',/NO_NAME)] 
  T = TEXT(0.55,0.45,TXT,/RELATIVE,TARGET=P1,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 12)
  P1.SAVE, DIR_FIGS +'DO_VERT_PROFILES.PNG'
  ;WAIT,7
  P1.CLOSE
  CSV_WRITE,DIR_SAV +'DO_VERT_PROFILES.CSV',DB
  ,'DO_VERT_PROFILES'
ENDIF;IF KEY(DO_VERT_PROFILES) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||

;***********************
IF KEY(DO_TANH) THEN BEGIN
  ;***********************
  SWITCHES,DO_TANH,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP

  CHL = 1
  SST = 15
  PAR = 55
  PP = PP_OPAL(CHL = CHL, SST = 15., PAR=55., KX = 0.02,STRUCT=S,/PROFILES)
  ;STOP IN PP_OPAL X = (TANH(EK/PROFILE_PAR)) SAVE,FILENAME = 'JUNK.SAV',X,PROFILE_PAR,/VERB
  X = IDL_RESTORE('JUNK.SAV')
 
  PAR = S.PROFILE_PAR
 DEPTH = S.Z  
 P = PLOT(X,PAR,YTITLE = UNITS('PAR'),XTITLE = '(TANH(EK/PAR))' ,COLOR = 'CRIMSON',THICK = 5)
 TXT = ['CHL = ' + ROUNDS(CHL,2)+ UNITS('CHL',/NO_NAME) , 'SST = 15'+ UNITS('SST',/NO_NAME),'PAR = 55'+ UNITS('PAR',/NO_NAME),'KX = 0.02'+ UNITS('A_CDOM',/NO_NAME)] &
 T = TEXT(0.45,0.395,TXT,/RELATIVE,TARGET=P,/CURRENT,COLOR = 'BLACK',FONT_SIZE = 18)
 
 P
 FILE = DIR_FIGS + 'DO_TANH.PNG'
 P.SAVE,FILE
 P.CLOSE
 PFILE,FILE
ENDIF;IF KEY(DO_TANH) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||


	END; #####################  END OF ROUTINE ################################
