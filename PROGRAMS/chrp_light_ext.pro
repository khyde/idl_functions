; $ID:	CHRP_LIGHT_EXT.PRO,	2020-07-08-15,	USER-KJWH	$


 PRO CHRP_LIGHT_EXT,LIGHT=LIGHT,PROFILE=PROFILE,PSFILE=PSFILE,OUTFILE=OUTFILE
;+
; NAME:
;       CHRP_LIGHT_EXT
;
; PURPOSE:
;       To calculate the extinction coefficient etc. and combine the light and profile data for CHRP
;
;
; MODIFICATION HISTORY:
;       Written by:  Kimberly J.W. Hyde, August 11, 2006
;-


	L = LIGHT
	P = PROFILE

	PSPRINT,/FULL,/COLOR,FILENAME=PSFILE,/TIMES,/LANDSCAPE
	!P.MULTI = [0,1,1]

	NEW = CREATE_STRUCT('ID','','CRUISE','','STATION','','DATE','','DEPTH',0.0,'MAX_DEPTH',0.0,'PROFILE_DEPTH',0.0,$
			'TEMP',0.0,'SALINITY',0.0,'CHLOROPHYLL',0.0,'FLUORESCENCE',0.0,'PERCENT_DO',0.0,'DISS_O2',0.0,'PH',0.0,$
			'RAW_LIGHT',0.0,'COR_LIGHT',0.0,'LIGHT',0.0,'SURFACE_IRRAD',0.0,'AVE_SURFACE',0.0,'STD_SURFACE',0.0,'CV_SURFACE',0.0,$
			'N_DEPTHS',0L,'N_GOOD_DEPTHS',0L,'QC_LIGHT','','QC_SURFACE','','QC_LIGHT_RAW','',$
			'MIN_LI_DEPTH',0.0,'MAX_LI_DEPTH',0.0,'MIXED_DEPTH',0.0,'MIXED_TEMP',0.0,'MIXED_ERROR','',$
  		'KD',0.0,'I0',0.0,'ZEU',0.0,'IZEU',0.0,'RSQ',0.0,'COEFFS','','EXT_MODEL','','QC_KD','','QC_N','', 'QC_LIGHT_SS','')
	NEW = STRUCT_2MISSINGS(NEW)
	NEW = REPLICATE(NEW, N_ELEMENTS(L))

	NEW.CRUISE 					= 	L.CRUISE
	NEW.STATION					=		L.STATION								; STATION
	NEW.DATE						=		L.DATE									; EASTERN STANDARD TIME DATE
	NEW.DEPTH						=		L.DEPTH									; DEPTH OF THE LIGHT READING
	NEW.RAW_LIGHT				= 	FLOAT(L.WATER_PAR)			; RAW IN SITU LIGHT
	NEW.SURFACE_IRRAD		= 	19.2 + (1.098 * FLOAT(L.SURF_PAR)) - (0.00011 * FLOAT(L.SURF_PAR)^2)	; COSINE SURFACE IRRADIANCE CONVERTED TO SCALAR
	NEW.ID							= 	NEW.CRUISE+NEW.DATE+NEW.STATION

; Fill in structure with profile data

	L_ID = NEW.CRUISE + NEW.STATION + NEW.DATE
	P_ID = P.CRUISE + P.STATION + P.DATE
	LP = [L_ID,P_ID]
	SETS = WHERE_SETS(LP)
 	N_FILES = N_ELEMENTS(SETS) & PRINT, 'Number of profiles is: ',N_FILES
	COUNTER = N_ELEMENTS(D)-1
	FOR NTH = 0L, N_FILES-1L DO BEGIN
		PRINT, NTH, ' of ', N_FILES-1
		DSET = SETS[NTH]
		PROF_ID = DSET.VALUE
		OK = WHERE(L_ID EQ PROF_ID,COUNT)
		IF COUNT GE 1 THEN BEGIN
			PROF = NEW[OK]
;	===> WHERE_NEAREST UPCAST DATA TO DOWNCAST DATA
			POK = WHERE(P_ID EQ PROF_ID, COUNT)
			IF COUNT GE 1 THEN PU = P(POK)
			PU = PU[SORT(FLOAT(PU.DEPTH))]

			ARRAY = PROF.DEPTH
			VALUES = FLOAT(PU.DEPTH)
			NEAR = 0.45
			UOK = WHERE_NEAREST(ARRAY,VALUES,count,NEAR=NEAR,valid=valid,NCOMPLEMENT=ncomplement,COMPLEMENT=complement,ninvalid=ninvalid,invalid=invalid)
			IF COUNT GE 1 THEN BEGIN
				NEW(OK(UOK)).PROFILE_DEPTH	= FLOAT(PU(VALID).DEPTH)
				NEW(OK(UOK)).TEMP						= FLOAT(PU(VALID).TEMP)
				NEW(OK(UOK)).SALINITY				= FLOAT(PU(VALID).SALINITY)
				NEW(OK(UOK)).PERCENT_DO			= FLOAT(PU(VALID).PER_DO)
				NEW(OK(UOK)).DISS_O2				= FLOAT(PU(VALID).DO_MG_L)
				NEW(OK(UOK)).CHLOROPHYLL		= FLOAT(PU(VALID).CHLOROPHYLL)
				NEW(OK(UOK)).FLUORESCENCE		= FLOAT(PU(VALID).FLUORESCENCE)
				NEW(OK(UOK)).PH							= FLOAT(PU(VALID).PH)
			ENDIF
		ENDIF
	ENDFOR

	OK = WHERE(NEW.RAW_LIGHT EQ MISSINGS(NEW.RAW_LIGHT),COUNT)		; Only using points where LIGHT is not missing
  IF COUNT GE 1 THEN NEW[OK].QC_LIGHT = 'MIS_LIGHT'
  OK = WHERE(NEW.RAW_LIGHT LE 0.1, COUNT)
  IF COUNT GE 1 THEN NEW[OK].QC_LIGHT = 'LOW_LIGHT'
	OK = WHERE(NEW.SURFACE_IRRAD LE 0,COUNT)											; If surface irradiance is less than zero, make it missings
 	IF COUNT GE 1 THEN NEW[OK].SURFACE_IRRAD = MISSINGS(NEW.SURFACE_IRRAD)

	SETS = WHERE_SETS(NEW.ID)																				; Find the sets associated with each unique profile (text)
	N_PROFILES = N_ELEMENTS(SETS)

	FOR PTH = 0L, N_PROFILES-1L DO BEGIN
  	SUBS = WHERE_SETS_SUBS(SETS(PTH))
		PROF = NEW(SUBS)																						; Using the subscripts, extract the profile from the big STRUCT
		PROFILE_TEXT = FIRST(PROF.CRUISE)+FIRST(PROF.DATE)+FIRST(PROF.STATION)
		OK = WHERE(PROF.QC_LIGHT NE 'MIS_LIGHT',COUNTP)
		IF COUNTP GE 1 THEN BEGIN
			PROFILE = PROF[OK]
			STAT = STATS(PROFILE.SURFACE_IRRAD)												; Perform stats on the surface irradiance for the profile
			OK = WHERE(PROFILE_TEXT EQ NEW.ID,COUNTL)									; Fill in the surface irradiance stats for each profile
			IF COUNTL GE 1 THEN BEGIN
				NEW[OK].AVE_SURFACE = STAT.MEAN													; Fill in NEW structure with the surface irradiance AVERGE
				NEW[OK].STD_SURFACE = STAT.STD													; STANDARD DEVIATION
				NEW[OK].CV_SURFACE	= STAT.CV														; and COEFFICIENT of VARIATION
			ENDIF
		ENDIF
	ENDFOR

	OK = WHERE(NEW.QC_LIGHT EQ 'MIS_LIGHT', COUNTN)
	IF COUNTN GE 1 THEN BEGIN
		NEW[OK].AVE_SURFACE = MISSINGS(NEW.AVE_SURFACE)
		NEW[OK].STD_SURFACE = MISSINGS(NEW.STD_SURFACE)
		NEW[OK].CV_SURFACE	= MISSINGS(NEW.CV_SURFACE)
	ENDIF

	OK = WHERE(NEW.SURFACE_IRRAD EQ MISSINGS(NEW.SURFACE_IRRAD),COUNT1)
	IF COUNT1 GE 1 THEN BEGIN
		NEW[OK].COR_LIGHT = NEW[OK].RAW_LIGHT								; If surface irradiance is MISSINGS then corrected light = raw light
		NEW[OK].QC_SURFACE = 'MIS_SURF'
	ENDIF

	OK = WHERE(NEW.SURFACE_IRRAD NE MISSINGS(NEW.SURFACE_IRRAD),COUNT2)			; If surface irradiance is not MISSINGS then calculate corrected light
	IF COUNT2 GE 1 THEN NEW[OK].COR_LIGHT = (NEW[OK].RAW_LIGHT*NEW[OK].AVE_SURFACE)/NEW[OK].SURFACE_IRRAD		; RAW LIGHT * AVE SURFACE IRRADIANCE/ SURFACE IRRADIANCE

	FOR PTH = 0L, N_PROFILES-1L DO BEGIN
  	SUBS=WHERE_SETS_SUBS(SETS(PTH))
		PROF = NEW(SUBS)
		OK = WHERE(PROF.QC_SURFACE EQ 'MIS_SURF' AND PROF.QC_LIGHT NE 'MIS_LIGHT',COUNT)
		IF COUNT EQ N_ELEMENTS(PROF) THEN BEGIN
			NEW(SUBS).LIGHT = NEW(SUBS).RAW_LIGHT
			NEW(SUBS).QC_LIGHT_RAW = 'RAW'
		ENDIF
	ENDFOR

;		***** QC SUSPECT DATA *****
;   LEAVE DATA IN, BUT PUT SOMETHING IN THE QC FIELD FOR SUBSEQUENT PROGRAMS TO USE TO WEED OUT THESE OBSERVATIONS

	OK = WHERE(NEW.CV_SURFACE NE MISSINGS(NEW.CV_SURFACE) AND NEW.CV_SURFACE GE 5,COUNT3)
 		IF COUNT3 GE 1 THEN NEW[OK].QC_SURFACE = 'CV>5%'												; QC when SURFACE IRRADIANCE CV is > 5%
  OK = WHERE(NEW.CV_SURFACE NE MISSINGS(NEW.CV_SURFACE) AND NEW.CV_SURFACE GE 10,COUNT4)
  	IF COUNT4 GE 1 THEN BEGIN
 	 		NEW[OK].QC_SURFACE = 'CV>10%'																				; QC when SURFACE IRRADIANCE CV is > 10%
			NEW[OK].QC_LIGHT_RAW = 'RAW'																				; QC_LIGHT when raw light was used instead of the corrected light
  		NEW[OK].LIGHT = NEW[OK].RAW_LIGHT																		; NEW.LIGHT is the 'final' light data that will be used in further calculations
  	ENDIF
  OK = WHERE(NEW.CV_SURFACE LT 10, COUNT5)
	 	IF COUNT5 GE 1 THEN NEW[OK].LIGHT = NEW[OK].COR_LIGHT									; When SURFCAE IRRADIANCE CV is < 10%, use corrected light as final light
  OK=WHERE(FLOAT(NEW.LIGHT) LE 1.65,COUNT6)																; Also finds where light data is MISSING
  	IF COUNT6 GE 1 THEN NEW[OK].QC_LIGHT = 'LE_1.65'											; QC light less than 2 uE/m^2s

;		***** ADD ROWS FOR THE EXTINCTION DATA - SETTING ALL DEPTH TO 0 *****
	DSETS = WHERE_SETS(NEW.ID)
  NSETS = N_ELEMENTS(DSETS)
  PRINT, 'Number of Profiles: ', NSETS

	EXT = CREATE_STRUCT('ID','','CRUISE','','STATION','','DATE','','DEPTH',0.0,'MAX_DEPTH',0.0,'PROFILE_DEPTH',0.0,$
		'TEMP',0.0,'SALINITY',0.0,'CHLOROPHYLL',0.0,'FLUORESCENCE',0.0,'PERCENT_DO',0.0,'DISS_O2',0.0,'PH',0.0,$
		'RAW_LIGHT',0.0,'COR_LIGHT',0.0,'LIGHT',0.0,'SURFACE_IRRAD',0.0,'AVE_SURFACE',0.0,'STD_SURFACE',0.0,'CV_SURFACE',0.0,$
		'N_DEPTHS',0L,'N_GOOD_DEPTHS',0L,'QC_LIGHT','','QC_SURFACE','','QC_LIGHT_RAW','',$
		'MIN_LI_DEPTH',0.0,'MAX_LI_DEPTH',0.0,'MIXED_DEPTH',0.0,'MIXED_TEMP',0.0,'MIXED_ERROR','',$
		'KD',0.0,'I0',0.0,'ZEU',0.0,'IZEU',0.0,'RSQ',0.0,'COEFFS','','EXT_MODEL','','QC_KD','','QC_N','', 'QC_LIGHT_SS','')

	EXT = STRUCT_2MISSINGS(EXT)
  EXT = REPLICATE(EXT,N_ELEMENTS(DSETS))
  FOR NTH = 0L, NSETS-1 DO BEGIN
  	SUBS=WHERE_SETS_SUBS(DSETS[NTH])
		P = NEW(SUBS)
		EXT[NTH].ID							= P[0].ID
		EXT[NTH].CRUISE					= P[0].CRUISE
		EXT[NTH].STATION				= P[0].STATION
		EXT[NTH].DATE						= P[0].DATE
		EXT[NTH].MAX_DEPTH			= P[0].MAX_DEPTH
		EXT[NTH].DEPTH					= 0.0
	ENDFOR

	D = STRUCT_CONCAT(NEW,EXT)

	D = D[SORT(D.ID + STRING(D.DEPTH))]
	DSETS = WHERE_SETS(D.ID)
	FOR NTH = 0L, N_ELEMENTS(DSETS)-1L DO BEGIN
		SUBS = WHERE_SETS_SUBS(DSETS[NTH])
		PROFILE = D(SUBS)
		PROFILE = PROFILE[SORT(PROFILE.DEPTH)]
		D(SUBS) = PROFILE
	ENDFOR

	SETS = WHERE_SETS(D.ID)
	N_PROFILES = N_ELEMENTS(SETS)
	PRINT, '     Number of unique profiles is:',N_PROFILES
	FOR NTH = 0L, N_PROFILES-1L DO BEGIN
	print, 'NTH = ',nth
		SUBS = WHERE_SETS_SUBS(SETS[NTH])
		PROFILE = D(SUBS)
		ID = PROFILE[0].ID
		OK = WHERE(PROFILE.LIGHT NE MISSINGS(0.0) AND PROFILE.DEPTH GT 0,COUNT)
		IF COUNT GE 1 THEN PROFILE = PROFILE[OK]
		OK=WHERE(PROFILE.DEPTH NE MISSINGS(0.0), COUNT)  							;Determine the number of depths per profile
		IF COUNT GE 1 THEN D(SUBS[0]).N_DEPTHS = COUNT
;	===> IF light values were dropped, then QC_LIGHT
		OK = WHERE(PROFILE.QC_LIGHT NE '',COUNT_DROPPED)
		IF COUNT_DROPPED GE 1 THEN D(SUBS[0]).QC_LIGHT = 'DROPPED_DATA'
		OK = WHERE (PROFILE.QC_LIGHT EQ 'DROP_BAD',COUNT_BAD)
		IF COUNT_BAD GE 1 THEN D(SUBS[0]).QC_LIGHT = 'DROPPED_QC'
		OK_GOOD = WHERE(PROFILE.QC_LIGHT EQ '', N_GOOD_DEPTHS)				;Looking for data that has not been QC'ed
		IF N_GOOD_DEPTHS GE 1 THEN BEGIN
			PROFILE_GOOD = PROFILE(OK_GOOD)															;PROFILE_GOOD has only the good data
			D(SUBS[0]).N_GOOD_DEPTHS = N_GOOD_DEPTHS										;Number of good depths
			MAX_D = MAX(PROFILE.DEPTH)
			MIN_D = MIN(PROFILE.DEPTH)
			POS_D = (MAX_D - MIN_D)*2																		; Number of possible depths if collected at 0.5 meter intervals
			PER_D = 0.25*POS_D
			IF N_GOOD_DEPTHS LE PER_D THEN D[NTH].QC_N = 'INSUF_DEPTHS'
		ENDIF

		MIN_Z=MIN(FLOAT(PROFILE_GOOD.DEPTH), SHALLOWEST) ; Get the subscript (SUB_SHALLOWEST) for the minimum depth for this profile

;	===> IF the Uppermost Depth is Greater than 5 meters, then SKIP this PROFILE
		IF MIN(FLOAT(PROFILE_GOOD.DEPTH)) GE 5 THEN D(SUBS[0]).QC_KD = 'DEEP_PROFILE'
		IF MIN(FLOAT(PROFILE_GOOD.DEPTH)) GE 5 THEN GOTO, SKIP_PROFILE  ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

; ===> IF the maximum light intensity is LE 5, then SKIP this PROFILE
		IF MAX(FLOAT(PROFILE_GOOD.LIGHT)) LE 10 THEN D(SUBS[0]).QC_KD = 'LOW_LIGHT'
		IF MAX(FLOAT(PROFILE_GOOD.LIGHT)) LE 10 THEN	GOTO, SKIP_PROFILE ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

;	===> IF using RAW data, indicate in the QC_LIGHT
		OK = WHERE (PROFILE_GOOD.QC_LIGHT_RAW EQ 'RAW',COUNT_RAW)
		IF COUNT_RAW GE 1 THEN D(SUBS[0]).QC_LIGHT_RAW = 'RAW'

; ===> IF N_GOOD_DEPTHS GE 2 Then Calculate Light Extinction (Kd)
		IF N_GOOD_DEPTHS GE 3 THEN BEGIN
			PROFILE_GOOD = PROFILE_GOOD[SORT(PROFILE_GOOD.DEPTH)]
			OK = WHERE(PROFILE_GOOD.LIGHT NE MISSINGS(0.0),COUNT)
			IF COUNT LE 1 THEN D(SUBS[0]).QC_KD = 'MISSING_LIGHT'
			IF COUNT LE 1 THEN GOTO, SKIP_PROFILE
			OK = WHERE(PROFILE_GOOD.MAX_DEPTH NE MISSINGS(0.0) AND PROFILE_GOOD.MAX_DEPTH GT 1,COUNT)

			TITLE = STRMID(ID,0,6) +' ' + STRMID(ID,14,2) + ' ' + STRMID(ID,6,4) + '-' + STRMID(ID,10,2) + '-' + STRMID(ID,12,2)

			CHL_OK = WHERE(PROFILE.CHLOROPHYLL NE MISSINGS(0.0),COUNT_C)
			IF COUNT_C GE 1 THEN BEGIN
				C_SORT = PROFILE(CHL_OK)
				C_SORT = C_SORT[SORT(C_SORT.PROFILE_DEPTH)]
				CDEPTH = C_SORT.PROFILE_DEPTH
				CHL 	 = C_SORT.CHLOROPHYLL
			ENDIF
			T_OK = WHERE(PROFILE.TEMP NE MISSINGS(0.0),COUNT_T)
			IF COUNT_T GE 1 THEN BEGIN
				T_SORT = PROFILE(T_OK)
				T_SORT = T_SORT[SORT(T_SORT.PROFILE_DEPTH)]
				TDEPTH = T_SORT.PROFILE_DEPTH
				TEMP 	 = T_SORT.TEMP
			ENDIF
			YMARGIN = [7,7]
			STRUCT=LIGHT_EXTINCTION_COEFFICIENT(DEPTH=PROFILE_GOOD.DEPTH, LIGHT=PROFILE_GOOD.LIGHT, ST_DEPTH=ST_DEPTH,CHL=CHL, CDEPTH=CDEPTH, TEMP=TEMP, TDEPTH=TDEPTH, TITLE=TITLE, YMARGIN=YMARGIN, AVE_SURF=AVE_SURF, /SHOW)
; ===> Fill in the rest of the info in the OUTPUT structure with the results for this profile
			D(SUBS[0]).MIN_LI_DEPTH		 			= STRUCT.MIN_DEPTH
  		D(SUBS[0]).MAX_LI_DEPTH 				= STRUCT.MAX_DEPTH
			IF STRUCT.BULK_KD EQ MISSINGS(0.0) THEN BEGIN
				IF STRUCT.RSQ_LIN GE STRUCT.RSQ_EXP OR STRUCT.KD_EXP EQ MISSINGS(0.0) THEN BEGIN
					D(SUBS[0]).KD = STRUCT.KD_LIN
					D(SUBS[0]).I0 = STRUCT.I0_LIN
					D(SUBS[0]).RSQ = STRUCT.RSQ_LIN
					D(SUBS[0]).ZEU = STRUCT.ZEU_LIN
					D(SUBS[0]).IZEU = STRUCT.IZEU_LIN
					D(SUBS[0]).COEFFS = STRUCT.COEFFS_LIN
					D(SUBS[0]).EXT_MODEL = 'LINEAR'
				ENDIF ELSE BEGIN
					D(SUBS[0]).KD = STRUCT.KD_EXP
					D(SUBS[0]).I0 = STRUCT.I0_EXP
					D(SUBS[0]).RSQ = STRUCT.RSQ_EXP
					D(SUBS[0]).ZEU = STRUCT.ZEU_EXP
					D(SUBS[0]).IZEU = STRUCT.IZEU_EXP
					D(SUBS[0]).COEFFS = STRUCT.COEFFS_EXP
					D(SUBS[0]).EXT_MODEL = 'EXPONENTIAL'
				ENDELSE
			ENDIF ELSE BEGIN
				D(SUBS[0]).KD = STRUCT.BULK_KD
				D(SUBS[0]).I0 = STRUCT.BULK_I0
				D(SUBS[0]).RSQ = STRUCT.RSQ_UP
				D(SUBS[0]).ZEU = STRUCT.BULK_ZEU
				D(SUBS[0]).IZEU = STRUCT.BULK_IZEU
				D(SUBS[0]).COEFFS = STRUCT.BULK_COEFFS
				D(SUBS[0]).EXT_MODEL = 'LINEAR-UP'
			ENDELSE

			IF D(SUBS[0]).RSQ LT 0.95 THEN BEGIN
				PRINT, '		EVALUATE LIGHT PROFILE'; & IF D(SUBS(0)).RSQ LT 0.95 THEN STOP
				XPOS= !X.CRANGE[0]+0.3*ABS(!X.CRANGE[1]-!X.CRANGE[0])
				YPOS= -0.75*ABS(!Y.CRANGE[0]-!Y.CRANGE[1])
				TXT  = 'R!E2!N ( ' + STRMID(STRTRIM(D(SUBS[0]).RSQ,2),0,5) + ') < 0.95 ===> EVALUATE LIGHT PROFILE' $
				        + '!CMODEL = ' + D(SUBS[0]).EXT_MODEL
				XYOUTS, XPOS,YPOS ,TXT,/DATA,ALIGN=0.0, COLOR=0,CHARSIZE=1.5
			ENDIF ELSE BEGIN
				XPOS= !X.CRANGE[0]+0.3*ABS(!X.CRANGE[1]-!X.CRANGE[0])
				YPOS= -0.75*ABS(!Y.CRANGE[0]-!Y.CRANGE[1])
				TXT  = 'R!E2!N = ' + STRMID(STRTRIM(D(SUBS[0]).RSQ,2),0,5) $
				        + '!CMODEL = ' + D(SUBS[0]).EXT_MODEL
				XYOUTS, XPOS,YPOS ,TXT,/DATA,ALIGN=0.0, COLOR=0,CHARSIZE=1.5
			ENDELSE
		ENDIF ELSE D(SUBS[0]).QC_KD = 'N_GOOD_LE_3'
    SKIP_PROFILE: ;;If surface light intensity is too low
	ENDFOR
	PSPRINT
	OUTFILE=D
RETURN
END
