; $ID:	MAPS_L3B_GS_DEMO.PRO,	2021-04-15-17,	USER-KJWH	$
; #########################################################################; 
PRO MAPS_L3B_GS_DEMO
;+
; PURPOSE:  DEMO FOR THE GS MAPS
;
; CATEGORY: MAPS_ FAMILY
;
;
; INPUTS: NONE
;
;
; KEYWORDS:  NONE

; OUTPUTS: DEPENDING THE STEP
;
;; EXAMPLES:
;
; MODIFICATION HISTORY:
;    FEB 23, 2017 -      WRITTEN BY: J.E. O'REILLY
;    MAR 02, 2017 - JEOR: ADED STEP GS_10_TEST  
;    MAR 03, 2017 - JEOR: ADDED USING XPYP STRUCT TO STEP GS_L3B_EC_TEST
;    MAR 04, 2017 - JEOR: ADDED  STEP MAKE_STRUCT_XPYP
;    MAR 05, 2017 - JEOR: ADDED L3B10,GS10 TO STEP MAKE_STRUCT_XPYP
;    MAR 11, 2017 - JEOR: ADDED STEP COMPARE_LL2BIN_MAPS_L3B_LONLAT_2BIN 
;    MAR 12, 2017 - JEOR: ADDED STEP L3B10_BINS_TABLE 
;    MAR 14, 2017 - JEOR: NOW USING MAPS_L3B_LONLAT_2BIN 
;    MAR 14, 2017 - KJWH: ADDED STEP L3B_2_2D TO CONVERT A 1D L3B MAP TO 2D
;    MAY O1, 2017-  JEOR: CHANGED [FIXED]  P0_LON IN MAPS_MASTER FROM -180 TO 0.0 FOR ALL GS MAPS
;    MAY O2, 2017-  JEOR: ADDED STEP SHOW_GS_180S
;    MAY 04, 2017,  JEOR: BINS_PER_ROW = FIX(ROUND(X_RIGHT-X_LEFT))
;                         PLOTS,LONS_LEFT,LATBINS,PSYM = 3,COLOR = 26
;                         PLOTS,LONS_RIGHT,LATBINS,PSYM = 3,COLOR = 26
;                         REMAKE LANDMASKS [NOW THAT P0_LON IS CORRECT]
;    MAY 08, 2017,  JEOR: FIXED SUBSCRIPTING PROBLEM : X = X_LEFT(ROW)+I - 0.5
;                         Y = Y_LEFT(ROW)
;                         ADDED STEP MAKE_MAPS_SWAP_L3BGS
;    MAY 09, 2017,  JEOR: ADDED STEP TEN_L3B_GS_CYCLES
;    AUG 25, 2017 - KJWH: OVERHAULED THE L3B_2_2D STEP TO DEMONSTRATE THE MANUAL METHOD TO CREATE THE GS ARRAYS FROM THE L3B FILES
;                         COMMENTED OUT THE "MAKE_STRUCT_XPYP" STEP BECAUSE IT CREATES INACCURATE XPYP FILES  
;    DEC 11, 2017 - KJWH: Changed LL.LON/LAT to LL.LONS/LATS
;-
; #########################################################################

;************************
ROUTINE = 'MAPS_L3B_GS_DEMO'
;************************
DIR_OUT = !S.DEMO + ROUTINE + PATH_SEP() & DIR_TEST,DIR_OUT

MAKE_GS_LANDMASKS                 =  ''
GS_L3B_EC_TEST                    =  ''
;MAKE_STRUCT_XPYP                  =  '';MAKES SAV FILES IN !S.MAPINFO - DO NO RUN THIS STEP (SEE MODIFICATION HISTORY 8/25/2017)
GS_10_TEST                        =  ''; NOT SURE IF STEP IS WORKING YET
DO_L3B_CHL                        =  ''
COMPARE_LL2BIN_MAPS_L3B_LONLAT_2BIN = ''
L3B10_BINS_TABLE                 = ''
L3B_COMPARE_PIXELS_PER_ROW       = ''
L3B_2_2D                         = 'YV'
SHOW_GS_180S                     = ''
SHOW_L3B_2GS_MAP                 = ''
MAKE_MAPS_SWAP_L3BGS             = ''
TEN_L3B_GS_CYCLES                = ''

;*******************************
  IF KEY(MAKE_GS_LANDMASKS) THEN BEGIN
;******************************
    SWITCHES,MAKE_GS_LANDMASKS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    PRINT,'THIS STEP MAKES LANDMASKS FOR THE GS* MAPS'  
    IF STOPP THEN STOP
    MAPS = ['GS1','GS2','GS4','GS9','GS10']
    MAPS = REVERSE(MAPS)
   
  ;FRFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,NOF(MAPS)-1 DO BEGIN
      MAPP = MAPS[NTH]
      IF !S.USER EQ 'JEOR' AND (MAPP EQ 'GS1' OR MAPP EQ 'GS2') THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>
      PFILE,MAPP,/M
      MAPS_LANDMASK,MAPP,OVERWRITE=OVERWRITE
      IF STOPP THEN STOP
    ENDFOR;FOR NTH = 0,NOF(MAPS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  ENDIF;IF KEY(MAKE_GS_LANDMASKS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;******************************
IF KEY(GS_L3B_EC_TEST) THEN BEGIN
;******************************
  SWITCHES,GS_L3B_EC_TEST,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP REMAPS THE GS9 LANDMASK TO THE EC MAP AND
  PRINT, '1)REMAPS THE GS9 LANDMASK TO L3B9 BINNED'
  PRINT, '2)THEN REMAPS THE L3B9BINNED TO A GS9 MAP'
  PRINT, '3) THEN REMAPS THE GS9 MAP TO A EC MAP'
  PRINT, '4) THEN THE EC MAP FROM STEP 1 IS COMPARED WITH THAT FROM STEP 3'
      
  IF STOPP THEN STOP
  L3BMAP = 'L3B9'
  PAL_LANDMASK,R,G,B
  GS9 = READ_LANDMASK('GS9')
  EC1 = MAPS_REMAP(GS9,MAP_IN = 'GS9',MAP_OUT = 'EC',STRUCT_XPYP=S)
  MAPP = GS9(S.XP,S.YP)
  ST,S
  STOP
  PNG =DIR_OUT + 'GS9_2EC.PNG'
  WRITE_PNG,PNG,EC1,R,G,B
  PFILE,PNG
  PNG =DIR_OUT + 'GS9_2EC-XPYP.PNG'
  WRITE_PNG,PNG,MAPP,R,G,B
  PFILE,PNG
  IF IDLTYPE(GS9) NE 'BYTE' THEN STOP
  L3B= MAPS_REMAP(GS9,MAP_IN = 'GS9',MAP_OUT = L3BMAP,STRUCT_XPYP=S)  
  H,L3B
  ST,S
  BINS = MAPS_L3B_BINS(L3BMAP)
  IF STOPP THEN STOP
  GS9_2 = MAPS_REMAP(L3B,MAP_IN = L3BMAP,BINS=BINS,MAP_OUT = 'GS9',STRUCT_XPYP=S)
  H,GS9_2
  ST,S
  EC2 = MAPS_REMAP(GS9_2,MAP_IN = 'GS9',MAP_OUT = 'EC',STRUCT_XPYP=S)
  H,EC2
  ST,S
  PNG =DIR_OUT + 'L3B9_2GS9_2EC.PNG'
  WRITE_PNG,PNG,EC2,R,G,B
  PFILE,PNG  
  MAPP = GS9(S.XP,S.YP)
  PNG =DIR_OUT + 'L3B9_2GS9_2EC-XPYP.PNG'
  WRITE_PNG,PNG,MAPP,R,G,B
  PFILE,PNG
  IF STOPP THEN STOP 
ENDIF;IF KEY(GS_L3B_EC_TEST) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||


;*******************************
  IF KEY(MAKE_STRUCT_XPYP) THEN BEGIN
;******************************
    
    PRINT, 'THIS STEP SHOULD NOT BE RUN - THE XPYP FILES IT CREATES ARE NOT CORRECT'
    STOP
    STOP
    STOP

;    SWITCHES,MAKE_STRUCT_XPYP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
;    PRINT,'THIS STEP MAKES A SERIES OF STRUCT_XPYP SAV FILES IN !S.MAPINFO'
;    PRINT,'THESE WILL BE USED TO REMAP FROM GS MAPS TO L3B MAPS AND FROM L3B MAPS TO GS MAPS'
;    IF STOPP THEN STOP
;    MAPS_IN = REVERSE( [ 'GS1', 'GS2', 'GS4', 'GS9','GS10'])
;    MAPS_OUT = REVERSE(['L3B1','L3B2','L3B4','L3B9','L3B10'])
;    IF !S.USER EQ 'JEOR' THEN BEGIN;MEMORY LIMITATIONS
;      MAPS_IN = REVERSE( ['GS4', 'GS9','GS10'])
;      MAPS_OUT = REVERSE(['L3B4','L3B9','L3B10'])   
;    ENDIF;IF !S.USER EQ 'JEOR' THEN BEGIN
;    DONE_SWAP= 0  
;    AGAIN:
;    ;FRFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;    FOR NTH = 0,NOF(MAPS_IN)-1 DO BEGIN
;      MAP_IN  = MAPS_IN[NTH]   & MSIN  = MAPS_SIZE(MAP_IN, PX=PX_MAP_IN, PY=PY_MAP_IN)
;      MAP_OUT = MAPS_OUT[NTH]  & MSOUT = MAPS_SIZE(MAP_OUT,PX=PX_MAP_OUT,PY=PY_MAP_OUT)
;      
;      MAP_TXT = MAP_IN+'_'+STRTRIM(PX_MAP_IN,2)+'_'+STRTRIM(PY_MAP_IN,2)+'_'+STRTRIM(STRUPCASE(MAP_OUT),2)+'_'+STRTRIM(PX_MAP_OUT,2)+'_'+STRTRIM(PY_MAP_OUT,2)
;      FILE = !S.MAPINFO + 'XPYP-' + MAP_TXT + '.SAV'
;      TXT = MAP_IN + '  TO ===> ' + MAP_OUT + ' ' + FILE
;      IF EXISTS(FILE) AND KEY(OVERWRITE) EQ 0 THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>
;      
;      IF KEY(VERBOSE) THEN PFILE,TXT,/M
;      IF STOPP THEN STOP
;      IN = MAPS_BLANK(MAP_IN,FILL=1.0) ;===> MAKE A SUITABLE ARRAY FOR MAP_IN
;      OUT= MAPS_REMAP(IN, MAP_IN=MAP_IN, MAP_OUT=MAP_OUT, STRUCT_XPYP=STR, /INIT) ; REMAP  
;      IF MAP_TXT NE STR.MAP_TXT THEN STOP
;      IF KEY(VERBOSE) THEN ST,STR    
;      SAVE,FILE=FILE,STR
;      GONE, STR
;      IF VERBOSE THEN PFILE,FILE
;    ENDFOR;FOR NTH = 0,NOF(MAPS)-1 DO BEGIN
;    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;    SWAP,MAPS_IN,MAPS_OUT
;    
;    IF DONE_SWAP EQ 0 THEN BEGIN
;      DONE_SWAP= 1
;      GOTO,AGAIN 
;    ENDIF;IF DONE_SWAP EQ 0 THEN BEGIN 
;    IF STOPP THEN STOP  
ENDIF;IF KEY(MAKE_STRUCT_XPYP) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;******************************
IF KEY(GS_10_TEST) THEN BEGIN
  ;******************************
  SWITCHES,GS_10_TEST,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,' 1)THIS STEP USES MAPS_SWAP_L3BGS'
  PRINT, '2 TO MAKE GS10 FROM L3B10'
  PRINT, '3) AND COMPARE EACH ROW OF THE GS10 IMAGE WITH FIGURE 1 IN NASAs:'
  PRINT,   'INTEGERIZED SINUSOIDAL BINNING SCHEME FOR LEVEL 3 DATA'
  PRINT,' ! WORK IN PROGRESS: NOT SURE IF IT IS WORKING! YET!'
  IF STOPP THEN STOP
  L3BMAP = 'L3B10'
  L3B = MAPS_L3B_BINS(L3BMAP)
  GS=MAPS_L3BGS_SWAP(L3B,/VERBOSE)
  PNG = DIR_OUT + 'GS_10_TEST.PNG'
  IMG = REBIN(GS,[360,180])
  IMGR,IMG,PNG=PNG
  CLEAR
  ;FFFFFFFFFFFFFFFFFFFFFF
  FOR ROW = 0,17 DO BEGIN
    PRINT,GS(*,ROW)
    PRINT
  ENDFOR;FOR ROW = 0,17 DO BEGIN

  IF STOPP THEN STOP
ENDIF;IF KEY(GS_10_TEST) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(DO_L3B_CHL) THEN BEGIN
;******************************
  SWITCHES,DO_L3B_CHL,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  FILE = !S.FILES + 'S2004241.L3b_DAY_CHL.nc'
  S = READ_NC(FILE,PROD = STRLOWCASE('CHLOR_A'))
  CHL = S.SD.CHLOR_A.DATA
  PMM,CHL
  BINS = S.SD.CHLOR_A.BINS
  L3B9 = MAPS_BLANK('L3B9')
  L3B9(BINS) = CHL
  PMM,L3B9
  TIC
  ;FFFFFFFFFFFFFFFFFFFF
  FOR N = 1,10 DO BEGIN
    GS9 = MAPS_SWAP_L3BGS(L3B9)
    L3B9 = MAPS_SWAP_L3BGS(GS9)
    PMM,L3B9
  ENDFOR;FOR N = 1,10 DO BEGIN
    TOC
    GS9 = MAPS_SWAP_L3BGS(L3B9)
  
  
  PNG = DIR_OUT + 'L3B9_2GS9_TEN_CYCLES-CHL.PNG'
  IMGR,GS9,PROD = 'CHLOR_A',PNG=PNG,MAP = 'GS9'
  

ENDIF;IF KEY(DO_L3B_CHL) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;******************************************************
IF KEY(COMPARE_LL2BIN_MAPS_L3B_LONLAT_2BIN) THEN BEGIN
;******************************************************

  SWITCHES,COMPARE_LL2BIN_MAPS_L3B_LONLAT_2BIN,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP USES  MAPS_L3B_LONLAT_2BIN TO MAKE A BINS TABLE FOR L3B10 AND EACH 10 DEGREES OF LATITUDE'
  
  PLINES
  IF STOPP THEN STOP
  L3BMAP = 'L3B10'
  NROWS = MAPS_L3B_NROWS(L3BMAP)
  LONS = [-180,0.0,180]
  LATS = REPLICATE(-90,NOF(LONS))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR ROW = 0,NROWS-1 DO BEGIN
    IF ROW GE 1 THEN LATS = LATS +10
  ;===> WORKAROUND UNTIL +90 LAT IS FIXED
  IF MAX(LATS) GE 90 THEN GOTO,DO_CSV
  
    BINS_MAP = MAPS_L3B_LL_2BINS( L3BMAP, LONS, LATS)
    D = CREATE_STRUCT('SOURCE','MAPS_L3B_LL_2BINS','LONS',STRTRIM(STRJOIN(LONS,';'),2),'LATS',STRTRIM(STRJOIN(LATS,';'),2),'BINS',STRTRIM(STRJOIN(BINS_MAP,';'),2))
    IF NONE(DB) THEN DB = D ELSE DB = [DB,D]
  
    BINS_MAP = MAPS_L3B_LONLAT_2BIN(L3BMAP, LONS, LATS)
    D = CREATE_STRUCT('SOURCE','MAPS_L3B_LONLAT_2BIN','LONS',STRTRIM(STRJOIN(LONS,';'),2),'LATS',STRTRIM(STRJOIN(LATS,';'),2),'BINS',STRTRIM(STRJOIN(BINS_MAP,';'),2))
    IF NONE(DB) THEN DB = D ELSE DB = [DB,D]

  ENDFOR;FOR ROW = 0,NOF(NROWS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
 DO_CSV:
 CSV = DIR_OUT + 'COMPARE_LL2BIN_MAPS_L3B_LONLAT_2BIN.CSV'
 CSV_WRITE,CSV,DB
ENDIF;IF KEY(COMPARE_LL2BIN_MAPS_L3B_LONLAT_2BIN) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;***********************************
IF KEY(L3B10_BINS_TABLE) THEN BEGIN
  ;******************************************************

  SWITCHES,L3B10_BINS_TABLE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP MAKES A TABLE OF THE BINS AND RELATED INFO FOR THE L3B10 MAP FOR EACH 10 DEGREES OF LATITUDE'
  PLINES
  IF STOPP THEN STOP
  L3BMAP = 'L3B10'
  NROWS = MAPS_L3B_NROWS(L3BMAP)
  LONS = INTERVAL([-180,180],10)
  LATS = REPLICATE(-90,NOF(LONS))
  SOURCES = 'MAPS_L3B_LONLAT_2BIN'
  FOR SOURCE_ = 0,NOF(SOURCES)-1 DO BEGIN
    SOURCE = SOURCES(SOURCE_)

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR ROW = 0,NROWS DO BEGIN
    IF ROW GE 1 THEN LATS = LATS +10
    PMM,LATS
   IF SOURCE EQ 'MAPS_L3B_LONLAT_2BIN' THEN  BINS = MAPS_L3B_LONLAT_2BIN( L3BMAP, LONS, LATS,BASEBIN=BASEBIN,NUMBIN = NUMBIN,LATBIN=LATBIN)
    BINS = UNIQUES(BINS)
    BINS_PER_ROW = NOF(BINS)
    D = CREATE_STRUCT('SOURCE',SOURCE,'LONS',STR_TRIM(STRJOIN(LONS,';')),'LATS',STR_TRIM(STRJOIN(LATS,';')),$
      'BINS_PER_ROW',ROUNDS(BINS_PER_ROW),'BINS',STR_TRIM(STRJOIN(BINS,';')),$
      'NUMBIN',STR_TRIM(NUMBIN),'BASEBIN',STR_TRIM(BASEBIN),'LATBIN',STR_TRIM(ROUNDS(LATBIN)))
    IF NONE(DB) THEN DB = D ELSE DB = [DB,D]
   
  ENDFOR;FOR ROW = 0,NOF(NROWS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  MAKE_CSV:
  CSV = DIR_OUT + 'L3B10_BINS_TABLE-' + SOURCE + '.CSV'
  CSV_WRITE,CSV,DB
  GONE,DB
  ENDFOR;FOR SOURCE_ = 0,NOF(SOURCES)-1 DO BEGIN

ENDIF;IF KEY(L3B10_BINS_TABLE) THEN BEGIN
  
  ;******************************************************
IF KEY(L3B_COMPARE_PIXELS_PER_ROW) THEN BEGIN
  ;******************************************************

  SWITCHES,L3B_COMPARE_PIXELS_PER_ROW,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP COMPARES THE NUMBER OF PIXELS PER ROW FOR THE GS AND L3B MAPS'

  IF STOPP THEN STOP
  
  L3BS = ['L3B10','L3B9', 'L3B4','L3B2'];,'L3B1']
  GSMAPS = ['GS10','GS9', 'GS4','GS2'];,'GS1']
  
  FOR N=0, N_ELEMENTS(L3BS)-1 DO BEGIN
    NROWS = MAPS_L3B_NROWS(L3BS(N))
    DB = REPLICATE(CREATE_STRUCT('ROWS',0L,'L3_LATS',0.0,'L3_PIX_PER_ROW',0L,'GS_LATS',0.0,'GS_PIX_PER_ROW',0L,'DIF_LATS',0.0,'DIF_PIX_PER_ROW',0L),NROWS)
    DB.ROWS = INDGEN(NROWS)
    L3 = MAPS_L3B_2LONLAT(L3BS(N),/INIT)
    LB = WHERE_SETS(L3.LATS)
    DB.L3_LATS = LB.VALUE
    DB.L3_PIX_PER_ROW = LB.N
      
    GS = MAPS_2LONLAT(GSMAPS(N))
    MS = SIZEXYZ(GS.LAT,PX=PX,PY=PY)
    GB = [] & GL = []
    FOR I=0, PY-1 DO BEGIN
      OK = WHERE(FINITE(GS.LATS(*,I)) EQ 1, COUNT)
      DB(I).GS_LATS = GS.LATS(OK[0],I)
      DB(I).GS_PIX_PER_ROW = COUNT
    ENDFOR
    
    DB.DIF_LATS = DB.L3_LATS - DB.GS_LATS
    DB.DIF_PIX_PER_ROW = DB.L3_PIX_PER_ROW - DB.GS_PIX_PER_ROW
     
    CSV = DIR_OUT + 'COMPARE_PIXESL_PER_ROW_' + L3BS(N) + '_' + GSMAPS(N) + '.CSV'
    CSV_WRITE,CSV,DB

  ENDFOR  
  STOP
ENDIF;IF KEY(L3B_COMPARE_PIXELS_PER_ROW) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;******************************************************
IF KEY(L3B_COMPARE_PIXELS_PER_COLUMN) THEN BEGIN
  ;******************************************************

  SWITCHES,L3B_COMPARE_PIXELS_PER_COLUMN,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP COMPARES THE NUMBER OF PIXELS PER ROW FOR THE GS AND L3B MAPS'

  IF STOPP THEN STOP
  
  L3BS = ['L3B10','L3B9', 'L3B4','L3B2'];,'L3B1']
  GSMAPS = ['GS10','GS9', 'GS4','GS2'];,'GS1']

  FOR N=0, N_ELEMENTS(L3BS)-1 DO BEGIN
    
    
    
    L3 = MAPS_L3B_2LONLAT(L3BS(N),/INIT,LONS=LONS,LATS=LATS)
    SZ = SIZEXYZ(LONS,PX=PX,PY=PY)
    DB.COLUMNS = INDGEN(PX)
    DB = REPLICATE(CREATE_STRUCT('COLUMNS',0L,'L3_LONS',0.0,'L3_PIX_PER_COL',0L,'GS_LONS',0.0,'GS_PIX_PER_COL',0L,'DIF_LONS',0.0,'DIF_PIX_PER_COL',0L),NROWS)
  ;  FOR I=0, N
    LB = WHERE_SETS(L3.LONS)
    DB.L3_LATS = LB.VALUE
    DB.L3_PIX_PER_ROW = LB.N

    GS = MAPS_2LONLAT(GSMAPS(N))
    MS = SIZEXYZ(GS.LAT,PX=PX,PY=PY)
    GB = [] & GL = []
    FOR I=0, PY-1 DO BEGIN
      OK = WHERE(FINITE(GS.LAT(*,I)) EQ 1, COUNT)
      DB(I).GS_LATS = GS.LAT(OK[0],I)
      DB(I).GS_PIX_PER_ROW = COUNT
    ENDFOR

    DB.DIF_LATS = DB.L3_LATS - DB.GS_LATS
    DB.DIF_PIX_PER_ROW = DB.L3_PIX_PER_ROW - DB.GS_PIX_PER_ROW

    CSV = DIR_OUT + 'COMPARE_PIXESL_PER_COLUMN_' + L3BS(N) + '_' + GSMAPS(N) + '.CSV'
    CSV_WRITE,CSV,DB

  ENDFOR
  STOP
ENDIF;IF KEY(L3B_COMPARE_PIXELS_PER_COLUMN) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  
  
;***********************************
  IF KEY(L3B_2_2D) THEN BEGIN
;******************************************************

    SWITCHES,L3B_2_2D,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    PRINT,'THIS STEP CONVERTS A 1D L3B MAP TO 2D'
    IF STOPP THEN STOP
    
    NUM = ['10','9','4'];,'2','1']
    SCALES = [20,1,0.5,0.2,0.05] ; FOR PLOTTING PURPOSES
  
    FOR N=0, N_ELEMENTS(NUM)-1 DO BEGIN
      L3B = 'L3B' + NUM(N)
      GSM = 'GS'  + NUM(N)
      
      L31 = MAPS_L3B_BINS(L3B)       ; ARRAY OF L3B BINS
      GS1 = MAPS_L3BGS_SWAP(L31)     ; CONVERT THE L3B ARRAY INTO A GS MAP USING THE "SWAP" SUBSCRIPTS
      GS1[WHERE(GS1 EQ MISSINGS(GS1))] = 0L ; CONVERT MISSING "EDGES" TO 0 TO BE CONSISTENT WITH MANUALLY CREATED GS ARRAY BELOW
      
; ===> MANUALLY CREATE THE GS MAP FROM THE L3B 
      STR = MAPS_L3B_2LONLAT(L3B,/INIT)
      NROWS = STR.NROWS
      B = WHERE_SETS(STR.LATS)
      B = SORTED(B,TAG='VALUE',/A)
      BINS_PER_ROW = B.N
      MAXBINS = MAX(BINS_PER_ROW)
      GS2 = LONARR(MAXBINS,NROWS) 
      FOR I=0,N_ELEMENTS(B)-1 DO BEGIN
        SET = STR.BINS[WHERE_SETS_SUBS(B(I))]
        ROWDIF = MAXBINS-BINS_PER_ROW(I)
        IF ODD(ROWDIF) THEN FIRSTBIN = (ROWDIF-1)/2 ELSE FIRSTBIN = ROWDIF/2 ; NOT ALL ROWS IN THE L3B10 HAVE AN EVEN NUMBER OF "EDGE" PIXELS (THIS MAY BE DIFFERENT FOR THE OTHER L3B MAPS)
        GS2(FIRSTBIN:FIRSTBIN+BINS_PER_ROW(I)-1,I) = SET                     ;  SINCE THE BINBASE BIN REPRESENTS THE 180 DEGREE POSITION, I AM ASSUMING THERE IS ONE LESS "EDGE" PIXEL ON THE LEFT
      ENDFOR
      L32=MAPS_L3BGS_SWAP(GS2)
      
      L3DIF = L31-L32 & PRINT, 'DIFFERENCE BETWEEN THE L3 ARRAYS: ' & PMM, L3DIF
      GSDIF = GS1-GS2 & PRINT, 'DIFFERENCE BETWEEN THE GS ARRAYS: ' & PMM, GSDIF
            
      W1 = WINDOW(DIMENSIONS=[MAXBINS*SCALES(N),NROWS*SCALES(N)])
      BARR1 = BYTSCL(GS1,TOP=250,MIN=0)
      IM1 = IMAGE(BARR1,RGB_TABLE=CPAL_READ('PAL_BR'),MARGIN=0,/CURRENT)
      IF L3B EQ 'L3B10' THEN BEGIN
        FOR R=0, NROWS-1 DO BEGIN
          FOR M=0, MAXBINS-1 DO BEGIN
            IF GS1(M,R) EQ 0 THEN CONTINUE
            T = TEXT(M*SCALES(N),R*SCALES(N),NUM2STR(GS1(M,R)),/DEVICE,COLOR='WHITE',FONT_SIZE=8,TARGET=IM1)      
          ENDFOR
        ENDFOR
      ENDIF
        
      W2 = WINDOW(DIMENSIONS=[MAXBINS*SCALES(N),NROWS*SCALES(N)])
      BARR2 = BYTSCL(GS2,TOP=250,MIN=0)
      IM2 = IMAGE(BARR2,RGB_TABLE=CPAL_READ('PAL_BR'),MARGIN=0,/CURRENT)
      IF L3B EQ 'L3B10' THEN BEGIN
        FOR R=0, NROWS-1 DO BEGIN
          FOR M=0, MAXBINS-1 DO BEGIN
            IF GS2(M,R) EQ 0 THEN CONTINUE
            T = TEXT(M*SCALES(N),R*SCALES(N),NUM2STR(GS2(M,R)),/DEVICE,COLOR='WHITE',FONT_SIZE=8,TARGET=IM2)
          ENDFOR
        ENDFOR 
      ENDIF     
      
      IF KEY(STOPP) THEN STOP
      W1.CLOSE & W2.CLOSE
      
    ENDFOR
  ENDIF ; L3B_2_2D
;|||||||||||||||||||||||||||||||||||||||||||||||||||||


;*******************************
IF KEY(SHOW_GS_180S) THEN BEGIN
;*******************************
  SWITCHES,SHOW_GS_180S,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP MAKES A PNG SHOWING THE PIXELS AT -180 AND +180 DEGREES FOR EACH ROW IN THE L3BMAP'
  IF STOPP THEN STOP
  L3BMAPS  = ['L3B10','L3B9']
  MAPPS    = REPLACE(L3BMAPS,'L3B','GS')
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(L3BMAPS) -1 DO BEGIN
    L3BMAP = L3BMAPS[NTH]
    MAPP   = MAPPS[NTH]
  
   
    L3B_BINS = MAPS_L3B_BINS(L3BMAP)
    NBINS = MAPS_L3B_NBINS(L3BMAP)
    NROWS = MAPS_L3B_NROWS(L3BMAP)
    LATS = -90
    LONS = -180
    ;===> GET BASEBINS,NUMBINS,LATBINS
    BINS = MAPS_L3B_LONLAT_2BIN( L3BMAP, LONS, LATS,BASEBIN=BASEBINS,NUMBIN = NUMBINS,LATBIN=LATBINS)
    ;===> LAST LATBINS FOR GL3B10 [ 95] IS 95 IS INCORRECT, LAST LATBINS  IS ALSO INCORRECT  FOR L3B9
 
    OK = WHERE(LATBINS LT 90,COUNT)
  
    IF COUNT GE 1 THEN BEGIN
      LATBINS = LATBINS[OK]
      BASEBINS= BASEBINS[OK]
      NUMBINS = NUMBINS[OK]
    ENDIF;OK = WHERE(LATBINS LT 90,COUNT)

    ;===> LEFT SIDE OF THE GS MAP
    LONS_LEFT = REPLICATE(-180.0,NOF(LATBINS))
    MAPS_SET,MAPP
    ;===> PLOT LONS_LEFT,LATBINS
  
    ;===> GET X_LEFT,Y_LEFT
    XYZ = CONVERT_COORD(LONS_LEFT,LATBINS,/DATA,/TO_DEVICE,/DOUBLE)
    X_LEFT = REFORM(XYZ(0,*))
    Y_LEFT = REFORM(XYZ(1,*))
  
    ;===> GET X_RIGHT,Y_RIGHT
    LONS_RIGHT = -1 *LONS_LEFT
    XYZ = CONVERT_COORD(LONS_RIGHT,LATBINS,/DATA,/TO_DEVICE,/DOUBLE)
    X_RIGHT = REFORM(XYZ(0,*))
    Y_RIGHT = REFORM(XYZ(1,*))
  
    PRINT,'BINS_PER_ROW'
    BINS_PER_ROW = FIX(ROUND(X_RIGHT-X_LEFT))
    PRINT,BINS_PER_ROW
    PRINT,NUMBINS
    ;===> DOES THE CALCULATED BINS_PER_ROW = NUMBINS  ?
    IF SAME(BINS_PER_ROW,NUMBINS) EQ 0 THEN MESSAGE,'ERROR:COMPUTED BINS_PER_ROW NOT EQUAL TO NUMBINS'
    
    PAL_36,R,G,B
    PLOTS,LONS_LEFT,LATBINS,PSYM = 3,COLOR = 26
    PLOTS,LONS_RIGHT,LATBINS,PSYM = 3,COLOR = 26
    IMG = TVRD()
    PNG = DIR_OUT + 'SHOW_GS_180S-' + MAPP + '.PNG'
    WRITE_PNG,PNG,IMG,R,G,B & PFILE,PNG
    ZWIN
  ENDFOR;FOR NTH = 0,NOF(L3BMAPS) -1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
,'SHOW_GS_180S'
ENDIF;IF KEY(SHOW_GS_180S) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||

;**********************************
IF KEY(SHOW_L3B_2GS_MAP) THEN BEGIN
;**********************************
  SWITCHES,SHOW_L3B_2GS_MAP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  PRINT,'THIS STEP MAKE A PNG SHOWING THE AREA-PIXELS ENCOMPASSED BY THE L3BMAP IN THE CORRESPONDING GS  MAPP'
  IF STOPP THEN STOP
  L3BMAPS  = ['L3B10','L3B9']
  MAPPS    = REPLACE(L3BMAPS,'L3B','GS')
  L3BMAPS  = 'L3B9'
  MAPPS    = 'GS9'
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(L3BMAPS) -1 DO BEGIN
    L3BMAP = L3BMAPS[NTH]
    MAPP   = MAPPS[NTH]
    PFILE,L3BMAP + '> ' +MAPP + '   PNG',/M
  BINS = MAPS_L3B_BINS(L3BMAP)
  NROWS =  MAPS_L3B_NROWS(L3BMAP)
  BIN2LL, NROWS,BINS,OUTLAT,OUTLON,TOTBINS=TOTBINS
  MAPS_SET,MAPP
  XYZ = CONVERT_COORD(OUTLON,OUTLAT,/DATA,/TO_DEVICE,/DOUBLE)
  XP = REFORM(XYZ(0,*))
  YP = REFORM(XYZ(1,*))
  PAL_36,R,G,B
  
  ;===> MAKE AN PNG SHOWING PIXEL XP,YP LOCATIONS
  IMG = BYTE(MAPS_BLANK(MAPP))
  IMG(XP,YP) = 26
  PNG = DIR_OUT + 'SHOW_L3B_2GS_MAP-' + MAPP + '.PNG'
  WRITE_PNG,PNG,IMG,R,G,B & PFILE,PNG
  ZWIN
  PRINT,'NOTE IN BOTH THE GS10 & GS9 MAP THAT THERE ARE UNFILLED [BLACK] PIXELS ALONG 0 DEG LONGITUDE [CENTER] ROUNDING ERRORS?'
ENDFOR;FOR NTH = 0,NOF(L3BMAPS) -1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
,'SHOW_L3B_2GS_MAP'
ENDIF;IF KEY(SHOW_L3B_2GS_MAP) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||
;
;
;**************************************
IF KEY(MAKE_MAPS_SWAP_L3BGS) THEN BEGIN
  ;*************************************
  SWITCHES,MAKE_MAPS_SWAP_L3BGS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  L3BMAPS  = ['L3B10','L3B9']
;  L3BMAPS  = ['L3B10']
  MAPPS    = REPLACE(L3BMAPS,'L3B','GS')
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(L3BMAPS) -1 DO BEGIN
    L3BMAP = L3BMAPS[NTH]
    MAPP   = MAPPS[NTH]


    L3B_BINS = MAPS_L3B_BINS(L3BMAP)
    NBINS = MAPS_L3B_NBINS(L3BMAP)
    NROWS = MAPS_L3B_NROWS(L3BMAP)
    LATS = -90
    LONS = -180
    ;===> GET BASEBINS,NUMBINS,LATBINS
    B = MAPS_L3B_LONLAT_2BIN( L3BMAP, LONS, LATS,BASEBIN=BASEBINS,NUMBIN = NUMBINS,LATBIN=LATBINS)
    ;===> LAST LATBINS FOR GL3B10 [ 95] IS 95 IS INCORRECT, LAST LATBINS  IS ALSO INCORRECT  FOR L3B9

    OK = WHERE(LATBINS LT 90,COUNT)

    IF COUNT GE 1 THEN BEGIN
      LATBINS = LATBINS[OK]
      BASEBINS= BASEBINS[OK]
      NUMBINS = NUMBINS[OK]
    ENDIF;OK = WHERE(LATBINS LT 90,COUNT)

    ;===> LEFT SIDE OF THE GS MAP
    LONS_LEFT = REPLICATE(-180.0,NOF(LATBINS))
    MAPS_SET,MAPP
    SL3B = MAPS_SIZE(L3BMAP) 
    SMAP = MAPS_SIZE(MAPP) 
    ;===> PLOT LONS_LEFT,LATBINS

    ;===> GET X_LEFT,Y_LEFT
    XYZ = CONVERT_COORD(LONS_LEFT,LATBINS,/DATA,/TO_DEVICE,/DOUBLE)
    X_LEFT = REFORM(XYZ(0,*)) 
    Y_LEFT = REFORM(XYZ(1,*))

    ;===> GET X_RIGHT,Y_RIGHT
    LONS_RIGHT = -1 *LONS_LEFT
    XYZ = CONVERT_COORD(LONS_RIGHT,LATBINS,/DATA,/TO_DEVICE,/DOUBLE)
    X_RIGHT = REFORM(XYZ(0,*))
    Y_RIGHT = REFORM(XYZ(1,*))
    ZWIN
     
     
    BINS_PER_ROW = FIX(ROUND(X_RIGHT-X_LEFT))
          
    ;===> DOES THE CALCULATED BINS_PER_ROW = NUMBINS  ?
    IF SAME(BINS_PER_ROW,NUMBINS) EQ 0 THEN MESSAGE,'ERROR:COMPUTED BINS_PER_ROW NOT EQUAL TO NUMBINS'
    
    IF STOPP THEN STOP
  
     BINS = MAPS_BLANK(MAPP)
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR ROW = 0,NROWS-1 DO BEGIN
      POF,ROW,NROWS
      BASE = BASEBINS(ROW)
      
      NUM = NUMBINS(ROW)
      ;FFFFFFFFFFFFFFFFFFFFFF
      FOR I = 1,NUM  DO BEGIN
        IF I EQ 1 THEN VAL = BASE ELSE VAL = VAL + 1
        X = X_LEFT(ROW)+I - 0.5
        Y = Y_LEFT(ROW)  
        BINS(X,Y) = VAL
      ENDFOR;      FOR I = 1,NUM  DO BEGIN
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    ENDFOR;FOR ROW = 0,NROWS-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
  
;===> CHECK EACH ROW FOR COUNT EQ NUMBINS 
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR ROW = 0,NROWS-1 DO BEGIN
    A = BINS(*,ROW)
    NUM = NUMBINS(ROW)
    OK = WHERE(FINITE(A),COUNT)
    IF COUNT NE NUM THEN MESSAGE,'ERROR: COUNT OF NUMBINS FOR ROW IS INCORRECT'
  ENDFOR;FOR ROW = 0,NROWS-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ;
  ;===> GET THE XP,YP COORDS FOR THE MAPP
  XY = IMG_XPYP(BINS)
  XP = XY.X
  YP = XY.Y
  
  STOP
  ;===> MAKR A COPY OF BINS [TO CONSERVE 2D ARR]
  ARR = BINS

  ;===> GET JUST THE FINITE DATA IN BINS
  OK = WHERE(FINITE(BINS),COUNT) & IF COUNT NE NBINS THEN MESSAGE,'ERROR: CORRUPT ARRAY'

  BINS = BINS[OK]
  XP = XP[OK]
  YP = YP[OK]
 
 
  ;===> MAKE A SAV FILE FOR MAPS_SWAP_L3BGS
  TXT = 'SWAP-' + L3BMAP +'_'+ MAPP + '.SAV'
  SAV = !S.MAPINFO + TXT
  SAVE,FILENAME = SAV,BINS,XP,YP,/VERBOSE
STOP
 
 S = SIZEXYZ(ARR)
 ;===> MAKE PNG IMAGE
 PNG = DIR_OUT + 'MAKE_MAPS_SWAP_L3BGS-' + MAPP + '.PNG'
 IF MAPP EQ 'GS10' THEN ARR =REBIN(ARR,[S.PX*8,S.PY*8])
 IMGR,ARR,PNG = PNG
    
  ENDFOR;FOR NTH = 0,NOF(L3BMAPS) -1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  ,'MAKE_MAPS_SWAP_L3BGS'
ENDIF;IF KEY(MAKE_MAPS_SWAP_L3BGS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||

;*******************************
IF KEY(TEN_L3B_GS_CYCLES) THEN BEGIN
  ;******************************
  SWITCHES,TEN_L3B_GS_CYCLES,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  FILE = !S.FILES + 'S2004241.L3b_DAY_CHL.nc'
  S = READ_NC(FILE,PROD = STRLOWCASE('CHLOR_A'))
  CHL = S.SD.CHLOR_A.DATA
  PMM,CHL
  BINS = S.SD.CHLOR_A.BINS
  L3B9 = MAPS_BLANK('L3B9')
  L3B9(BINS) = CHL
  PMM,L3B9
  GS9 = MAPS_SWAP_L3BGS(L3B9)
  GS9_MF = MEDIAN_FILL(GS9,COUNT,BOX = [3,5])
  PNG = DIR_OUT + 'L3B9_2GS9-CHL.PNG'
  IMGR,GS9,PROD = 'CHLOR_A',PNG=PNG,MAP = 'GS9'
  PNG = DIR_OUT + 'L3B9_2GS9-MF-CHL.PNG'
  IMGR,GS9_MF,PROD = 'CHLOR_A',PNG=PNG,MAP = 'GS9'
  ;===> ALSO MAKE A GEQ FOR COMPARISON
  GEQ = MAPS_REMAP(L3B9,MAP_IN = 'L3B9',MAP_OUT = 'GEQ')
  PNG = DIR_OUT + 'L3B9_2GEQ-CHL.PNG'
  IMGR,GEQ,PROD = 'CHLOR_A',PNG=PNG,MAP = 'GEQ'

ENDIF;IF KEY(TEN_L3B_GS_CYCLES) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||





END; #####################  END OF ROUTINE ################################
