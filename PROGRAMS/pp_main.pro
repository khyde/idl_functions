; $ID:	PP_MAIN.PRO,	2020-07-08-15,	USER-KJWH	$
;#############################################################################################################
	PRO PP_MAIN
	
;  PRO PP_MAIN    INITIAL
;+
; NAME:
;		PP_MAIN
;
; PURPOSE: THIS PROGRAM IS A MAIN TO RUN SAT PRODUCTIVITY MODELS
;          AND OUTPUT PPD SAVE FILES 
;
; OUTPUTS: A PPD SAVEFILE FOR EACH SET OF CHL,PAR,SST AND KX FILES
;
;
; MODIFICATION HISTORY:
;			MAY 4, 2013 WRITTEN BY J.O'REILLY
;			MAY 8, 2013,JOR  DIR =GET_DIR()
;     MAY 12,2013,JOR: ADDED STEPS DO_PP_DATES_2SAVE,DO_MAKE_TS_CSV
;     MAR 3, 2014,JOR STREAMLINED AND UPDATED [GET_SMI]	
;     MAR 4, 2014,JOR, ERROR FIXED: IMAGE=PPD,	TO  IMAGE=PPD_OPAL
;     MAR 9, 2014,JOR, ADDED MODELS LOOP & VGPM2A 
;     MAR 15,2014,JOR REPLACED ADG_443 WITH KX
;			
;			
;#################################################################################
;-
;************************
ROUTINE_NAME  = 'PP_MAIN'
;************************
;TIMER DATE_RANGE

;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
;CCCCC     CONSTANTS & DEFAULTS     CCCCC
;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
PROD = 'PPD'
DATE_RANGE = ['19960101','20141231'] ;###> EDIT DATE RANGE AS NEEDED
DATE_RANGE = ['20000101','20001231'] ;###> EDIT DATE RANGE AS NEEDED
DIR =GET_SMI()
DIR_IN = DIR.STATS
DIR_OUT = DIR.PP
PERIOD_CODE = 'D_'
MAP = 'SMI' & MAP_IN = MAP & MAP_OUT = 'SMI' 
SMI_PX = 4320 & SMI_PY = 2160
COVERAGE='9KM'
TRANSFORMATION = '' ; STORED IN SAVE FILE 
DATA_UNITS=UNITS(PROD)
BOTTOM_FILE=!S.DIR_DATA +'SRTM30-SMI-PXY_4320_2160-BATHY.SAVE'
BOTTOM_DEPTH = STRUCT_SD_READ(BOTTOM_FILE) & PRINT,'MIN BOTTOM_DEPTH:  ' +STR_COMMA(MIN(BOTTOM_DEPTH,/NAN)),' MAX BOTTOM_DEPTH: '+STR_COMMA(MAX(BOTTOM_DEPTH,/NAN))
LAND_MASK = READ_LANDMASK(MAP=MAP,PX=PX,PY=PY,/LAND)
;|||||||||||||||||||||||||||||||||||||||||||||||||||
;
;SSSSSSSSSSSSSSSSSSSSSSSSSSSS
;SSSSS     SWITCHES     SSSSS  [ 2 = OVERWRITE ]
DO_PNG            = 0
DO_PP_MODELS      = 1
DO_LME_PPY_CSV    = 0
;SSSSS     SWITCHES     SSSSS
;|||||||||||||||||||||||||||
;
;#############################################################################

;******************************
IF DO_PP_MODELS GE 1 THEN BEGIN
;******************************
OVERWRITE = DO_PP_MODELS EQ 2 & IF DO_PP_MODELS EQ 3 THEN STOP

;MODELS = ['OPAL','VGPM2A']
;MODELS = 'VGPM2A'
MODELS = 'OPAL'
;KX_NAME = 'ADG_443'
KX_NAME = 'A_CDOM'


;#################################################################
;##########          MAIN LOOP ON MODELS         #################
;#################################################################
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _MODEL = 0,N_ELEMENTS(MODELS)-1 DO BEGIN
  MODEL = MODELS(_MODEL) & PFILE,MODEL,/M & WAIT,2 
  ;===> GET THE  INPUT STATS MEAN FILES:
  CHL_FILES = FILE_SEARCH(DIR_IN,'D_*CHLOR_A-MEAN.SAVE') & PN,CHL_FILES,'CHL_FILES' & P,FIRST(CHL_FILES) & P,LAST(CHL_FILES)
  PAR_FILES = FILE_SEARCH(DIR_IN,'D_*PAR-MEAN.SAVE') & PN,PAR_FILES,'PAR_FILES' & P,FIRST(PAR_FILES) & P,LAST(PAR_FILES)
  SST_FILES = FILE_SEARCH(DIR_IN,'D_*PAT-9KM-SMI-SST-N_11UM-INTERP-TS_IMAGES-MEAN.SAVE') & PN,SST_FILES,'SST_FILES' & P,FIRST(SST_FILES) & P,LAST(SST_FILES)
  KX_FILES=FILE_SEARCH(DIR_IN,'D_*' + KX_NAME + '-STATS*.SAVE') & PN,KX_FILES,'KX_FILES' & P,FIRST(KX_FILES) & P,LAST(KX_FILES)  
  
  
  ;===> PARSE FILES AND EXTRACT DATES:
  FN_CHL      = FILE_PARSE(CHL_FILES)          & DATE_CHL =      STRMID(PERIOD_2DATE(FN_CHL.FIRST_NAME),0,8)
  FN_PAR      = FILE_PARSE(PAR_FILES)          & DATE_PAR =      STRMID(PERIOD_2DATE(FN_PAR.FIRST_NAME),0,8)
  FN_SST      = FILE_PARSE(SST_FILES)          & DATE_SST =      STRMID(PERIOD_2DATE(FN_SST.FIRST_NAME),0,8)
  FN_KX  = FILE_PARSE(KX_FILES)                & DATE_KX  =      STRMID(PERIOD_2DATE(FN_KX.FIRST_NAME),0,8)
  
  ;===> CONCATENATE ALL FILES IN A SPECIFIC ORDER [ REQUIRED FOR WHERE_SETS TO WORK PROPERLY]
  FILES = [CHL_FILES,PAR_FILES,SST_FILES,KX_FILES]
  
  SETS= WHERE_SETS([DATE_CHL,DATE_PAR,DATE_SST,DATE_KX]) & PN,SETS,'SETS'
  OK = WHERE(SETS.N EQ 4,COUNT) & SETS=SETS[OK]  & PN,SETS,'SETS OF 4'
  
  DATES = SETS.VALUE & PERIODS = 'D_' + DATES
   
  IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
    JD_RANGE = DATE_2JD(DATE_RANGE)
    JD = DATE_2JD(DATES)
    OK_JD = WHERE(JD GE JD_RANGE[0] AND JD LE JD_RANGE[1],COUNT_JD)
    IF COUNT_JD GE 1 THEN BEGIN
      SETS = SETS(OK_JD)
      PERIODS= PERIODS(OK_JD)
    ENDIF    
  ENDIF;IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
    
;##########################################
;#####     CONSTRUCT PP FILE NAMES FOR THE SETS AND DETERMINE WHICH ARE DONE 
  PERIOD_TXT=PERIOD_CODE + SETS.VALUE
  ;STOP
  PP_FILES = DIR_OUT + PERIOD_TXT +'-'+ MAP_OUT +'-'+PROD+'-'+ MODEL +'.SAVE'

  SUBS = WHERE(FILE_TEST(PP_FILES) EQ 0,COUNT,NCOMPLEMENT = NCOMPLEMENT,COMPLEMENT =COMPLEMENT)
  IF COUNT GE 1 THEN BEGIN
    SETS=SETS(SUBS)
    PP_FILES=PP_FILES(SUBS)
  ENDIF;IF COUNT GE 1 THEN BEGIN
  ; ===>  REMAINING TO PROCESS
  PRINT,STRTRIM(NCOMPLEMENT,2)+ '   ' +PROD +'  FILES COMPLETED'
  PRINT,STRTRIM(COUNT,2)+'   ' + PROD  +'  FILES REMAINING TO BE MADE'
  
    
 P 
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _SET = 0,N_ELEMENTS(SETS)-1 DO BEGIN
  POF,_SET,SETS
  SET = SETS(_SET)  
  PFILE,SET.VALUE,/M
  SUBS = WHERE_SETS_SUBS(SET)
  TIMER
;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
;$$$$$    READ THE DATA FILES     $$$$$  PRODS = ['CHLOR_A', 'PAR','SST','KX']
;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
  
  CHLOR_A_FILE = FILES(SUBS[0]) & CHLOR_A    = STATS_READ(CHLOR_A_FILE) & PFILE,CHLOR_A_FILE,/R
  PAR_FILE = FILES(SUBS[1])     &    PAR     = STATS_READ(PAR_FILE) & PFILE,PAR_FILE,/R
  SST_FILE = FILES(SUBS(2))     &    SST     = STATS_READ(SST_FILE) & PFILE,SST_FILE,/R
 
  IF MODEL EQ 'OPAL' THEN BEGIN
    KX_FILE = FILES(SUBS(3)) &   KX  = STATS_READ(KX_FILE) & PFILE,KX_FILE,/R
    ;###> CONVERT TO A_CDOM_443 IF INPUT KX IS FROM K_M ALGORITHM[A_CDOM_300 NM]
    IF KX_NAME EQ 'A_CDOM' THEN KX = A_CDOM_300_2_A_CDOM_443(KX)
    INFILE = [CHLOR_A_FILE,PAR_FILE,SST_FILE,KX_FILE,BOTTOM_FILE]
  ENDIF;IF MODEL EQ 'OPAL' THEN BEGIN   
  ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



  
;===> INFO FOR CONSTRUCTING THE PPD SAVEFILE
  PERIOD_TXT=PERIOD_CODE + SET.VALUE
  PP_FILE = DIR_OUT + PERIOD_TXT +'-'+ MAP_OUT +'-PPD-'+ MODEL +'.SAVE'
 
 
  ;***************************
  IF OVERWRITE EQ 0 THEN BEGIN 
  ;***************************
  ;
    ;#####  IF THE PP_FILE EXISTS OR IS NOT OLDER THAN ANY OF THE INPUT FILES 
    ;#####  THEN SKIP IT >>>>>     #####
     FI = FILE_INFO(INFILE) & MTIME_INFILE = FI.MTIME
     FI = FILE_INFO(PP_FILE)& MTIME_PP_FILE = FI.MTIME 
     IF MAX(MTIME_INFILE) LT MTIME_PP_FILE THEN BEGIN      
      PFILE,PP_FILE,/K 
      CONTINUE;>>>>>>>>>>>>>>>>>>
     ENDIF
  ENDIF;IF OVERWRITE EQ 0 THEN BEGIN
  ;|||||||||||||||||||||||||||||||||
   
    
  ; ####### MAKE ARRAY TO HOLD PPD FROM MODEL #####
  PPD_ARRAY = REPLICATE(MISSINGS(0.0),[SMI_PX,SMI_PY])
  




;############## OPAL #####################################################
IF MODEL EQ 'OPAL' THEN BEGIN
   
  ;#########   FIND GOOD DATA   ################
    OK_ALL = WHERE($
    LAND_MASK EQ 0 AND $
    CHLOR_A NE MISSINGS(CHLOR_A) AND $
    PAR NE MISSINGS(PAR) AND $
    SST NE MISSINGS(SST) AND $
    KX NE MISSINGS(KX) AND $
    BOTTOM_DEPTH NE MISSINGS(BOTTOM_DEPTH) , $
    COUNT_ALL)
    PPD= PP_OPAL( $
        ;   *** REQUIRED INPUT ***          (ONE VALUE OR ARRAY, SST_SAT AND PAR MUST MATCH SIZE OF CHLOR_A_SAT)
            CHL           = CHLOR_A(OK_ALL),        $; REMOTELY-SENSED CHLOROPHLL CONCENTRATION (MG M-3)
            PAR           = PAR(OK_ALL),            $; PAR (EINSTEIN M-2 D-1)
            SST           = SST(OK_ALL),            $; SEA SURFACE TEMPERATURE (DEGREES C)
            KX            = KX(OK_ALL),        $; ABSORPTION BY 'OTHER: I.E. CDOM ABSORPTION AT 443NM'
            BOTTOM_DEPTH  = BOTTOM_DEPTH(OK_ALL)); BOTTOM DEPTH (M)
   PPD_ARRAY(OK_ALL) = PPD
 ENDIF;IF MODEL EQ 'OPAL' THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||      
   
;############## VGPM2A ########################################################
IF MODEL EQ 'VGPM2A' THEN BEGIN
  INFILE = [CHLOR_A_FILE,PAR_FILE,SST_FILE,BOTTOM_FILE]
  ;#########   FIND GOOD DATA   ################
  OK_ALL = WHERE($
    LAND_MASK EQ 0 AND $
    CHLOR_A NE MISSINGS(CHLOR_A) AND $
    PAR NE MISSINGS(PAR) AND $
    SST NE MISSINGS(SST) AND $
    BOTTOM_DEPTH NE MISSINGS(BOTTOM_DEPTH) , $
    COUNT_ALL)
  DOY = (DATE_2DOY(PERIOD_2DATE(PERIOD_TXT)))
  ;###> GET DAY LENGTH FOR ENTIRE MAP AREA
  DAY_LENGTH = I_SUN_KIRK_DAY_LENGTH_MAP(DOY,MAP=MAP_OUT)
  ;   =====> ENSURE THAT DAY_LENGTH ARRAY IS SAME SIZE AS CHL
  SZ = SIZEXYZ(CHLOR_A)& PX = SZ.PX & PY = SZ.PY
  SZ = SIZEXYZ(DAY_LENGTH)
  IF SZ.PX NE PX OR SZ.PY NE PY THEN MESSAGE,'ERROR: SIZE OF DAY_LENGTH NE SIZE OF CHLOR_A'
P
  PPD= PP_VGPM2A(                           $
    CHL           = CHLOR_A(OK_ALL),        $; REMOTELY-SENSED CHLOROPHLL CONCENTRATION (MG M-3)
    PAR           = PAR(OK_ALL),            $; PAR (EINSTEIN M-2 D-1)
    SST           = SST(OK_ALL),            $; SEA SURFACE TEMPERATURE (DEGREES C)
    DAY_LENGTH = DAY_LENGTH(OK_ALL),        $; REQUIRED INPUT
    BOTTOM_DEPTH  = BOTTOM_DEPTH(OK_ALL),   $; BOTTOM DEPTH (M)
    BOTTOM_FLAG  = BOTTOM_FLAG,              $; Optional Output
    K_PAR = K_PAR,                           $; Optional Output
    CHLOR_EUPHOTIC=CHLOR_EUPHOTIC)            ; Optional Output
  PPD_ARRAY(OK_ALL) = PPD
ENDIF;IF MODEL EQ 'VGPM2A' THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 
      
  P
  ;===> WRITE STRUCTURE
        STRUCT_SD_WRITE,PP_FILE,PROD='PPD',  ASTAT='DATA',$
                    IMAGE=PPD_ARRAY,  MISSING_CODE=MISSINGS(PPD), $
                    MASK=MASK,        CODE_MASK=CODE_MASK,    CODE_NAME_MASK=CODE_NAME_MASK, $
                    SCALING=SCALING,  INTERCEPT=INTERCEPT,  SLOPE=SLOPE,TRANSFORMATION=TRANSFORMATION,$
                    DATA_UNITS=DATA_UNITS,PERIOD=PERIOD_TXT, $
                    SENSOR=SENSOR,$
                    SATELLITE=SATELLITE,$
                    COVERAGE=COVERAGE,$
                    ALG=MODEL,$
                    INFILE=INFILE,$
                    NOTES=NOTES,ERROR=ERROR
;************************
IF DO_PNG GE 1 THEN BEGIN
;************************
  PRODS_2PNG,PP_FILE,STAT='MEAN',DIR_OUT=!S.DIR_TEMP,OVERWRITE=OVERWRITE
  PFILE,PP_FILE,/W
ENDIF;IF DO_PNG GE 1 THEN BEGIN
;|||||||||||||||||||||||||||||| 
  
ENDFOR;FOR _MODEL = 0,N_ELEMEMTS(MODELS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 
 TIMER,/STOP
    
ENDFOR;FOR _SET = 0,N_ELEMENTS(SETS)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;
ENDIF;IF DO_PP_MODELS GE 1 THEN BEGIN
;||||||||||||||||||||||||||||||||||







END; #####################  END OF ROUTINE ################################
