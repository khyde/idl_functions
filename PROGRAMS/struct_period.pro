; $ID:	STRUCT_PERIOD.PRO,	2020-07-08-15,	USER-KJWH	$
;###################################################################################
FUNCTION STRUCT_PERIOD, PERIOD
;+
;	THIS FUNCTION RETURNS A STRUCTURE CONTAINING PERIOD INFO
;	              DATE_START AND DATE_END,YEAR_START, ETC. FROM STANDARD CODED PERIODS
;
; EXAMPLES:
; ST,STRUCT_PERIOD('Y_2014')
; ST,STRUCT_PERIOD('M_200012')


; MODIFICATION HISTORY:
;	 JUNE 16, 2003 WRITTEN BY:	J.E.O'REILLY, T. DUCAS, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;	 AUG 17,2005 JOR ADDED !2MONTH PERIOD (2 MONTH PERIOD)
;	 JULY 21,2006 JOR ADDED !W AND !WEEK PERIODS
;	 OCT 12, 2006 JOR ADDED !3MONTH
;  JAN 8,2009 T.DUCAS ADDED !3D
;  NOV 9, 2010 DWMOONAN DEBUGGING FOR NEW PERIOD CODES.
;  NOV 17, 2010 BEWARE THIS PROGRAM IS ALSO SET UP TO READ PERIOD CODE FROM FILES THAT DON'T HAVE A
;               LEADING '!' IN THE PERIOD.  SPECIFICALLY, THE NASA FILES.  TEMPORARILY, THIS
;               PROGRAM IS CALLED WHEN READING NASA DOWNLOADED FILES TO GET THE PERIOD INFORMATION,
;               BECAUSE IT WORKS.  "STRUCT_PERIOD_NEW" IS CALLED WHEN READING THE NEW PERIODS
;               WITHOUT THE '!'.  IT LOOKS LIKE IF THERE IS NO '!' IN THE PERIOD ARGUMENT,
;               THIS ROUTINE SIMPLY RETURNS THE CREATED PERIOD STRUCTURE WITHOUT FURTHER ADO.
;               THIS VERSION CALLS VALID_PERIOD_CODES WITH THE OLD_PARSER KEYWORD.
;  JAN 31, 2011 K. HYDE - MADE CHANGES SO THAT STRUCT_PERIOD ACCEPTS BOTH FILES WITH AND WITHOUT AN '!' AND STRUCT_PERIOD_NEW IS NO LONGER NECESSARY.
;  FEB 9,2014,JOR REWRITTEN FROM PERIOD_2STRUCT
;                 ADDED EXAMPLES FORMATTING,
;-
; ******************************
  ROUTINE_NAME='STRUCT_PERIOD'
; ******************************
UL='_'
FUTURE_YEAR = '2020'
;#####    GET ALL THE PERIOD CODES AND THEIR LENGTHS 
;         AND EXTRACT JUST THE CODE THEN ADD AN UNDERSCORE SUFFIX
CODES = VALID_PERIOD_CODES()
LEN = STRLEN(CODES)
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
    CODES[NTH] = STRMID(CODES[NTH],0,LEN[NTH])
ENDFOR;FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
CODES = CODES + UL
  PL,CODES
 

	N = N_ELEMENTS(PERIOD)
; ************************************************************
; CREATE A STRUCTURE TO HOLD THE DETAILS OF THE FILE LABEL(S):
  S=CREATE_STRUCT(	'PERIOD','',		'PERIOD_CODE','','PERIOD_TYPE','','DATE_START','','DATE_END','',$
  									'YEAR_START','','MONTH_START','', 'DAY_START','', 'YEAR_END','', 'MONTH_END','', 'DAY_END','')

IF N EQ 0 THEN RETURN, S
S=REPLICATE(S,N)


;	===> TRIM ANY LEADING AND TRAILING BLANKS
PER = STRTRIM(PERIOD,2)
;===> REMOVE SPACES
PER = STRCOMPRESS(PER,/REMOVE_ALL)
START = LONARR(1,N)
WIDTH = LONARR(1,N)



;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR NTH = 0,N_ELEMENTS(CODES)-1 DO BEGIN
  POS = STRPOS(PER,CODES[NTH]) 
  IF POS GE 0 THEN BEGIN
    TXT = STR_SEP(PER,CODES[NTH])
    PER_CODE = CODES[NTH]
    T = TXT[1]
    W = WORDS(T)
    DATE =FIRST(W)
  ENDIF;IF POS GE 0 THEN BEGIN
ENDFOR;FOR NTH = 0,N_ELEMENTS(W)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;STOP
; ===> FIND THE POSITIONS OF !
POS_EX = STRPOS(PER,'!')
OK_EX 	= WHERE(POS_EX NE -1,FOUND_EX)
IF FOUND_EX GT 0 AND FOUND_EX LT N_ELEMENTS(PER) THEN RETURN, S ; RETURN A NULL STRUCTURE IF NOT ALL OF THE FILES ARE CONSISTENT
IF FOUND_EX EQ 0 THEN OLD_PARSER = 0 ELSE OLD_PARSER = 1
 
; ===> TRIM LEADING CHARACTERS UP TO THE !
START(0,*) = POS_EX
PER = STRMID(PER, START)

START(0,*) = 0
WIDTH(0,*)= STRLEN(PER)

; ===> TRIM ANY PERIODS WITH TRAILING CHARACTERS AFTER THE -
POS_DASH = STRPOS(PER, DELIMITER(/DASH) )
OK_DASH = WHERE(POS_DASH GE 0, COUNT_DASH)

IF COUNT_DASH GE 1 THEN BEGIN
	WIDTH(0,OK_DASH) = POS_DASH(OK_DASH)
	PER(OK_DASH) = STRMID(PER(OK_DASH),START(0,OK_DASH),WIDTH(0,OK_DASH))
ENDIF

; ===> FIND THE POSITIONS OF THE FIRST '_'
WIDTH(0,*) = STRPOS(PER,'_')

; ===> IF POS_FIRST_UL IS -1 (NO UL FOUND) THEN MAKE WIDTH THE STRLEN (I.E. FOR 'STUDY' ETC)
_WIDTH   =   ( (WIDTH LT 0) * STRLEN(PER)) > WIDTH

; ===> EXTRACT PERIOD CODE
PERIOD_CODE = STRUPCASE(STRMID(PER,START ,_WIDTH))


; ===> GET ALL VALID_PERIOD_CODES, LENGTHS, ETC
V=VALID_PERIOD_CODES(PERIOD_CODE_LEN=PERIOD_CODE_LEN, FIRST_LEN=FIRST_LEN,	SECOND_LEN=SECOND_LEN,PERIOD_TYPE = PERIOD_TYPE)

VSUBS = WHERE_MATCH(V,PERIOD_CODE,COUNT,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT,NINVALID=NINVALID,INVALID=INVALID)
IF COUNT EQ 0 THEN RETURN, S
IF NINVALID GT 0 THEN STOP
PERIOD_CODE_LEN	=	PERIOD_CODE_LEN(VSUBS)
PERIOD_TYPE 		= PERIOD_TYPE(VSUBS)
FIRST_LEN 			= FIRST_LEN(VSUBS)
SECOND_LEN			=	SECOND_LEN(VSUBS)


;	===> SET PERIOD_TYPE FOR ANY INVALID PERIODS TO -1
OK = WHERE(VSUBS EQ -1,COUNT)
IF COUNT GE 1 THEN PERIOD_TYPE[OK] = -1

; ===> EXTRACT FIRST_DATE FROM PER
START(0,*) = PERIOD_CODE_LEN + 1 & WIDTH(0,*) =  FIRST_LEN
FIRST_DATE = STRMID(PER, START,WIDTH)

; ===> EXTRACT SECOND_DATE FROM PER
START(0,*) = PERIOD_CODE_LEN + 1 + FIRST_LEN + 1 & WIDTH(0,*) =  SECOND_LEN
SECOND_DATE = STRMID(PER, START,WIDTH)


; ===>  IDENTIFY ANY PERIODS THAT HAVE THE UL IN THE WRONG PLACE (AND THE WIDTHS OF THE FIRST AND SECOND DATES INCORRECT)
START(0,*) = PERIOD_CODE_LEN
WIDTH(0,*) = 1
CHECK_FIRST_UL = STRMID(PER,START,WIDTH) EQ UL

START(0,*) = PERIOD_CODE_LEN + 1 + FIRST_LEN
WIDTH(0,*) = 1
CHECK_SECOND_UL = STRMID(PER,START,WIDTH) EQ UL

; ===> THE NUMTER OF ULS EQUALS THE PERIOD_TYPE
OK = WHERE((CHECK_FIRST_UL + CHECK_SECOND_UL) NE PERIOD_TYPE,COUNT)
IF COUNT GE 1 THEN PERIOD_TYPE[OK] = -1

; ===> IDENTIFY INCORRECT WIDTHS FOR FIRST_DATE AND SECOND_DATE
OK = WHERE(STRLEN(FIRST_DATE) NE FIRST_LEN OR STRLEN(SECOND_DATE) NE SECOND_LEN,COUNT)
IF COUNT GE 1 THEN PERIOD_TYPE[OK] = -1


; ===> REMAKE THE PERIODS FROM COMPONENTS
; PERIOD_TYPE  0					1							2
TEM = [['','_','_'],['','','_'],['','_','_']]
PERIODS = PERIOD_CODE + TEM( PERIOD_TYPE,0)+FIRST_DATE+TEM( PERIOD_TYPE,1)+SECOND_DATE


; ===> EXTRACT YEAR,MONTH,DAY,HOUR,MINUTE,SECOND
FIRST_YEAR 		= STRMID(FIRST_DATE,0,4) 	& SECOND_YEAR 	= STRMID(SECOND_DATE,0,4)
FIRST_MONTH 	= STRMID(FIRST_DATE,4,2) 	& SECOND_MONTH 	= STRMID(SECOND_DATE,4,2)
FIRST_DAY 		= STRMID(FIRST_DATE,6,2) 	& SECOND_DAY 		= STRMID(SECOND_DATE,6,2)
FIRST_HOUR 		= STRMID(FIRST_DATE,8,2) 	& SECOND_HOUR 	= STRMID(SECOND_DATE,8,2)
FIRST_MINUTE 	= STRMID(FIRST_DATE,10,2) & SECOND_MINUTE = STRMID(SECOND_DATE,10,2)
FIRST_SECOND 	= STRMID(FIRST_DATE,12,2) & SECOND_SECOND = STRMID(SECOND_DATE,12,2)


; ************************************************************************************************************
;	************ FILL IN IMPLIED DATE INFORMATION FOR EACH PERIOD **********************************************
; ************************************************************************************************************
  
_PERIOD_CODE = PERIOD_CODE
BSET = WHERE_SETS(POS_EX+1)
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR _BSET = 0, N_ELEMENTS(BSET)-1 DO BEGIN
  SUBS = WHERE_SETS_SUBS(BSET(_BSET))
  _PERIOD_CODE(SUBS) = STRMID(PERIOD_CODE(SUBS),BSET(_BSET).VALUE)
ENDFOR;FOR _BSET = 0, N_ELEMENTS(BSET)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
  OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'STUDY' OR _PERIOD_CODE EQ 'ANNUAL' OR _PERIOD_CODE EQ 'MANNUAL' OR _PERIOD_CODE EQ 'ALL' OR _PERIOD_CODE EQ 'YEAR'), COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
  S[OK].DATE_START    = FIRST_YEAR[OK] + '0101000000'
  S[OK].DATE_END   		= SECOND_YEAR[OK] + '1231235959'  ; FUTURE DATE
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'MONTH'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]  	
	S[OK].DATE_START = JD_2DATE(DATE_2JD(FIRST_DATE[OK]))
	S[OK].DATE_END   = JD_2DATE(JULDAY(DATE_2MONTH(SECOND_DATE[OK]),DATE_DAYS_MONTH(SECOND_DATE[OK]),DATE_2YEAR(SECOND_DATE[OK]), 23,59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'WEEK'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	JD_START 	= YWEEK_2JD(FIRST_DATE[OK]) ; FIRST_YEAR HAS THE WEEK NUMBER
	DPW				= JD_DAYS_WEEK(JD_START)
	S[OK].DATE_START = JD_2DATE(JD_START)
	S[OK].DATE_END   = JD_2DATE(YWEEK_2JD(SECOND_DATE[OK]) + DPW -  1D/SECONDS_DAY() )
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'DOY'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START = 	JD_2DATE(YDOY_2JD(FIRST_YEAR[OK],STRMID(FIRST_DATE[OK],4,3),0,0,0))
	S[OK].DATE_END   =	JD_2DATE(YDOY_2JD(SECOND_YEAR[OK],STRMID(SECOND_DATE[OK],4,3),23,59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'A'),COUNT)
IF COUNT GE 1 THEN BEGIN
  S[OK].PERIOD        = PERIODS[OK]
  S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
  S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
  S[OK].DATE_START = JD_2DATE(JULDAY(1, 1,  FIRST_YEAR[OK],  0, 0,  0))
  S[OK].DATE_END   = JD_2DATE(JULDAY(12,31, FIRST_YEAR[OK], 23, 59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'Y'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START = JD_2DATE(JULDAY(1,	1,	FIRST_YEAR[OK],	 0,	0,	0))
	S[OK].DATE_END   = JD_2DATE(JULDAY(12,31,	FIRST_YEAR[OK], 23,	59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'M'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	JD=JULDAY(FIRST_MONTH[OK],		1,	FIRST_YEAR[OK],	 0, 0, 0)
	DPM = JD_DAYS_MONTH(JD)
	S[OK].DATE_START = JD_2DATE(JD)
	S[OK].DATE_END   = JD_2DATE(JULDAY(FIRST_MONTH[OK],DPM,	FIRST_YEAR[OK], 23,59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'W'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	JD_START 	= YWEEK_2JD(FIRST_YEAR[OK],FIRST_MONTH[OK])
	DPW				= JD_DAYS_WEEK(JD_START)
	S[OK].DATE_START = JD_2DATE(JD_START)
	S[OK].DATE_END   = JD_2DATE(JD_START + DPW -  1D/SECONDS_DAY() )
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'D'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START = JD_2DATE(JULDAY(FIRST_MONTH[OK],	FIRST_DAY[OK],	FIRST_YEAR[OK],		0, 0, 0))
	S[OK].DATE_END   = JD_2DATE(JULDAY(FIRST_MONTH[OK], FIRST_DAY[OK],	FIRST_YEAR[OK],  23,59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'D3'),COUNT)
IF COUNT GE 1 THEN BEGIN
  S[OK].PERIOD        = PERIODS[OK]
  S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
  S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
  S[OK].DATE_START = JD_2DATE(JULDAY(FIRST_MONTH[OK], FIRST_DAY[OK], FIRST_YEAR[OK],   0, 0, 0))
  S[OK].DATE_END   = JD_2DATE(JULDAY(SECOND_MONTH[OK], SECOND_DAY[OK], SECOND_YEAR[OK],  23,59,59))  
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'D8'),COUNT)
IF COUNT GE 1 THEN BEGIN
  S[OK].PERIOD        = PERIODS[OK]
  S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
  S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
  S[OK].DATE_START = JD_2DATE(JULDAY(FIRST_MONTH[OK], FIRST_DAY[OK], FIRST_YEAR[OK],   0, 0, 0))
  S[OK].DATE_END   = JD_2DATE(JULDAY(SECOND_MONTH[OK], SECOND_DAY[OK], SECOND_YEAR[OK],  23,59,59))  
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'M3'),COUNT)
IF COUNT GE 1 THEN BEGIN
  S[OK].PERIOD        = PERIODS[OK]
  S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
  S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
  DPM   = JD_DAYS_MONTH(DATE_2JD(SECOND_DATE[OK]))
  S[OK].DATE_START = JD_2DATE(JULDAY(DATE_2MONTH(FIRST_DATE[OK]), 1,  FIRST_YEAR[OK],  0, 0, 0))
  S[OK].DATE_END   = JD_2DATE(JULDAY(DATE_2MONTH(SECOND_DATE[OK]),DPM,SECOND_YEAR[OK], 23,59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'H'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START = JD_2DATE(JULDAY(FIRST_MONTH[OK],	FIRST_DAY[OK],	FIRST_YEAR[OK],	FIRST_HOUR[OK], 0, 0))
	S[OK].DATE_END   = JD_2DATE(JULDAY(FIRST_MONTH[OK], FIRST_DAY[OK],	FIRST_YEAR[OK], FIRST_HOUR[OK],59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'S'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START 		= FIRST_DATE[OK]
	S[OK].DATE_END   		= FIRST_DATE[OK]
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'YY'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START = JD_2DATE(JULDAY(1,	1,	FIRST_YEAR[OK],		0,	0,	0))
	S[OK].DATE_END   = JD_2DATE(JULDAY(12,31,	SECOND_YEAR[OK], 23,	59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'MM'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START = JD_2DATE(JULDAY(FIRST_MONTH[OK],		1,	FIRST_YEAR[OK],	 0, 0, 0))
	JD=JULDAY(SECOND_MONTH[OK],		1,	SECOND_YEAR[OK],	 0, 0, 0)
	DPM = JD_DAYS_MONTH(JD)
	S[OK].DATE_END   = JD_2DATE(JULDAY(SECOND_MONTH[OK],DPM,	SECOND_YEAR[OK], 23,59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'DD'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START = JD_2DATE(JULDAY(FIRST_MONTH[OK],	FIRST_DAY[OK],	FIRST_YEAR[OK],		0, 0, 0))
	S[OK].DATE_END   = JD_2DATE(JULDAY(SECOND_MONTH[OK],SECOND_DAY[OK],	SECOND_YEAR[OK], 23,59,59))
ENDIF

OK = WHERE(PERIOD_TYPE GE 0 AND (_PERIOD_CODE EQ 'SS'),COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD     		= PERIODS[OK]
	S[OK].PERIOD_CODE   = PERIOD_CODE[OK]
	S[OK].PERIOD_TYPE   = PERIOD_TYPE[OK]
	S[OK].DATE_START 		= FIRST_DATE[OK]
	S[OK].DATE_END   		= SECOND_DATE[OK]
ENDIF


; ***************************************************************************************************
; ****** EXTRACT FROM STRUCTURE: YEAR_START,MONTH_START, DAY_START, YEAR_END, MONTH_END, DAY_END  ***
; ***************************************************************************************************
	
OK = WHERE(PERIOD_TYPE GE 0,COUNT)
IF COUNT GE 1 THEN BEGIN
	S[OK].PERIOD_TYPE = STRTRIM(S[OK].PERIOD_TYPE,2)
	S[OK].YEAR_START 	= STRMID(S[OK].DATE_START,0,4)
	S[OK].MONTH_START = STRMID(S[OK].DATE_START,4,2)
	S[OK].DAY_START 	= STRMID(S[OK].DATE_START,6,2)

	S[OK].YEAR_END 		= STRMID(S[OK].DATE_END,0,4)
	S[OK].MONTH_END 	= STRMID(S[OK].DATE_END,4,2)
	S[OK].DAY_END 		= STRMID(S[OK].DATE_END,6,2)
ENDIF

RETURN,S

END; #####################  END OF ROUTINE ################################
