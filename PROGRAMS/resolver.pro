; $ID:	RESOLVER.PRO,	2020-07-08-15,	USER-KJWH	$

;###################################################################################
PRO RESOLVER, IDL_PROS, DIR_OUT=DIR_OUT,  ZIP=ZIP,  ERROR=ERROR, ERR_MSG=ERR_MSG
;+
; NAME:
;       RESOLVER
;
; PURPOSE:
;       1) RESOLVE AND RETURN A STRUCTURE CONTAINING THE NAMES OF ALL IDL PROGRAMS CALLED BY THE IDL_PROS
;
;				2) OPTIONALLY, IF DIR_OUT IS PROVIDED THEN:
;					A) IF DIR_OUT FOLDER DOES NOT EXIST THEN IT WILL BE CREATED BY THIS ROUTINE;
;					B) THE LOCAL IDL PROGRAMS CALLED (BUT NOT THE RSI PROGRAMS IN THE !DIR PATH) 
;					    WILL BE COPIED INTO DIR_OUT AND;
;					C) A TEXT FILE WILL BE WRITTEN ('RESOLVER.TXT' LISTING THE FULL FILE NAMES OF 
;					   THE LOCAL ROUTINES CALLED.

;				3) OPTIONALLY, IF KEYWORD /ZIP IS USED THEN THE LOCAL IDL PROGRAMS 
;				   AND THE TEXT CATALOG FILE ('RESOLVER.TXT')IN DIR_OUT 
;				   WILL BE COMPRESSED USING FILE_ZIP INTO A ZIPFILE ('RESOLVER.ZIP')

;
; EXAMPLES:; 
;       RESOLVER,'PRODS_MAIN',ZIP = 'PRODS_MAIN',DIR_OUT = '4KIM'
;       RESOLVER,'SUBAREAS_MAIN',ZIP = 'SUBAREAS_MAIN',DIR_OUT = '4KIM'
;
;       RESOLVER,'PAL_VIEW',ZIP = 'PAL_VIEW',DIR_OUT = 'PAL_VIEW'
      ;===> SEVERAL MAINS:;       
;       RESOLVER,['PRODS_MAIN','MAPS_MAIN','SUBAREAS_MAIN','UNITS_MAIN'],ZIP = 'NEW_MAINS',DIR_OUT = 'NEW_MAINS'
;       RESOLVER,['PRODS_MAIN','MAPS_MAIN','SUBAREAS_MAIN','UNITS_MAIN'],ZIP = 'NEW_MAINS',DIR_OUT = 'NEW_MAINS'
;       RESOLVER,'CHL_PROFILES_MAIN',ZIP = 'CHL_PROFILES_MAIN',DIR_OUT = 'JAY'
; INPUTS:
;       IDL_PROS   THE NAME(S) OF YOUR IDL PROGRAM(S) TO RESOLVE
;
; KEYWORD PARAMETERS:
;       DIR_OUT:  THE FULL PATH NAME WHERE THE COPIES OF THE LOCAL IDL PROGRAMS ARE TO BE WRITTEN.
;       ZIP:      OPTIONAL KEYWORD.  ZIP WILL USE WINZIP 	TO COMPRESS THE LOCAL IDL PROGRAMS AND
;									THE LIST OF PROGRAM NAMES ('RESOLVER.TXT') INTO A FILE NAMED: RESOLVER.ZIP 	IN THE DIR_OUT.
;									ZIP MAY EITHER BE SET ON [1] OR BE THE INTENDED NAME FOR THE ZIP FILE.
;
;				ERROR:		ERROR CODE (0=OK, 1=ERROR)
;				ERR_MSG:	ERROR MESSAGE
;
; OUTPUTS:
;				A STRUCTURE WITH THE NAMES OF ALL (LOCAL AND RSI IDL) ROUTINES CALLED BY IDL_PROS ARE RETURNED BY THIS FUNCTION,
;				AS WELL AS ANY UNRESOLVED ROUTINES.
;
;       IF DIR_OUT IS PROVIDED THEN THE LOCAL IDL ROUTINES CALLED ARE
;						WRITTEN TO DIR_OUT ALONG WITH A TEXT FILE WHICH CONTAINS THE PROGRAM NAMES ('RESOLVER.TXT').

;	PROGRAMS CALLED:
;			FILE_PARSE
;			FILE_ZIP 	
;			A COPY OF THE WINZIP COMMAND LINE SUPPORT ADD-ON IS AVAILABLE FROM THE WEB PAGE HTTP://WWW.WINZIP.COM/WZCLINE.CGI.



;	RESTRICTIONS:
;			SEE WARNING STATEMENT IN IDL HELP ON RESOLVE_ALL.
;
;			IT IS WISE TO USE RESOLVER JUST AFTER STARTING A NEW IDL SESSION 
;			TO AVOID RESOLVING ALREADY COMPILED ROUTINES.
;			USING THE IDL EXECUTIVE COMMAND   .RESET_SESSION IS ALSO ADVISED.
;
; MODIFICATION HISTORY:
;       WRITTEN BY:  J.E.O'REILLY, MARCH 4,1999
;				NOV 9, 2006 JOR UPDATED
;				FEB 23,2012,JOR:
;				IF N_ELEMENTS(DIR_OUT) EQ 0 THEN DIR_OUT = 'D:\IDL\RESOLVER\' 
;       SKIP_ROUTINES= ['LIST','RESOLVER']
;       OCT 9,2012,JOR:   IF KEYWORD_SET(ZIP) OR N_ELEMENTS(ZIP) EQ 1  THEN BEGIN
;       NOV 12,2013,JOR CHANGED ITT TO \EXELIS
;       DEC 7,2013,JOR : IF N_ELEMENTS(DIR_OUT) EQ 0 THEN DIR_OUT = GET_PATH() +'IDL\RESOLVER\'
;       MAY 25,2014,JOR NOW USING IDL'S FILE_ZIP PROGRAM
;       JUN 29,2014,JOR ADDED CONT=1 TO RESOLVE_ALL 
;                      [KEEP GOING WHEN A ROUTINE FAILS TO RESOLVE]
;       IF CONT IS TRUE, ANY ROUTINES THAT FAIL TO RESOLVE ARE CONCATENATED
;       TO SKIPR SO THAT SUBSEQUENT CALLS WON'T TRY AGAIN.
;       ADD DATE_NOW TO ZIP NAME


;-
;***************************
	ROUTINE_NAME = 'RESOLVER'
;***************************
; ===> OBTAIN THE CURRENT WORKING DIRECTORY
CD,CURRENT=DIR

IF NONE(DIR_OUT) THEN DIR_OUT = !S.IDL +'RESOLVER\'  ELSE DIR_OUT = !S.IDL + DIR_OUT
FILE_MKDIR,(DIR_OUT)

; ===> SKIP THE FOLLOWING FROM BEING IN THE ZIP FILE 
SKIP_ROUTINES= ['REPLACE','FILE','DT_NOW','PNG','COLORBAR','FSC_COLOR',$
               'LIST','RESOLVER','TYPE','OVERWRITE',$
               'DO_PAL_CHANGE','LEGEND','SHIFTIMG','LEGEND','READ_CSV']



;	===> ENSURE THE YOU PROVIDED A PROGRAM NAME
	IF N_ELEMENTS(IDL_PROS) EQ 0 THEN BEGIN
		ERROR = 'ERROR: YOU MUST ENTER IDL_ROUTINE_NAME'
	ENDIF

;	===> USE FILE_PARSE TO REMOVE ANY PATH AND FILE EXTENSION IF THESE WERE 
;	     INADVERTENTLY PROVIDED
	FN = FILE_PARSE(IDL_PROS)
	NAMES = FN.FIRST_NAME


;	===> RESOLVE THE PROGRAMS CALLED BY NAMES
 	RESOLVE_ALL,RESOLVE_EITHER= NAMES, UNRESOLVED=UNRESOLVED,SKIP_ROUTINES= SKIP_ROUTINES,CONT=1
P
;	===> LOOP OVER THE  TYPES OF ROUTINES (PROGRAMS,FUNCTIONS AND UNRESOLVED PROGRAMS AND UNRESOLVED FUNCTIONS)
;	LLLLLLLLLLLLLLLLLLLLLLLL
	FOR INFO = 1, 4 DO BEGIN
;	LLLLLLLLLLLLLLLLLLLLLLLL

		IF INFO EQ 1 THEN BEGIN
			TYPE = 'PREVIOUSLY_COMPILED'
		  ROUTINES = ROUTINE_INFO(/SOURCE)
			TAGNAMES 	= TAG_NAMES(ROUTINES)
			NTAGS 		= N_TAGS(ROUTINES)
			SPACES		= REPLICATE('',NTAGS+2)
			NTAGS   	= N_ELEMENTS(SPACES)
			TAGNAMES 	= [TAGNAMES,'TYPE','ERROR']
;			===> MAKE A STRUCTURE TO HOLD INFO FROM ROUTINE_INFO PLUS TAGS TYPE AND ERROR
;			LLLLLLLLLLLLLLLLLLLLLLLL
			FOR N=0,NTAGS-1 DO BEGIN
				IF N EQ 0 THEN TEMP = CREATE_STRUCT(TAGNAMES(N),'') ELSE TEMP = CREATE_STRUCT(TEMP, TAGNAMES(N),'')
			ENDFOR
;			||||||||||||||||||||||||
		ENDIF

		IF INFO EQ 2 THEN BEGIN
			TYPE = 'FUNCTION'
			ROUTINES = ROUTINE_INFO(/FUNCTIONS,/SOURCE)
		ENDIF

		IF INFO EQ 3 THEN BEGIN
			TYPE = 'UNRESOLVED_PROGRAM'
			ROUTINES = ROUTINE_INFO(/UNRESOLVED )
		ENDIF

		IF INFO EQ 4 THEN BEGIN
			TYPE = 'UNRESOLVED_FUNCTION'
			ROUTINES = ROUTINE_INFO(/FUNCTIONS,/UNRESOLVED )
		ENDIF

;		===> DO ONLY IF ROUTINES IS A STRUCTURE
		SZ=SIZE(ROUTINES,/STRUCT)
		IF SZ.TYPE EQ 8 THEN BEGIN
			STRUCT=REPLICATE(TEMP[0],N_ELEMENTS(ROUTINES))
			STRUCT_ASSIGN,ROUTINES, STRUCT,/NOZERO
			STRUCT.TYPE = TYPE
			IF N_ELEMENTS(ALL) EQ 0 THEN ALL = STRUCT ELSE ALL = [ALL,STRUCT]
		ENDIF
	ENDFOR
;	||||||||||||||||||||||||||||||||||||||||||

;	===> SORT BY PATH
	SRT = SORT(ALL.PATH)
	ALL = ALL(SRT)


;	===> REMOVE $MAIN$, NULLS, AND RESOLVER FROM THE LIST OF FILES_CALLED
	NAMES = STRUPCASE(ALL.NAME)
	OK = WHERE(NAMES NE '$MAIN$' AND NAMES NE '' AND NAMES NE 'RESOLVER',COUNT)
	IF COUNT GE 1 THEN ALL = ALL[OK] ELSE STOP


;	***************************************************
	IF N_ELEMENTS(DIR_OUT) EQ 1 THEN BEGIN
;	***************************************************

;		===> COPY LOCAL IDL PROGRAMS AND A CATALOG TEXT FILE TO DIR_OUT
;		(FIND JUST THE LOCAL IDL PROGRAMS, NOT THE RSI IDL PROGRAMS IN THE IDL SYSTEM PATH !DIR)
	  OK = WHERE(STRPOS(STRUPCASE(ALL.PATH),!DIR) EQ -1,COUNT)

	  IF COUNT GE 1 THEN BEGIN
	    LOCAL_ROUTINES = ALL[OK]
	  ENDIF ELSE STOP

;===> REMOVE ANY IDL SYSTEM ROUTINES WITH 'Exelis' IN THE PATH    
     OK = WHERE(STRPOS(LOCAL_ROUTINES.PATH,'Exelis') NE -1,COUNT)
     IF COUNT GE 1 THEN BEGIN      
      LOCAL_ROUTINES= REMOVE(LOCAL_ROUTINES,OK)
     ENDIF;IF COUNT GE 1 THEN BEGIN
;		===> IF DIR_OUT DOES NOT YET EXIST THEN CREATE THIS DIRECTORY
		IF FILE_TEST(DIR_OUT,/DIRECTORY) EQ 0L THEN FILE_MKDIR,DIR_OUT,/NOEXPAND_PATH

;		===> MAKE SURE THAT THE DIR_OUT TERMINATES IN A SINGLE PATH DELIMITER.
;		===> REMOVE RIGHTMOST PATH DELIMITER (SLASH)
			IF N_ELEMENTS(DIR_OUT) EQ 1 THEN TXT = DIR_OUT ELSE TXT = CURRENT_DIR
	  	DELIM='/';
			TXT = STRMID(TXT, 0, STRLEN(TXT) - (STRPOS(TXT,DELIM,/REVERSE_OFFSET) + 1 EQ STRLEN(TXT) ))

			DELIM='\';
			TXT = STRMID(TXT, 0, STRLEN(TXT) - (STRPOS(TXT,DELIM,/REVERSE_OFFSET) + 1 EQ STRLEN(TXT) ))

;			===> NOW ADD SYSTEM-SPECIFIC PATH DELIMITER
			PATH_DELIM = PATH_SEP()
			_DIR_OUT = TXT+PATH_DELIM


;		===> OPEN AND WRITE A TEXT FILE WITH THE FULL FILE NAMES (SO YOU MAY KNOW WHICH FOLDERS THEY WERE FROM)
		TXT_FILE = _DIR_OUT+ROUTINE_NAME+'.TXT'
		OPENW,LUN,TXT_FILE,/GET_LUN


;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR NTH = 0L,N_ELEMENTS(LOCAL_ROUTINES)-1L DO BEGIN
			PRINTF,LUN, LOCAL_ROUTINES[NTH].PATH
		ENDFOR
;		|||||||||||||||||||||||||||||||||||||||||||||||||||||||

;		===> CLOSE THE TXT_FILE
		CLOSE,LUN & FREE_LUN,LUN
		PFILE,TXT_FILE
		
;===> REMOVE ANY BLANK NAMES
OK = WHERE(LOCAL_ROUTINES.NAME EQ '' OR LOCAL_ROUTINES.PATH EQ '',COUNT)
IF COUNT GE 1 THEN LOCAL_ROUTINES = REMOVE(LOCAL_ROUTINES,OK)  

;		===> COPY LOCAL_ROUTINES INTO THE OUTPUT DIRECTORY
		FILE_COPY, LOCAL_ROUTINES.PATH, _DIR_OUT,/ALLOW_SAME,/NOEXPAND_PATH,/OVERWRITE


;		**************************************************************************
;		*** P A C K A G E   A L L    P R O G R A M S    I N T O    A   ZIP   ? ***
;		**************************************************************************
		IF KEYWORD_SET(ZIP) OR N_ELEMENTS(ZIP) EQ 1  THEN BEGIN
		
;			===> CHECK IF USER PROVIDED A FILE NAME FOR ZIP OR IF ZIP KEYWORD IS JUST SET ON
      IF IDLTYPE(ZIP,/CODE) EQ 7 THEN BEGIN
        ZIP_FILE = _DIR_OUT +ZIP+'-' + DATE_FORMAT(DATE_NOW(),/YMD) + '.ZIP'
      ENDIF ELSE BEGIN
        ZIP_FILE = _DIR_OUT + 'RESOLVER.ZIP'
      ENDELSE; IF IDLTYPE(ZIP) EQ 7 THEN BEGIN 
;LIST
      FILE_ZIP,LOCAL_ROUTINES.PATH,ZIP_FILE
      PFILE,ZIP_FILE
		ENDIF ; IF KEYWORD_SET(ZIP) THEN BEGIN

	ENDIF ; IF KEYWORD_SET(DIR_OUT) THEN BEGIN




END; #####################  END OF ROUTINE ################################
