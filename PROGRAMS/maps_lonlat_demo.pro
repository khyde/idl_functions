; $ID:	MAPS_LONLAT_DEMO.PRO,	2021-04-15-17,	USER-KJWH	$
; 
PRO MAPS_LONLAT_DEMO

; #########################################################################; 
;+
; THIS PROGRAM IS A  DEMO FOR MAPS_LONLAT


; HISTORY:
;     SEP 15, 2015  WRITTEN BY: J.E. O'REILLY
;     SEP 16, 2015 - KJWH: UPDATED L2 BLOCK
;                          ADDED L2_FLAGS BLOCK
;                          ADDED EC BLOCK
;                          ADDED GEQ_ORG BLOCK
;                          UPDATED SWITCHES TO USE SWITCH_NAME
;     SEP 22, 2015 - KJWH: ADDED SUBSETTING EXAMPLE TO THE L2 BLOCK 
;     SEP 23,2015  - JOR : REMOVED SUBSETTING [MAPS_LONLAT SUBSETS NOW] 
;                          ADDED TIC & TOC  
;     SEP 27,2015  - JOR : TESTED NAME & SAV_FILE 
;     SEP 29,2015  - JOR : ADDED STEP DO_NAT_VS_NEAR [FROM KIM'S JUNK_NATURAL_V_NEAREST]
;     NOV 23,2015  - JEOR: NOW INPUT FILES ARE FROM !S.FILES,ADDED SUBS TO CALL TO MAPS_LONLAT                
;-
; #########################################################################

;*********************************
ROUTINE_NAME  = 'MAPS_LONLAT_DEMO'
;*********************************
;===> DEFAULTS
DIR= !S.DEMO+ ROUTINE_NAME + PATH_SEP() &  DIR_TEST, DIR
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||

;===> SWITCHES
DO_GEQ_LAND   = ''
DO_INDEX      = ''
DO_L2         = 'V'
DO_L2_FLAGS   = ''
DO_MUR_SUBSET = ''
DO_MUR        = ''
DO_EC_LAND    = ''
DO_GEQ_ORG    = ''
DO_NAT_VS_NEAR   = ''

;||||||||||||||||||||||||||||||||

PX_MUR=32768 & PY_MUR = 16384

;*****************************
IF KEY(DO_GEQ_LAND) THEN BEGIN
;*****************************
  SWITCHES,DO_GEQ_LAND,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,R_PRODS=R_PRODS,DATERANGE=DATERANGE
  IF STOPP THEN STOP
  IF VERBOSE THEN , SNAME
  LAND = READ_LANDMASK(MAP='GEQ',/LAND)
  PMM,LAND
 
  ARRAY = CONGRID(LAND,PX_MUR,PY_MUR,/INTERP,/CENTER,/MINUS_ONE)
  LON = IDL_RESTORE(DIR + 'MUR_LON.SAV')
  LAT = IDL_RESTORE(DIR + 'MUR_LAT.SAV')
  METHOD = 'POLY'
  IF STOPP THEN STOP
  NEC =  MAPS_LONLAT(ARRAY,MAP_OUT='NEC',LON=LON,LAT=LAT,METHOD = METHOD,/INIT,SUBS=SUBS )
  
  IMGR,NEC,MAP = 'NEC',PNGFILE =DIR + ROUTINE_NAME +'-' + SNAME +'-' +METHOD + '.PNG'
  
  IF VERBOSE THEN , SNAME
ENDIF;IF KEY(DO_GEQ_LAND) THEN BEGIN
; ||||||||||||||||||||||||||||||||||

 
;**************************
IF KEY(DO_INDEX) THEN BEGIN
;**************************
  SWITCHES,DO_INDEX,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,SWITCH_NAME=SNAME
  IF VERBOSE THEN ,SNAME
  ARRAY = UINDGEN([PX_MUR,PY_MUR])
  LON = IDL_RESTORE(DIR + 'MUR_LON.SAV')
  LAT = IDL_RESTORE(DIR + 'MUR_LAT.SAV')
  METHOD = 'POLY'
  IF STOPP THEN STOP
  NEC =  MAPS_LONLAT(ARRAY,MAP_OUT='NEC',LON=LON,LAT=LAT,METHOD = METHOD,/INIT,SUBS=SUBS )

  IMGR,NEC,MAP='NEC',PNGFILE =DIR + ROUTINE_NAME +'-' + SNAME +'-' + METHOD + '.PNG'

  IF VERBOSE THEN , SNAME
ENDIF;IF KEY(DO_INDEX) THEN BEGIN
; ||||||||||||||||||||||||||||||||||


;************************
IF KEY(DO_L2) THEN BEGIN
;************************
  SWITCH_NAME = 'DO_L2'
  SWITCHES,DO_L2,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,R_PRODS=R_PRODS,DATERANGE=DATERANGE
  IF STOPP THEN STOP
  IF VERBOSE THEN , SWITCH_NAME
  FILE = FLS(!S.FILES + 'S_2009*MODISA-1KM*L2.nc')
  SD = READ_NC(FILE,PROD=['longitude','latitude','chlor_a'],/DATA)
  ARRAY = SD.SD.CHLOR_A.IMAGE
  OK = WHERE(ARRAY EQ SD.SD.CHLOR_A._FILLVALUE._DATA[0],COUNT) & IF COUNT GE 1 THEN ARRAY[OK] = MISSINGS(0.0)
  LON   = SD.SD.LONGITUDE.IMAGE
  LAT   = SD.SD.LATITUDE.IMAGE 
  METHOD = 'GRID'
  NAME = (FILE_PARSE(FILE)).NAME
  TIC
  NEC =  MAPS_LONLAT(ARRAY,MAP_OUT='NEC',LON=LON,LAT=LAT,METHOD = METHOD,INIT=1,SUBS=SUBS)
  TOC
  IMGR,NEC,MAP='NEC',PROD='CHLOR_A',PNGFILE =DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG',BIT_DEPTH = 1
  
  TIC
  NEC =  MAPS_LONLAT(ARRAY,MAP_OUT='NEC',LON=LON,LAT=LAT,METHOD = METHOD,INIT=0,SUBS=SUBS)
  TOC
  IMGR,NEC,MAP='NEC',PROD='CHLOR_A',PNGFILE =DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG',BIT_DEPTH = 1

  IF VERBOSE THEN ,SNAME
ENDIF;IF KEY(DO_L2) THEN BEGIN
; ||||||||||||||||||||||||||||||||||


;************************
IF KEY(DO_L2_FLAGS) THEN BEGIN
;************************
  SWITCH_NAME = 'DO_L2_FLAGS'
  SWITCHES,DO_L2,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF VERBOSE THEN , SWITCH_NAME
  FILE = FLS(!S.FILES + 'S_2009*MODISA-1KM*L2.nc')
  SD = READ_NC(FILE,PROD=['longitude','latitude','l2_flags'],/DATA)

  LAND = SD_FLAGS_COMBO(SD.SD.L2_FLAGS.IMAGE,1) ; LAND FLAG
  OK = WHERE(LAND EQ 1, COUNT_LAND)
  LAND[OK] = 22 ; MAKE RED TO STAND OUT
  LON   = SD.SD.LONGITUDE.IMAGE
  LAT   = SD.SD.LATITUDE.IMAGE
  METHOD = 'GRID'
  NEC =  MAPS_LONLAT(LAND,MAP_OUT='NEC',LON=LON,LAT=LAT,METHOD = METHOD,INIT=1,SUBS=SUBS)
  OK = WHERE(NEC EQ 22)
  MASK = READ_LANDMASK(MAP='NEC',/STRUCT)
  LD = MASK.LANDMASK & LD(*) = 36
  LD(MASK.LAND) = 32
  LD[OK] = 22
  LD(MASK.COAST) = 18
  IM = IMAGE(LD,RGB_TABLE=CPAL_READ('PAL_36'),MARGIN=0,DIMENSIONS=[1024,1024])
  IM.SAVE, DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG'
  IM.CLOSE
 ; IMGR,NEC,MAP='NEC',/COAST_ONLY,PNGFILE =DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG',DELAY=8

  IF VERBOSE THEN ,SNAME
ENDIF;IF KEY(DO_L2) THEN BEGIN
; ||||||||||||||||||||||||||||||||||

;************************
IF KEY(DO_MUR_SUBSET) THEN BEGIN
  ;************************
  SWITCH_NAME = 'DO_MUR_SUBSET'
  SWITCHES,SWITCH_NAME,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF VERBOSE THEN , SWITCH_NAME

  FILE = FLS(!S.FILES + 'D_2005*SUBSET.SAV')
  SST = STRUCT_READ(FILE,STRUCT=SD)
  MASK = SD.MASK_IMAGE
  PMM, MASK

  METHOD = 'GRID'
  NEC =  MAPS_LONLAT(MASK,MAP_OUT='NEC',LON=SD.LON,LAT=SD.LAT,METHOD = METHOD,INIT=1,SUBS=SUBS)
  PMM, NEC

  IMGR,NEC,MAP='NEC',PROD='SST',PNGFILE =DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG',DELAY=8

  IF VERBOSE THEN ,SWITCH_NAME
ENDIF;IF KEY(DO_MUR_SUBSET) THEN BEGIN
; ||||||||||||||||||||||||||||||||||

;************************
IF KEY(DO_MUR) THEN BEGIN
  ;************************
  SWITCH_NAME = 'DO_MUR'
  SWITCHES,SWITCH_NAME,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF VERBOSE THEN , SWITCH_NAME

  FILE = FLS(!S.FILES + 'D_2005*SST.SAV')
  SST = STRUCT_READ(FILE,STRUCT=SD)
  
  MASK = SD.MASK_IMAGE
  PMM, MASK

  METHOD = 'GRID'
  NEC =  MAPS_LONLAT(MASK,MAP_OUT='NEC',LON=SD.LON,LAT=SD.LAT,METHOD = METHOD,INIT=1,SUBS=SUBS)
  PMM, NEC

  IMGR,NEC,MAP='NEC',PROD='SST',PNGFILE =DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG',DELAY=8

  IF VERBOSE THEN ,SWITCH_NAME
ENDIF;IF KEY(DO_MUR) THEN BEGIN
; ||||||||||||||||||||||||||||||||||

;*****************************
IF KEY(DO_EC_LAND) THEN BEGIN
;*****************************
  SWITCH_NAME = 'DO_EC_LAND'
  SWITCHES,DO_EC_LAND,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF VERBOSE THEN ,SNAME
  ARRAY = READ_LANDMASK(MAP='EC',/LAND)
  LL   = MAPS_2LONLAT('EC')
  LON  = LL.LON
  LAT  = LL.LAT

  METHOD = 'GRID'
  IF STOPP THEN STOP
  EC =  MAPS_LONLAT(ARRAY,MAP_OUT='EC',LON=LON,LAT=LAT,METHOD = METHOD,/INIT,SUBS=SUBS )
  OK = WHERE(EC EQ 1,COMPLEMENT=COMPLEMENT)
  EC[OK] = 22
  EC(COMPLEMENT) = 36
  MASK = READ_LANDMASK(MAP='EC',/STRUCT)
  EC(MASK.LAND) = 32
  EC(MASK.COAST) = 18
  PAL_36,R,G,B
  PNG = DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG'
  WRITE_PNG,PNG,EC,R,G,B & PFILE,PNG
  IF VERBOSE THEN ,SNAME
ENDIF;IF KEY(DO_GEQ_LAND) THEN BEGIN
; ||||||||||||||||||||||||||||||||||


;*****************************
IF KEY(DO_GEQ_ORG) THEN BEGIN
;*****************************
  SWITCH_NAME = 'DO_GEQ_ORG'
  SWITCHES,DO_GEQ_ORG,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,R_PRODS=R_PRODS,DATERANGE=DATERANGE
  IF STOPP THEN STOP 
  IF VERBOSE THEN , SWITCH_NAME
  ARRAY = READ_LANDMASK(MAP='GEQ',/LAND)
  LL = MAPS_2LONLAT('GEQ')
  LON = REFORM(LL.LON(*,0))
  LAT = REFORM(LL.LAT(0,*))
  
  LON = LL.LON
  LAT = LL.LAT
 
  METHOD = 'GRID'
  IF STOPP THEN STOP
  NEC =  MAPS_LONLAT(ARRAY,MAP_OUT='NEC',LON=LON,LAT=LAT,METHOD = METHOD,/INIT,SUBS=SUBS )
  OK = WHERE(NEC EQ 1,COMPLEMENT=COMPLEMENT)
  NEC[OK] = 22
  NEC(COMPLEMENT) = 36
  MASK = READ_LANDMASK(MAP='NEC',/STRUCT)
  NEC(MASK.LAND) = 32
  NEC(MASK.COAST) = 18
  PAL_36,R,G,B
  WRITE_PNG,DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG',NEC,R,G,B 
 ; IM = IMAGE(NEC,RGB_TABLE=CPAL_READ('PAL_36'),MARGIN=0,DIMENSIONS=[1024,1024])
 ; IM.SAVE, DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG'
 ; IM.CLOSE
 ; IMGR,NEC,MAP = 'NEC',PNGFILE =DIR + ROUTINE_NAME +'-' + SWITCH_NAME +'-' + METHOD + '.PNG',DELAY=10

  IF VERBOSE THEN , SNAME
ENDIF;IF KEY(DO_GEQ_ORG) THEN BEGIN
; ||||||||||||||||||||||||||||||||||

;*************************************************
IF KEY(DO_NAT_VS_NEAR) THEN BEGIN
;*************************************************
  SL = PATH_SEP()
  LAND = READ_LANDMASK(MAP='NEC',/STRUCT)
  FILE = FLS(!S.DEMO + 'MAPS_LONLAT_DEMO' + SL + 'S_2009*MODISA-1KM*L2.nc')
  SD = READ_NC(FILE,PROD=['longitude','latitude','chlor_a'],/DATA)
  ARRAY = SD.SD.CHLOR_A.IMAGE
  OK = WHERE(ARRAY EQ SD.SD.CHLOR_A._FILLVALUE._DATA[0],COUNT) & IF COUNT GE 1 THEN ARRAY[OK] = MISSINGS(0.0)
  LON   = SD.SD.LONGITUDE.IMAGE
  LAT   = SD.SD.LATITUDE.IMAGE
  METHOD = 'GRID'

  PX_OUT = 1024
  PY_OUT = 1024
  XOUT = INTERVAL([0,PX_OUT-1])
  YOUT = INTERVAL([0,PY_OUT-1])
  MAPS_SET,'NEC',PX = PX_OUT,PY = PY_OUT
 
  XYZ = CONVERT_COORD(LON,LAT,/DATA,/TO_DEVICE)  ;===> GET THE CORRESPONDING X AND Y FROM LON AND LAT
  X = REFORM(XYZ(0,*))
  Y = REFORM(XYZ(1,*))
  ZWIN                                           ;===> CLOSE THE Z DEVICE AND FREE UP ITS MEMORY

  MISSING=MISSINGS(ARRAY)

  LL_GRACE = 20
  OK = WHERE(X GE (0-LL_GRACE) AND X LE (PX_OUT+ LL_GRACE) AND Y GE (0-LL_GRACE) AND Y LE (PY_OUT+LL_GRACE),COUNT)
  X = X[OK]
  Y = Y[OK]
  ARRAY_= ARRAY[OK]
  
  TRIANGULATE, X, Y,TRIANGLES,CONNECTIVITY = C
  NEAR = GRIDDATA(X, Y, ARRAY_, METHOD="NearestNeighbor", TRIANGLES=TRIANGLES, /GRID, XOUT=XOUT, YOUT=YOUT, MISSING=MISSING)
  PMM, NEAR

  NAT  = GRIDDATA(X, Y, ARRAY_, METHOD="NaturalNeighbor", TRIANGLES=TRIANGLES, /GRID, XOUT=XOUT, YOUT=YOUT, MISSING=MISSING)
  PMM, NAT
  
  DIF = NEAR-NAT
  
  DIF(LAND.LAND)  = 255
  NEAR(LAND.LAND) = 255
  NAT(LAND.LAND)  = 255

  W = WINDOW(DIMENSIONS=[1536,512])
  RGB=CPAL_READ('PAL_BR')
  I1 = IMAGE(PRODS_2BYTE(NEAR,PROD='CHLOR_A'), RGB_TABLE=CPAL_READ('PAL_BR'),LAYOUT=[3,1,1],MARGIN=0,/CURRENT)
  I2 = IMAGE(PRODS_2BYTE(NAT, PROD='CHLOR_A'), RGB_TABLE=CPAL_READ('PAL_BR'),LAYOUT=[3,1,2],MARGIN=0,/CURRENT)
  I3 = IMAGE(PRODS_2BYTE(DIF, PROD='DIF_-1_1'),RGB_TABLE=CPAL_READ('PAL_BR'),LAYOUT=[3,1,3],MARGIN=0,/CURRENT)
  PNG = !S.DEMO + 'MAPS_LONLAT_DEMO' + SL + 'DO_NAT_VS_NEAR.PNG'
  W.SAVE,PNG
  W.CLOSE
ENDIF;IF KEY(DO_NAT_VS_NEAR) THEN BEGIN
;|||||||||||||||||||||||||||||||||||
  
DONE:


END; #####################  END OF ROUTINE ################################
