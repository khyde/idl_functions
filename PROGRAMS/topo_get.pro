; $ID:	TOPO_GET.PRO,	2020-06-30-17,	USER-KJWH	$
;+
;###################################################################################### 
FUNCTION TOPO_GET,MAPP,LEVELS,DATA=DATA,SWIDTH=SWIDTH,THICKS=THICKS,VERBOSE=VERBOSE,FACT=FACT

; THIS FUNCTION  RETURNS:
;                A TOPOGRAPHIC DATA ARRAY FROM A TOPO-SAV FILE 
;                OR A STRUCTURE FOR SPECIFIED LEVELS 
;                [WATER DEPTHS [-] AND LAND [+] ELEVATIONS]
;                WITHIN A MAP DOMAIN
;                
; CATEGORY: TOPO FAMILY
;
; INPUTS: MAPP ..... STANDARD MAP NAME
;         LEVELS.... ELEVATIONS [VALUES GE 0 ] OR DEPTHS [LT 0] [METERS, MAY BE MULTIPLE VALUES]
;      
; KEYWORDS: 
;     DATA........ RETURNS THE TOPO ARRAY FOR THE ENTIRE MAPP
;     SWIDTH...... WIDTH IN PIXELS TO USE WHEN SMOOTHING THE TOPO DURING CONTOURING [DEFAULT = 5]
;     THICKS...... THICKNESS OF CONTOUR LINE
;     VERBOSE..... PRINT PROGRAM PROGRESS
;     FACT........ ENLARGEMENT FACTOR TO ENHANCE ACCURACY OF CONTOUR PATHS [10 = FULL TOPO RESOLUTION]
;
; OUTPUTS: A NESTED STRUCTURE
;
; EXAMPLES:
;       ST,TOPO_GET('NEC',0) ;===> TO EXTRACT THE SRTM30PLUS COASTLINE FROM TOPO
;       PMM,TOPO_GET('NEC',/DATA) ; RETURNS THE ENTIRE TOPO DATA ARRAY FOR NEC
;       PMM,TOPO_GET('SMI',/DATA) ; RETURNS THE ENTIRE TOPO DATA ARRAY FOR SMI = [-10886,    7253]
;       ST,TOPO_GET('NEC',[0,50,100,200]) ;===> TO EXTRACT 0,50,100 & 200M ELEVATIONS FROM TOPO 
;       ST,TOPO_GET('NEC',-[0,50,100,200]) ; - = WATER
;       ST,TOPO_GET('NEC',-[50,100,200,2000,5000]) ; - = WATER
;       ST,TOPO_GET('NEC',-[50,100,200,2000,5000,200000]);200000 TOO DEEP SO ERROR
;       
; NOTES:  
; 
; 
; MODIFICATION HISTORY:
;     DEC 15, 2015  WRITTEN BY: J.E. O'REILLY
;     DEC 17, 2015 - JEOR: ADDED KEY DATA
;     DEC 20, 2015 - JEOR: ADDED PATH_INFO & PATH_XY TO OUTPUT STRUCT
;                          MAKING A NESTED STRUCTURE TO CONSERVE PATH_INFO & PATH_XY FOR EACH LEVEL
;     DEC 31, 2015 - JEOR: ADDED FACT KEYWORD,PX,PY TO STRUCTURE,
;                          REMOVED ALL REFERENCES TO SUBS [AND CONTOUR TO GET IM]
;                          CONVERT TOPO & LEVELS TO BYTE [FOR CONTOURING SPEED AND MEMORY]
;     JAN 02, 2016 - JEOR: COMMENTED OUT  SHARED MEMORY CODE, ADDED BACK CONTOURING TO GET IMAGE
;                          ADDED SUBS BACK INTO THE OUTPUT STRUCTURE
;     JAN 07, 2016 - KWJH: ADDED ERROR IF THE SAVE FILE IS NOT FOUND.
;                          FORMATTING  
;                          ADDED PX AND PY KEYWORDS TO MAPS_SIZE     
;     FEB 19, 2019 - KJWH: FORMATTING                                                    
;-
; #########################################################################

;*************************
  ROUTINE_NAME  = 'TOPO_GET'
;*************************

;===> DEFAULTS
  DIR = !S.IDL_TOPO + 'SAV' + PATH_SEP()

;===> ENLARGE PX,PY FOR ENHANCED ACCURACY
  IF NONE(FACT) AND !S.USER EQ 'khyde' THEN FACT = 10; KIM HAS MORE MEMORY
  IF NONE(FACT) AND !S.USER EQ 'JOR' THEN FACT = 1
  IF NONE(LEVELS) THEN LEVELS = TOPO_LEVELS()
  IF NONE(COLOR) THEN CON_COLOR = 1 ELSE CON_COLOR = COLOR
  IF NONE(THICKS) THEN THICKS = REPLICATE(1,NOF(LEVELS))
  IF NONE(MIN_PTS) THEN MIN_PTS = 21
  IF NONE(SWIDTH) THEN SWIDTH = 5 ; PASSED TO TOPO_GET [FOR SMOOTHING DURING CONTOURING]

;===> MAKE TAG NAMES FOR THE NESTED STRUCTURE
;===> CHECK IF LEVALS ARE OUTSIDE GLOBAL RANGE [ BUT HIMALAYS ARE 8,848 METERS]
  OK = WHERE(LEVELS LT -10886 OR LEVELS GT 7253,COUNT)
  IF COUNT GE 1 THEN MESSAGE,'ERROR: LEVELS MUST BE BETWEEN -10886 AND  7253 [METERS]'
;===> GET THE TAGS
  TT=TOPO_TAGS(MAPP,LEVELS)
  IF NONE(MAPP) OR NONE(LEVELS) AND NONE(DATA) THEN MESSAGE,'ERROR: MUST PROVIDE MAPP AND TARGET LEVELS'

  M = MAPS_SIZE(MAPP,PX=PX,PY=PY)
  TARGET = 'TOPO' + '-' + MAPP+ '-PXY_'+ ROUNDS(PX) + '_' + ROUNDS(PY) + '-TOPO.SAV'

  FILE = FLS(DIR,TARGET,COUNT=COUNT)
  IF COUNT EQ 0 THEN RETURN, 'ERROR: ' + DIR + TARGET + ' NOT FOUND' 
  TOPO = STRUCT_READ(FILE)
  IF KEY(DATA) THEN RETURN,TOPO

  ;===> ENLARGE PX,PY & TOPO FOR ENHANCED ACCURACY OF CONTOURS
  PX = PX*LONG(FACT)  & PY=  PY*LONG(FACT)
  TOPO = REBIN(TEMPORARY(TOPO),PX,PY,/SAMPLE)

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,NOF(LEVELS)-1 DO BEGIN
    IF KEY(VERBOSE) THEN POF,NTH,NOF(LEVELS)
    TAG   = TT[NTH].TAG
    LEVEL = TT[NTH].LEVEL
    REALM = TT[NTH].REALM
    THICK = THICKS[NTH]
    ZWIN,[PX,PY]
    ERASE,255
    !X.OMARGIN = [0,0]& !Y.OMARGIN = [0,0]
    ;===> CONTOUR THE LEVEL
    CONTOUR,SMOOTH(TOPO,SWIDTH),LEVELS=LEVEL,C_COLORS=CON_COLOR,/DEVICE,XMARGIN=[0,0],YMARGIN=[0,0],C_THICK=1,XSTYLE=5,YSTYLE=5
    IM = TVRD()
    SUBS     = WHERE(IM EQ CON_COLOR,COUNT_LEVEL)
    SUBS_TXT = STRCOMPRESS(STRJOIN(STRTRIM(SUBS,2),';'))   
    
    ;===>CONTOUR THE COAST_CODE TO GET PATH_INFO & PATH_XY
    CONTOUR,SMOOTH(TOPO,SWIDTH),LEVELS=LEVEL,C_COLORS=CON_COLOR,/DEVICE,XMARGIN=[0,0],YMARGIN=[0,0],C_THICK=THICK,XSTYLE=5,YSTYLE=5,PATH_INFO=PATH_INFO,PATH_XY = PATH_XY
    ZWIN   
   
    D = CREATE_STRUCT('MAP',MAPP,'PX',PX,'PY',PY,'REALM',REALM,'LEVEL',ROUNDS(LEVEL),'N',COUNT_LEVEL,'SUBS',SUBS_TXT,'PATH_INFO',PATH_INFO,'PATH_XY',PATH_XY)
    D = CREATE_STRUCT(TAG,D)
    IF NONE(DB) THEN DB = D ELSE DB = CREATE_STRUCT(DB,D)
    
  ENDFOR;FOR NTH = 0,NOF(LEVELS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  IF IDLTYPE(DB) NE 'STRUCT' THEN RETURN,[] ELSE RETURN,DB

END; #####################  END OF ROUTINE ################################
