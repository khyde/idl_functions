; $ID:	STATS_NC.PRO,	2020-07-01-12,	USER-KJWH	$
; 
PRO STATS_NC

; #########################################################################; 
;+
; PURPOSE: CALCULATE MEANS DIRECTLY FROM NCDF FILES USING STATS_ARRAYS


; MODIFICATION HISTORY:
;     OCT 06, 2015  WRITTEN BY: J.E. O'REILLY [ADAPTED FROM BLOCK IN SMI_2015_MAIN]
;-
; #########################################################################

;*************************
ROUTINE_NAME  = 'STATS_NC'
;*************************
DO_MAKE_MEAN_PRODS  = 'SVO'

;***************************
IF KEY(DO_MAKE_MEAN_PRODS) THEN BEGIN
;***************************
  , 'DO_MAKE_MEAN_PRODS'
  SWITCHES,STEP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS,R_MAPS=R_MAPS,DATERANGE=DATERANGE
  IF STOPP THEN STOP  
  ;PRODS = ['CHLOR_A','PAR','ADG_443','SST']
  PRODS = ['CHLOR_A'];a2002185.L3m_DAY_CHLOCI_chl_ocx_9km.nc
  EXT = '.L3m_DAY_CHL'
  ;===>  INPUT DIRECTORY FOR THE NC FILES
  DIR = GET_HDD(6) + 'DATASETS\OC\'
  DIR_STATS = DIR + 'STATS\'
  DIR_TEST,DIR_STATS
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _PROD = 0,N_ELEMENTS(PRODS)-1 DO BEGIN
    PROD = PRODS(_PROD)
    PRINT,'EXT ' ,EXT
    FILES = FILE_SEARCH(DIR,'*'+EXT + '*NC')
    PN,FILES,'FILES'
    FN = FILE_PARSE(FILES)
    DATES= SATDATE_2DATE(FN.FIRST_NAME)
    DATES=STRMID(DATES,0,8)
    SETS=WHERE_SETS(DATES)
    PLINES
    REPORT,ROUTINE_NAME + '   ' + DATE_NOW()
    REPORT,'DO_MAKE_MEAN_PRODS-   '+ PROD
    REPORT,'N_ELEMENTS(SETS):   '+ STRTRIM(N_ELEMENTS(SETS),2)

    OK = WHERE(SETS.N EQ 1,COUNT)  & REPORT,STRTRIM(COUNT,2) +'  SETS.N=1'
    OK = WHERE(SETS.N EQ 2,COUNT)  & REPORT,STRTRIM(COUNT,2) +'  SETS.N=2'
    OK = WHERE(SETS.N EQ 3,COUNT)  & REPORT,STRTRIM(COUNT,2) +'  SETS.N=3'
    OK = WHERE(SETS.N EQ 4,COUNT)  & REPORT,STRTRIM(COUNT,2) +'  SETS.N=4'
    OK = WHERE(SETS.N EQ 5,COUNT)  & REPORT,STRTRIM(COUNT,2) +'  SETS.N=5'

    ; ===> AT MOST CZCS, OCTS, SEAWIFS,AQUA,TERRA,MERIS = 6
    IF MAX(SETS.N) GT 6 THEN STOP
    
    ; ===> NAMES FOR STATS OUTPUT(E.G. 'F:\SMI\STATS\D_20020704-SEAWIFS_AQUA-OV2_EOS-SMI-2009-CHLOR_A-MEAN.SAVE')
    PERIODS = 'D_'+STRMID(SETS.VALUE,0,8)
    SATELLITE = 'ORBV2_EOSAT'
    SATELLITE = ''; KEEP NAME LENGTH TO A MINIMYM
    SATELLITES = REPLICATE(SATELLITE,N_ELEMENTS(SETS))
    SENSOR = 'OSTAMV'
    SENSORS = REPLICATE(SENSOR,N_ELEMENTS(SETS))
    METHOD = 'R2015'
    SUITE = ''
    COVERAGE = '9KM'
    MAP = 'SMI'
    MASK = READ_LANDMASK(MAP =MAP,/LAND); FOR MEDIAN_FILL
    ALG = 'CHL_OCX'
    ASTAT = 'MEAN'
    DATA_UNITS = UNITS(PROD)
    KM_PER_PIXEL = 9
    SMI_MISSING_CODE = -32767.0
    IDL_MISSING_CODE = MISSINGS(0.0)
    DO_STATS=['MEAN','NUM']
    TRANSFORMATION = '' ; STORED IN SAVE FILE [SINCE STATS_ARRAYS NOW ANTILOGS ANY LOG-TRANSFORMED DATA]
    ;###> MUST BE SENSOR METHOD MAP PROD
    LST = ['SENSOR','METHOD','MAP','PROD','ALG']
    TXT ='-'+SENSOR+ '-' + METHOD + '-' + 'SMI'  + '-'+ PROD + '-'+ ALG
    FILE_LABEL ='-' + FILE_LABEL_MAKE(TXT,LST=LST) & HELP,FILE_LABEL
    INAMES = PERIODS+FILE_LABEL

    STAT_FILES= DIR_STATS + INAMES+'-'+ASTAT+'.SAV'
    IF OVERWRITE EQ 0 THEN BEGIN
      SUBS = WHERE(FILE_TEST(STAT_FILES) EQ 0,COUNT,NCOMPLEMENT = NCOMPLEMENT,COMPLEMENT =COMPLEMENT)
      IF COUNT GE 1 THEN SETS=SETS(SUBS)
      ; ===>  REMAINING TO PROCESS
      REPORT,STRTRIM(NCOMPLEMENT,2)+ '   ' +PROD +'  STAT FILES COMPLETED'
      REPORT,STRTRIM(COUNT,2)+'   ' + PROD  +'  STAT FILES REMAINING TO BE MADE'
    ENDIF; IF OVERWRITE EQ 0 THEN BEGIN

    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR _SET = 0,N_ELEMENTS(SETS)-1 DO BEGIN
      POF,_SET,SETS
      ASET = SETS(_SET)
      SUBS = WHERE_SETS_SUBS(ASET)
      N_SUBS = N_ELEMENTS(SUBS)
      ;===> NULL STRING INFILE FOR EACH SET
      INFILE = ''

      ; ===> DEFINE TRANSFORM BEFORE CALLING STATS_ARRAYS
      IF PROD EQ 'CHLOR_A'  THEN TRANSFORM= 'ALOG' ELSE TRANSFORM = ''

      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
      FOR _SUB=0,N_SUBS -1L DO BEGIN
        POF,_SUB,N_SUBS
        ASUB = SUBS(_SUB)
        AFILE = FILES(ASUB)

        OK=WHERE_STRING(STAT_FILES,ASET.VALUE,COUNT)
        IF COUNT NE 1 THEN STOP
        FULLNAME= STAT_FILES[OK]

        IF OVERWRITE EQ 0 AND FILE_TEST(FULLNAME) EQ 1 THEN BEGIN
          PRINT,' SKIPPING:  ' +FULLNAME
          CONTINUE  ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          
        ENDIF;IF OVERWRITE EQ 0 AND FILE_TEST(FULLNAME) EQ 1 THEN BEGIN
        ;        SMI_MISSING_CODE = -32767.0 ; READ_NC DEALS WITH MISSING DATA CODES
        IDL_MISSING_CODE = MISSINGS(0.0)
        D = READ_NC(AFILE,PRODS=ALG,/DATA)  & PFILE,AFILE,/R

        IF IDLTYPE(D,/CODE) NE 4 THEN BEGIN
          REPORT,AFILE + '    IS NOT A FLT ARRAY'
          GOTO,DONE_SET  ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ENDIF;IF IDLTYPE(D,/CODE) NE 8 THEN BEGIN

        IF INFILE[0] EQ '' THEN INFILE = AFILE ELSE INFILE= [INFILE,AFILE]
        ;#########################
        ;##### FIX_NOISE     #####
        ;#########################
        D = FIX_NOISE(D,COUNT_NOISE)
        NOTES = 'FIX_NOISE ; NOISE = 5; COUNT= '+ROUNDS(COUNT_NOISE)
        ;||||||||||||||||||||||||||||||||||||||||||||||||||||


        ;#########################
        ;##### MEDIAN_FILL #######
        ;         ;=== MUST CONVERT NANS TO INFINITY
        ;         D = NAN_2INFINITY(D)
        ;         D = MEDIAN_FILL(D,MASK=MASK,BOX=[3,5],COUNT_MED)
        ;         NOTES = [NOTES,'MEDIAN_FILL ; BOX=[3,5]; COUNT= '+ STRJOIN(ROUNDS(COUNT_MED),';')]
        ;         ;|||||||||||||||||||||||||

        ;##################################################################################################
        ;###############     FIND THE GOOD DATA     #######################################################        OK_GOOD = WHERE(DATA NE SMI_MISSING_CODE AND DATA NE IDL_MISSING_CODE AND $
        ;##################################################################################################
        OK_GOOD = WHERE(FINITE(D),COUNT_GOOD,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT=COMPLEMENT)

        ;****************************
        IF COUNT_GOOD EQ 0 THEN BEGIN
          ;****************************
          TXT = 'NO GOOD DATA FOR : '+FULLNAME
          REPORT,TXT
          GOTO,DONE_SET ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ENDIF;IF COUNT_GOOD EQ O THEN BEGIN
        ;|||||||||||||||||||||||||||||||||||



        ; ===>SET UP KEYWORDS FOR STATS_ARRAYS
        ; [WHEN FIRST FILE]
        IF _SUB EQ 0 THEN BEGIN
          START=1
          CALC=0
        ENDIF ELSE BEGIN
          START=0
          CALC=0
        ENDELSE;IF _SUB EQ 0 THEN BEGIN

        ; [WHEN LAST FILE]
        IF _SUB EQ N_SUBS -1L THEN BEGIN
          START=0
          CALC=1
        ENDIF ;IF _SUB EQ N_SUBS -1L THEN BEGIN


        ;[WHEN ONLY ONE FILE TO AVERAGE]
        IF N_SUBS EQ 1 THEN BEGIN
          START = 1
          CALC=1
        ENDIF;IF N_SUBS EQ 1 THEN BEGIN

        IF PROD EQ 'CHLOR_A' THEN STATS_ARRAYS_TRANSFORM = 'ALOG' ELSE STATS_ARRAYS_TRANSFORM = ''

        S =STATS_ARRAYS( D,TRANSFORM = STATS_ARRAYS_TRANSFORM, MISSING = IDL_MISSING_CODE,DO_STATS=DO_STATS,START=START,CALC=CALC)

        IF IDLTYPE(S,/CODE) EQ 8 THEN BEGIN
          IF  VERBOSE  THEN PRINT,'MEAN: ',MINMAX(S.MEAN,/FIN)
        ENDIF ELSE BEGIN
          IF  VERBOSE THEN PRINT,'CALLS TO STATS_ARRAYS: ',S
        ENDELSE;IF IDLTYPE(S,/CODE EQ 8 THEN BEGIN
        ;STOP
      ENDFOR;FOR _SUB=0,N_SUBS -1L DO BEGIN
      ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

      WRITE_PROD:
      ; **********************
      ; ===> MAKE STATS SAVES
      ; **********************
      STATS_WRITE,FULLNAME,S,INFILE=INFILE,NOTES=NOTES
      DONE_SET:
    ENDFOR;FOR _SET = 0,N_ELEMENTS(SETS)-1 DO BEGIN
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ENDFOR;  FOR _PROD = 0,N_ELEMENTS(PRODS)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ,'DO_MAKE_MEAN_PRODS'
ENDIF;IF KEY(DO_MAKE_MEAN_PRODS) THEN BEGIN ;COPIED FROM UNEP_MAIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

IF VERBOSE THEN 


END; #####################  END OF ROUTINE ################################
