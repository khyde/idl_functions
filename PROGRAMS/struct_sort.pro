; $ID:	STRUCT_SORT.PRO,	2020-06-30-17,	USER-KJWH	$
;############################################################################
  FUNCTION STRUCT_SORT, STRUCT,  TAGNAMES=TAGNAMES, TAGS=TAGS, UP_DOWN=UP_DOWN, ERROR=ERROR, VERBOSE=VERBOSE
;+
;	THIS FUNCTION SORTS A STRUCTURE BASED ON ONE OR MORE TAGNAMES
;
; SYNTAX:
;	RESULT = STRUCT_SORT(STRUCT,TAGS=TAGS, TAGNAMES=TAGNAMES)
;
; OUTPUT:
;		THE STRUCTURE WITH RECORDS SORTED
;
; ARGUMENTS:
; 	STRUCT:	 A SIMPLE SPREADSHEET-TYPE STRUCTURE
;
; KEYWORDS:
;		TAGS: THE TAG SUBSCRIPTS TO BE USED IN SORTING
;		TAGNAMES:	THE TAGNAMES TO BE USED IN SORTING
;		ERROR:    ERROR CODE: 1=ERROR 0 = OK
;
; EXAMPLE:
;		SEE STRUCT_SORT_DEMO.PRO
;
; NOTES:
;		THIS ROUTINE EXPECTS THE INPUT STRUCT TO BE SIMPLE (SPREADSHEET OR DATABASE TYPE) STRUCTURES.
;
;		WHERE_SETS IS USED TO SORT THE DATA
;		A MAXIMUM OF 7 TAGS/TAGNAMES MAY BE USED FOR SORTING (MORE THAN THIS IS QUIETLY IGNORED)
;
; HISTORY:
;		WRITTEN JAN 17, 2005 BY J.O'REILLY, 28 TARZWELL DRIVE, NMFS, NOAA 02882 (JAY.O'REILLY@NOAA.GOV)
;		MAY 09, 2014 - JEOR: UPDATED CODE
;		DEC 20, 2017 - KJWH: Changed TAG_TARGETS = -1L to TAG_TARGETS = [] & MASTER = -1 to MASTER = []
;		                     Formatting
;		APR 03, 2019 - KJWH: Added VERBOSE keyword and IF KEY(VERBOSE) THEN PRINT, 'SORTING WILL BE DEFAULT: ASCENDING ORDER FOR ALL TAGS'                    
;-
;**************************
  ROUTINE_NAME='STRUCT_SORT'
;**************************

  ERROR = 0

; =====> ENSURE INPUT INFORMATION IS CORRECT
  SZ_STRUCT   = SIZE(STRUCT,/STRUCT)
  SZ_TAGNAMES = SIZE(TAGNAMES,/STRUCT)
  SZ_TAGS     = SIZE(TAGS,/STRUCT)

  IF SZ_STRUCT.TYPE  NE 8 THEN BEGIN
    PRINT,'ERROR: MUST PROVIDE A SIMPLE SPREADSHEET TYPE STRUCTURE'
    ERROR = 1
    RETURN, STRUCT
  ENDIF
  IF SZ_TAGNAMES.N_ELEMENTS EQ 0 AND SZ_TAGS.N_ELEMENTS EQ 0 THEN BEGIN
    PRINT,'ERROR: MUST PROVIDE TAGNAMES OR TAGS'
     ERROR = 1
    RETURN, STRUCT
  ENDIF
  IF SZ_TAGNAMES.N_ELEMENTS GE 1 AND SZ_TAGNAMES.TYPE   NE 7 THEN BEGIN
    PRINT,'ERROR: TAGNAMES MUST BE STRING TYPE'
    ERROR = 1
    RETURN, STRUCT
  ENDIF

;	===>
  NTAGS = N_TAGS(STRUCT)
  STRUCT_NAMES = TAG_NAMES(STRUCT)
  TAG_SUBS     = LINDGEN(NTAGS)
  TAG_TARGETS  = []

; ===>IF TAGNAMES PROVIDED THEN FIND TAG NUMBERS FROM TAGNAMES, CONSERVING THE INPUT ORDER
  IF SZ_TAGNAMES.N_ELEMENTS GE 1 AND SZ_TAGS.N_ELEMENTS EQ 0 THEN BEGIN
    FOR NTH=0L, N_ELEMENTS(TAGNAMES)-1L DO BEGIN
      TARGET = STRUPCASE(TAGNAMES[NTH])
      OK = WHERE(STRUCT_NAMES EQ TARGET,COUNT)
      IF COUNT EQ 1 THEN TAG_TARGETS=[TAG_TARGETS,(OK)]
    ENDFOR
  ENDIF

; ===> IF TAGS PROVIDED, EXTRACT JUST THE VALID TAGS NUMBERS FOR STRUCT, CONSERVING THE INPUT ORDER
  IF SZ_TAGNAMES.N_ELEMENTS EQ 0 AND SZ_TAGS.N_ELEMENTS GE 1 THEN BEGIN
     FOR NTH=0L, N_ELEMENTS(TAGS)-1L DO BEGIN
      TARGET = TAGS[NTH]
      OK = WHERE(TAG_SUBS EQ TARGET,COUNT)
      IF COUNT EQ 1 THEN TAG_TARGETS=[TAG_TARGETS,(OK)]
    ENDFOR
  ENDIF

; ===> IF NO TARGETS WERE FOUND RETURN -1L
  IF TAG_TARGETS EQ [] THEN BEGIN
  	ERROR = 1
  	PRINT,'ERROR: THE TAGS OR TAGNAMES PROVIDED ARE NOT FOUND IN THE STRUCTURE'
  	RETURN, STRUCT
  ENDIF

	NTH_TARGET = (N_ELEMENTS(TAG_TARGETS)-1L) < 6 ; A MAXIMUM OF 7 TAGS MAY BE USED FOR SORTING

	_UP_DOWN = REPLICATE(0,N_ELEMENTS(TAG_TARGETS))

 	IF N_ELEMENTS(UP_DOWN) EQ 1 THEN BEGIN
			_UP_DOWN = REPLICATE(UP_DOWN,N_ELEMENTS(TAG_TARGETS))
	ENDIF ELSE BEGIN
		IF N_ELEMENTS(UP_DOWN) EQ N_ELEMENTS(TAG_TARGETS) THEN BEGIN
			_UP_DOWN = UP_DOWN
		ENDIF ELSE BEGIN
			IF KEY(VERBOSE) THEN PRINT, 'SORTING WILL BE DEFAULT: ASCENDING ORDER FOR ALL TAGS'
			ERROR = 1
			_UP_DOWN = REPLICATE(0,N_ELEMENTS(TAG_TARGETS))
		ENDELSE
	ENDELSE

	_UP_DOWN = 0 > _UP_DOWN < 1

	;PRINT, _UP_DOWN
	;IF MAX(_UP_DOWN) EQ 0 THEN GOTO, QUICK

	INDX = LINDGEN(SZ_STRUCT.N_ELEMENTS)


;	===> MAKE UP KEYS TO USE IN SORTING THE STRUCTURE
	KEY  = ''
	_STRUCT = STRUCT

	MASTER = []
; ********
	LEVEL = 0
	ATAG = TAG_TARGETS(LEVEL)
	SETS_0 = WHERE_SETS(STR_PAD(STRUCT.(ATAG)))
	N_SETS_0 = N_ELEMENTS(SETS_0)
	IF _UP_DOWN(LEVEL) EQ 1 THEN SETS_0 = SETS_0(REVERSE(LINDGEN(N_SETS_0)))
	IF LEVEL EQ NTH_TARGET THEN BEGIN
		SUBS_0=WHERE_SETS_SUBS(SETS_0)
		MASTER = [MASTER,SUBS_0]
	ENDIF ELSE BEGIN

; 	LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _SETS_0 = 0L,N_SETS_0-1L DO BEGIN
			SUBS_0=WHERE_SETS_SUBS(SETS_0(_SETS_0))
		;	PRINT,'SUBS_0', SUBS_0
			N_0 = SETS_0(_SETS_0).N
 			IF N_0 EQ 1 THEN BEGIN
		 		MASTER = [MASTER,SUBS_0]
 			ENDIF ELSE BEGIN

;				*********
				LEVEL = 1
				ATAG = TAG_TARGETS(LEVEL)
				SETS_1 = WHERE_SETS(STR_PAD(STRUCT(SUBS_0).(ATAG)))
				N_SETS_1 = N_ELEMENTS(SETS_1)
				IF _UP_DOWN(LEVEL) EQ 1 THEN SETS_1 = SETS_1(REVERSE(LINDGEN(N_SETS_1)))
				IF LEVEL EQ NTH_TARGET THEN BEGIN
					SUBS_1=WHERE_SETS_SUBS(SETS_1)
					MASTER = [MASTER,SUBS_0(SUBS_1)]
				ENDIF ELSE BEGIN

; 				LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
					FOR _SETS_1 = 0L,N_SETS_1-1L DO BEGIN
						SUBS_1=WHERE_SETS_SUBS(SETS_1(_SETS_1))
				;		PRINT,'SUBS_1', SUBS_1
						N_1 = SETS_1(_SETS_1).N
		 				IF N_1 EQ 1 THEN BEGIN
				 			MASTER = [MASTER,SUBS_0(SUBS_1)]
		 				ENDIF ELSE BEGIN

		;					*********
							LEVEL = 2
							ATAG = TAG_TARGETS(LEVEL)
							SETS_2 = WHERE_SETS(STR_PAD(STRUCT(SUBS_0(SUBS_1)).(ATAG)))

							N_SETS_2 = N_ELEMENTS(SETS_2)
							IF _UP_DOWN(LEVEL) EQ 1 THEN SETS_2 = SETS_2(REVERSE(LINDGEN(N_SETS_2)))
							IF LEVEL EQ NTH_TARGET THEN BEGIN
								SUBS_2=WHERE_SETS_SUBS(SETS_2)
								MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2))]
							ENDIF ELSE BEGIN

;				 				LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
								FOR _SETS_2 = 0L,N_SETS_2-1L DO BEGIN
									SUBS_2=WHERE_SETS_SUBS(SETS_2(_SETS_2))
									N_2 = SETS_2(_SETS_2).N
					 				IF N_2 EQ 1 THEN BEGIN
							 			MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2))]
					 				ENDIF ELSE BEGIN

					;					*********
										LEVEL = 3
										ATAG = TAG_TARGETS(LEVEL)
										SETS_3 = WHERE_SETS(STR_PAD(STRUCT(SUBS_0(SUBS_1(SUBS_2))).(ATAG)))

										N_SETS_3 = N_ELEMENTS(SETS_3)
										IF _UP_DOWN(LEVEL) EQ 1 THEN SETS_3 = SETS_3(REVERSE(LINDGEN(N_SETS_3)))
										IF LEVEL EQ NTH_TARGET THEN BEGIN
											SUBS_3=WHERE_SETS_SUBS(SETS_3)
											MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2(SUBS_3)))]
										ENDIF ELSE BEGIN

;							 				LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
											FOR _SETS_3 = 0L,N_SETS_3-1L DO BEGIN
												SUBS_3=WHERE_SETS_SUBS(SETS_3(_SETS_3))
												N_3 = SETS_3(_SETS_3).N
								 				IF N_3 EQ 1 THEN BEGIN
										 			MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2(SUBS_3)))]
								 				ENDIF ELSE BEGIN

								;					*********
													LEVEL = 4
													ATAG = TAG_TARGETS(LEVEL)
													SETS_4 = WHERE_SETS(STR_PAD(STRUCT(SUBS_0(SUBS_1(SUBS_2(SUBS_3)))).(ATAG)))

													N_SETS_4 = N_ELEMENTS(SETS_4)
													IF _UP_DOWN(LEVEL) EQ 1 THEN SETS_4 = SETS_4(REVERSE(LINDGEN(N_SETS_4)))
													IF LEVEL EQ NTH_TARGET THEN BEGIN
														SUBS_4=WHERE_SETS_SUBS(SETS_4)
														MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2(SUBS_3(SUBS_4))))]
													ENDIF ELSE BEGIN

;										 				LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
														FOR _SETS_4 = 0L,N_SETS_4-1L DO BEGIN
															SUBS_4=WHERE_SETS_SUBS(SETS_4(_SETS_4))
															N_4 = SETS_4(_SETS_4).N
											 				IF N_4 EQ 1 THEN BEGIN
													 			MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2(SUBS_3(SUBS_4))))]
											 				ENDIF ELSE BEGIN

											;					*********
																LEVEL = 5
																ATAG = TAG_TARGETS(LEVEL)
																SETS_5 = WHERE_SETS(STR_PAD(STRUCT(SUBS_0(SUBS_1(SUBS_2(SUBS_3(SUBS_4))))).(ATAG)))

																N_SETS_5 = N_ELEMENTS(SETS_5)
																IF _UP_DOWN(LEVEL) EQ 1 THEN SETS_5 = SETS_5(REVERSE(LINDGEN(N_SETS_5)))
																IF LEVEL EQ NTH_TARGET THEN BEGIN
																	SUBS_5=WHERE_SETS_SUBS(SETS_5)
																	MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2(SUBS_3(SUBS_4(SUBS_5)))))]
																ENDIF ELSE BEGIN

	;																LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
																	FOR _SETS_5 = 0L,N_SETS_5-1L DO BEGIN
																		SUBS_5=WHERE_SETS_SUBS(SETS_5(_SETS_5))
																		N_5 = SETS_5(_SETS_5).N
														 				IF N_5 EQ 1 THEN BEGIN
																 			MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2(SUBS_3(SUBS_4(SUBS_5)))))]
														 				ENDIF ELSE BEGIN

														;					*********
																			LEVEL = 6
																			ATAG = TAG_TARGETS(LEVEL)
																			SETS_6 = WHERE_SETS(STR_PAD(STRUCT(SUBS_0(SUBS_1(SUBS_2(SUBS_3(SUBS_4(SUBS_5)))))).(ATAG)))

																			N_SETS_6 = N_ELEMENTS(SETS_6)
																			IF _UP_DOWN(LEVEL) EQ 1 THEN SETS_6 = SETS_6(REVERSE(LINDGEN(N_SETS_6)))
																			IF LEVEL EQ NTH_TARGET THEN BEGIN
																				SUBS_6=WHERE_SETS_SUBS(SETS_6)
																				MASTER = [MASTER,SUBS_0(SUBS_1(SUBS_2(SUBS_3(SUBS_4(SUBS_5(SUBS_6))))))]
																			ENDIF ELSE BEGIN
																				STOP
																				; PROBLEM WITH PROGRAM IF STOPS HERE
																			ENDELSE
																		ENDELSE
																	ENDFOR; |||
																ENDELSE
															ENDELSE
														ENDFOR ; |||
													ENDELSE
												ENDELSE
											ENDFOR ; |||
										ENDELSE
									ENDELSE
								ENDFOR ; |||
							ENDELSE
						ENDELSE
					ENDFOR ; |||
				ENDELSE
 			ENDELSE
 		ENDFOR ; |||
 	ENDELSE


  _STRUCT = STRUCT
  RETURN, _STRUCT(MASTER)



QUICK:
; FAST WAY OF PLAIN ASCENDING SORT FOR ALL TAGS
	KEY=''
	_STRUCT = STRUCT
 	FOR _TAG = 0L, N_ELEMENTS(TAG_TARGETS) -1L DO BEGIN
 		ATAG = TAG_TARGETS(_TAG)
 		SETS=WHERE_SETS(STRUCT.(ATAG))
 	 	KEY = KEY + STR_PAD(STRUCT.(TAG_TARGETS(_TAG))) + '$'
 	ENDFOR
;;	|||||||||||||||||||||||||||||||
	RETURN,_STRUCT(SORT(KEY))

  END; #####################  END OF ROUTINE #############################
