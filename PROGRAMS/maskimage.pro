; $ID:	MASKIMAGE.PRO,	2020-07-08-15,	USER-KJWH	$
;+
; NAME:
;       MASKIMAGE
;
; PURPOSE:
;       IMAGE mask
;       Generate a text file listing inames & max_pixel in mbr_chl_gif file to be masked out
;       For each iname, write out mbr_chl_mask_gif where mask value of 1B
;         is applied to (  1B >= mbr_chl_gif <= max_pixel  )
;
; CATEGORY:
;       IMAGES
;
; CALLING SEQUENCE:
; IF N_ELEMENTS(DIR_IN) LT 1 THEN DIR_IN = '/oc5/czcs/gees_chl_gif/'
; IF N_ELEMENTS(TYPE) LT 1 THEN TYPE = 'gif'
; IF N_ELEMENTS(MASKFILE) LT 1 THEN MASKFILE = '/oc5/czcs/maskit/maskit.txt'
; IF N_ELEMENTS(DIR_OUT) LT 1 THEN DIR_OUT = '/oc5/czcs/maskit/'
;
; maskimage,DIR_IN='/oc5/czcs/gees_chl_gif/',TYPE='gif',MASKFILE='/oc5/czcs/maskit/maskit.txt',DIR_OUT='/oc5/czcs/maskit/',
;           OVERLAY='/usr/users/oreilly/idl/images/nec_coast.gif',xsize=780,ysize=850
;
;
;
; MASKIMAGE,files='h:\czcs\seadas\t8888\*520.gif',OVERLAY='d:\idl\jay\images\nec_coast.gif',NAVFILE='d:\idl\jay\etc\MASKIMAGE.txt
;
;
; MASKIMAGE,MASKFILE='d:\idl\jay\etc\MASKIMAGE.txt',/CHECK
;
; MASKIMAGE,MASKFILE='d:\idl\jay\etc\MASKIMAGE.txt', /dbf
; MASKIMAGE,MASKFILE='d:\idl\jay\etc\MASKIMAGE.txt', dbf='MASKIMAGE.dbf'
;
; INPUTS:
;       Image files (See Readall.pro to see what file types can be read).
;
;       MASKFILE: The name for the ascii file which will contain the
;                navigation data generated by this program.
;
;
;
; KEYWORD PARAMETERS:
;       FILES:      The name(s) of the image file(s)
;       OVERLAY:    The name of the gif coastline (or other overlay)
;                   image file where coast (overlay) values are 1
;                   and where the dimensions and map projection matches
;                   all the images which you are navigating.
;       NAVFILE:    The name of the file which will contain the x,y shift values
;       XSIZE:      The X size in pixels for the main image display scroll window
;       YSIZE:      The Y size in pixels for the main image display scroll window
;       DBF:        Generates a DBF DBASE binary FILE from the NAVFILE.
;                   Only the most recent navigation data are written to the
;                   dbf file and the name of the dbf file is the same as the
;                   input navfile.
;
;  OTHER PROGRAMS CALLED:
;   FILELIST
;   PARSE_IT
;   READ_ALL  (AND RELATED READING PROGRAMS)
;   SETCOLOR
;   IDLTYPE
;   DATE_NOW
;   CW_ZOOMJ ;
;   READ_DB
;   WRITE_DB
;   MISSINGS
;   NUM2STR
;   STRALONG
;   SLIDE_IMAGE
;   GRAY0,R,G,B     palette
;   CZVMIAMI,R,G,B  palette
;   BLKGRWH1,R,G,B  palette
;   PAL_36,R,G,B  palette
;   PAL_SW2,R,G,B  palette
;   PETES24,R,G,B  palette
;
; OUTPUTS:
;
;
; SIDE EFFECTS:
;       None.
;
; RESTRICTIONS:
;       Input files must be same size and map projection as your coastline image file.
;       DO NOT put any commas in the comment box as commas are used by this program to parse the
;       data items.
;
; PROCEDURE:
;       Use MASKIMAGE to select pixels for masking,
;       Press NEXT to load images, use SLIDEMASK slider to select pixels for masking
;       Pixels 1 thru the value selected by the slider will be set to 255B (show up as red with SW_2 palette)
;       You can add comments about the image in the comment box
;       Press WRITE to write out max pixel value to a text file &  write out a mask gif image file
;       After you have masked images you may check the data and if needed,
;       remask by using the KEYWORD  CHECK.
;
;       When you are finished masking and checking
;       run MASKIMAGE with the KEYWORD   /DBF
;       This will make a dbf dbase file from the MASKFILE.TXT
;
; NOTES:
;
;
; MODIFICATION HISTORY:
;       Written by:  J.E.O'Reilly, June 26, 1995.
;       March 4,1999 J.O'R  made more generic
;       March 9,1999 ADDED KEYWORD CHECK
;-

; ==================>
  PRO MASKIMAGE_event,event
  COMMON data,ok_coast,image,temp_image,base,next,maskvalue,zoom,$
             image_label,slide_maskvalue,no_land,XYS,fname,path_in,path_out,$
             _file,comment,notes,pal,palval,paltable,RED,GREEN,BLUE,TOGGLE,coast_color,TABLE,_CHECK

  WIDGET_CONTROL, event.id, GET_UVALUE=uvalue


  IF uvalue NE 'EXIT' AND _file GE N_ELEMENTS(FNAME) THEN BEGIN
   PRINT, 'NO MORE IMAGES TO PROCESS ... EXIT PROGRAM'
   done = WIDGET_MESSAGE('NO MORE IMAGES TO PROCESS ... EXIT PROGRAM'  )
   GOTO, NO_MORE_IMAGES
  ENDIF

  CASE uvalue of

  'MENU':  BEGIN
;   ==================>
    IF EVENT.VALUE EQ 'Black' THEN BEGIN
       coast_color = '0'
    ENDIF

    IF EVENT.VALUE EQ 'White' THEN BEGIN
        coast_color = '255'
    ENDIF

    IF EVENT.VALUE EQ 'Multi' THEN BEGIN
        coast_color = 'BYTE(ROUND((255B-temp_image(ok_coast))/255.)*255B )'
    ENDIF

;   ==================>
    IF EVENT.VALUE EQ 'HELP' THEN BEGIN
      TXT = ['MASKIMAGE.PRO  Version; March 9,1999']
      txt = [txt, 'This program is used to navigate (shift) satellite images']
      txt = [txt, 'so that the image is congruent with a coastline or other landmarks.']
      txt = [txt, '']
      txt = [txt, 'The output is a comma-delimited text file containing:']
      txt = [txt, '        The Image Name;']
      txt = [txt, '        The Navigation Adjustments (X and Y shifts);']
      txt = [txt, '        The Date-Time you navigated the image;']
      txt = [txt, '        The Full Image Name and Path ']
      txt = [txt, '        Your Comments (optional) About the Image']
      txt = [txt, '']
      txt = [txt, 'Program Can Read a Variety of Image File Formats']
      txt = [txt, "The Coastline File Should Use '1' to Identify Coastline Pixels"]
      txt = [txt, 'The Coastline File Must Match the Map Projection and Size of ']
      txt = [txt, 'the Satellite Image Files']
      txt = [txt, '']
      txt = [txt, 'BUTTONS:']
      txt = [txt, '     X SHIFT: Shifts the image left and right']
      txt = [txt, '     Y SHIFT: Shifts the image up   and down']
      txt = [txt, '     PAL:     Cycles through 5 different color palettes']
      txt = [txt, '     COAST:   Turns on/off the coastline']
      txt = [txt, '     NEXT:    Displays the next image']
      txt = [txt, '     WRITE:   Writes the navigation information']
      txt = [txt, '     COMMENT: Allows you to input comments about the image']
      txt = [txt, '                 (Do not use commas in the Comment Box)']
      txt = [txt, '     NO LAND: Press this Button if there is No Land Visible']
      txt = [txt, '']
      txt = [txt, '     MENU:    Other Program Options']
      txt = [txt, '              COAST COLOR:']
      txt = [txt, '                    BLACK']
      txt = [txt, '                    WHITE']
      txt = [txt, '                    MULTI']
      txt = [txt, '              HELP']
      txt = [txt, '']
      txt = [txt, '']
      txt = [txt, 'NOTE:  YOU MUST USE THE EXIT BUTTON TO SAVE NAVIGATION DATA']
      txt = [txt, '']
      txt = [txt, "J.O'Reilly, NOAA, Narragansett, RI"]
      txt = [txt, 'oreilly@fish1.gso.uri.edu']
      A=WIDGET_MESSAGE(TXT,/INFORMATION)

    ENDIF
   ENDCASE

     'ZOOM': BEGIN
     HELP,/STRUCT, event
     print, event.id
     WIDGET_CONTROL,zoom, SET_VALUE=temp_image

     END

  'NEXT_IMAGE':  BEGIN
     _file = _file + 1
     IF _file  GE N_ELEMENTS(FNAME) THEN GOTO, NO_MORE_IMAGES
     IF STRUPCASE(fname(_file).ext) EQ 'RS7' OR STRUPCASE(fname(_file).ext) EQ 'RD7' THEN BEGIN
       BINARY = 1
     ENDIF ELSE BEGIN
       BINARY = 0
     ENDELSE
     filename = path_in + fname(_file).fullname
     IMAGE = READALL(filename, BINARY=BINARY);,TYPE='HDF',/binary)
     PRINT, FNAME(_file).FULLNAME
     temp_image = image
     cmd = 'temp_image(ok_coast) = ' + coast_color
     a=EXECUTE(cmd)
     notes = ''
;    Has this image been navigated
     IF _CHECK EQ 1 THEN BEGIN

       ok = WHERE(table.Iname EQ FNAME(_FILE).NAME,COUNT)
       IF COUNT GE 1 THEN BEGIN
         MASKVALUE = TABLE(OK[0]).MASKVALUE
         OK = WHERE(IMAGE GE 1 AND IMAGE LE MASKVALUE , COUNT)
         IF COUNT GE 1 THEN BEGIN
          ; set pixels to 255
          temp_image(OK) = 255B
         ENDIF
   ;      cmd = 'temp_image(ok_coast) = ' + coast_color
   ;      a=EXECUTE(cmd)
         WIDGET_CONTROL,zoom, SET_VALUE=temp_image
       ENDIF ELSE BEGIN
         maskvalue = 0.0
       ENDELSE
     ENDIF ELSE BEGIN
       maskvalue = 0.0
     ENDELSE
     WIDGET_CONTROL,zoom, SET_VALUE=temp_image
     b = fname(_file).name
     WIDGET_CONTROL,image_label,SET_VALUE=fname(_file).name+fname(_file).ext
     WIDGET_CONTROL,COMMENT, SET_VALUE=notes
     WIDGET_CONTROL,slide_maskvalue,/SENSITIVE, SET_VALUE=maskvalue
     END

  'PAL':    BEGIN
     palval = palval + 1
     IF palval GE N_ELEMENTS(paltable) THEN palval = 0
     TVLCT,RED(*,PALVAL),GREEN(*,PALVAL),BLUE(*,PALVAL)
   END

  'SLIDEMASK':  BEGIN
     IF STRMID(notes[0],0,15) EQ 'NO VISIBLE LAND' THEN BEGIN
       WIDGET_CONTROL,slide_maskvalue, SENSITIVE=0,SET_VALUE=0.0
     ENDIF ELSE BEGIN
       WIDGET_CONTROL,slide_maskvalue, GET_VALUE=maskvalue
       maskvalue = maskvalue
       WIDGET_CONTROL,slide_maskvalue, SET_VALUE=maskvalue
       temp_image = IMAGE
       OK = WHERE(IMAGE GE 1 AND IMAGE LE MASKVALUE , COUNT)
       IF COUNT GE 1 THEN BEGIN
        ; set pixels to 255
        temp_image(OK) = 255B
       ENDIF

       cmd = 'temp_image(ok_coast) = ' + coast_color
       a=EXECUTE(cmd)

       WIDGET_CONTROL,zoom, SET_VALUE=temp_image
     ENDELSE
     END

   'COMMENT': BEGIN
      WIDGET_CONTROL,COMMENT, GET_VALUE=notes
      IF STRMID(notes[0],0,15) NE 'NO VISIBLE LAND' THEN BEGIN
        WIDGET_CONTROL,slide_maskvalue, SENSITIVE=1
      ENDIF
      END

   'COAST': BEGIN
      temp_image = mask(image,maskvalue)
      IF toggle EQ 1 THEN BEGIN
        cmd = 'temp_image(ok_coast) = ' + coast_color
        a=EXECUTE(cmd)
        toggle = 0
      ENDIF ELSE BEGIN
        toggle = 1
      ENDELSE
      WIDGET_CONTROL,zoom, SET_VALUE=temp_image
      END

   'NO_LAND': BEGIN
      WIDGET_CONTROL,slide_maskvalue, SENSITIVE=0,SET_VALUE=0.0
      maskvalue = 0.0
      notes = 'NO VISIBLE LAND'
      WIDGET_CONTROL,comment, SET_VALUE=notes
      END

   'WRITE_MASK': BEGIN
      IF STRMID(notes[0],0,15) EQ 'NO VISIBLE LAND' THEN BEGIN
        WIDGET_CONTROL,slide_maskvalue, SET_VALUE=0.0
        maskvalue = 0.0
      ENDIF
      fullname = FNAME(_file).FULLNAME
      iname = FNAME(_file).NAME
      CHRON=DATE_NOW()
      C = ","
      ; add image name and highest value to be masked to the text file
      PRINT,    iname,C,maskvalue,C,chron,C,fullname,C,notes,FORMAT='(A,A,I4,A,I4,A,A14,A,A,A,A)'
      PRINTF,XYS,iname,C,maskvalue,C,chron,C,fullname,C,notes,FORMAT='(A,A,I4,A,I4,A,A14,A,A,A,A)'

      ; build and write a mask gif
      MASK_GIF_FILE = path_out + STRMID(iname,0,14) + '_MBR_CHL_mask.gif'
      MASK_GIF_IMAGE = IMAGE
      MASK_GIF_IMAGE(*) = 0B
      OK = WHERE(IMAGE GE 1 AND IMAGE LE MASKVALUE , COUNT)
       IF COUNT GE 1 THEN BEGIN
        ; to flag pixels for masking,set pixels to 1B
        MASK_GIF_IMAGE[OK] = 1B
       ENDIF
      ; PAL36 is the 6th element in color palette
      WRITE_GIF, MASK_GIF_FILE,MASK_GIF_IMAGE,RED(*,5),GREEN(*,5),BLUE(*,5)
      PRINT, MASK_GIF_FILE,' written to dir_out.'
      END

    'EXIT':  BEGIN
       CLOSE,XYS
       FREE_LUN,XYS
       WIDGET_CONTROL, event.top, /DESTROY
      END

   ENDCASE
   NO_MORE_IMAGES:
END

; ====================>
; maskimage,,files='h:\czcs\seadas\t8888\*520.gif',OVERLAY='d:\idl\jay\images\nec_coast.gif',NAVFILE='d:\idl\jay\images\MASKIMAGE.txt'
  PRO MASKIMAGE, DIR_IN=dir_in,TYPE=type,$
                OVERLAY=OVERLAY,$
                MASKFILE=maskfile,$
                DIR_OUT=dir_out,$
                XSIZE=xsize, YSIZE=ysize, $
                DBF=DBF,$
                CHECK= check

  COMMON data, ok_coast,image,temp_image,base,next,maskvalue,zoom,$
             image_label,slide_maskvalue,no_land,XYS,fname,path_in,path_out,$
             _file,comment,notes,pal,palval,paltable,RED,GREEN,BLUE,TOGGLE,coast_color,TABLE,_CHECK



; ===================>
; Initialize some variables
  txt = ''
  maskvalue = 0
  zoom_id = 0L
  _file = -1
  palval=0
  paltable=[1,2,3,4,5,6]
  _CHECK = 0
  TOGGLE=0
  coast_color = 'BYTE(ROUND((255B-temp_image(ok_coast))/255.)*255B )'
  IF N_ELEMENTS(XSIZE) NE 1 THEN XSIZE = 850
  IF N_ELEMENTS(ySIZE) NE 1 THEN ySIZE = 750

; ===================>
  SETCOLOR,0   ; program setcolor.pro makes background white and plotting color black (0).

; ====================>
; Read in custom palettes
  RED = BYTARR(256,6)
  GREEN = RED
  BLUE = GREEN

  GRAY0,R,G,B
  RED(*,0) =R(*)
  GREEN(*,0)=G(*)
  BLUE(*,0)=B(*)


  RED(*,1) = REVERSE(R(*))
  GREEN(*,1)=REVERSE(G(*))
  BLUE(*,1)=REVERSE(B(*))

  PAL_SW2,R,G,B
  RED(*,2) =R(*)
  GREEN(*,2)=G(*)
  BLUE(*,2)=B(*)

  blkgrwh1,R,G,B
  RED(*,3) =R(*)
  GREEN(*,3)=G(*)
  BLUE(*,3)=B(*)

  petes24,R,G,B
  RED(*,4) =R(*)
  GREEN(*,4)=G(*)
  BLUE(*,4)=B(*)

  pal36,R,G,B
  RED(*,5) =R(*)
  GREEN(*,5)=G(*)
  BLUE(*,5)=B(*)

  IF N_ELEMENTS(DBF) EQ 1 OR N_ELEMENTS(CHECK) EQ 1 THEN BEGIN
; ====================>
; Now sort navigation shifts (most recent will be used) and write a DBF file
; which may subsequently be used to look up the x and y shifts based on
; image name

;   ====================>
;   Check if  name of MASKFILE file was supplied by user
    IF N_ELEMENTS(MASKFILE) NE 1 THEN xysfile='MASKIMAGE.txt' ELSE xysfile=MASKFILE
;   Check if name of DIR_IN and DIR_OUT was supplied by user
    IF N_ELEMENTS(DIR_IN) NE 1 THEN path_in ='/oc5/czcs/gees_chl_nomask_gif/' ELSE path_in = DIR_IN
    IF N_ELEMENTS(DIR_OUT) NE 1 THEN path_out ='/oc5/czcs/maskit/' ELSE path_out = DIR_OUT
;   ====================>
;   Initialize variables
    iname = '' & maskvalue = 0  & chron = '' &  txt = ''

;   ====================>
;   Open navigation file (previously written).
    OPENR,XYS,XYSFILE,/GET_LUN

    datum = {INAME:' ',MASKVALUE:0,TIME:' ',FULLNAME:' ',txt:''}
    all = datum
    TXT =''
    WHILE NOT EOF(xys) DO BEGIN
      READF,xys,TXT
      STXT = STR_SEP(TXT,",")
      datum.iname = STXT(3)
      datum.maskvalue = STXT[1]
      datum.time=STXT(2)
      datum.fullname = STXT[0]
      datum.txt = STXT(4)
      all= [all,datum]
    ENDWHILE
    all = all(1:*)

;   ====================>
;   Now sort navigation shifts with the most recent (chron) shifts
;   ahead of the older shifts for the same image
    ok = WHERE(STRTRIM(all.iname,2) NE '        ')  ; find non blank records
    all = all(ok)  ; get rid of blank records
    S = REVERSE(sort(all.iname+all.time))  ; reverse sort (latest first)
    ALL = ALL(S)
    u = UNIQ(all.iname)  ; get indices of latest navigation shifts for each image in data array
    names = all(u).iname

    TABLE=ALL[0]

    FOR N = 0,N_ELEMENTS(NAMES)-1L DO BEGIN
      ANAME = NAMES(N)
      OK = WHERE(ALL.INAME EQ ANAME)
      TABLE = [TABLE,ALL(OK[0])]
    ENDFOR

    TABLE = TABLE(1:*)
    CLOSE,XYS
    FREE_LUN,XYS

    FN = PARSE_IT(XYSFILE)
    dbf_file = fn.dir+fn.name+'.dbf'

    IF KEYWORD_SET(CHECK) THEN _CHECK = 1 ;

    IF KEYWORD_SET(DBF) THEN BEGIN
      WRITE_DB,dbf_file,TABLE
      PRINT,N_ELEMENTS(TABLE),'  Mask Values Written to DBF File: ', DBF
      RETURN
    ENDIF
  ENDIF ;; If N_ELEMENTS(DBF) EQ 1 THEN BEGIN



; ====================>
; Read coast image file (GIF) file
  GETCOAST:
  coastfile=''
  IF KEYWORD_SET(OVERLAY)EQ 0 THEN BEGIN
    READ,COASTFILE,PROMPT="Enter Coast Image file"
  ENDIF ELSE BEGIN
    coastfile = OVERLAY
  ENDELSE

; ====================>
; See if the OVERLAY file exists  ... if not try again
  OPENR, temp,coastfile, /GET_LUN, ERROR=i
  IF  i NE 0 THEN BEGIN
   PRINT,' YOU MUST ENTER THE FULL (include directory) NAME OF AN EXISTING COASTLINE FILE '
     coastfile = ''
     READ,coastfile,PROMPT= ' Enter Full Name of Existing Coastline File Used to Navigate (shift) images '
  ENDIF ELSE BEGIN
    CLOSE,temp
    FREE_LUN,temp
  ENDELSE
  ERROR = 0

; ==============>
; Read the coastline file and get its dimensions
  READ_GIF,coastfile,coastline,R,G,B
  s = size(coastline)
  px = s[1] & py = s(2)
  ok_coast = WHERE(coastline eq 1) ; Assumes coastline pixels have value of 1
  temp_image = coastline
  IMAGE = COASTLINE

; ====================>
; Check if  name of NAVFILE  was supplied by user
  IF N_ELEMENTS(MASKFILE) NE 1 THEN xysfile='MASKIMAGE.txt' ELSE xysfile=MASKFILE
  PRINT,'MASKFILE: ', XYSFILE

; ====================>
; Check if user supplied dir_in and file type
  IF N_ELEMENTS(DIR_IN) LT 1 THEN DIR_IN = '/oc5/czcs/credible_lows_cloudring/'
  IF N_ELEMENTS(TYPE) LT 1 THEN TYPE = '_GEES_NEC_CHL_0_10000_cloudring.gif'
  _DIR_IN = DIR_IN
  FILES = filelist(_DIR_IN)
  OK = WHERE(STRPOS(FILES,TYPE) GE 0, COUNT)
  IF COUNT GE 1 THEN BEGIN
    FILES = FILES[OK]
  ENDIF ELSE BEGIN
   FILES = Dialog_PICKFILE(/READ,TITLE='SELECT AN IMAGE FILE TO MASK')
  ENDELSE


; ====================>
; Parse file names into an array structure (fname)
  fname = parse_it(files)
  path_in = dir_in
  path_out = dir_out

  txt = STRTRIM(STRING(N_ELEMENTS(fname)),2) + ' Files To Check Masking'

; ====================>
; make an array files_done
  files_done = BYTARR(N_ELEMENTS(FILES))

; ====================>
; See if the xysfile exists
  OPENR, xys, xysfile, /GET_LUN, ERROR=i
  IF  i NE 0 THEN BEGIN   ;(FILE DOES NOT EXIST YET, SO CREATE IT AND CLOSE IT)
    OPENW,XYS,XYSFILE,/GET_LUN,/APPEND
    CLOSE,xys
    free_lun,xys
  ENDIF

; ====================>
; IF NOT  KEYWORD CHECK THEN DO NOT SHOW FILES ALREADY NAVIGATED
  IF NOT KEYWORD_SET(CHECK) THEN BEGIN
;   Open,Read the image names from the xys file, and close file
    OPENR,XYS,XYSFILE,/GET_LUN
    TXT = ''
    WHILE NOT EOF(xys) DO BEGIN
      READF,xys,TXT, FORMAT='(A)'
      STXT = STR_SEP(TXT,',')
      NAME = STXT[0]
      OK = WHERE(fname.name EQ name,COUNT)
      IF count GE 1 THEN BEGIN
         files_done(ok) = 1b
      ENDIF
    ENDWHILE
    CLOSE,XYS
    FREE_LUN,XYS

;   =================>
;   ELIMINATE FILES ALREADY NAVIGATED
    OK = WHERE(FILES_DONE EQ 0,COUNT)
    IF COUNT GE 1 THEN BEGIN
     FILES=FILES[OK]
     FNAME = FNAME[OK]
    ENDIF
    txt = STRTRIM(STRING(N_ELEMENTS(fname)),2) + ' Remaining Files To Mask'
    TABLE = 0 ; NO DBF FILE USED
  ENDIF  ; IF NOT KEYWORD_SET(CHECK) THEN BEGIN

  PRINT,  txt

; ====================>
; Open the xys file for writing x,y offsets
; File pointer is at end of file (append keyword)
  OPENW,XYS,XYSFILE,/GET_LUN,/APPEND


  desc = REPLICATE({ flags:0, name:''}, 6)
  desc.flags  =      [1,1,0,0,2,2]
  desc.name   = ['MENU',$
                  'Coast Color',$
                    'Black',$
                    'White',$
                     'Multi',$
                    'HELP']

; ====================>
; Define Widgets
  base = WIDGET_BASE(ROW=2,TITLE="IDL Program:   MASKIMAGE,  NOAA, Narragansett Lab")

  zoom        = CW_ZOOMj(BASE, XSIZE=PX,YSIZE=PY,$
                X_ZSIZE=(256),Y_ZSIZE=(256),$
                X_SCROLL_SIZE=XSIZE,Y_SCROLL_SIZE=YSIZE,$
                SAMPLE=1,UVALUE='ZOOM',MIN=2,MAX=16,RETAIN=2)

  right  = WIDGET_BASE(base, ROW=1, /BASE_ALIGN_CENTER )

  image_label= WIDGET_LABEL(RIGHT,VALUE=txt,UVALUE='IMAGE_LABEL',SCR_XSIZE=350*(xsize/700.))

  slide_maskvalue=WIDGET_SLIDER(right,UVALUE='SLIDEMASK',TITLE='MASK VALUE',$
             VALUE=0,MINIMUM=0,MAXIMUM=100,SCROLL=1)

  pal=WIDGET_BUTTON(right,VALUE='Pal',UVALUE='PAL')

  coast=WIDGET_BUTTON(right,VALUE='Coast',UVALUE='COAST')

  next=WIDGET_BUTTON(right,VALUE='Next',UVALUE='NEXT_IMAGE')

  write_mask=WIDGET_BUTTON(right,VALUE='Write',UVALUE='WRITE_MASK')

  comment= CW_FIELD(right,VALUE='',UVALUE='COMMENT',TITLE='COMMENT',/column,/ALL_EVENTS)

  no_land=WIDGET_BUTTON(right,VALUE='No Land',UVALUE='NO_LAND')

  menu       = CW_PDMENU(right,desc,/return_name, UVALUE='MENU')

  exit=WIDGET_BUTTON(right,VALUE='EXIT',UVALUE='EXIT')


; ====================>
; Realize widgets, load default values, and register widgets with xmanager
  WIDGET_CONTROL,base,   /REALIZE
  WIDGET_CONTROL,zoom,   SET_VALUE=temp_image  ;(load coastline image)
  WIDGET_CONTROL,slide_maskvalue, SET_VALUE=0
  XMANAGER, 'MASKIMAGE',  base

  PRINT,'Mask Values Were Written to File =', XYSFILE


END  ; <==================== END OF PROGRAM  ====================>
