; $ID:	STATS_PERIOD.PRO,	2020-06-30-17,	USER-KJWH	$
;################################################################################
	FUNCTION STATS_PERIOD, 	JD,DATA,PERIOD_CODE=PERIOD_CODE,DATE=DATE, $
	 												JD_START=JD_START, JD_END=JD_END,$
													WIDTH=WIDTH,$
													NOLEAP=NOLEAP, $
													STD=STD, SAME_JD=SAME_JD, INIT=INIT,STAT=STAT,INFO=INFO
;+
; NAME:
;		STATS_PERIOD
;
; PURPOSE:
;		COMPUTE STATISTICS FOR DATA BASED ON GROUPING OF JULIAN DAY INTO STANDARD PERIODS
;   (E.G. Y M D H T S MONTH DOY 2MONTH YY MM DD HH TT SS YEAR ANNUAL DIAG ALL)
;
;	KEYWORDS:
;		PERIOD_CODE 	STANDARD PERIOD CODES FOR GROUPING JD INTO PERIODS
;		STD:					COMPUTE THE STD STATISTICS  (TAKES LONGER)
;		DATE:					SEE PERIOD_SETS.PRO
;		WIDTH:				SEE PERIOD_SETS.PRO
;		JD_START:			SEE PERIOD_SETS.PRO
;		JD_END:				SEE PERIOD_SETS.PRO
;		INFO :        ADD INFO TO AN OUTPUT STRUCTURE
;   STAT :        'AMEAN' OR 'GMEAN' [STORED IN INFO]

;		NOLEAP: IF PERIOD IS DOY AND KEYWORD NOLEAP IS SET THEN DOY 366 IS CHANGED TO 365.

;
; MODIFICATION HISTORY:
;		J.O'REILLY, NOAA JAN 2006
;   SEP 9,2014,JOR, NOW USING STATS_NAN
;   OCT 7,2014,JOR ADDED KEY STAT
;#######################################################################################


;**************************
ROUTINE_NAME='STATS_PERIOD'
;**************************
;===> CONSTANTS & DEFAULTS
DELIMS = ",;"
IF NONE(WIDTH) THEN _WIDTH = 1 ELSE _WIDTH = FIX(WIDTH)
IF NONE(STAT) THEN STAT = ''
COMMON STATS_PERIOD_JD, STATS_PERIOD_PERIOD_CODE, STATS_PERIOD_JD, STATS_PERIOD_MATRIX, STATS_PERIOD_STRUCT, PERIOD_SUBS_MATRIX,PERIOD_SUBS

IF NONE(STATS_PERIOD_PERIOD_CODE) THEN STATS_PERIOD_PERIOD_CODE = PERIOD_CODE

;	===> CHECK IF JD SAME AS LAST TIME, IF SO THEN CAN SAVE AN APPRECIABLE AMOUNT OF CPU TIME
SAME_JD = 0
N_JD = N_ELEMENTS(JD)


;	===> FOR THE WHERE TO WORK ARRAYS MUST BE SAME LENGTH
	IF N_JD EQ N_ELEMENTS(STATS_PERIOD_JD) AND STATS_PERIOD_PERIOD_CODE EQ PERIOD_CODE THEN BEGIN
		OK = WHERE(JD EQ STATS_PERIOD_JD,COUNT)
		IF COUNT EQ N_JD THEN SAME_JD = 1
	ENDIF

;	===> INITIALIZE COMMON IF INIT KEYWORD IS PROVIDED
	IF KEYWORD_SET(INIT) THEN SAME_JD = 0


;	***************************************************************************************
;	***  IF THE JDS ARE NOT ARRANGED EXACTLY AS BEFORE THEN DEFINE OR REDEFINE THE SETS ***
;	***************************************************************************************
	IF SAME_JD EQ 0 THEN BEGIN
;		===> GROUP JD INTO PERIODS
		SETS				=PERIOD_SETS(JD,PERIOD_CODE=PERIOD_CODE,WIDTH=WIDTH)
		N_SETS= N_ELEMENTS(SETS)
		;; JOR STRUCT_STATS=STATS([MISSINGS(0.0)] ,QUIET=QUIET)
    STRUCT_STATS=STATS_NAN([MISSINGS(0.0)])
	  STRUCT_STATS=STRUCT_COPY(STRUCT_STATS,TAGNAMES=['N','N_GOOD','MIN','SUB_MIN','MAX','SUB_MAX','MED','MEAN','STD'])


;		===> ADD JD_MIN,JD_MAX
		STRUCT_STATS = STRUCT_MERGE(STRUCT_STATS,CREATE_STRUCT('JD_MIN',MISSINGS(0D),'JD_MAX',MISSINGS(0D)))

;		===> CREATE STRUCTURE TO HOLD THE PERIOD STATISTICS, A RECORD FOR EACH PERIOD SET
	 	STATS_PERIOD_STRUCT = REPLICATE(CREATE_STRUCT('PERIOD','','JD',0D,'SUBS','',STRUCT_STATS),N_SETS)
		STATS_PERIOD_STRUCT.PERIOD 	= SETS.PERIOD
		STATS_PERIOD_STRUCT.JD 			= SETS.JD
		STATS_PERIOD_STRUCT.SUBS 		= SETS.SUBS
    ;=>>>FILL N_GOOD
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  
		STATS_PERIOD_PERIOD_CODE= PERIOD_CODE

;		===> DIMENSION STATS_PERIOD_MATRIX TO MAXIMUM OBS PER PERIOD (COLS) BY NUMBER OF PERIODS (ROWS), INITIALIZING TO !VALUES.F_NAN
		MAX_N = MAX(SETS.N)
		STATS_PERIOD_MATRIX= REPLICATE(!VALUES.D_NAN,MAX_N,N_SETS)

		PERIOD_SUBS_MATRIX= WHERE_SETS_SUBS_MATRIX(SETS)
		PERIOD_SUBS 			= WHERE(PERIOD_SUBS_MATRIX NE MISSINGS(PERIOD_SUBS_MATRIX))

;		===> STORE JD INTO COMMON MEMORY JD
		STATS_PERIOD_JD = JD
	ENDIF



;	===> ASSIGN DATA TO STATS_PERIOD_MATRIX AFTER CHANGING ANY MISSING TO NAN
	STATS_PERIOD_MATRIX(PERIOD_SUBS) = MISSING_2NAN(DATA(PERIOD_SUBS_MATRIX(PERIOD_SUBS)))

;	===> COMPUTE MIN, MAX, MEDIAN FOR EACH ROW OF THE STATS_PERIOD_MATRIX
	STATS_PERIOD_STRUCT.MIN	=	MIN(		STATS_PERIOD_MATRIX,SUBS_MIN, /NAN		,DIMENSION=1)
	STATS_PERIOD_STRUCT.MAX	=	MAX(		STATS_PERIOD_MATRIX,SUBS_MAX, /NAN		,DIMENSION=1)
	STATS_PERIOD_STRUCT.MED	=	MEDIAN(	STATS_PERIOD_MATRIX,					/EVEN		,DIMENSION=1)
  ;;STATS_PERIOD_STRUCT.N_GOOD   = TOTAL( STATS_PERIOD_MATRIX,           /NAN    ,DIMENSION=1)

;	===> COMPUTE THE JD_MIN, JD_MAX
 	STATS_PERIOD_STRUCT.SUB_MIN = PERIOD_SUBS_MATRIX(SUBS_MIN)
 	STATS_PERIOD_STRUCT.SUB_MAX = PERIOD_SUBS_MATRIX(SUBS_MAX)
 	STATS_PERIOD_STRUCT.JD_MIN 	= JD(PERIOD_SUBS_MATRIX(SUBS_MIN))
 	STATS_PERIOD_STRUCT.JD_MAX 	= JD(PERIOD_SUBS_MATRIX(SUBS_MAX))
;	===> COMPUTE THE TOTAL FOR EACH ROW
	_SUM	= TOTAL(STATS_PERIOD_MATRIX,/NAN,1)

;	===> COMPUTE THE NUMBER OF OBSERVATIONS FOR EACH ROW [EXCLUDING MISSING] 
	STATS_PERIOD_STRUCT.N  = TOTAL( FINITE(STATS_PERIOD_MATRIX),1)


;	===> COMPUTE THE MEAN FOR EACH ROW
	STATS_PERIOD_STRUCT.MEAN = _SUM /STATS_PERIOD_STRUCT.N ;

;===> ;STATS_PERIOD_STRUCT.N_GOOD

;  ROWS = N_ELEMENTS(STATS_PERIOD_MATRIX(0,*))
;  ;FFFFFFFFFFFFFFFFFFFFFFFFFFF
;  FOR NTH=0L,ROWS-1L DO BEGIN
;    OK=WHERE(FINITE(STATS_PERIOD_MATRIX(*,NTH)),COUNT)
;      STATS_PERIOD_STRUCT[NTH].N_GOOD = COUNT
;  ENDFOR;FOR NTH=0L,ROWS-1L DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


;	===> ? STD THEN ADD STD (WHICH DOUBLES THE RUN TIME)
	IF KEYWORD_SET(STD) THEN BEGIN
		ROWS = N_ELEMENTS(STATS_PERIOD_MATRIX(0,*))
;		LLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR NTH=0L,ROWS-1L DO BEGIN
			OK=WHERE(FINITE(STATS_PERIOD_MATRIX(*,NTH)),COUNT)
			IF COUNT GE 2 THEN BEGIN
 				STATS_PERIOD_STRUCT[NTH].STD = STDEV(STATS_PERIOD_MATRIX(OK,NTH))
			ENDIF
		ENDFOR
	ENDIF
; ===> CHANGE ANY NAN'S TO INFINITY
STATS_PERIOD_STRUCT=NAN_2INFINITY(STATS_PERIOD_STRUCT)


IF NOT KEY(INFO) THEN RETURN,STATS_PERIOD_STRUCT


;===> ADD DATE, CALLER,PERIOD_OF_MIN,PERIOD_OF_MAX,N_SAMPLES
S = STATS_NAN(STATS_PERIOD_STRUCT.MEAN)

PERIOD_OF_MIN  = STATS_PERIOD_STRUCT(S.SUB_MIN).PERIOD
PERIOD_OF_MAX  = STATS_PERIOD_STRUCT(S.SUB_MAX).PERIOD

DATE_RUN=DATE_NOW()
CALLING_PROGRAM=STRUPCASE(CALLER(2))
PERIOD_N= N_ELEMENTS(STATS_PERIOD_STRUCT)
OK = WHERE(STATS_PERIOD_STRUCT.N GT 0,N_SAMPLES)
;N_SAMPLES=LONG(TOTAL(STATS_PERIOD_STRUCT.N,/NAN))
SAMPLING_FREQ = 100.*N_SAMPLES/PERIOD_N
INFO = CREATE_STRUCT('DATE_RUN',DATE_RUN,'CALLING_PROGRAM',CALLING_PROGRAM,'PERIOD_N',PERIOD_N,'N_SAMPLES',N_SAMPLES,'SAMPLING_FREQ',SAMPLING_FREQ,'STAT',STAT,'PERIOD_OF_MIN',PERIOD_OF_MIN,'PERIOD_OF_MAX',PERIOD_OF_MAX)
S = CREATE_STRUCT('INFO',INFO,'PER',STATS_PERIOD_STRUCT)
RETURN,S


END; #####################  END OF ROUTINE ################################
