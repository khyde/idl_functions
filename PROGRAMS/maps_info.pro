; $ID:	MAPS_INFO.PRO,	2020-07-08-15,	USER-KJWH	$
;########################################################################################
	FUNCTION MAPS_INFO, MAPP ,PX=PX, PY=PY, ERROR=ERROR, ERR_MSG=ERR_MSG, VERBOSE=VERBOSE

;+
; NAME:
;       MAPS_INFO
;
; PURPOSE:
;       THIS FUNCTION RETURNS INFORMATION (RESOLUTION, SCALE, ETC)  
;       ABOUT THE CURRENT MAP PROJECTION
;
; CATEGORY:
;       MAPS.
;
; CALLING SEQUENCE:
;       RESULT = MAPS_INFO()
;
; INPUTS:
;
;	OPTIONAL INPUTS:
;				MAP: A STANDARD MAP PROJECTION IDL PROGRAM (WHOSE NAME IS ENTERED INTO MAPS_SIZE.PRO
; KEYWORD PARAMETERS:
;       NONE:
;
;	OUTPUTS:
;			A STRUCTURE HOLDING THE MAP INFORMATION AND CHARACTERISTICS
;
;
; EXAMPLES: 
; M=MAPS_INFO('GEQ') & PRINT,' H_SCALE_MID= ',M.H_SCALE_MID,' V_SCALE_MID= ',M.V_SCALE_MID
; M=MAPS_INFO('GEQ',PX = 2048,PY = 1024) & PRINT,' H_SCALE_MID= ',M.H_SCALE_MID,' V_SCALE_MID= ',M.V_SCALE_MID
; M=MAPS_INFO('GEQ',PX=10000,PY=5000) & PRINT,' H_SCALE_MID= ',M.H_SCALE_MID,' V_SCALE_MID= ',M.V_SCALE_MID
; ST,MAPS_INFO('GEQ',PX=10000,PY=5000 ); YIELDS 4.007 KM/PIXEL
; ST,MAPS_INFO('SMI')
;
;
; PROCEDURE:
;		IF NO MAP NAME IS PROVIDED THEN THE ROUTINE ASSUMES THAT A CALL TO MAP_SET HAS ALREADY BEEN MADE AND
;	  THE ROUTINE DERIVES THE MAP INFORMATION FROM THE CURRENT GRAPHICS DEVICE AND !MAP SYSTEM VARIABLE.
;
; RESTRICTIONS:

;
; MODIFICATION HISTORY:
;			WRITTEN NOV 3, 2005 BY J.O'REILLY
;			FEB 10,2012,JOR, STREAMLINED STRUCT, USING CREATE_STRUCT, ADDED TILDA.
;			AUG 15,2013,JOR,  ADDED ;### APPROXIMATION WORKAROUND FOR TAG H_SCALE_MID FOR GEQ & SMI MAPS HORIZONTAL SCALES  #####
;                       NOTE THAT THE H_SCALE_MID [FOR GEQ & SMI MAPS] SHOULD BE 1/2 THAT FOR VERTICAL_SCALE_MID
;     AUG 21,2013 KJWH, ADDED ERR_MSG AND QUIET KEYWORDS:
;                       ERR_MSG - RETURN THE ERROR MESSAGE
;                       VERBOSE - DO NOT PRINT MAP INFO ATTRIBUTES 
;    NOV 25,2013,JOR ADDED LIMIT,PROJ, AND ISOTROPIC  TO STRUCTURE 
;    NOV 27,2013,JOR NOW RETURNS THE ACTUAL ERROR TEXT   
;    MAR 30,2014,JOR ADDED CHECKS FOR NANS:
;    IF TOTAL(FINITE(LOWER_RIGHT)) EQ 0  THEN LOWER_RIGHT = [!MAP.LL_BOX(3),!MAP.LL_BOX[0]]
;    IF MAP EQ 'GEQ' OR MAP EQ 'SMI' OR TOTAL(!MAP.LL_BOX) EQ 0 THEN BEGIN
;    DEC 10,2014,JOR RENAMED TO MAPS_INFO,REMOVED KEY OLD,UPDATED WITH NEW FUNCTIONS
;                    CHANGED QUIET TO VERBOSE  
;    DEC 11,2014,JOR : MAPS_SET,MAP,PX=PX,PY=PY

              
;########################################################################################
;-
; ************************
  ROUTINE_NAME='MAPS_INFO'
; ************************

	ERROR = 0
	ERR_MSG = ''
	GWIN = ''
	MP = ''

;	===> SEE IF MAP WAS PROVIDED
	IF NONE(MAPP) THEN MESSAGE,'ERROR: MAP IS REQUIRED' 
  
  M=MAPS_SIZE(MAPP,PX=MPX, PY=MPY)
  IF KEY(VERBOSE) THEN ST,M
  IF M.MAP NE MISSINGS(M.MAP) AND MPX NE 0 AND MPY NE 0 THEN BEGIN
	  MP = M.MAP
 	  IF NONE(PX) THEN _PX = M.PX  ELSE _PX = PX
    IF NONE(PY) THEN _PY = M.PY  ELSE _PY = PY
    MAPS_SET,MP,PX=_PX,PY=_PY ; ===> SET UP MAP IN Z-BUFFER
	  GWIN = 'Z'
	  MS = !MAP
  ENDIF ; IF M.MAP NE MISSINGS(M.MAP)

;	===> CHECK THAT !MAP SYSTEM VARIABLE IS IN EFFECT
  IF !X.TYPE NE 3 THEN BEGIN		
  	ERROR = 'ERROR: MAP PROJECTION IS NOT SET'
  	ERR_MSG = ERROR
  	PRINT,ERROR
  	RETURN,ERROR
  ENDIF;IF !X.TYPE NE 3 THEN BEGIN
  
  MAP_PROJ_INFO, /CURRENT, NAME=PNAME, LL_LIMITS=LL_LIMITS, SCALE=METERS
  MAP_PROJ_INFO, /CURRENT, NAME=PNAME, LL_LIMITS=LL_LIMITS, SCALE=METERS; YES 2ND. CALL IS NEEDED

;	===> GET PIXEL DIMENSIONS OF CURRENT GRAPHICS DEVICE
	PX=!D.X_SIZE
 	PY=!D.Y_SIZE
 	PROJ =STRUPCASE(PNAME)  ;;;& PROJ = REPLACE(PROJ,'LAMBERTCONIC','CONIC')

;	===> MAKE A STRUCTURE TO HOLD MAP INFO  ***
 	STRUCT = CREATE_STRUCT('INFO','','_','','__','')
 	IF N_ELEMENTS(MP) EQ 1 THEN STRUCT= CREATE_STRUCT(M,STRUCT)
	STRUCT = CREATE_STRUCT(STRUCT,'PROJ',PROJ)
  STRUCT = CREATE_STRUCT(STRUCT,'LIMIT',LL_LIMITS)
  IF IDLTYPE(MS) EQ 'STRUCT' THEN STRUCT = CREATE_STRUCT(STRUCT,MS)
	IF KEY(VERBOSE) THEN PRINT,'MAP:  ',MP
	

;	****************************************
;	*** CORNERS, MIDPOINTS, ETC.         ***
;	****************************************
;	===> LOWER LEFT CORNER
	LOWER_LEFT 	= CONVERT_COORD(0.0,					0.0,/DEVICE,/TO_DATA,/DOUBLE) & LOWER_LEFT 	= LOWER_LEFT(0:1) 	& IF KEY(VERBOSE) THEN PRINT,'LOWER LEFT: ',LOWER_LEFT
	IF TOTAL(FINITE(LOWER_LEFT)) EQ 0  THEN LOWER_LEFT = !MAP.LL_BOX([1,0])
	STRUCT = CREATE_STRUCT(STRUCT,'LOWER LEFT',LOWER_LEFT)

	LOWER_MID	 	= CONVERT_COORD(PX/2.0,				0.0,/DEVICE,/TO_DATA,/DOUBLE) & LOWER_MID 	= LOWER_MID(0:1) 		& IF KEY(VERBOSE) THEN PRINT,'LOWER MID:  ',LOWER_MID
  IF TOTAL(FINITE(LOWER_MID)) EQ 0  THEN LOWER_MID = [MEAN(!MAP.LL_BOX([1,3])),!MAP.LL_BOX[0]]
  STRUCT = CREATE_STRUCT(STRUCT,'LOWER MID',LOWER_MID)
   
	LOWER_RIGHT = CONVERT_COORD(PX,						0.0,/DEVICE,/TO_DATA,/DOUBLE) & LOWER_RIGHT = LOWER_RIGHT(0:1) 	& IF KEY(VERBOSE) THEN PRINT,'LOWER RIGHT:',LOWER_RIGHT
  IF TOTAL(FINITE(LOWER_RIGHT)) EQ 0  THEN LOWER_RIGHT = [!MAP.LL_BOX(3),!MAP.LL_BOX[0]]
  STRUCT = CREATE_STRUCT(STRUCT,'LOWER RIGHT',LOWER_RIGHT)

	LEFT_MID 		= CONVERT_COORD(0.0,		PY/2.0,/DEVICE,/TO_DATA,/DOUBLE) & LEFT_MID 		= LEFT_MID(0:1) 		& IF KEY(VERBOSE) THEN PRINT,'LEFT_MID:   ',LEFT_MID
  IF TOTAL(FINITE(LEFT_MID)) EQ 0  THEN LEFT_MID = [!MAP.LL_BOX[1],MEAN(!MAP.LL_BOX([0,2]))]
  STRUCT = CREATE_STRUCT(STRUCT,'LEFT MID',LEFT_MID)

	MID_MID	 		= CONVERT_COORD(PX/2.0,	PY/2.0,/DEVICE,/TO_DATA,/DOUBLE) & MID_MID 		= MID_MID(0:1) 			& IF KEY(VERBOSE) THEN PRINT,'MID MID:    ',MID_MID
  IF TOTAL(FINITE(MID_MID)) EQ 0  THEN MID_MID = [MEAN(!MAP.LL_BOX([1,3])),MEAN(!MAP.LL_BOX([0,2]))]
  STRUCT = CREATE_STRUCT(STRUCT,'MID MID',MID_MID)

	RIGHT_MID 	= CONVERT_COORD(PX,			PY/2.0,/DEVICE,/TO_DATA,/DOUBLE) & RIGHT_MID 	= RIGHT_MID(0:1) 		& IF KEY(VERBOSE) THEN PRINT,'RIGHT MID:  ',RIGHT_MID
  IF TOTAL(FINITE(RIGHT_MID)) EQ 0  THEN  RIGHT_MID = [!MAP.LL_BOX(3),MEAN(!MAP.LL_BOX([0,2]))]
  STRUCT = CREATE_STRUCT(STRUCT,'RIGHT MID',RIGHT_MID)

	UPPER_LEFT 	= CONVERT_COORD(0.0,				PY,/DEVICE,/TO_DATA,/DOUBLE) 		& UPPER_LEFT 	= UPPER_LEFT(0:1) 	& IF KEY(VERBOSE) THEN PRINT,'UPPER LEFT: ',UPPER_LEFT
  IF TOTAL(FINITE(UPPER_LEFT)) EQ 0  THEN  UPPER_LEFT = [!MAP.LL_BOX[1],!MAP.LL_BOX(2)]
  STRUCT = CREATE_STRUCT(STRUCT,'UPPER LEFT',UPPER_LEFT)

	UPPER_MID	 	= CONVERT_COORD(PX/2.0,	PY,/DEVICE,/TO_DATA,/DOUBLE) 		& UPPER_MID 	= UPPER_MID(0:1) 		& IF KEY(VERBOSE) THEN PRINT,'UPPER MID:  ',UPPER_MID
  IF TOTAL(FINITE(UPPER_MID)) EQ 0  THEN  UPPER_MID = [MEAN(!MAP.LL_BOX([1,3])),!MAP.LL_BOX(2)]
  STRUCT = CREATE_STRUCT(STRUCT,'UPPER MID',UPPER_MID)

	UPPER_RIGHT = CONVERT_COORD(PX,			PY,/DEVICE,/TO_DATA,/DOUBLE) 		& UPPER_RIGHT = UPPER_RIGHT(0:1) 	& IF KEY(VERBOSE) THEN PRINT,'UPPER RIGHT:',UPPER_RIGHT
  IF TOTAL(FINITE(UPPER_RIGHT)) EQ 0  THEN  UPPER_RIGHT = [!MAP.LL_BOX(3),!MAP.LL_BOX(2)]
  STRUCT = CREATE_STRUCT(STRUCT,'UPPER RIGHT',UPPER_RIGHT)


	VERTICAL_SCALE_LEFT	 	=(1E-3/PY)*MAP_2POINTS(LOWER_LEFT[0],	LOWER_LEFT[1],	UPPER_LEFT[0],	UPPER_LEFT[1],/METERS)	& IF KEY(VERBOSE) THEN PRINT,'VERTICAL SCALE LEFT: ',	STRTRIM(VERTICAL_SCALE_LEFT,2)+' KM/PIXEL'
  STRUCT = CREATE_STRUCT(STRUCT,'V_SCALE_LEFT',VERTICAL_SCALE_LEFT)

	VERTICAL_SCALE_MID 		=(1E-3/PY)*MAP_2POINTS(LOWER_MID[0],		LOWER_MID[1],		UPPER_MID[0],		UPPER_MID[1],/METERS)		& IF KEY(VERBOSE) THEN PRINT,'VERTICAL SCALE MID: ',	STRTRIM(VERTICAL_SCALE_MID,2)+' KM/PIXEL'
  STRUCT = CREATE_STRUCT(STRUCT,'V SCALE_MID',VERTICAL_SCALE_MID)

	VERTICAL_SCALE_RIGHT 	=(1E-3/PY)*MAP_2POINTS(LOWER_RIGHT[0],	LOWER_RIGHT[1],	UPPER_RIGHT[0],	UPPER_RIGHT[1],/METERS)	& IF KEY(VERBOSE) THEN PRINT,'VERTICAL SCALE RIGHT: ',STRTRIM(VERTICAL_SCALE_RIGHT,2)+' KM/PIXEL'
  STRUCT = CREATE_STRUCT(STRUCT,'V_SCALE_RIGHT',VERTICAL_SCALE_RIGHT)
	HORIZ_SCALE_LOWER	 	=(1E-3/PX)*MAP_2POINTS(LOWER_LEFT[0],	LOWER_LEFT[1],	LOWER_RIGHT[0],	LOWER_RIGHT[1],/METERS)	& IF KEY(VERBOSE) THEN PRINT,'HORIZ SCALE LOWER: ',	STRTRIM(HORIZ_SCALE_LOWER,2)+' KM/PIXEL'
  STRUCT = CREATE_STRUCT(STRUCT,'H_SCALE_LOWER',HORIZ_SCALE_LOWER)

	HORIZ_SCALE_MID 		=(1E-3/PX)*MAP_2POINTS(LEFT_MID[0],	LEFT_MID[1],		RIGHT_MID[0],		RIGHT_MID[1],/METERS)		& IF KEY(VERBOSE) THEN PRINT,'HORIZ SCALE MID: ',	STRTRIM(HORIZ_SCALE_MID,2)+' KM/PIXEL'
  STRUCT = CREATE_STRUCT(STRUCT,'H_SCALE_MID',HORIZ_SCALE_MID)
  
	HORIZ_SCALE_UPPER 	=(1E-3/PX)*MAP_2POINTS(UPPER_LEFT[0],	UPPER_LEFT[1],	UPPER_RIGHT[0],	UPPER_RIGHT[1],/METERS)	& IF KEY(VERBOSE) THEN PRINT,'HORIZ SCALE UPPER: ',STRTRIM(HORIZ_SCALE_UPPER,2)+' KM/PIXEL'
  STRUCT = CREATE_STRUCT(STRUCT,'H SCALE UPPER',HORIZ_SCALE_UPPER)

	HORIZONTAL_DEGREES_MID = RIGHT_MID[0]-LEFT_MID[0]	& IF KEY(VERBOSE) THEN PRINT,'HORIZONTAL DEGREES MIDDLE: '+STRTRIM(HORIZONTAL_DEGREES_MID,2)+' DEGREES'
  STRUCT = CREATE_STRUCT(STRUCT,'H DEG MID',HORIZONTAL_DEGREES_MID)

	VERTICAL_DEGREES_MID = UPPER_MID[1]-LOWER_MID[1]	& IF KEY(VERBOSE) THEN PRINT,'VERTICAL DEGREES MIDDLE: '+STRTRIM(VERTICAL_DEGREES_MID,2)+' DEGREES'
  STRUCT = CREATE_STRUCT(STRUCT,'V DEG MID',VERTICAL_DEGREES_MID)

	HORIZONTAL_DEGREES_PER_PIXEL_MID = (RIGHT_MID[0]-LEFT_MID[0])/PX	& IF KEY(VERBOSE) THEN PRINT,'HORIZONTAL DEGREES MIDDLE: '+STRTRIM(HORIZONTAL_DEGREES_PER_PIXEL_MID,2)+' DEGREES/PIXEL'
  STRUCT = CREATE_STRUCT(STRUCT,'H_DEG_PIXEL MID',HORIZONTAL_DEGREES_PER_PIXEL_MID)

	VERTICAL_DEGREES_PER_PIXEL_MID = (UPPER_MID[1]-LOWER_MID[1])/PY	& IF KEY(VERBOSE) THEN PRINT,'VERTICAL DEGREES PER PIXEL MIDDLE: '+STRTRIM(VERTICAL_DEGREES_PER_PIXEL_MID,2)+' DEGREES/PIXEL'
  STRUCT = CREATE_STRUCT(STRUCT,'V_DEG_PIXEL MID',VERTICAL_DEGREES_PER_PIXEL_MID)

;	*******************************************
;	*** IF  C O N I C   P R O J E C I O N   ***
;	*******************************************
	IF !MAP.PROJECTION EQ 3 THEN BEGIN
		ONE_SIXTH =  VERTICAL_DEGREES_MID/6.0
	  LOWER_PARALLEL = LOWER_MID[1]+ONE_SIXTH
	  UPPER_PARALLEL = UPPER_MID[1]-ONE_SIXTH
	  TXT =  TILDA() +'LOWER PARALLEL: ' +STRTRIM(LOWER_PARALLEL,2)
		IF KEY(VERBOSE) THEN PRINT, TXT
     STRUCT = CREATE_STRUCT(STRUCT,'LOWER PARALLEL',LOWER_PARALLEL)
     TXT = TILDA() +'UPPER PARALLEL: ' +STRTRIM(UPPER_PARALLEL,2)
		IF KEY(VERBOSE) THEN PRINT,TXT
     STRUCT = CREATE_STRUCT(STRUCT,'UPPER PARALLEL',UPPER_PARALLEL)
	ENDIF;IF !MAP.PROJECTION EQ 3 THEN BEGIN


;	===> IF THIS ROUTINE CALLED ZWIN THEN CLOSE ZWIN
	IF GWIN EQ 'Z' THEN ZWIN


  IF N_ELEMENTS(MP) EQ 1 THEN BEGIN  
    IF MP EQ 'GEQ' OR MP EQ 'SMI' OR TOTAL(!MAP.LL_BOX) EQ 0 THEN BEGIN
    ;### APPROXIMATION WORKAROUND FOR GEQ & SMI MAPS HORIZONTAL SCALES  #####
     R_EARTH = 6378206.4D0 ;EARTH EQUATORIAL RADIUS, METERS, CLARKE 1866 ELLIPSOID [ FROM MAP_2POINTS]
     STRUCT.H_SCALE_MID = (1.0E-3/PX)*R_EARTH*!PI
    ENDIF;IF MAP EQ 'GEQ' OR MAP EQ 'SMI' THEN BEGIN
  ENDIF;
  RETURN, STRUCT


END; #####################  END OF ROUTINE ################################
