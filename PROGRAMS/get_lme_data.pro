; $ID:	GET_LME_DATA.PRO,	2020-06-30-17,	USER-KJWH	$
;#############################################################################################################
	FUNCTION GET_LME_DATA,ARRAY,LME_CODE,LME_N_PIXELS=LME_N_PIXELS,SUBS=SUBS,ERROR=ERROR
	
;+
; NAME:
;		GET_LME_DATA
;
; PURPOSE: THIS FUNCTION EXTRACTS LME DATA FROM THE INPUT ARRAY USING LME_CODES THAT ARE
; FOUND IN THE LME-67-SMI-MASTER.PNG [SUBAREA CODES MASK]
;
; CATEGORY:
;		MAP
;		 
;
; CALLING SEQUENCE:RESULT = GET_LME_DATA(ARRAY,LME_CODE)
;
; INPUTS:
;   ARRAY: SMI OR GEQ DATA FOR MAP [4320PX X 2160PY]
;		LME_CODE:	MUST BE SCALAR [1 TO 67]
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;   SUBS: SUBSCRIPTS FOR THE LME SUBAREA
;   
; OUTPUTS:
;         AN EXTRACT OF THE INPUT ARRAY FOR THE SUBAREA SPECIFIED BY THE LME_CODE
;		
;; EXAMPLES:
;  DATA = GET_LME_DATA(ARRAY,7)
;	NOTES:

; MODIFICATION HISTORY:
;			WRITTEN JUN 5,2013 J.O'REILLY
;     JUN 6,2013,JOR ADDED PWP TO LMES_IMAGE: LME_IMAGE_FILE =GET_PATH() +IDL\IMAGES\LME-AREAS_PWP-SMI.PNG'
;     NEW MADE USING STEP DO_LME64_WGS [PLOT_SHAPE_DEMO] AND STEP DO_ADD_PWP_2LMES_IMAGE [UNEP_MAIN]
;     JUN 7,2013,JOR, ADDED KEYWORD LME_N_PIXELS
;     JUN 9,2013,JOR ADDED KEYWORD SUBS
;     AUG 16,2013,JOR NOW USING : IDL/IMAGES/LME-67-SMI-MASTER.PNG
;     AUG 19,2013,JOR ADDED KEYWORD MASK
;     OCT 14,2013, REMOVED KEYWORD MASK

;#####################################################################################################;
;-
;*****************************
ROUTINE_NAME  = 'GET_LME_DATA'
;*****************************

ERROR = ''

IF N_ELEMENTS(ARRAY) EQ 0 THEN MESSAGE,'A DATA ARRAY IS REQUIRED'
IF N_ELEMENTS(LME_CODE) NE  1 THEN MESSAGE,'LME_CODE IS REQUIRED [MUST BE SCALAR]'
COMMON _GET_LME_DATA,  LMES_IMAGE,SZ_LMES,LME_MAPS,LME_CODES
;****************************************
IF N_ELEMENTS(LMES_IMAGE) EQ 0 THEN BEGIN
;****************************************
;===> GET THE STANDARD LME IMAGE FOR 67 LMES [ LME-67-SMI-MASTER.PNG]

LMES_IMAGE = READ_LME_MAP()
  SZ_LMES = SIZEXYZ(LMES_IMAGE) & PX = SZ_LMES.PX & PY = SZ_LMES.PY
ENDIF;IF N_ELEMENTS(LMES_IMAGE) EQ 0 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||  

;**************************************
IF N_ELEMENTS(LME_MAPS) EQ 0 THEN BEGIN
;**************************************
;===> GET THE LME MAPS AND LME CODES
     DB =  READ_LME_DB() & LME_MAPS=DB.MAP   & LME_CODES = DB.CODE 
ENDIF;IF N_ELEMENTS DB) EQ 0 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||


  SZ=SIZEXYZ(ARRAY)
  IF SZ.PX NE SZ_LMES.PX OR SZ.PY NE SZ_LMES.PY THEN RETURN,'ERROR: DIMENSIONS OF ARRAY DIFFERENT FROM LMES_IMAGE '
  
  ;### GET THE DATA IN THE LME AREA  ###
  IF NOT KEYWORD_SET(SUBS) THEN BEGIN
  ;### GET THE DATA IN THE LME AREA  ###
  
  OK_LME = WHERE(LMES_IMAGE EQ LME_CODE[0],LME_N_PIXELS)
  ;****************************
  IF LME_N_PIXELS EQ 0 THEN    RETURN,'ERROR: NO LME CODE FOUND' 
  RETURN,ARRAY(OK_LME)
  
  ENDIF ELSE BEGIN
  ;### GET JUST SUBS  ###  
  
     OK_CODE = WHERE(LME_CODES EQ LME_CODE[0],FOUND_CODE)
       ;****************************
     IF FOUND_CODE EQ 1 THEN BEGIN
     ;****************************
        MAP_OUT = LME_MAPS(OK_CODE)  & MAP_OUT = MAP_OUT[0]
        ;===> REMAP SUBS TO LME_MAP
        LME_MAP = MAP_REMAP(LMES_IMAGE,MAP_IN = 'SMI',MAP_OUT=MAP_OUT,PX_OUT=512, PY_OUT=512)
        SUBS = WHERE(LME_MAP EQ LME_CODE[0],LME_N_PIXELS)
        RETURN,SUBS
     ENDIF;IF FOUND_CODE EQ 1 THEN BEGIN
     ;||||||||||||||||||||||||||||||||||
  
  ENDELSE;IF NOT KEYWORD_SET(SUBS) THEN BEGIN
   
    RETURN,ARRAY(OK_CODE)
  
DONE:
          
	END; #####################  END OF ROUTINE ################################
