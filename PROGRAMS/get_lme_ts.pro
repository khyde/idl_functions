; $ID:	GET_LME_TS.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;;#############################################################################################################
	FUNCTION GET_LME_TS,LME,PROD = PROD,PER=PER,YR_RANGE=YR_RANGE,INIT=INIT,STAT=STAT,PPY=PPY,OTHER=OTHER

; PURPOSE: THIS FUNCTION  EXTRACT THE TIME SERIES FOR A LME FROM THE RESULTS OF GET_LME_DATA
; 
; 
; CATEGORY:	LMES;		 
;
; CALLING SEQUENCE: RESULT = GET_LME_TS(LME)
;
; INPUTS: LME  [NAME OR NUMERIC CODE]

; OPTIONAL INPUTS:
;		
; KEYWORD PARAMETERS:
;         PROD : STANDARD PROD NAME
;         PER : STANDARD PERIOD CODE [E.G. M OR Y]
;         INIT : REREAD THE SAVFILE INTO MEMORY
;         STAT :TARGET STATS TYPE GMEAN OR AMEAN
;         OTHER : ADDITIONAL TAGS TO ADD TO THE OUTPUT STRUCTURE



; OUTPUTS: 
;		
;; EXAMPLES:
;       TS =GET_LME_TS('BALTIC_SEA',PROD = 'CHLOR_A',PER = 'M') & H,TS& P,MEAN(TS.MEAN,/NAN)
;       TS =GET_LME_TS('BALTIC_SEA',PROD = 'CHLOR_A',PER = 'M',YR_RANGE = [1996,2015]) & H,TS& P,MEAN(TS.MEAN,/NAN)
;       TS =GET_LME_TS(23,PROD = 'CHLOR_A',PER = 'M')           & H,TS& P,MEAN(TS.MEAN,/NAN)
;       TS =GET_LME_TS(23,PROD = 'CHLOR_A',PER = 'MONTH')           & H,TS& P,MEAN(TS.MEAN,/NAN)
;       TS =GET_LME_TS('KARA_SEA',PROD = 'CHLOR_A',PER = 'M')   & H,TS& P,MEAN(TS.MEAN,/NAN)
;       TS =GET_LME_TS('BALTIC_SEA',PROD = 'CHLOR_A',PER = 'Y') & H,TS& P,MEAN(TS.MEAN,/NAN)
;       TS =GET_LME_TS('BALTIC_SEA',PROD = 'PPD',PER = 'Y') &  & H,TS
;       TS =GET_LME_TS(7,PROD = 'CHLOR_A',PER = 'Y',OTHER = [''])  & H,TS
;       TS =GET_LME_TS(7,PROD = 'CHLOR_A',PER = 'Y',OTHER = ['N'],/PPY)  & H,TS
;	NOTES:
;       SET YR_RANGE TO 1998,2013 [COMPLETE YEARS]
;
; MODIFICATION HISTORY:
;			WRITTEN OCT 8, 2014 J.O'REILLY
;			OCT 7,2014,JOR ALLOW NUMERIC LME CODE AS INPUT
;			OCT 9,2014,JOR ADDED KEY STAT
;			OCT 14,2014,JOR CONSERVE MAP TAG
;			S = REPLICATE(CREATE_STRUCT('PER',PER),N_ELEMENTS(TS))
;     OCT 17,2014,JOR ADDED KEY YR_RANGE
;     OCT 22,2014,JOR ADDED KEY PPY AND CONVERSION LOGIC 


;			
;#################################################################################
;-
;****************************
ROUTINE_NAME  = 'GET_LME_TS'
;****************************
COMMON GET_LME_TS_,SAV,PROD_,PER_,YR_RANGE_
IF NONE(PROD_) THEN PROD_ = '' 
IF NONE(PER_) THEN PER_ = '' 
IF NONE(YR_RANGE_) THEN YR_RANGE_ = [0,0]
IF NONE(YR_RANGE) THEN YR_RANGE = FIX(['1998','2013'])
IF IDLTYPE(LME) EQ 'STRING' THEN LME = STRUPCASE(LME)
IF NOT KEY(STAT) THEN BEGIN 
  IF PROD EQ 'CHLOR_A' THEN STAT = 'GMEAN' ELSE STAT = 'AMEAN'
ENDIF;IF NOT KEY(STAT) THEN BEGIN
  
IF  KEY(INIT) OR (PROD NE PROD_ OR PER NE PER_ OR YR_RANGE[0] NE YR_RANGE_[0] OR YR_RANGE[1] NE YR_RANGE_[1]) THEN INIT = 1 ELSE INIT = 0

IF NONE(SAV) OR KEY(INIT) THEN BEGIN
  DIR = (GET_SMI()).LME_DATA
  FILES = FILE_SEARCH(DIR,'UNEP_MAIN*.SAVE') ;& PL,FILES
  FA = FILE_ALL(FILES)
  
  OK = WHERE(FA.PROD EQ PROD,COUNT) 
  IF COUNT GE 1 THEN BEGIN    
    FILES = FILES[OK]
    FA = FA[OK]
  ENDIF;IF COUNT GE 1 THEN BEGIN 
   IF COUNT GE 1 THEN OK = WHERE_STRING(FA.NAME,'-'+PER+'-',COUNT)
  IF COUNT EQ 1 THEN BEGIN   
    SAVFILE =  FILES[OK]
    PFILE,SAVFILE,/U   &  WAIT,1   
  ENDIF ELSE BEGIN
    RETURN,'ERROR: NO FILE FOUND'  
  ENDELSE;IF COUNT EQ 1 THEN BEGIN
    
  SAV = IDL_RESTORE(SAVFILE)
  ;===> NARROW DOWN TO YR_RANGE
  S = PERIOD_2STRUCT(SAV.PERIOD)
  P
  

  ;***************************
  IF PER EQ 'MONTH' THEN BEGIN
  ;***************************
     YY = FIX(([S.YEAR_START,S.YEAR_END]))
     OK = WHERE(YY GE YR_RANGE[0] AND YY LE YR_RANGE[1],COUNT)
     YRS = YY[OK]
  ENDIF ELSE BEGIN
    YRS = FIX(DATE_2YEAR(PERIOD_2DATE(SAV.PERIOD)))  

  ENDELSE;IF PER EQ 'MONTH' THEN BEGIN
  ;|||||||||||||||||||||||||||||||||||
  
  OK = WHERE(YRS GE YR_RANGE[0] AND YRS LE YR_RANGE[1],COUNT)
  IF COUNT GE 1 THEN SAV = SAV[OK]
ENDIF;IF NONE(SAV) OR KEY(INIT) THEN BEGIN

IF NONE(LME) THEN RETURN,SAV
IF IDLTYPE(LME) EQ 'INT' THEN LME = GET_LME_NAMES(LME)
OK = WHERE(SAV.MAP EQ LME,COUNT)
PROD_ = PROD
PER_  = PER
YR_RANGE_ = YR_RANGE
IF COUNT GE 1 THEN BEGIN
  SAV_= SAV[OK]
  TAGNAMES = TAG_NAMES(SAV_)

  OK_TAG = WHERE(TAGNAMES EQ STAT,COUNT_TAG)
  TS = SAV_.(OK_TAG)
  NAME = TAGNAMES(OK_TAG)
  ;===> CHECK ON PROD
  IF SAME([SAV_.PROD,PROD])THEN BEGIN
    TAGNAMES = ['MAP','PROD','DAY','PERIOD',NAME]
    IF KEY(OTHER) THEN  TAGNAMES = [TAGNAMES,OTHER]
    TS = STRUCT_COPY(SAV_,TAGNAMES = TAGNAMES)
    TS.DAY = NAME[0]
    TS = STRUCT_RENAME(TS,['DAY',NAME],['MEAN_TYPE','MEAN'])
    S = REPLICATE(CREATE_STRUCT('PER',PER),N_ELEMENTS(TS))
    TS = STRUCT_MERGE(TS,S)
    ;===> CHANGE PPD TO PPY BEFORE RETURNING TS
    IF PROD EQ 'PPD' AND KEY(PPY) THEN BEGIN
      TS.MEAN = TS.MEAN* 365.25
      TS.PROD = 'PPY'
      ;;;;;;;;;;;;;;;;PROD = 'PPY'
    ENDIF;IF PROD EQ 'PPD' AND KEY(PPY) THEN BEGIN
    RETURN,TS
    
  ENDIF ELSE RETURN,'ERROR: PROD NOT CORRECT'
ENDIF;IF COUNT GE 1 THEN BEGIN
DONE:          
	END; #####################  END OF ROUTINE ################################
