; $ID:	SATSHIP_PROD.PRO,	2020-07-09-08,	USER-KJWH	$
;+
;NAME:
;   SATSHIP_PROD.PRO
;
; PURPOSE:
;   Routine to create new data products from SATSHIP extracted RRS and QAA data.
;    
; CATEGORY:
;   SATSHIP
;
; CALLING SEQUENCE:
;  SATPROD = SATSHIP_PRODS(SHIPFILE=SHIPFILE, SATFILE=SATFILE, SATPRODS=SATPRODS, SHIPPRODS=SHIPPRODS) 
;  
; INPUTS:
;   SATFILE     = Extracted RRS and QAA SATDATA file
;   SATPRODS    = PROD and ALG of new data to create (['CHLOR_A-PAN', 'PIGMENTS'])
;
; OPTIONAL INPUTS:
;   A_CDOM_ALGS    = A_CDOM algorithms to save in output structure
;   DOC_ALGS       = DOC algorithms to save in output structure
;   PPD_CHL_ALG    = Chlorophyll algorithm (i.e. PAN) to input into the PPD algorithms
;   OPAL_ACDOM_ALG = ACDOM algorithm (i.e. MLR_A412) to input into PP_OPAL
;   NEC_PROFILES   = Keyword input for PP_OPAL (if set, will run the NEC_PROFILE look-up code instead of Wozniak)
;   KEEP_BITS      = Keep the satellite L2FLAGS BITS information in the output structure
;   KEEP_FLAGS     = Keep the satellite L2_FLAGS information in the output structure
;
; KEYWORD PARAMETERS:
;
; OUTPUTS:
;   This function returns a structure with satellite data products
;   
; OPTIONAL OUTPUTS:
;   ERROR:     Any Error messages are placed in ERROR, if no errors then ERROR = ''
;   ERR_MSG:
; EXAMPLE:
;   
; NOTES:
;
; MODIFICATION HISTORY:
;   Written May 11, 2015 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;   Modification History
;           Jun  2, 2015 - KJWH: Added PPD and PHYTOPLANKTON products 
;           Jul 28, 2015 - KJWH: Changed N default output to 0 if there is no valid data
;           
;                                
;-
; *************************************************************************
FUNCTION SATSHIP_PROD, SATFILE=SATFILE, SATPRODS=SATPRODS, A_CDOM_ALGS=A_CDOM_ALGS, DOC_ALGS=DOC_ALGS, $
                       PPD_CHL_ALG=PPD_CHL_ALG, OPAL_ACDOM_ALG=OPLA_ACOMD_ALG, NEC_PROFILES=NEC_PROFILES, KEEP_BITS=KEEP_BITS, KEEP_FLAGS=KEEP_FLAGS

  ROUTINE_NAME='SATSHIP_PROD'
  DASH = DELIMITER(/DASH)
  UL = DELIMITER(/UL)
  ERROR = 0
  ERR_MSG = []

; ===> List of available products to compare with the SHIPDATA (note, if new algorithms are added, must add the name to the CURRENT_PRODS list
  CURRENT_PRODS = ['CHLOR_A-PAN', 'PIGMENTS', 'PHYTOPLANKTON', 'DOC', 'A_CDOM','PPD-OPAL','PPD-VGPM','PPD-VGPM2'] 
  OK = WHERE_MATCH(SATPRODS, CURRENT_PRODS, COUNT, COMPLEMENT=COMPLEMENT, NCOMPLEMENT=NCOMPLEMENT, VALID=VALID, INVALID=INVALID, NINVALID=NINVALID)
  IF COUNT EQ 0 THEN BEGIN
    PRINT, 'No output PRODUCTS were recognized'
    GOTO, DONE
  ENDIF
  IF NCOMPLEMENT GE 1 THEN LI, 'Unable to extract ' + SATPRODS(COMPLEMENT) + ' because algorithms not included in SATSHIP_PROD'
  SATPRODS = SATPRODS[OK]
  PRODUCTS = SATPRODS[OK] ; Replicate list that will later be used to create the output structure

; ===> Get list of phytoplankton groups for output structure  
  IF HAS(SATPRODS,'PHYTOPLANKTON') THEN BEGIN 
    SATPRODS = SATPRODS[WHERE(SATPRODS NE 'PIGMENTS')]
    SATPRODS = ['PIGMENTS',SATPRODS] ; Make sure PIGMENTS is listed before PHYTOPLANKTON in the SATPRODS list.
    PHYTO_TAGS = ['BROWN_PERCENTAGE','BROWN_ALGAE','DIATOM','DIATOM_PERCENTAGE','DINOFLAGELLATE_A','DINOFLAGELLATE_B','DINOFLAGELLATE','DINOFLAGELLATE_PERCENTAGE','CHLOROPHYTE',$
      'CRYPTOPHYTE','CRYPTOPHYTE_PERCENTAGE','CYANOBACTERIA','GREEN_ALGAE','GREEN_PERCENTAGE','HAPTOPHYTE_A','HAPTOPHYTE_B','PRASINOPHYTE_A','PRASINOPHYTE_B','PROCHLOROPHYTE',$
      'MICRO','MICRO_PERCENTAGE','NANO','NANO_PERCENTAGE','PICO','PICO_PERCENTAGE','NANOPICO','NANOPICO_PERCENTAGE']
    PRODUCTS = [PRODUCTS,PHYTO_TAGS]
    PRODUCTS = PRODUCTS[WHERE(PRODUCTS NE 'PHYTOPLANKTON')]
  ENDIF
  
; ===> Get list of pigments for the output structure  
  IF HAS(SATPRODS,'PIGMENTS') GE 0 THEN BEGIN
    PRODUCTS = [PRODUCTS,['CHLA','CHLB','CHLC','CARO','ALLO','FUCO','PERID','NEO','VIOLA','DIA','LUT','ZEA']] ; Using mapped SST to calculate ZEA
    PRODUCTS = PRODUCTS[WHERE(PRODUCTS NE 'PIGMENTS')]
  ENDIF

; ===> Set up info for PPD algs
  IF HAS(VALIDS('PRODS',SATPRODS),'PPD') THEN BEGIN
    IF HAS(SATPRODS,'PPD-OPAL') THEN BEGIN                 ; Make sure A_CDOM is listed before PPD-OPAL in the PRODUCTS list.
      SATPRODS = SATPRODS[WHERE(SATPRODS NE 'A_CDOM')]
      SATPRODS = ['A_CDOM',SATPRODS]                       
      IF NONE(OPAL_ACDOM_ALG) THEN OPAL_ACDOM_ALG = 'MLR_A412'
      IF NONE(A_CDOM_ALGS)    THEN A_CDOM_ALGS = OPAL_ACDOM_ALG ELSE BEGIN
        A_CDOM_ALGS = [OPAL_ACDOM_ALG,A_CDOM_ALGS]
        A_CDOM_ALGS = A_CDOM_ALGS[SORT(A_CDOM_ALGS)]
        A_CDOM_ALGS = A_CDOM_ALGS[UNIQ(A_CDOM_ALGS)] ; Remove duplicate A_CDOM_ALGS
      ENDELSE
    ENDIF  
    IF NONE(PPD_CHL_ALG) THEN PPD_CHL_ALG = '' ELSE BEGIN
      IF PPD_CHL_ALG EQ 'PAN' AND NOT HAS(SATPRODS,'CHLOR_A-PAN') THEN SATPRODS = ['CHLOR_A-PAN',SATPRODS] ; Add CHLOR_A-PAN product for PPD
    ENDELSE  
  ENDIF
  
  IF HAS(PRODUCTS,'DOC') THEN BEGIN ; Get DOC algorithms
    DALGS = DOC_MANNINO(/GET_ALGS)
    IF ANY(DOC_ALGS) THEN BEGIN
      OK = WHERE_MATCH(DOC_ALGS, DALGS, COUNT, COMPLEMENT=COMPLEMENT, NCOMPLEMENT=NCOMPLEMENT, VALID=VALID, INVALID=INVALID, NINVALID=NINVALID)
      IF COUNT GT 0 THEN DALGS = DALGS(VALID)
    ENDIF
    PRODUCTS = [PRODUCTS,'DOC_'+DALGS] 
    PRODUCTS = PRODUCTS[WHERE(PRODUCTS NE 'DOC')]
  ENDIF
  
  IF HAS(PRODUCTS,'A_CDOM') THEN BEGIN ; Get A_CDOM algorithms
    AALGS = A_CDOM_MANNINO(/GET_ALGS)
    IF ANY(A_CDOM_ALGS) THEN BEGIN
      OK = WHERE_MATCH(A_CDOM_ALGS, AALGS, COUNT, COMPLEMENT=COMPLEMENT, NCOMPLEMENT=NCOMPLEMENT, VALID=VALID, INVALID=INVALID, NINVALID=NINVALID)
      IF COUNT GT 0 THEN AALGS = AALGS(VALID)
    ENDIF
    PRODUCTS = [PRODUCTS,'A_CDOM_'+AALGS]
    PRODUCTS = PRODUCTS[WHERE(PRODUCTS NE 'A_CDOM')]
  ENDIF
  
; ===> Read SATFILE
  IF NONE(SATFILE) THEN SATFILE = DIALOG_PICKFILE(TITLE='Pick save files') 
  SATDATA = IDL_RESTORE(SATFILE)
  SATTAGS = TAG_NAMES(SATDATA)
  AROUND  = SATDATA[0].SAT_AROUND
  ASIZE = (AROUND * 2 ) + 1
  LA = LONARR(ASIZE,ASIZE) & LA(*,*) = MISSINGS(LA)
  FA = FLTARR(ASIZE,ASIZE) & FA(*,*) = MISSINGS(FA)

; ===> Remove FLAG and BIT data
  BIT_TAGS  = WHERE(STRPOS(SATTAGS,'BIT')  GE 0,COUNT_BITS)
  FLAG_TAGS = WHERE(STRPOS(SATTAGS,'FLAG') GE 0,COUNT_FLAGS) 
  IF NOT KEY(KEEP_BITS)  AND COUNT_BITS  GT 0 THEN SATDATA = STRUCT_REMOVE(SATDATA,SATTAGS(BIT_TAGS)) 
  IF NOT KEY(KEEP_FLAGS) AND COUNT_FLAGS GT 0 THEN SATDATA = STRUCT_REMOVE(SATDATA,SATTAGS(FLAG_TAGS))
  
; ===> Add new product names to structure 
  TARGETS = []
  LABELS = []
  OUTSTRUCT = SATDATA
  FOR PTH = 0, N_ELEMENTS(PRODUCTS)-1 DO BEGIN
    PROD = PRODUCTS(PTH) ; PRODS must be a single element
    APROD = VALIDS('PRODS',PROD)
    IF APROD EQ '' THEN APROD = PROD
    ATARGET  = REPLACE(PROD,DASH,UL)
    IF STRPOS(ATARGET,'_',/REVERSE_OFFSET,/REVERSE_SEARCH) EQ STRLEN(ATARGET)-1 THEN ATARGET = STRMID(ATARGET,0,STRPOS(ATARGET,'_',/REVERSE_OFFSET))
    TARGETS = [TARGETS,ATARGET]
    LAB  = UL+REPLACE(ATARGET,DASH,UL)
    LABELS = [LABELS,LAB]
    IF AROUND EQ 0 THEN TEMPLATE=STRUCT_2MISSINGS(CREATE_STRUCT('SAT'+LAB,0.0)) ELSE BEGIN
                        TEMPLATE=STRUCT_2MISSINGS(CREATE_STRUCT('SAT_CENTER'+LAB,0.0,'N'+LAB,0L,'SAT'+LAB,FA))
                        TEMPLATE.(1) = 0
                   ENDELSE
    OUTSTRUCT = STRUCT_MERGE(OUTSTRUCT,REPLICATE(TEMPLATE,N_ELEMENTS(OUTSTRUCT)))               
  ENDFOR
  STR_TAGS = TAG_NAMES(OUTSTRUCT)

  FOR NTH=0, N_ELEMENTS(OUTSTRUCT)-1 DO BEGIN
    SENSOR     = OUTSTRUCT[NTH].SENSOR
    DP         = DATE_PARSE(PERIOD_2DATE(OUTSTRUCT[NTH].PERIOD))
    LATS       = OUTSTRUCT[NTH].SAT_LAT
    DAY_LENGTH = I_SUN_KIRK_DAY_LENGTH(LATS, DP.IDOY)

    IF HAS(OUTSTRUCT,'SAT_RRS_412')  THEN RRS412  = OUTSTRUCT[NTH].SAT_RRS_412  ELSE RRS412  = []
    IF HAS(OUTSTRUCT,'SAT_RRS_443')  THEN RRS443  = OUTSTRUCT[NTH].SAT_RRS_443  ELSE RRS443  = []
    IF HAS(OUTSTRUCT,'SAT_RRS_490')  THEN RRS490  = OUTSTRUCT[NTH].SAT_RRS_490  ELSE RRS490  = []
    IF HAS(OUTSTRUCT,'SAT_RRS_555')  THEN RRS555  = OUTSTRUCT[NTH].SAT_RRS_555  ELSE RRS555  = []
    IF HAS(OUTSTRUCT,'SAT_RRS_670')  THEN RRS670  = OUTSTRUCT[NTH].SAT_RRS_670  ELSE RRS670  = []
    IF HAS(OUTSTRUCT,'SAT_CHLOR_A')  THEN CHLOR_A = OUTSTRUCT[NTH].SAT_CHLOR_A  ELSE CHLOR_A = []
    IF HAS(OUTSTRUCT,'SAT_PAR')      THEN PAR_SAT = OUTSTRUCT[NTH].SAT_PAR      ELSE PAR_SAT = []
    IF HAS(OUTSTRUCT,'MAP_SST_DATA') THEN SST_SAT = OUTSTRUCT[NTH].MAP_SST_DATA ELSE SST_SAT = []
  
    IF HAS(SENSOR,'MODIS') THEN BEGIN
      IF HAS(OUTSTRUCT,'SAT_RRS_488') THEN RRS490 = OUTSTRUCT[NTH].SAT_RRS_488 ELSE RRS490 = []
      IF HAS(OUTSTRUCT,'SAT_RRS_547') THEN RRS555 = OUTSTRUCT[NTH].SAT_RRS_547 ELSE RRS555 = []
      IF HAS(OUTSTRUCT,'SAT_RRS_667') THEN RRS670 = OUTSTRUCT[NTH].SAT_RRS_667 ELSE RRS670 = []
    ENDIF
    
    OK = WHERE(RRS490 NE MISSINGS(RRS490),COUNT_MISS)
    IF COUNT_MISS EQ 0 THEN CONTINUE ; No valid data so skip to next entry
        
    FOR PTH = 0L, N_ELEMENTS(SATPRODS)-1 DO BEGIN ; Find products to use from the SATDATA file (note a_cdom_355_mannino is necessary to calculate doc_mannino)
      ATARGET  = REPLACE(SATPRODS(PTH),DASH,UL)
      APROD    = VALIDS('PRODS',SATPRODS(PTH))
      AALG     = VALIDS('ALGS',SATPRODS(PTH))
      LAB      = UL+REPLACE(ATARGET,DASH,UL)
      ERROR    = 0 
      CASE ATARGET OF
        'A_CDOM': BEGIN
          ACDOM = A_CDOM_MANNINO(RRS_412=RRS412, RRS_443=RRS443, RRS_555=RRS555, RRS_547=RRS555, RRS_667=RRS670, RRS_670=RRS670, AT_412=AT_412, AT_443=AT_443, SATELLITE=SATELLITE, ERROR=ERROR, ERR_MSG=ERR_MSG, SENSOR=SENSOR)
          IF ERROR EQ 1 THEN GOTO, END_CDOM
          FOR N=0, N_ELEMENTS(AALGS)-1 DO BEGIN
            APOS = WHERE(TAG_NAMES(ACDOM) EQ AALGS(N)) & SPOS = WHERE(STR_TAGS EQ 'SAT_A_CDOM_'+AALGS(N)) & NPOS = WHERE(STR_TAGS EQ 'N_A_CDOM_'+AALGS(N)) & IF SPOS EQ -1 OR NPOS EQ -1 OR APOS EQ -1 THEN STOP
            IF AROUND NE 0 THEN CPOS = WHERE(STR_TAGS EQ 'SAT_CENTER_A_CDOM_'+AALGS(N))
            OUTSTRUCT[NTH].(SPOS) = ACDOM.(APOS)
            IF AROUND NE 0 THEN OUTSTRUCT[NTH].(CPOS) = ACDOM.(APOS)(AROUND,AROUND)
            OUTSTRUCT[NTH].(NPOS) = N_ELEMENTS(WHERE(ACDOM.(APOS) NE MISSINGS(0.0)))
          ENDFOR
          END_CDOM:
        END
        'CHLOR_A_PAN': BEGIN
          POS = WHERE(STR_TAGS EQ 'SAT'+LAB)
          IF AROUND NE 0 THEN BEGIN
            CPOS = WHERE(STR_TAGS EQ 'SAT_CENTER'+LAB) 
            NPOS = WHERE(STR_TAGS EQ 'N'+LAB) 
            IF POS EQ -1 OR CPOS EQ -1 OR NPOS EQ -1 THEN STOP
            OUTSTRUCT[NTH].(NPOS) = 0 ; Initialize to 0
          ENDIF
          CHL = CHLOR_A_PAN(RRS490=RRS490,RRS488=RRS490,RRS555=RRS555,RRS547=RRS555,RRS670=RRS670,RRS667=RRS670,SENSOR='SEAWIFS',ERROR=ERROR,ERR_MSG=ERR_MSG)
          IF ERROR EQ 1 THEN GOTO, END_CHL
          OUTSTRUCT[NTH].(POS) = CHL
          IF AROUND NE 0 THEN OUTSTRUCT[NTH].(CPOS) = CHL(AROUND,AROUND)
          OUTSTRUCT[NTH].(NPOS) = N_ELEMENTS(WHERE(CHL NE MISSINGS(CHL)))
          END_CHL:
        END   
        'DOC': BEGIN          
          DOC = DOC_MANNINO(RRS412=RRS412, RRS443=RRS443, RRS555=RRS555, RRS547=RRS555, RRS667=RRS670, RRS670=RRS670, DATE=DP.DATE, ACDOM_ALG='MLR_A412', SENSOR=SENSOR, ERROR=ERROR, ERR_MSG=ERR_MSG)
          IF ERROR EQ 1 THEN GOTO, END_DOC
          FOR N=0, N_ELEMENTS(DALGS)-1 DO BEGIN
            DPOS = WHERE(TAG_NAMES(DOC) EQ 'DOC_'+DALGS(N)) & SPOS = WHERE(STR_TAGS EQ 'SAT_DOC_'+DALGS(N)) & NPOS = WHERE(STR_TAGS EQ 'N_DOC_'+DALGS(N)) & IF SPOS EQ -1 OR NPOS EQ -1 OR DPOS EQ -1 THEN STOP
            IF AROUND NE 0 THEN CPOS = WHERE(STR_TAGS EQ 'SAT_CENTER_DOC_'+DALGS(N))
            OUTSTRUCT[NTH].(SPOS) = DOC.(DPOS)
            IF AROUND NE 0 THEN OUTSTRUCT[NTH].(CPOS) = DOC.(DPOS)(AROUND,AROUND)
            OUTSTRUCT[NTH].(NPOS) = N_ELEMENTS(WHERE(DOC.(DPOS) NE MISSINGS(0.0)))
          ENDFOR
          END_DOC:  
        END
        'PIGMENTS': BEGIN    
          PIGMENTS = PIGMENTS_PAN(RRS490=RRS490,RRS488=RRS490,RRS555=RRS555,RRS547=RRS555,RRS670=RRS670,RRS667=RRS670,SST=SST_SAT,SENSOR='SEAWIFS',ERROR=ERROR,ERR_MSG=ERR_MSG)
          IF ERROR EQ 1 THEN GOTO, END_PIGMENTS
          PTAGS = TAG_NAMES(PIGMENTS)
          FOR N=0, N_ELEMENTS(PTAGS)-1 DO BEGIN
            POS = WHERE(STR_TAGS EQ 'SAT_'+PTAGS(N)) & NPOS = WHERE(STR_TAGS EQ 'N_'+PTAGS(N)) & IF POS EQ -1 OR NPOS EQ -1 THEN STOP
            IF AROUND NE 0 THEN CPOS = WHERE(STR_TAGS EQ 'SAT_CENTER_'+PTAGS(N)) 
            OUTSTRUCT[NTH].(POS) = PIGMENTS.(N)
            IF AROUND NE 0 THEN OUTSTRUCT[NTH].(CPOS) = PIGMENTS.(N)(AROUND,AROUND)
            OUTSTRUCT[NTH].(NPOS) = N_ELEMENTS(WHERE(PIGMENTS.(N) NE MISSINGS(0.0)))
          ENDFOR
          END_PIGMENTS:
        END          
        'PHYTOPLANKTON': BEGIN
          PHYTO = PHYTO_COMMUNITY_PAN(CHLA=PIGMENTS.CHLA,CHLB=PIGMENTS.CHLB,CHLC=PIGMENTS.CHLC,FUCO=PIGMENTS.FUCO,PERID=PIGMENTS.PERID,ZEA=PIGMENTS.ZEA,ALLO=PIGMENTS.ALLO,DIA=PIGMENTS.DIA,LUT=PIGMENTS.LUT,NEO=PIGMENTS.NEO,VIOLA=PIGMENTS.VIOLA,ERROR=ERROR, ERR_MSG=ERR_MSG, MISSING=MISSING,VERBOSE=VERBOSE)
          IF ERROR EQ 1 THEN GOTO, END_PHYTO
          PTAGS = TAG_NAMES(PHYTO)
          FOR N=0, N_ELEMENTS(PTAGS)-1 DO BEGIN
            IF NOT HAS(PHYTO_TAGS,PTAGS(N)) THEN CONTINUE
            POS = WHERE(STR_TAGS EQ 'SAT_'+PTAGS(N)) & NPOS = WHERE(STR_TAGS EQ 'N_'+PTAGS(N)) & IF POS EQ -1 OR NPOS EQ -1 THEN STOP
            IF AROUND NE 0 THEN CPOS = WHERE(STR_TAGS EQ 'SAT_CENTER_'+PTAGS(N))
            OUTSTRUCT[NTH].(POS) = PHYTO.(N)
            IF AROUND NE 0 THEN OUTSTRUCT[NTH].(CPOS) = PHYTO.(N)(AROUND,AROUND)
            OUTSTRUCT[NTH].(NPOS) = N_ELEMENTS(WHERE(PHYTO.(N) NE MISSINGS(0.0)))
          ENDFOR
          END_PHYTO:  
        END
        'PPD_OPAL': BEGIN
          IF PPD_CHL_ALG EQ 'PAN' THEN CHL_SAT = CHL ELSE CHL_SAT = CHLOR_A
          APOS = WHERE(TAG_NAMES(ACDOM) EQ OPAL_ACDOM_ALG, COUNTA)
          IF COUNTA EQ 1 THEN ACD_SAT = ACDOM.(APOS) ELSE ACD_SAT = []
          IF CHL_SAT EQ [] OR SST_SAT EQ [] OR PAR_SAT EQ [] OR ACD_SAT EQ [] THEN BREAK
          OK_OPAL = WHERE(CHL_SAT NE MISSINGS(0.0) AND SST_SAT NE MISSINGS(0.0) AND PAR_SAT NE MISSINGS(0.0) AND ACD_SAT NE MISSINGS(0.0),COUNT_OPAL)
          IF COUNT_OPAL GE 1 THEN $
            OUTSTRUCT[NTH].SAT_PPD_OPAL(OK_OPAL)=PP_OPAL(CHL=CHL_SAT(OK_OPAL),SST=SST_SAT(OK_OPAL),PAR=PAR_SAT(OK_OPAL),KX=ACD_SAT(OK_OPAL),NEC_PROFILES=NEC_PROFILES)
          OUTSTRUCT[NTH].SAT_CENTER_PPD_OPAL = OUTSTRUCT[NTH].SAT_PPD_OPAL(AROUND,AROUND)
          OUTSTRUCT[NTH].N_PPD_OPAL = COUNT_OPAL
        END
        'PPD_VGPM': BEGIN
          IF PPD_CHL_ALG EQ 'PAN' THEN CHL_SAT = CHL ELSE CHL_SAT = CHLOR_A
          IF CHL_SAT EQ [] OR SST_SAT EQ [] OR PAR_SAT EQ [] THEN BREAK
          OK_VGPM = WHERE(CHL_SAT NE MISSINGS(0.0) AND SST_SAT NE MISSINGS(0.0) AND PAR_SAT NE MISSINGS(0.0), COUNT_VGPM)
          IF COUNT_VGPM GE 1 THEN $
            OUTSTRUCT[NTH].SAT_PPD_VGPM(OK_VGPM) = PP_VGPM(CHL_SAT=CHL_SAT(OK_VGPM), SST=SST_SAT(OK_VGPM), PAR=PAR_SAT(OK_VGPM), DAY_LENGTH=DAY_LENGTH(OK_VGPM))
          OUTSTRUCT[NTH].SAT_CENTER_PPD_VGPM = OUTSTRUCT[NTH].SAT_PPD_VGPM(AROUND,AROUND)
          OUTSTRUCT[NTH].N_PPD_VGPM = COUNT_VGPM
        END
        'PPD_VGPM2': BEGIN
          IF PPD_CHL_ALG EQ 'PAN' THEN CHL_SAT = CHL ELSE CHL_SAT = CHLOR_A
          IF CHL_SAT EQ [] OR SST_SAT EQ [] OR PAR_SAT EQ [] THEN BREAK
          OK_VGPMS = WHERE(CHL_SAT NE MISSINGS(0.0) AND SST_SAT NE MISSINGS(0.0) AND PAR_SAT NE MISSINGS(0.0), COUNT_VGPM2)
          IF COUNT_VGPM2 GE 1 THEN $
            OUTSTRUCT[NTH].SAT_PPD_VGPM2(OK_VGPMS) = PP_VGPM(CHL_SAT=CHL_SAT(OK_VGPMS), SST=SST_SAT(OK_VGPMS), PAR=PAR_SAT(OK_VGPMS), DAY_LENGTH=DAY_LENGTH(OK_VGPMS))
          OUTSTRUCT[NTH].SAT_CENTER_PPD_VGPM2 = OUTSTRUCT[NTH].SAT_PPD_VGPM2(AROUND,AROUND)
          OUTSTRUCT[NTH].N_PPD_VGPM2 = COUNT_VGPM2
        END    
        ELSE: BREAK       
      ENDCASE ; ATARGET
    ENDFOR ; SATPRODS
    
    
  ENDFOR ; OUTSTRUCT
        
                   
      
	
  RETURN, OUTSTRUCT
  DONE:
END; #####################  End of Routine ################################
