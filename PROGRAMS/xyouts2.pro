; $ID:	XYOUTS2.PRO,	2020-07-08-15,	USER-KJWH	$
	PRO XYOUTS2, X,Y,TXT, $
								CHARSIZE=CHARSIZE, ALIGN=ALIGN, BACKGROUND=BACKGROUND, $
								DATA=DATA,NORMAL=NORMAL,DEVICE=DEVICE, $
							  LINESPACE=LINESPACE,GRACE=GRACE,$
							  POS_LAST=POS_LAST, $
							  WIDTH=WIDTH, _EXTRA=_EXTRA, ERROR=ERROR
;+
; NAME:
;		XYOUTS2
;
; PURPOSE:
;		THIS PROCEDURE IS CALLS IDL'S XYOUT BUT ALLOWS BOTH HORIZONTAL AND VERTICAL ALIGNMENT OF TEXT
;
; CATEGORY:
;		PLOT
;
; CALLING SEQUENCE:
;
;		XYOUTS2,X,Y,TXT
;
;	INPUTS:
;		X.......... X COORDINATE
;		Y.......... Y COORDINATE
;		TXT........ TEXT (PASSED TO XYOUTS
;
;	KEYWORD PARAMETERS:
;		CHARSIZE... CHARACTER SIZE (PASSED TO XYOUTS)
;		ALIGN...... TEXT ALIGNMENT [HORIZONTAL, VERTICAL] RELATIVE UNITS (0 TO 1.0)
;		BACKGROUND. SET THE AREA UNDER THE TXT TO THE COLOR VALUE OF BACKGROUND (DEFAULT=!P.BACKGROUND) THEN ADD TXT
;
;		DATA....... X,Y IN DATA UNITS
;		NORMAL..... X,Y IN NORMAL UNITS
;		DEVICE..... X,Y IN DEVICE UNITS
;		LINESPACE.. THE SPACE (FRACTION OF THE CHARACTER HEIGHT)
;								BETWEEN EACH LINE OF TEXT WHEN "!C" IS EMBEDDED IN THE TEXT'
;							  (DEFAULT = 0.7).  USED WHEN /BACKGROUND IS SET
;		GRACE...... THE FRACTION OF THE CHARACTER WIDTH AND HEIGHT WHICH WILL BE SET TO BACKGROUND COLOR
;								WHEN /BACKGROUND IS SET. (DEFAULT = [0.05,0.05])
;		WIDTH......	WIDTH OF CHARACTER AS RETURNED BY XYOUTS.PRO
;		_EXTRA..... UNDEFINED KEYWORDS PASSED TO XYOUTS
;
;
; OUTPUTS:
;		THIS PROCEDURE DRAWS ON THE DEFAULT GRAPHICS DEVICE USING  XYOUTS
;	OPTIONAL OUTPUTS:
;		ERROR:			IF ERRORS ARE ENCOUNTERED THEN ERROR WILL CONTAIN THE ERROR MESSAGE ELSE ERROR = ''
;		POS_LAST... THE LAST POSITION IN NORMAL COORDINATES WHEN /BACKGROUND IS SET
;
; EXAMPLE:
;
;	RESTRICTIONS:
;		THIS ROUTINE IS STILL A 'WORK IN PROGRESS'
;		WORKS WELL WITH FONTS,'TIMES' AND OTHER TRUETYPE FONTS, NOT AS WELL WITH OTHER FONTS.
;
;	  THERE ARE SOME ISSUES IN HOW "!C" IS HANDLED BY IDL, E.G. WHEN  TXT = 'XX!CXX!CX!CXQ'
;		LOWER CASE LETTERS (G J P Q Y) WILL NOT BE CENTERED PROPERLY IN THE VERTICAL DIRECTION WHEN ALIGN = [0.5,0.5]
;
; MODIFICATION HISTORY:
;			FEB 10,2001	WRITTEN BY:	J.E. O'REILLY
;-
; *************************************************************************
  ROUTINE_NAME='XYOUTS2'
  ERROR = ''

	IF N_ELEMENTS(X) EQ 0 OR N_ELEMENTS(Y) EQ 0 OR N_ELEMENTS(X) NE N_ELEMENTS(Y) THEN BEGIN
    ERROR='MUST PROVIDE X,Y  OR X,Y,Z NORMAL COORDINATES'
    RETURN
  ENDIF

  IF N_ELEMENTS(GRACE) NE 2 		THEN _GRACE = [0.05,0.05] ELSE _GRACE = GRACE

  IF N_ELEMENTS(BACKGROUND) EQ 1 THEN 	DO_BACKGROUND = 1  ELSE 	DO_BACKGROUND = 0



;	===> IF TXT IS NUMERIC THEN USE STRTRIM
	IF NUMERIC(TXT) EQ 1 THEN _TXT = STRTRIM(TXT,2) ELSE _TXT = TXT

	IF N_ELEMENTS(CHARSIZE) EQ 1 THEN _CHARSIZE=CHARSIZE ELSE _CHARSIZE = 1.0
	CHAR_XSIZE 	= _CHARSIZE*FLOAT(!D.X_CH_SIZE)/FLOAT(!D.X_SIZE) ; NORMAL UNITS

	D_FACTOR = (FLOAT(!D.X_CH_SIZE)/FLOAT(!D.Y_CH_SIZE))
	P_FACTOR = 1.0

 	CASE !P.FONT OF
		'-1': BEGIN
    	D_FACTOR = 0.75
    	IF N_ELEMENTS(LINESPACE) NE 1 THEN _LINESPACE = .4 ELSE _LINESPACE = LINESPACE
    	FRACTION_BELOW = D_FACTOR*0.4
  	END

    '0': BEGIN
    IF !D.FLAGS AND 1 EQ 1 THEN P_FACTOR = (FLOAT(!D.X_SIZE)/FLOAT(!D.Y_SIZE))
    IF N_ELEMENTS(LINESPACE) NE 1 THEN _LINESPACE = .3 ELSE _LINESPACE = LINESPACE
  	FRACTION_BELOW = 0.20
    END

    '1': BEGIN
    IF N_ELEMENTS(LINESPACE) NE 1 THEN _LINESPACE = .60 ELSE _LINESPACE = LINESPACE
  	FRACTION_BELOW = 1- 0.90*D_FACTOR
    END
  ENDCASE

  FACTOR = D_FACTOR * P_FACTOR
 	CHAR_YSIZE 	= FACTOR * (_CHARSIZE*!D.Y_CH_SIZE/FLOAT(!D.Y_SIZE))


	FOR NTH = 0L,N_ELEMENTS(X)-1L DO BEGIN

;	****************************************************
;	*** CONVERT X,Y FROM DATA TO NORMAL COORDINATES  ***
;	****************************************************
	XYZ=CONVERT_COORD(X[NTH],Y[NTH],DATA=DATA,DEVICE=DEVICE,NORMAL=NORMAL,/TO_NORMAL)
	XNORMAL = REFORM(XYZ(0,*))
	YNORMAL = REFORM(XYZ(1,*))
	IF N_ELEMENTS(ALIGN) EQ 2 THEN BEGIN
		_ALIGN = ALIGN[0]
		YNORMAL = YNORMAL - ALIGN[1]*CHAR_YSIZE
	ENDIF

	IF N_ELEMENTS(ALIGN) EQ 1 THEN _ALIGN = ALIGN
	IF N_ELEMENTS(_ALIGN) EQ 0 THEN _ALIGN  = 0

;		===> DETERMINE WIDTH OF TEXT STRING (WIDTH WILL BE COMPENSATED FOR ANY !C
 		XYOUTS,/NORM,-10,-10,_TXT[NTH],CHARSIZE=CHARSIZE,WIDTH=CHARWIDTH
		LEFT 		= XNORMAL  - CHARWIDTH*_ALIGN[0]
		RIGHT 	= XNORMAL  + CHARWIDTH*(1.0-_ALIGN[0])
		BOT			= YNORMAL
		TOP 		= YNORMAL  + CHAR_YSIZE
		POS_LAST = [LEFT,BOT,RIGHT,TOP]



;	********************************
	IF DO_BACKGROUND EQ 1 THEN BEGIN
;	********************************
		LEFT 		= LEFT		- 	_GRACE[0]*CHARWIDTH
		RIGHT 	= RIGHT 	+ 	_GRACE[0]*CHARWIDTH
		BOT			= BOT		  - 	_GRACE[1]*CHAR_YSIZE
		TOP 		= TOP			+ 	_GRACE[1]*CHAR_YSIZE

;		===> DETERMINE NUMBER OF TEXT LINES BASED ON '!C' DELIMITERS
;				 AND ADJUST BOT TO DEAL WITH THE VERTICALLY ARRANGED TEXT
		CTXT=STRSPLIT(_TXT[NTH],'!C',/REGEX,/EXTRACT,/PRESERVE_NULL)

		IF N_ELEMENTS(CTXT) GT 1 THEN BEGIN
			BOT = BOT -1.0 * (FLOAT(N_ELEMENTS(CTXT)-1)* (CHAR_YSIZE + _LINESPACE*CHAR_YSIZE ))
		ENDIF

;		===> SEE IF THE LAST LINE OF CTXT HAS ANY SPECIAL LOWER CASE CHARACTERS (G J P Q Y)
		LTXT = STRSPLIT(LAST(CTXT),'GJPQY',/EXTRACT,/PRESERVE_NULL)

;		===> SEE IF THE LAST LINE OF CTXT HAS ANY SPECIAL UPPER CASE CHARACTERS (Q)
		UTXT = STRSPLIT(LAST(CTXT),'Q',/EXTRACT,/PRESERVE_NULL)

		IF N_ELEMENTS(UTXT) EQ 1 AND N_ELEMENTS(LTXT) GT 1 THEN BOT = BOT - FRACTION_BELOW*CHAR_YSIZE
		IF N_ELEMENTS(UTXT) GE 1 AND N_ELEMENTS(LTXT) GT 1 THEN BOT = BOT - FRACTION_BELOW*CHAR_YSIZE
		IF N_ELEMENTS(UTXT) GE 1 AND N_ELEMENTS(LTXT) EQ 1 THEN BOT = BOT - FRACTION_BELOW*CHAR_YSIZE*0.4


;		===> FILL 'BEHIND' THE TEXT WITH THE BACKGROUND
		POLYFILL, /NORM, [LEFT,RIGHT,RIGHT,LEFT,LEFT],[BOT,BOT,TOP,TOP,BOT] ,COLOR= BACKGROUND
		POS_LAST[1] = BOT
		POS_LAST(3) = TOP


	ENDIF

;	===> PASS TO IDL'S XYOUTS
  XYOUTS,XNORMAL,YNORMAL,_TXT[NTH],/NORMAL,CHARSIZE= _CHARSIZE, ALIGN= _ALIGN,WIDTH=CHARWIDTH, _EXTRA=_EXTRA

	ENDFOR

	WIDTH=CHARWIDTH
 DONE:

END; #####################  END OF ROUTINE ################################
