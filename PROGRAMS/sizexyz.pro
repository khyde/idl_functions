; $ID:	SIZEXYZ.PRO,	2020-07-08-15,	USER-KJWH	$

;##############################################################################
FUNCTION SIZEXYZ, IMG, PX=PX, PY=PY, PZ=PZ, N_DIMENSIONS=N_DIMENSIONS
;+
; NAME:  SIZEXYZ
;     
;
; PURPOSE: RETURN A STRUCTURE WITH SIZE AND THE X,Y, AND Z DIMENSIONS OF THE INPUT DATA 
; 
;
;	KEYWORDS:
;			     PX..... OUTPUT THE X SIZE
;          PY..... OUTPUT THE Y SIZE
;          PZ..... OUTPUT THE Z SIZE
;
; CALLING SEQUENCE:
;       RESULT = SIZEXYZ(IMG)
;				RESULT = SIZEXYZ([1024,1024]) ; YOU MAY JUST PROVIDE THE DIMENSIONS OF THE IMAGE
;				
;	RESTRICTIONS:
;	  VIRTUAL ARRAYS E.G. [256,512], [1024,1024], [256,512,3] MUST ALWAYS BE INTEGER TYPES -NOT STRING!
;	  AS DEFINED BY ISA(IMG,/INT)
; 
; PROCEDURE:
;            USES IDL'S SIZE FUNCTION WITH THE SIZE KEYWORD TO GET MOST 
;            OF THE IMAGE ATTRIBUTES AS A STRUCTURE THEN EXTRACTS THE X, Y, AND Z - DIMENSIONS 
;            FROM THE DIMENSION ARRAY AND CONCATENATES THIS INFO INTO PX,PY, AND PZ TAGNAMES
;            ADDS PX PY PZ TO THE STRUCTURE, AND RETURNS THE COMPLETE STRUCTURE
;            (SINCE MOST OF THE TIME, 2-D OR 3-D IMAGES ARE USED, 
;            THERE IS NOT A GOOD REASON TO EXTRACT HIGHER DIMENSIONS)
; EXAMPLES:
;         ST,SIZEXYZ([]); NULL
;         ST,SIZEXYZ(JUNK); JUNK NOT DEFINED
;         ST,SIZEXYZ([256,512]) 
;         ST,SIZEXYZ(BYTARR(256,512)) 
;         ST,SIZEXYZ([3,256,512]) ; THIS IS NOT A TRUE-COLOR
;         ST,SIZEXYZ(BYTARR(3,256,512)); THIS IS A TRUE COLOR IMAGE SO PZ = 3
;         ST,SIZEXYZ([256,128]) 
;         ST,SIZEXYZ([256,128,64]) 
;         ST,SIZEXYZ(['A']) 
;         ST,SIZEXYZ(ALPHABET()) 
;         ST,SIZEXYZ(['CAT']) 
;         ST,SIZEXYZ(['A','B','C']) 
;         ST,SIZEXYZ([-1.0,0.0,1.0]) 
;         ST,SIZEXYZ(REFORM(ALPHABET(),2,13))
;         ST, SIZEXYZ(INTARR(5))
;         ST, SIZEXYZ([120L,120L])
;         ST, SIZEXYZ([120UL,120UL])
;         ST, SIZEXYZ([ULONG64(120),ULONG64(120)])
;         ST,SIZEXYZ(FINDGEN([1024,1024])) 
;         ST,SIZEXYZ([1024L,1024L]) 

; MODIFICATION HISTORY:
;       WRITTEN BY:  J. O'REILLY, NOAA, NARRAGANSETT LAB,RI,02882 MAY 20, 2010
;       MAR 24,2015,JOR REWROTE USING CASES TO IMPROVE EFFICIENCY AND CLARITY
;       MAR 25,2015,JOR:IF TYPE_ EQ 'STRING' OR TYPE_ EQ 'STRUCT' OR TYPE_ EQ 'UNDEFINED' THEN BEGIN
;       JUL 08,2015,JOR:IF S.N_DIMENSIONS EQ 0 OR TYPE_ EQ 'STRUCT' OR TYPE_ EQ 'UNDEFINED' THEN BEGIN
;       NOV 07,2016,JOR REINSTATED VERSION FROM 2015-07-08 [NEWER VERSION NOT WORKING WELL]
;       NOV 07, 2016 - KJWH: ADDED PX, PY AND PZ OUTPUT KEYWORDS TO EASILY GET THE DESIRED PIXEL SIZE INFORMATION
;       DEC 05, 2016 - JEOR: IF IDLTYPE(IMG[0]) EQ 'STRING' THEN  PX = MAX(STRLEN((IMG[0])) > S.DIMENSIONS) ELSE $
;                            ADDED 2 STRING EXAMPLES
;       JAN 05, 2017 - KJWH: CHANGED DEFAULT PX, PY AND PZ OUTPUT TO 0L (CHANGED TO LONG TO AVOID TYPE CONVERSION ERRORS)
;       JAN 05, 2017 - JEOR: SIMPLIFIED AND REWROTE PROGRAM 
;       JAN 06, 2017 - KJWH: ADDED ST,SIZEXYZ(REFORM(ALPHABET(),2,13)) EXAMPLE
;       JAN 09, 2017 - JEOR: ADDED  ST, SIZEXYZ(INTARR(5)) EXAMPLE
;                            ADDED  ST, SIZEXYZ([120L,120L])
;       JAN 20, 2017 - JEOR: IF ISA(IMG,/INT) THEN GOTO, VIRTUAL ELSE GOTO,SKIP
;       
;       MAY 20, 2017 - JEOR: IF NUMERIC(IMG[0]) THEN BEGIN [TAKING WAY TOO LONG TO CHECK ENTIRE IMG FOR NUMERIC]
;                            ADDED CHECK IF TRUE COLOR: IF S.N_DIMENSIONS EQ 3 AND PX EQ 3  THEN BEGIN
;  MAR 18, 2021 - KJWH: Added N_DIMENSIONS output
;
;##############################################################################
            
;-
;********************
  ROUTINE = 'SIZEXYZ'
;********************

  
; ===> DETERMINE SIZE AND TYPE OF IMG
  S=SIZE(IMG,/STRUCT)
  TYPE_ = S.TYPE_NAME
  N_DIMENSIONS = S.N_DIMENSIONS

  ;*****************************************************************************
  IF S.N_DIMENSIONS EQ 1 AND S.N_ELEMENTS GE 1 AND TYPE_ EQ 'STRING' THEN BEGIN
    PX = S.N_ELEMENTS & PY = 0L & PZ = 0L
    GOTO, SKIP ; ===>
  ENDIF;  IF S.N_DIMENSIONS EQ 1 AND S.N_ELEMENTS GE 1 AND TYPE_ EQ 'STRING' THEN BEGIN
  ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


;*****************************************************************************
  IF S.N_DIMENSIONS EQ 0 OR TYPE_ EQ 'STRUCT' OR TYPE_ EQ 'UNDEFINED' THEN BEGIN
    PX = 0L & PY = 0L & PZ = 0L
    GOTO, SKIP ; ===>
  ENDIF;IF TYPE_ EQ 'STRING' OR TYPE_ EQ 'STRUCT' OR TYPE_ EQ 'UNDEFINED' THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



;===> INITIALLY SET PX,PY,PZ TO THE FIRST 3 S.DIMENSIONS
  PX = S.DIMENSIONS[0]
  PY = S.DIMENSIONS[1]
  PZ = S.DIMENSIONS(2)
  IF NUMERIC(IMG[0]) THEN  BEGIN
    ;===> SEE IF IMG IS TRUE COLOR [3,X,Y]:
    IF S.N_DIMENSIONS EQ 3 AND PX EQ 3  THEN BEGIN
      PX = PY
      PY = PZ
      PZ = 3
      GOTO,SKIP;>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    ENDIF; IF S.N_DIMENSIONS EQ 3 AND PX EQ 3  THEN BEGIN
      
    IF ISA(IMG,/INT) THEN GOTO, VIRTUAL ELSE GOTO,SKIP
  ENDIF;IF NUMERIC(IMG(0)) THEN  BEGIN



VIRTUAL:
;############################################################################
;VIRTUAL DATA ARRAYS, PLACE HOLDERS = E.G. [256,128] OR [256,128,3]

 
   IF PX EQ S.N_ELEMENTS AND S.N_DIMENSIONS EQ 1 THEN BEGIN
    CASE (PX) OF
      2: BEGIN
        PX = IMG[0]
        PY = IMG[1]
        PZ = 0L
      END;3
      3: BEGIN
        PX = IMG[0]
        PY = IMG[1]
        PZ = IMG(2)
      END;3
     ELSE: BEGIN
       GOTO,SKIP
      END
    ENDCASE
  GOTO,SKIP  
  ENDIF;  IF ISA(IMG,/INT) AND PX EQ S.N_ELEMENTS AND S.N_DIMENSIONS EQ 1 THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   

  SKIP:
  ; ===> CONCATENATE PX PY PZ TAGNAMES TO STRUCT >>>
  RETURN, CREATE_STRUCT(S,'PX',LONG(PX),'PY',LONG(PY),'PZ',LONG(PZ))

END; #####################  END OF ROUTINE ################################
