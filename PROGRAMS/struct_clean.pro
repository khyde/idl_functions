; $ID:	STRUCT_CLEAN.PRO,	2020-07-01-12,	USER-KJWH	$
;+
;#############################################################################################################
	FUNCTION STRUCT_CLEAN,STRUCT,EXCLUDE=EXCLUDE,VERBOSE=VERBOSE
;
; PURPOSE:  CLEANS ALL TAGS IN A STRUCTURE BY REMOVING NANS AND MISSINGS
;
; CATEGORY:	STRUCT
;
; CALLING SEQUENCE: STRUCT_CLEAN,STRUCT
;
; INPUTS: STRUCT A 'SPREADSHEET TYPE' STRUCTURE ARRAY
;         
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:  
;            EXCLUDE: TAGNAMES TO EXCLUDE FROM BEING SEARCHED FOR MISSINGS
;            VERBOSE: PRINT PROGRAM PROGRESS
;                      
;		

; OUTPUTS: A STRUCTURE IDENTICAL TO INPUT EXCEPT WITH FEWER RECORDS
; 
; EXAMPLES: 
; 
;
; MODIFICATION HISTORY:
;			SEP 30,2014,  WRITTEN BY J.O'REILLY 
;			OCT 1,2014,JOR ADDED KEY VERBOSE
;			OCT 4,2014,JOR DOCUMENTED
;					
;#################################################################################
;-
;*****************************
ROUTINE_NAME  = 'STRUCT_CLEAN'
;*****************************

TAGNAMES  = TAG_NAMES(STRUCT)
GOOD = REPLICATE(1L,(N_ELEMENTS(STRUCT)))

;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR TAG = 0,N_ELEMENTS(TAGNAMES)-1 DO BEGIN
  NAME = TAGNAMES(TAG)

   OK = WHERE_IN(EXCLUDE,NAME,COUNT)
   IF COUNT EQ 1  THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   IF KEY(VERBOSE) THEN PFILE,NAME,/U

  DATA = STRUCT.(TAG) 
  
  IF IDLTYPE(DATA) EQ 'STRING' THEN BEGIN
   OK = WHERE(DATA NE '',COUNT,NCOMPLEMENT=NCOMPLEMENT,COMPLEMENT = COMPLEMENT) 
  ENDIF ELSE BEGIN
   OK = WHERE(FINITE(DATA) AND DATA NE MISSINGS(DATA),COUNT,NCOMPLEMENT = NCOMPLEMENT,COMPLEMENT = COMPLEMENT)
  ENDELSE;IF IDLTYPE(DATA) EQ 'STRING' THEN BEGIN   
   
  IF NCOMPLEMENT  GE 1 THEN GOOD(COMPLEMENT) = 0
   
ENDFOR;FOR TAG = 0,N_TAGS(STRUCT)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
OK = WHERE(GOOD EQ 0,COUNT)
IF COUNT GE 1 THEN STRUCT=REMOVE(STRUCT,OK)
RETURN,STRUCT
IF KEY(VERBOSE) THEN 
END; #####################  END OF ROUTINE ################################
