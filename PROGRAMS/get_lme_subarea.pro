; $ID:	GET_LME_SUBAREA.PRO,	2020-07-08-15,	USER-KJWH	$
; ===> CHOOSE ONE: PRO OR FUNCTION 
;#############################################################################################################
	FUNCTION GET_LME_SUBAREA,ARRAY,LME_CODE=LME_CODE,MAP_OUT=MAP_OUT,VERBOSE=VERBOSE,ERROR = ERROR
	
;  PRO GET_LME_SUBAREA
;+
; NAME:
;		GET_LME_SUBAREA
;
; PURPOSE: THIS FUNCTION 
;
; CATEGORY:
;		IMAGE
;		 
;
; CALLING SEQUENCE:RESULT = GET_LME_SUBAREA(ARRAY,LME_CODE=LME_CODE)
;
; INPUTS:
;   ARRAY: SMI DATA FOR   MAP [4320 X 2160]
;		LME_CODE:	MUST BE SCALAR [1 TO 64 PLUS PWP=65]
;		
; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;   VERBOSE: PRINTS INFO
;   SUBS: RETURNS THE SUBSCRIPTS WITHIN THE ARRAY MATCHING LME_CODE

; OUTPUTS:
;         AN EXTRACT OF THE INPUT ARRAY FOR THE SUBAREA SPECIFIED BY THE LME_CODE
;		
;; EXAMPLES:
;  D=GET_LME_SUBAREA[1]
;	NOTES:

;		
;
;
; MODIFICATION HISTORY:
;			WRITTEN JUN 4,2013 J.O'REILLY
;			JUN 5,2013,JOR:  OK_LMES = WHERE(LMES_IMAGE EQ LME_CODE[0],COUNT_LMES)
;     JUN 6,2013,JOR :   IF SZ.PX NE PX OR SZ.PY NE PY THEN RETURN,'ERROR: DIMENSIONS OF ARRAY DIFFERENT FROM LMES_IMAGE '


;#################################################################################;
;-
;	*******************************
ROUTINE_NAME  = 'GET_LME_SUBAREA'
; *******************************
ERROR = ''

IF N_ELEMENTS(ARRAY) EQ 0 THEN MESSAGE,'DATA ARRAY IS REQUIRED'
IF N_ELEMENTS(LME_CODE) NE  1 THEN MESSAGE,'LME_CODE IS REQUIRED [MUST BE SCALAR]'

COMMON _GET_LME_SUBAREA,  LMES_IMAGE,PX,PY
;****************************************
IF N_ELEMENTS(LMES_IMAGE) EQ 0 THEN BEGIN
;****************************************
;===> GET THE STANDARD LME IMAGE
  LME_IMAGE_FILE ='D:\IDL\IMAGES\LME-AREAS-SMI.PNG'; NEW MADE USING LME_64_WGS.SHP
  LMES_IMAGE = READ_PNG(LME_IMAGE_FILE,R,G,B) 
  SZ_LMES = SIZEXYZ(LMES_IMAGE) & PX = SZ_LMES.PX & PY = SZ_LMES.PY
ENDIF;IF N_ELEMENTS(LMES_IMAGE) EQ 0 THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'LMES-IMAGE  ','PX: ',PX,' PY: ',PY
  
  SZ=SIZEXYZ(ARRAY)
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'ARRAY  ','PX: ',PX,' PY: ',PY
  IF SZ.PX NE PX OR SZ.PY NE PY THEN RETURN,'ERROR: DIMENSIONS OF ARRAY DIFFERENT FROM LMES_IMAGE '
   
 
  OK_LMES = WHERE(LMES_IMAGE EQ LME_CODE[0],COUNT_LMES)
  
  IF COUNT_LMES EQ 0 THEN  RETURN,'ERROR: NO LME CODE FOUND'      

  IF COUNT_LMES GE 1 THEN BEGIN  
    
    ;===> FIND LME MAP BASED ON THE LME_CODE
     DB =  GET_LME_MAPS() & MAPS=DB.MAP   & LME_CODES = DB.CODE & LME_NAMES = DB.NAME  
     OK_LME = WHERE(LME_CODES EQ LME_CODE[0],FOUND_CODE)
       ;****************************
     IF FOUND_CODE EQ 1 THEN BEGIN
     ;****************************
        MAP_OUT = MAPS(OK_LME)  & MAP_OUT = MAP_OUT[0]
        ;===> REMAP SUBS TO LME_MAP
        LME_MAP = MAP_REMAP(LMES_IMAGE,MAP_IN = 'SMI',MAP_OUT=MAP_OUT,PX_OUT=512, PY_OUT=512)
        SUBS = WHERE(LME_MAP EQ LME_CODE[0],COUNT_REMAPED)
        RETURN,SUBS
     ENDIF;IF FOUND_CODE EQ 1 THEN BEGIN
     ;||||||||||||||||||||||||||||||||||
  
 ; RETURN,OK ELSE RETURN,ARRAY(OK)  
  ENDIF ELSE BEGIN     
    RETURN,'ERROR: NO LME CODE FOUND'      
  ENDELSE;IF COUNT_LMES GE 1 THEN BEGIN


DONE:          
	END; #####################  END OF ROUTINE ################################
