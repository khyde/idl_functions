; $ID:	STRUCT_RENAME.PRO,	2020-06-26-15,	USER-KJWH	$
; #########################################################################
FUNCTION STRUCT_RENAME, STRUCT, OLD, NEW, STRUCT_ARRAYS=STRUCT_ARRAYS
;+
;	THIS FUNCTION RENAMES THE TAG NAMES OF A STRUCTURE
;
; SYNTAX:	RESULT = STRUCT_RENAME(STRUCT, OLD,NEW)
; CATEGORY: STRUCT

;	
; OUTPUT:
;  	STRUCTURE WITH TAG NAMES CHANGED.
;   IF INPUT IS INCORRECT [ OLD TAG NOT FOUND IN STRUCT] THEN THE ORIGINAL STRUCTURE IS RETURNED
;   
; ARGUMENTS:
; 	       STRUCT:	INPUT STRUCTURE
;	          OLD:	THE OLD TAG NAMES
;	          NEW:	THE NEW NAMES FOR THE TAGS
;	          
; KEYWORDS: 
;   STRUCT_ARRAYS: Use when the tags represent an array of values
;   
; EXAMPLES:
;	CREATE A SIMPLE STRUCTURE:
; 	STRUCT = CREATE_STRUCT('AA',0B,'BB',1L,'CC',0D) & STRUCT = REPLICATE(STRUCT,5)
;
;	  ST,STRUCT_RENAME(STRUCT,'AA','CAT')
;	  ST,STRUCT_RENAME(STRUCT,['AA','BB'],['CAT','DOG'])
;   ST,STRUCT_RENAME(STRUCT,['AA','BB','CC'],['CAT','DOG','MOUSE']) 
;	  ST,STRUCT_RENAME(STRUCT,['AA','BB','EE'],['CAT','DOG','MOUSE']) ; QUIETLY IGNORES EE (NOT IN ORIGINAL STRUCTURE)
;	
; NOTES:
;	THIS ROUTINE DOES NOT ALTER THE ORIGINAL STRUCTURE
;
; MODIFICATION HISTORY:
;	JAN 12,2001	WRITTEN BY:	J.E. O'REILLY, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;	APR 22,2012,JOR,FORMATTING,UPPERCASE,RETURN ERROR STRING
;	OCT 14,2016,JOR REWROTE & SIMPLIFIED PROGRAM
; OCT 15,2016,JOR DELETED WHERE STATEMENT
; NOV 03,2016,JOR FIXED [NOW CORRECTLY DEALS WITH SPREADSHEET TYPE STRUCTURES]
; DEC 24,2016,JOR NO LONGER USING NEW_NAMES= REPLACE(NEW_NAMES,OLD,NEW)
; APR 16, 2018,JOR: ;===> IF N_ELEMENTS(STRUCT) EQ 1 THEN CHECK THAT NEW NAME IS FOUND AND IF SO RETURN STRUCT
; FEB 19, 2019 - KJWH: Changed OK = WHERE(NAMES EQ NEW) to OK = WHERE_MATCH(NAMES,NEW,COUNT) 
;                      Now returning an ERROR statement if not all tags were changed - IF COUNT EQ NOF(NEW) THEN RETURN,S ELSE RETURN, 'ERROR: At least one tag was not changed'
; JAN 28, 2019 - KJWH: Added STRUCT_ARRAYS keyword
;-

;*****************************
 ROUTINE_NAME='STRUCT_RENAME'
;*****************************
IF IDLTYPE(STRUCT) NE 'STRUCT' THEN MESSAGE,'ERROR STRUCT MUST BE A STRUCTURE'
IF IDLTYPE(OLD) NE 'STRING' OR IDLTYPE(NEW) NE 'STRING' THEN MESSAGE,'OLD & NEW MUST BE STRINGS'
IF N_ELEMENTS(OLD) NE N_ELEMENTS(NEW) THEN MESSAGE,'ERROR: NUMBER OF OLD AND NEW MUST BE SAME'
OLD = STRUPCASE(OLD)
NEW = STRUPCASE(NEW)

OLD_NAMES = TAG_NAMES(STRUCT)
NEW_NAMES = OLD_NAMES

;===> MAKE A NEW STRUCTURE,USING THE NEW_NAMES AND VALUES FROM STRUCT TO DEFINE THE DATA TYPE 
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FOR N = 0,N_ELEMENTS(OLD_NAMES)-1 DO BEGIN
  OLD_NAME = OLD_NAMES[N]
  NEW_NAME = NEW_NAMES[N] 
  IF KEY(STRUCT_ARRAYS) THEN VALUE = STRUCT.(N) ELSE VALUE = FIRST(STRUCT.(N))
 
 OK = WHERE(OLD EQ OLD_NAME,COUNT)
 IF COUNT EQ 1 THEN  NEW_NAME = NEW[OK]
 
  IF NONE(S) THEN S = CREATE_STRUCT(NEW_NAME, VALUE) ELSE S = CREATE_STRUCT(S,NEW_NAME,VALUE)

  
ENDFOR;FOR N = 0,N_ELEMENTS(OLD_NAMES)-1 DO BEGIN
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;===> IF N_ELEMENTS(STRUCT) EQ 1 THEN CHECK THAT NEW NAME IS FOUND AND IF SO RETURN STRUCT
;
IF N_ELEMENTS(STRUCT) EQ 1 THEN BEGIN
  NAMES = TAG_NAMES(S)
  OK = WHERE_MATCH(NAMES,NEW,COUNT)
  ;IF COUNT EQ NOF(NEW) THEN RETURN,S ELSE RETURN, 'ERROR: At least one tag was not changed'
  RETURN, S
ENDIF ELSE BEGIN
  ;===: REPLICATE S AND FILL EACH TAG WITH THE VALUES FROM STRUCT
  S = REPLICATE(S,N_ELEMENTS(STRUCT))
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR N= 0,N_ELEMENTS(NEW_NAMES)-1 DO BEGIN
   S.(N) = STRUCT.(N)
  ENDFOR;FOR N= 0,N_ELEMENTS(NEW_NAMES)-1 DO BEGIN
  
  RETURN,S
ENDELSE;IF N_ELEMENTS(STRUCT) EQ 1 THEN BEGIN


END; #####################  END OF ROUTINE ################################
