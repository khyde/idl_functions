; $ID:	LATLON_SUBAREAS.PRO,	2020-07-08-15,	USER-KJWH	$

 PRO LATLON_SUBAREAS, MAP=map, DEG=DEG,   NAME=name ,DIR_OUT=dir_out, FILE_LANDMASK=file_landmask
;+
; NAME:
;       LATLON_SUBAREAS
;
; PURPOSE:
;       Generate a Structure containing 2-d arrays of longitude and latitudes within the range specified in LON,LAT,
;				and in increments specified by DEG
;
; CATEGORY:
;      MAPPING,PLOTTING
;
; KEYWORD PARAMETERS:
;      DEG:   Decimal degrees for incremental lon and lat
;      LON:   Longitude array [minimum, maximum]
;      LAT:   Latitude  array [minimum, maximum]
;	 NOROUND:		Prevents rounding (rounding is usually desired so that returned lat,lon are in uniform intervals
;
; OUTPUTS:
;      Structure with a 2-d array of latitudes and a 2-d array of longitudes

;
;	EXAMPLES:
;     LL=LATLON_SUBAREAS(DEG=1.0, 		LON=[ -73 ,-71],LAT=[40,42])
;			LL=LATLON_SUBAREAS(DEG= 1./6, 	LON=[ -80 ,-61],LAT=[34,46])

; MODIFICATION HISTORY:
;       Written by:  J.E.O'Reilly, July 24, 2005
;-
; ====================>

	ROUTINE_NAME = 'LATLON_SUBAREAS'

; Check if degree parameter supplied by user.
  IF N_ELEMENTS(DEG) NE 1 THEN DEG = 1.0

	IF N_ELEMENTS(NAME) NE 1 THEN NAME = 'DEG'

;	===> Default output directory
	IF N_ELEMENTS(DIR_OUT) NE 1 THEN _DIR_OUT ='D:\IDL\IMAGES\' ELSE _DIR_OUT = DIR_OUT

	IF N_ELEMENTS(MAP) NE 1 THEN MAP = 'NEC'


	IF MAP EQ 'NEC' THEN BEGIN
		PX=1024
		PY=1024
		FILE_LANDMASK = 'D:\IDL\IMAGES\MASK_LAND-NEC-PXY_1024_1024.PNG'
	ENDIF

	IF MAP EQ 'GEQ' THEN BEGIN
		PX=1024
		PY=512
	ENDIF

	DEG = 1./6.

	DEG_TXT = STRTRIM(STRING(DEG,FORMAT='(F8.4)'),2)
	DEG_TXT = REPLACE(DEG_TXT,'.','_')

  IF N_ELEMENTS(FILE_LANDMASK) EQ 1 THEN LANDMASK = READALL(FILE_LANDMASK)


  SZ=SIZE(LANDMASK,/STRUCT)

;	===> Landmask provided ?
	IF SZ.N_DIMENSIONS NE 2 OR SZ.DIMENSIONS[0] NE PX OR SZ.DIMENSIONS[1] NE PY THEN LANDMASK = BYTARR(PX,PY)


	OCCUPIED = BYTARR(PX,PY)

	XY=IMAGE_PXPY(OCCUPIED, CENTER = 0,/DOUBLE ) ; center is zero so no missing pixels

  IMAGE = BYTARR(PX,PY)

	ZWIN,IMAGE
	CALL_PROCEDURE,'MAP_'+MAP
	XYZ = CONVERT_COORD(XY.X,XY.Y,/DEVICE,/TO_DATA,/DOUBLE)
	ZWIN
	LONS = REFORM(XYZ(0,*),PX,PY)
	LATS = REFORM(XYZ(1,*),PX,PY)


  PRINT,!MAP.LL_BOX
	minlat = FLOOR(!MAP.LL_BOX[0])
  minlon = FLOOR(!MAP.LL_BOX[1])
  maxlon = CEIL(!MAP.LL_BOX(3))
  maxlat = CEIL(!MAP.LL_BOX(2))

	LAT_BINS = INTERVAL([MINLAT,MAXLAT],DEG)
	LON_BINS = INTERVAL([MINLON,MAXLON],DEG)

	N_LON_BINS = N_ELEMENTS(LON_BINS)
	N_LAT_BINS = N_ELEMENTS(LAT_BINS)

 	STRUCT=REPLICATE(CREATE_STRUCT('LON','','LAT','','AROUND','0','SUBAREA_CODE','','SUBAREA_NAME','','NICKNAME',''),N_LON_BINS*N_LAT_BINS)


  NTH = 0L
  SUBAREA_CODE = 0L


;	LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
	FOR _LAT = 0L, N_LAT_BINS -1L DO BEGIN
			ALAT = LAT_BINS(_LAT)
			BLAT = LAT_BINS(_LAT)+DEG
			SUBS = WHERE(LATS GE ALAT AND LATS LT BLAT,COUNT_SUBS)
			IF COUNT_SUBS EQ 0 THEN CONTINUE ; >>>>>>>>>>>>

;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
		FOR _LON = 0L,N_LON_BINS -1L DO BEGIN
			ALON = LON_BINS(_LON)
			BLON = LON_BINS(_LON)+DEG

			OK=WHERE(LONS(SUBS) GE ALON AND LONS(SUBS) LT BLON AND LANDMASK(SUBS) NE 1 AND OCCUPIED(SUBS) EQ 0,COUNT)

			IF COUNT GE 1 THEN BEGIN
				SUBAREA_CODE = SUBAREA_CODE + 1
				STRUCT[NTH].SUBAREA_NAME = STRTRIM(FLOAT(ALON) + 0.5*DEG,2) +';'+ STRTRIM(FLOAT(ALAT) + 0.5*DEG,2)

				STRUCT[NTH].SUBAREA_CODE = STRTRIM(SUBAREA_CODE,2)
				STRUCT[NTH].LON = STRJOIN(STRTRIM(STRING(LONS(SUBS[OK]),FORMAT='(F10.6)'),2)+';')
  			STRUCT[NTH].LAT = STRJOIN(STRTRIM(STRING(LATS(SUBS[OK]),FORMAT='(F10.6)'),2)+';')
  			NTH=NTH+1L
  			OCCUPIED(SUBS[OK]) = 1
			ENDIF
		ENDFOR
	ENDFOR


  OK=WHERE(STRUCT.SUBAREA_CODE NE MISSINGS(STRUCT.SUBAREA_CODE))
  STRUCT=STRUCT[OK]

 ;NTH=0 & PRINT, STRUCT(NTH).SUBAREA_NAME & PRINT, MINMAX(FLOAT(WORDS(STRUCT(NTH).LON,DELIM=';',/NO_NULL))) & PRINT, MINMAX(FLOAT(WORDS(STRUCT(NTH).LAT,DELIM=';',/NO_NULL)))

 	SAVEFILE = _DIR_OUT + 'LATLON_SUBAREA-'+MAP+'-PXY_'+STRTRIM(PX,2)+'_'+STRTRIM(PY,2)+'-'+NAME+'_'+DEG_TXT+'.SAVE'
  SAVE,FILENAME=SAVEFILE,STRUCT,/COMPRESS

  CSVFILE = _DIR_OUT + 'LATLON_SUBAREA-'+MAP+'-PXY_'+STRTRIM(PX,2)+'_'+STRTRIM(PY,2)+'-'+NAME+'_'+DEG_TXT+'.CSV'
	STRUCT_2CSV,CSVFILE,STRUCT


	PNGFILE = _DIR_OUT + 'LATLON_SUBAREA-'+MAP+'-PXY_'+STRTRIM(PX,2)+'_'+STRTRIM(PY,2)+'-'+NAME+'_'+DEG_TXT+'.PNG'


;	===> Make a png illustrating all lon,lat sets by different colors
  NUM = 0L

	PAL_IDL31,R,G,B

  ZWIN,[PX,PY]
  CALL_PROCEDURE,'MAP_'+MAP
  PLOTGRAT,DEG,SYMSIZE=2,COLOR=255
  FOR NTH = 0L,N_ELEMENTS(STRUCT)-1L DO BEGIN
  	CENTER=WORDS(STRUCT[NTH].SUBAREA_NAME,/NO_NULL,DELIM=';')
  	PLOTS,CENTER[0],CENTER[1],PSYM=1,SYMSIZE=0.5,COLOR=(NTH+1)
  	LONS=FLOAT(WORDS(STRUCT[NTH].LON,/NO_NULL,DELIM=';'))
  	LATS=FLOAT(WORDS(STRUCT[NTH].LAT,/NO_NULL,DELIM=';'))
  	NUM=NUM+N_ELEMENTS(LATS)
  	COLOR = (NTH+1) *10
  	PLOTS,LONS,LATS,PSYM=3,COLOR= COLOR
  ENDFOR

  IM=TVRD()
  ZWIN
  WRITE_PNG,PNGFILE,IM,R,G,B

  PRINT, 'FOUND ',NUM,' OUT OF : ',ULONG(PX)*PY

	MM=MINMAX(OCCUPIED)
	IF MM[0] NE 1 OR MM[1] NE 1 THEN PRINT,'ERROR: Not all pixel positions are Occupied-Taken'



;	===> Now check that convert_coord will get all pixels when the LATLON_SUBAREAS save file is used by TS_SUBAREAS
  OCCUPIED(*,*) = 0

	ZWIN,[PX,PY]
	FOR NTH = 0L,N_ELEMENTS(STRUCT)-1L DO BEGIN
  		LONS = STRSPLIT(STRUCT[NTH].LON,';',/EXTRACT)
			LATS = STRSPLIT(STRUCT[NTH].LAT,';',/EXTRACT)
			COLOR = MAP_DEG2IMAGE(IMAGE, LONS,LATS,  X=X, Y=Y, AROUND= 0,SUBS=SUBS)
			OCCUPIED(X,Y)=1
  ENDFOR
  ZWIN

 OK=WHERE(OCCUPIED EQ 0,COUNT)
 IF COUNT GE 1 THEN BEGIN
 	PRINT,'ERROR: '+ STRTRIM(COUNT,2) + ' UNOCCUPIED PIXELS '
 ENDIF
	STOP





 END; #####################  End of Routine ################################
