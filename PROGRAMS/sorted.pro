; $ID:	SORTED.PRO,	2020-06-30-17,	USER-KJWH	$
; #########################################################################; 
FUNCTION SORTED,ARR,A=A,D=D,SUBS=SUBS,TAG = TAG,UNIQUE=UNIQUE
;+
; PURPOSE:  RETURNS ARRAYS IN ASCENDING OR DESCENDING SORTED ORDER USING IDL'S SORT FUNCTION
;
; CATEGORY: UTILITY;
;
; INPUTS: 
;       ARR..... ARRAY OF DATA VALUES
;
;
; KEYWORDS:
;       A..... SORT ARR IN ASCENDING ORDER
;       D..... SORT ARR IN DESCENDING ORDER
;       SUBS.. SUBSCRIPTS OF THE SORTED ARR
;       TAG... TAGNAME TO USE IN SORTING
;       UNIQUE. RETURN THE UNIQUE SORTED INFO
; OUTPUTS:
;       ARR..... IN SORTED ORDER
;       
;       
;; EXAMPLES:
;       PRINT,SORTED(INDGEN(9))
;       PRINT,SORTED(INDGEN(9),/D)
;       PRINT,SORTED(ALPHABET(),/D)
;       PRINT,SORTED(ALPHABET(),/D,/SUBS)
;       PRINT,SORTED([ALPHABET(),ALPHABET()])
;       PRINT,SORTED([ALPHABET(),ALPHABET()],/UNIQUE)
;       PRINT,SORTED([ALPHABET(),ALPHABET()],/UNIQUE,/SUBS)
;
; MODIFICATION HISTORY:
;     FEB 08, 2016  WRITTEN BY: J.E. O'REILLY
;     MAR 18, 2016 - JEOR: Added key TAG and associated logic
;     JAN 14, 2017 - JEOR: Added key UNIQUE
;     APR 02, 2017 - JEOR: Always return sorted arr [subscripts are output in key subs]
;     FEB 08, 2017 - KJWH: Added STRUPCASE(TAG)
;     JUN 30, 2020 - KJWH: Added COMPILE_OPT IDL2
;                          Changed (SUBS) to [SUBS]
;-

  ROUTINE_NAME  = 'SORTED'
  COMPILE_OPT IDL2

;===> ASCENDING ORDER TAKES PRECEDENCE
  IF NONE(A) AND NONE(D) THEN A = 1
  IF KEY(A) AND KEY(D) THEN A = 1
  IF NONE(ARR) THEN MESSAGE,'ERROR: ARR IS REQUIRED'
  IF IDLTYPE(ARR) EQ 'STRUCT' AND KEY(TAG) THEN BEGIN
    OK_TAG = WHERE(TAG_NAMES(ARR) EQ STRUPCASE(TAG),COUNT)
    IF COUNT NE 1 THEN MESSAGE,/INFORM,'ERROR: CAN NOT FIND TAG: ' + TAG
    IF KEY(A) THEN   SUBS = SORT(ARR.(OK_TAG))
    IF KEY(D) THEN   SUBS = REVERSE(SORT(ARR.(OK_TAG)))
    RETURN,ARR[SUBS]
  ENDIF;IF IDLTYPE(ARR) EQ 'STRUCT' AND KEY(TAG) THEN BEGIN
  
  
  IF KEY(A) THEN BEGIN  
    SUBS= SORT(ARR)
  ENDIF;IF KEY(A) THEN BEGIN
  
  IF KEY(D) THEN  BEGIN
    SUBS= REVERSE(SORT(ARR))
  ENDIF;IF KEY(D) THEN  BEGIN
    
  IF KEY(UNIQUE) THEN BEGIN  
   ARR=ARR[SUBS]
   S = UNIQ(ARR)
  ENDIF;IF KEY(UNIQUE) THEN BEGIN  
  
  RETURN,ARR[SUBS]

END; #####################  END OF ROUTINE ################################
