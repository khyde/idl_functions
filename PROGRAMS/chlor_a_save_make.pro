; $ID:	CHLOR_A_SAVE_MAKE.PRO,	2020-07-08-15,	USER-KJWH	$

	PRO CHLOR_A_SAVE_MAKE,DIR_IN=DIR_IN,DIR_OUT=DIR_OUT,DATE_RANGE=DATE_RANGE,CHL_ALGS=CHL_ALGS,PERIOD_CODE=PERIOD_CODE,MAP=MAP,SATELLITE=SATELLITE,OVERWRITE=OVERWRITE,REVERSE_FILES=REVERSE_FILES

;+
; NAME:
;		CHLOR_A_SAVE_MAKE
;
; PURPOSE:;
;		This procedure creates CHLOR_A from various algorithms
;
; CATEGORY:
;		CATEGORY
;
; CALLING SEQUENCE:
;
;		CHLOR_A_SAVE_MAKE, Parameter1, Parameter2
;
; INPUTS:
;		Parm1:	Describe the positional input parameters here. Note again that positional parameters are shown with Initial Caps.
;
; OPTIONAL INPUTS:
;		Parm2:	Describe optional inputs here. If you don't have any, just delete this section.
;
; KEYWORD PARAMETERS:
;		KEY1:	Document keyword parameters like this. Note that the keyword is shown in ALL CAPS!
;
;
; OUTPUTS:
;		This procedure creates CHLOR_A save files 
;
;	NOTES:
;
;
; MODIFICATION HISTORY:
;			Written Mar 22, 2010 by K.J.W.Hyde, 28 Tarzwell Drive, NMFS, NOAA 02882 (kimberly.hyde@noaa.gov)
;			Modified Mar 7, 2014 by K.J.W.Hyde - Added REVERSE_FILES keyword
;-
;	****************************************************************************************************
	ROUTINE_NAME = 'CHLOR_A_SAVE_MAKE'

;	===> Initialize ERROR to a null string. If errors are encountered ERROR will be set to a message.
;			 The calling routine can check error (e.g.IF ERROR NE 0 then there was a problem and do this or that)
	ERROR = ''
	SL = DELIMITER(/PATH)

  IF N_ELEMENTS(PERIOD_CODE) NE 1 THEN _PERIOD_CODE ='S'        ELSE _PERIOD_CODE=PERIOD_CODE
  IF N_ELEMENTS(CHL_ALGS)    GE 1 THEN _CHL_ALGS    = CHL_ALGS  ELSE _CHL_ALGS = 'PAN'
  IF N_ELEMENTS(SATELLITE)   EQ 1 THEN SAT          = SATELLITE ELSE SAT = ''
  IF N_ELEMENTS(DIR_IN)      LT 1 THEN STOP
  IF N_ELEMENTS(DIR_OUT)     LT 1 THEN DIR_OUT      = DIR_IN 
  IF KEYWORD_SET(OVERWRITE)       THEN _OVERWRITE   = 1         ELSE _OVERWRITE = 0
  
  FOR N=0, N_ELEMENTS(_CHL_ALGS)-1 DO IF FILE_TEST(DIR_OUT+'CHLOR_A-'+_CHL_ALGS(N)+SL) EQ 0 THEN FILE_MKDIR, DIR_OUT+'CHLOR_A-'+_CHL_ALGS(N)+SL
  
  IF SAT EQ '' THEN SAT = VALID_SENSORS(DIR_IN)
  IF SAT EQ '' THEN BEGIN
    PRINT, ERROR = 'Must provide valid SENSOR'
    RETURN
  ENDIF   
  
  IF SAT EQ 'SEAWIFS' THEN BEGIN
    FA_490= FILE_ALL(DIR_IN+'RRS_490'+SL+_PERIOD_CODE+'_*-RRS_490.SAV')  
    FA_555= FILE_ALL(DIR_IN+'RRS_555'+SL+_PERIOD_CODE+'_*-RRS_555.SAV')
    FA_670= FILE_ALL(DIR_IN+'RRS_670'+SL+_PERIOD_CODE+'_*-RRS_670.SAV')    
  ENDIF
  IF SAT EQ 'MODIS' THEN BEGIN
    FA_490= FILE_ALL(DIR_IN+'RRS_488'+SL+_PERIOD_CODE+'_*-RRS_488.SAV')  
    FA_555= FILE_ALL(DIR_IN+'RRS_547'+SL+_PERIOD_CODE+'_*-RRS_547.SAV')
    FA_670= FILE_ALL(DIR_IN+'RRS_667'+SL+_PERIOD_CODE+'_*-RRS_667.SAV')   
  ENDIF 
  
  IF FA_490[0].FULLNAME EQ '' OR FA_555[0].FULLNAME EQ '' OR FA_670[0].FULLNAME EQ '' THEN BEGIN
    PRINT, 'NEED RRS 490, 555 AND 670 SAVE FILES TO MAKE PAN CHLOR A'
    GOTO,DONE
  ENDIF
  
  IF N_ELEMENTS(DATE_RANGE) EQ 2 THEN BEGIN
    DATE_START=DATE_RANGE[0]
    DATE_END=DATE_RANGE[1]    
    OK_490= WHERE(FA_490.DATE_START GE DATE_START AND FA_490.DATE_END LE DATE_END,COUNT_490)
    IF COUNT_490 GE 1 THEN FA_490 = FA_490(OK_490)    
    OK_555= WHERE(FA_555.DATE_START GE DATE_START AND FA_555.DATE_END LE DATE_END,COUNT_555)
    IF COUNT_555 GE 1 THEN FA_555 = FA_555(OK_555)
    OK_670= WHERE(FA_670.DATE_START GE DATE_START AND FA_670.DATE_END LE DATE_END,COUNT_670)
    IF COUNT_670 GE 1 THEN FA_670 = FA_670(OK_670)    
    IF COUNT_490 EQ 0 OR COUNT_555 EQ 0 OR COUNT_670 EQ 0 THEN GOTO, DONE
  ENDIF
  
  IF N_ELEMENTS(MAP) NE 1 THEN MAP_OUT=FA_555[0].MAP ELSE MAP_OUT=MAP
  MAP_IN=FA_555[0].MAP
  MAPS_INFO=MAPS_SIZE(MAP_OUT)
  IF MAP_OUT NE MAP_IN THEN PX_OUT=MAPS_INFO.PX_OUT ELSE PX_OUT = MAPS_INFO.PX
  IF MAP_OUT NE MAP_IN THEN PY_OUT=MAPS_INFO.PY_OUT ELSE PY_OUT = MAPS_INFO.PY
  
  
  FILES = FA_490.FULLNAME
  IF KEYWORD_SET(REVERSE_FILES) THEN FILES = REVERSE(FILES)
  FOR _FILES = 0L,N_ELEMENTS(FA_490)-1L DO BEGIN
    AFILE_490=FILES(_FILES)
    OKF = WHERE(FA_490.FULLNAME EQ AFILE_490)
    ADATE = FA_490(OKF).DATE_START    
    PERIOD_TXT=FA_490(OKF).PERIOD

    SAVEFILE = FA_490(OKF).FIRST_NAME
    SAVEFILE = REPLACE(SAVEFILE,STRUPCASE(FA_490(OKF).PROD),STRUPCASE('CHLOR_A'))
    SAVEFILE = REPLACE(SAVEFILE,MAP_IN,MAP_OUT)

    SAVEFILES = DIR_OUT+'CHLOR_A-'+_CHL_ALGS+SL+SAVEFILE+'-'+_CHL_ALGS+'.SAV'
    FA_MTIME  = GET_MTIME(SAVEFILES)
    EXIST     = FILE_TEST(SAVEFILES)
    
;   ===> Get matching 555 for this day
    OK_555 = WHERE(FA_555.DATE_START EQ ADATE,COUNT_555)
    IF COUNT_555 NE 1 THEN CONTINUE
    AFILE_555 = FA_555(OK_555).FULLNAME

;   ===> Get matching 670 for this day
    OK_670 = WHERE(FA_670.DATE_START EQ ADATE,COUNT_670)
    IF COUNT_670 NE 1 THEN CONTINUE 
    AFILE_670 = FA_670(OK_670).FULLNAME

    MTIMES =GET_MTIME([AFILE_490,AFILE_555,AFILE_670])
            
    IF TOTAL(EXIST) EQ N_ELEMENTS(_CHL_ALGS) AND _OVERWRITE EQ 0 AND MIN(FA_MTIME) GT MAX(MTIMES) THEN CONTINUE

;   ===> Read the 490 file
    DATA_490=STRUCT_READ(AFILE_490,STRUCT=STRUCT_490)
    DATA_555=STRUCT_READ(AFILE_555,STRUCT=STRUCT_555)
    DATA_670=STRUCT_READ(AFILE_670,STRUCT=STRUCT_670)
    MISSING=MISSINGS(DATA_555)
    
    
;   ***** LOOP THROUGH ALGORITHMS *****
    FOR NTH = 0L, N_ELEMENTS(_CHL_ALGS)-1 DO BEGIN
      CHL_ALG = _CHL_ALGS[NTH]
      SAVEFILE = SAVEFILES[NTH]
      IF FILE_TEST(SAVEFILE) EQ 1 AND FA_MTIME[NTH] GT MAX(MTIMES) AND _OVERWRITE EQ 0 THEN CONTINUE

      IF CHL_ALG EQ 'PAN' THEN BEGIN        
        IF SAT EQ 'SEAWIFS' THEN CHL = CHLOR_A_PAN(RRS490=DATA_490, RRS555=DATA_555, RRS670=DATA_670, MISSING=missing, SATELLITE='SEAWIFS')
        IF SAT EQ 'MODIS'   THEN CHL = CHLOR_A_PAN(RRS488=DATA_490, RRS547=DATA_555, RRS667=DATA_670, MISSING=missing, SATELLITE='MODIS')  
        INFILE=[AFILE_490,AFILE_555,AFILE_670]        
      ENDIF
      IF CHL EQ [] THEN CONTINUE
      STRUCT_WRITE,POC, FILE=SAVEFILE, DATA_UNITS=UNITS('CHLOR_A'), INFILE=INFILE, ALG=CHL_ALG, PROD='CHLOR_A', $
        METHOD=STRUCT_490.METHOD, SATELLITE=STRUCT_490.SATELLITE, SENSOR=STRUCT_490.SENSOR, COVERAGE=STRUCT_490.COVERAGE

    ENDFOR    
    GONE,DATA_490
    GONE,DATA_555
    GONE,DATA_670
    GONE,STRUCT
   ENDFOR
   DONE:




	END; #####################  End of Routine ################################
