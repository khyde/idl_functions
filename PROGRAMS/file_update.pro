; $ID:	FILE_UPDATE.PRO,	2020-06-30-17,	USER-KJWH	$
;####################################################################### 
PRO FILE_UPDATE, TARGETS, DIR_OUT, DAYS=DAYS,QUIET=QUIET,LOGFILE=LOGFILE
;+
;	THIS PROGRAM COPIES AND UPDATES FILES FROM DIR_SOURCE TO DISK_DESTINATION
; A FILTER MAY BE USED (E.G. FILTER='*.PRO') TO SPECIFY A SUB SELECTION OF FILES TO COPY OR UPDATE

; NOTE, THAT FILES MATCHING FILTER IN SUBDIRECTORIES OF DIR_SOURCE WILL ALSO BE COPIED/UPDATED
; EXAMPLES:
;		FILE_UPDATE,'D:\IDL\PROGRAMS\*.PRO','Z:\IDL\PROGRAMS\'
; 	FILE_UPDATE,'D:\IDL\DATA\*.SAVE','Z:\IDL\DATA\'
; 	FILE_UPDATE,'D:\IDL\DATA\*.CSV','Z:\IDL\DATA\'
;		FILE_UPDATE,'Z:\IDL\PROGRAMS\*.PRO','D:\IDL\PROGRAMS\'
;		FILE_UPDATE,'D:\IDL\PROGRAMS\*.PRO','A:\',DAYS=1
;   FILE_UPDATE,'C:\IDL\PROGRAMS\*.PRO',GET_STICK() +'PROGRAMS\', DAYS=30
;   FILE_UPDATE,'F:\REFERENCES\*.*', 'D:\REFERENCES\'
;
; HISTORY:
;		MAY 20, 2003 WRITTEN BY:	J.E. O'REILLY, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;		DEC 1,2004 JOR THERE APPEARS TO BE AN OFFSET OF 2 UNITS OR SO TO MTIME AFTER COPYING FILES FROM HARD TO CD ... SO ADDING A SLOP FACTOR TO MTIME
;		JAN 19,2005 TD WRITE AND DELETE JUNK_LOG TO THE DIR_OUT FOLDER IF NO FILES NEED TO BE COPIED, JUST TO TIME STAMP THE FOLDER
;		JAN 18,2006 JOR STREAMLINED PROGRAM
;		NOV 8,2013,JOR CHANGED LIST TO PLIST ADDED PFILE
;		MAR 16,2014,JORFIXED BUG IN COPY CONCATENATION BY:
;		                     COPY = FN.NAME+FN.EXT_DELIM+FN.EXT
;                        COPY = REPLICATE(DIR_OUT,N_ELEMENTS(COPY))+COPY
;   OCT 10, 2017 - KJWH: Added DIR_TEST, DIR_OUT
;                        Changed FILE_COPY, SOURCE[OK],COPY[OK],/OVERWRITE,/VERBOSE   to FILE_COPY, SOURCE[OK],DIR_OUT,/OVERWRITE,/VERBOSE because it was causing a copying error         
;                        Updated formatting and documentation and streamlined a few steps
;####################################################################### 
;-
; ************************
ROUTINE_NAME='FILE_UPDATE'
; ************************

  IF N_ELEMENTS(TARGETS) LT 1 OR N_ELEMENTS(DIR_OUT) LT 1 THEN BEGIN
		PRINT,'ERROR: MUST PROVIDE FILES AND DESTINATION'
  	GOTO, DONE
	ENDIF
  
  ATARGET = TARGETS[0]
  FN=FILE_PARSE(ATARGET)
  DIR_IN = FN.DIR
  DIR_TEST, DIR_OUT
	
; ===> CHECK FOR ASTERISK IN TARGETS
  OK=WHERE(STRPOS(TARGETS,'*') NE -1,COUNT)
  IF COUNT GE 1 THEN SOURCE = FILE_SEARCH(TARGETS) ELSE SOURCE = TARGETS

; ===> CHECK THAT FILES EXIST
  SOURCE = SOURCE[WHERE(FILE_TEST(SOURCE) EQ 1,COUNT,/NULL)]
  IF COUNT EQ 0 THEN BEGIN
    PRINT,'ERROR: FILES DO NOT EXIST'
    GOTO, DONE
  ENDIF

;	===> SUBSET THE SOURCE FILES
	IF N_ELEMENTS(DAYS) EQ 1 THEN SOURCE=DATE_FILES(SOURCE,DAYS=DAYS)	
	IF SOURCE EQ [] THEN BEGIN
  	PRINT,'ERROR: NO FILES FOUND MATCHING TARGETS: '+TARGETS
  	GOTO, DONE
  ENDIF

; ===> GET THE FILE INFO OF THE SOURCE FILES
  FI_SOURCE=FILE_INFO(SOURCE)
  OK=WHERE(FI_SOURCE.SIZE GT 0 AND FI_SOURCE.DIRECTORY EQ 0,COUNT,COMPLEMENT=COMPLEMENT,NCOMPLEMENT=NCOMPLEMENT)

; ===> FIND FILES WITH SIZE GT ZERO AND NOT DIRECTORIES
	IF COUNT GE 1 THEN BEGIN
		SOURCE = SOURCE[OK]
 		FI_SOURCE = FI_SOURCE[OK]
 		IF NOT KEYWORD_SET(QUIET) AND NCOMPLEMENT GE 1 THEN PLIST,SOURCE(COMPLEMENT),NOTES='ZERO SIZE FILES:',/NOHEAD
	ENDIF ELSE BEGIN
		PRINT,'ERROR: NO FILES FOUND'
		GOTO, DONE
	ENDELSE

; ===> PARSE FILE NAMES, CREATE OUTPUT FILENAMES AND GET MTIMES
	FN = FILE_PARSE(SOURCE)
	COPY = DIR_OUT + FN.NAME_EXT
  FI_COPY   = FILE_INFO(COPY)

;	===> FIND FILES TO COPY TO DIR_OUT IF THEY ARE MISSING OR NEED UPDATING
 	OK = WHERE(FI_COPY.SIZE EQ 0 OR (FI_SOURCE.MTIME GT FI_COPY.MTIME),COUNT)
  IF COUNT GE 1 THEN BEGIN
  	IF KEYWORD_SET(LOGFILE) THEN BEGIN
  	  PLIST,' COPYING FOLLOWING FILES TO '+DIR_OUT+' :',/NOSEQ,FILE=LOGFILE
  		PLIST,COPY[OK],/NOSEQ,FILE=LOGFILE,/NOHEAD
  	ENDIF

 	  CATCH, ERROR_STATUS
  	IF ERROR_STATUS NE 0 THEN BEGIN
      PRINT, 'ERROR MESSAGE: ', !ERROR_STATE.MSG
      REPORT, STRTRIM(!ERROR_STATE.CODE,2) +';'+!ERROR_STATE.MSG
      REPORT, SOURCE[OK]

;			 'TYPE CONVERSION ERROR: UNABLE TO CONVERT GIVEN STRING TO LONG.'
			IF !ERROR_STATE.CODE EQ -104 THEN  STOP ; CATCH,ERROR_STATUS, /CANCEL ;

;			CHANGE PROTECTIONS ON THE SOURCE AND DEST FILES
      IF !ERROR_STATE.CODE EQ  -310 OR !ERROR_STATE.CODE EQ  -311 THEN BEGIN
        FILE_CHMOD,SOURCE[OK],/A_EXECUTE,/A_READ,/A_WRITE,/NOEXPAND_PATH;
        FILE_CHMOD,COPY[OK],	/A_EXECUTE,/A_READ,/A_WRITE,/NOEXPAND_PATH;
      ENDIF
      CATCH,ERROR_STATUS, /CANCEL
      GOTO, DONE
   ENDIF

    PRINT, 'UPDATING ' + ROUNDS(N_ELEMENTS(OK)) + ' FILES TO ' + DIR_OUT
    FILE_COPY, SOURCE[OK],DIR_OUT,/OVERWRITE,/VERBOSE  
    IF NOT KEYWORD_SET(QUIET) THEN PLIST,SOURCE[OK],NOTES=' UPDATING FILES ON '+DIR_OUT,/NOHEAD

  ENDIF ELSE BEGIN

  	IF NOT KEYWORD_SET(QUIET) THEN PRINT, 'ALL FILES ON: '+ DIR_OUT +' ARE ALREADY UP-TO-DATE'

		IF KEYWORD_SET(LOGFILE)  THEN BEGIN
			  PLIST, 'ALL FILES IN: '+ DIR_OUT +' ARE UP-TO-DATE',/NOSEQ,FILE=LOGFILE,/NOHEAD
			  PLIST,DATE_NOW(),/NOSEQ,FILE=LOGFILE,/NOHEAD
			ENDIF ;IF KEYWORD_SET(LOGFILE)  THEN BEGIN
		ENDELSE


DONE:

END; #####################  END OF ROUTINE ################################
