; $ID:	IMGR.PRO,	2020-06-03-17,	USER-KJWH	$
;+
; ############################################################################################################# 
  PRO IMGR,INPUT,PROD=PROD,TITLE=TITLE,TAG=TAG,MAP=MAP,COAST_ONLY=COAST_ONLY,$
           EDIT=EDIT,VSTAG=VSTAG,COMMA=COMMA,PNG=PNG,PAL=PAL,DELAY=DELAY,$
           BUFFER=BUFFER,VERBOSE=VERBOSE,BIT_DEPTH=BIT_DEPTH,NO_CB=NO_CB,$
           LOG=LOG,OBJ=OBJ,BYT=BYT,NO_CLOSE=NO_CLOSE,CB_FONT_SIZE=CB_FONT_SIZE,PCT=PCT

;  PURPOSE:  DISPLAY SATELLITE IMAGE DATA WITH MINIMAL USER INPUT

; CATEGORY: IMG

; INPUTS:   INPUT... A FILE NAME, A STRUCTURE CONTAINING A 2D-ARRAY, OR A 2-D NUMERIC ARRAY 
;                 [IF NONE PROVIDED THEN PROGRAM PROMPTS FOR A FILE]
; 
; EXAMPLES:
;          IMGR,BINDGEN([16,16])
;          IMGR,BINDGEN([16,16]),TITLE = 'TEST' 
;          IMGR,BINDGEN([16,16]),TITLE = 'TEST',DELAY = 10
;          IMGR,BINDGEN([16,16]),TITLE = 'TEST',DELAY = 10,/VSTAG
;          IMGR,BINDGEN([16,16]),TITLE = 'TEST',DELAY = 0,/VSTAG,/PNG,/VERBOSE
;          IMGR,BINDGEN([16,16]),DELAY = 0,/VSTAG,PROD = 'NUM',/PNG,/VERBOSE
;          
;          
;          
; KEYWORDS:
;          PROD....... STANDARD PRODUCT NAME [OPTIONAL- 
;              ....... [IF NOT PROVIDED THEN DATA WILL BE SCALED TO ITS RANGE]
;                  
;          TAG........ THE TAG TO EXTRACT FROM THE STRUCTURE [OPTIONAL]
;          MAP........ STANDARD MAP NAME [OPTIONAL]
;          COAST_ONLY. ONLY ADD THE COASTLINE AND NOT THE LAND MASK [OPTIONAL]
;          PNG........ WRITE A PNG [OPTIONAL]
;          EDIT....... EDIT THE IMAGE USING THE WINDOW'S ANNOTATION GRAPHIC FEATURES
;                      [WHEN YOU RESUME THE EDITS WILL BE SAVED IF PNG IS SET]
;          VSTAG...... VERTICALLY STAGGER THE TICKNAMES ON THE COLORBAR TO ENHANCE LEGABILITY
;          COMMA.....  ADD COMMAS TO LARGE NUMBERS IN THE COLORBAR
;          PNG.......  = 1 OR THE FULL PATH AND NAME FOR THE OUTPUT PNG
;          PAL........ NAME OF PALETTE TO USE
;          DELAY...... SECONDS TO DELAY CLOSING OF DISPLAY
;          TITLE...... TITLE FOR THE PLOT WINDOW
;          VERBOSE.... PRINT PROGRAM PROGRESS
;          BUFFER..... SEE WINDOW FUNCTION
;          BIT_DEPTH.. SEE SAVE FUNCTION
;          NO_CB...... NO COLORBAR
;          LOG........ PLOT THE DATA ON A LOG SCALE
;          OBJ........ THE IMAGE OBJECT CREATED BY THIS PROGRAM [OUTPUT]
;          BYT........ THE BYT IMAGE CREATED BY THIS PROGRAM [OUTPUT]
;          NO_CLOSE... DO NOT CLOSE THE IMG OBJECT [SO THE OBJ PERSISTS AND MAY BE USED BY THE ROUTINE CALLING IMGR]
;          CB_FONT_SIZE COLORBAR FONT SIZE [DEFAULT = 12]
;          PCT........ PERCENT TO USE IN STATS_TRIM TO SYMMETRICALLY TRIM LOWEST AND HIGHEST INPUT VALUES [BEFORE COMPUTING THE RANGE]
;                 
; 
; MODIFICATION HISTORY:
;     MAR 14, 2015  WRITTEN BY: J.E. O'REILLY
;     MAR 16, 2015 - JOR:  FIXED IN WAS GETTING CORRUPTED [CHANGED TO FILE]
;                          FILE = S.TYPE_NAME + '-DATA_ARRAY_PXY_' + ROUNDS(S.PX) + '_'+ ROUNDS(S.PY)
;                          ADDED KEY PNGFILE
;     MAR 17, 2015 - KJWH: ADDED DELAY KEYWORD
;     APR 02, 2015 - JOR:  ADDED KEY TITLE
;     SEP 13, 2015 - JOR:  CHANGED IS2D TO IS_2D
;     SEP 23, 2015 - KJWH: CHANGED IN TO INPUT TO AVOID IDL CONFLICTS
;     OCT 29, 2015 - JEOR: ADDED KEY VERBOSE
;     NOV 23, 2015 - JEOR: IF NONE(BIT_DEPTH) THEN BIT_DEPTH = 1
;     DEC 10, 2015 - JEOR: IF NONE(COMMA) THEN COMMA = 1
;                          ADDED PAL TO PRODS_COLORBAR
;     DEC 22, 2015 - JEOR: ADDED IMG KEYWORD
;     DEC 23, 2015 - JEOR ADDED KEY NO_CB
;     JAN 01, 2016 - JEOR: IF PROD EQ 'DEPTH' THEN BEGIN
;                          IF NONE(PROD) THEN PROD = []
;     JAN 03, 2016 - JEOR: FIXED PROBLEM WITH LANDMASKS WHEN PX,PY ARE NON STANDARD SIZES:
;                          M = READ_LANDMASK(MAP=MAP,PX=PX,PY=PY,/STRUCT)
;     JAN 05, 2016 - JEOR: ADDED KEY BYT TO RETURN THE BYTE IMAGE MADE BY IMGR
;     JAN 07, 2016 - KJWH: CHANGED VALID_MAPS AND VALID_PRODS TO VALIDS()
;     JAN 09, 2016 - JEOR: IF (KEY(MAP) OR KEY(COAST)) AND PROD NE 'TOPO' THEN BEGIN
;     MAR 24, 2016 - KJWH: CORRECTED READ_LANDMASK CALL
;     MAR 28, 2016 - KWJH: UPDATED LANDMASK INFO
;                          ADDED KEYWORD LOG AND IF NONE, THEN DERIVE "LOG" INFORMATION FROM PRODS_READ
;                          FORMATTING
;     APR 06, 2016 - JEOR: ;===> PREVENT PROBLEMS WITH SCIENTIFIC (EXPONENTIAL) NOTATION [E.G  3.67E+006 ]
;                           BY USING NICE_RANGE WITH ROUNDS
;                           T = ROUNDS(NICE_RANGE(T))  
;     JUL 09, 2016 - JEOR: IF T[0] EQ 0 AND T[1] EQ 0 THEN BEGIN
;     JUL 15, 2016 - JEOR: CHANGED KEY PNGFILE TO PNG
;                          IF IDLTYPE(PNG) NE 'STRING' THEN PNG = !S.IDL_TEMP + ROUTINE_NAME + '.PNG'
;                          ADDED EXAMPLES
;     NOV 13, 2016 - JEOR: ADDED KEYWORD PCT 
;                          DEFAULT IS TO TRIM LOWEST AND HIGHEST VALUES BEFORE DETERMINING THE SCALING RANGE
;     NOV 14, 2016 - JEOR: ADDED name & PROD TO PNG NAME:
;                          IF IS_FILE(PNG) EQ 0 THEN PNG = !S.IDL_TEMP + ROUTINE + '-' + NAME  +'-' + PROD +'.PNG'
;     FEB 20, 2017 - JEOR: Removed TAG=TAG from call to colorbar
;     FEB 21, 2017 - KJWH: Added IF PRODS_READ(PROD) EQ [] THEN PROD = [] as a work around for when there is an invalid PROD
;     FEB 28, 2018 - JEOR: Updated default delay to 15 seconds: IF NONE(DELAY) THEN DELAY = 15 ; WAIT 15 SECONDS BEFORE CLOSING
;     MAR 02, 2018 - JEOR: Removed  IF PRODS_READ(PROD) EQ [] THEN PROD = []
;     MAR 06, 2018 - KJWH: Updated formatting
;
; ########################################################################################################################
;-
;******************
  ROUTINE  = 'IMGR'
;******************
;
;===> DEFAULTS
  IF NONE(DELAY)    THEN DELAY = 8 ; WAIT 15 SECONDS BEFORE CLOSING
  IF NONE(PROD)     THEN PROD = []
  IF NONE(LOG)      THEN PR = PRODS_READ(PROD,LOG=LOG)
  IF NONE(PAL)      THEN PAL='PAL_DEFAULT'
  IF NONE(NO_CLOSE) THEN NO_CLOSE = 0
  IF NO_CLOSE EQ 1 AND NONE(BUFFER) THEN BUFFER = 1
  
  RGB_TABLE = RGBS([0,255],PAL=PAL)
  BACKGROUND_COLOR = RGBS(254)
  LAND_COLOR  = 253
  COAST_COLOR = 0
  MISS_COLOR  = 254
  RES = 600; FOR PNG 

;====> COLORBAR
  POS_COLORBAR = [0.250000,0.85000,0.750000,0.87]
  IF NONE(CB_FONT_SIZE) THEN CB_FONT_SIZE = 12 
  DECIMALS = 3
  IF NONE(VSTAG) THEN VSTAG = 1 ; [DEFAULT IS BEST WHEN AUTO SCALING DATA BY THEIR RANGE]
  IF NONE(BIT_DEPTH) THEN BIT_DEPTH = 1
  IF NONE(COMMA) THEN COMMA = 1
;||||||||||||||||||||||||||||||||||||||||||||||

  TYPE = IDLTYPE(INPUT)
; ===> DETERMINE THE INPUT DATA TYPE 
  CASE (TYPE) OF
    'UNDEFINED': BEGIN ; NO INPUT SO GET A FILE
       FILE = DIALOG_PICKFILE(TITLE = 'SELECT A FILE TO READ', FILTER = '*'+['SAV','.SAVE','.NC'], /MUST_EXIST, /READ)
       NAME = (FILE_PARSE(FILE)).NAME
       MAP  =  VALIDS('MAPS',NAME)
       PROD =  VALIDS('PRODS',NAME)
    END ; 'UNDEFINED'
    
    'STRING': BEGIN ; IN IS A FILE 
      EXT  = STRUPCASE((FILE_PARSE(INPUT)).EXT)
      NAME = (FILE_PARSE(INPUT)).NAME
      MAP  = VALIDS('MAPS',NAME)
      PROD = VALIDS('PRODS',NAME) 
    END;'STRING'
    
    'STRUCT': BEGIN
     EXT = '' ; NO FILE [INPUT IS A STRUCT]
     NAME = 'STRUCT'
    END;'STRUCT'
   
    ELSE: BEGIN 
      IF IDLTYPE(INPUT,/NUMERIC)  AND IS_2D(INPUT) THEN BEGIN ; ===> SEE IF IN IS A 2-D NUMERIC ARRAY
        DATA = INPUT
        S    = SIZEXYZ(DATA, PX=PX, PY=PY)
        NAME = S.TYPE_NAME + '-DATA_ARRAY_PXY_' + ROUNDS(S.PX) + '_'+ ROUNDS(S.PY) ; ===> MAKE  A SUITABLE FILE NAME FROM THE ARRAY [FOR SUBSEQUENT PARSING OF IN IF PNG IS SET]
        TAG  ='DATA'
        EXT  = 'DAT'
      ENDIF ELSE BEGIN
        MESSAGE,'ERROR: IN MUST BE A FILE A STRUCT, OR A 2-D NUMERIC ARRAY'
      ENDELSE ;IF IDLTYPE(IN,/NUMERIC)AND IS2D(IN) THEN BEGIN     
    END
  ENDCASE ; CASE(TYPE) OF


; ===> READ DATA BASED ON THE EXTENSION
  CASE (STRMID(EXT,0,3)) OF
    'NC': BEGIN
      S = READ_NC(IN)
      IF IDLTYPE(S) NE 'STRUCT' THEN MESSAGE,'ERROR: IN IS NOT A STRUCT'
      DATA = STRUCT_GET(S,TAG=TAG)
    END ; 'NC'
    
    'SAV': DATA = STRUCT_READ(IN,TAG=TAG)     
    ''   : DATA = STRUCT_GET(IN)
    'DAT': DATA = DATA 
    ELSE: MESSAGE,'ERROR: PROBLEM PARSING EXT'
  ENDCASE ; CASE (STRMID(EXT,0,3)) OF


; ===>  SPECIAL CASES
  IF PROD EQ 'TOPO' THEN IF NONE(PAL) THEN PAL = 'PAL_TOPO'
  IF PROD EQ 'DEPTH' THEN BEGIN
    DATA = -DATA
    IF NONE(PAL) THEN PAL = 'PAL_BATHY' 
  ENDIF;IF PROD EQ 'DEPTH' THEN BEGIN


; ===> SCALE THE DATA TO BYTES 
  IF NONE(PROD) THEN BEGIN ; ===> IF NO PROD THEN SCALE THE DATA TO ITS RANGE
    T = ROUNDS(RANGE(DATA),DECIMALS,/SIG) 
    IF KEY(LOG) AND MIN(FLOAT(T)) EQ 0.0 THEN T[0] = 0.001 ; IF LOG = 1, MAKE MIN RANGE GT 0.0
    ;===> PREVENT PROBLEMS WITH SCIENTIFIC (EXPONENTIAL) NOTATION [E.G  3.67E+006 ]
;          BY USING NICE_RANGE WITH ROUNDS 
    T = ROUNDS(NICE_RANGE(T))
    ;===> IF RANGE OF T IS ZERO THEN MAKE RANGE OF T NON-ZERO BUT VERY SMALL
    IF T[0] EQ 0 AND T[1] EQ 0 THEN BEGIN
      T[0] = -SMALLNUM()
      T[1] = SMALLNUM()
    ENDIF;IF T[0] EQ 0 AND T[1] EQ 0 THEN BEGIN
    PROD = 'DATA_' + T[0] + '_'+ T[1]    
  ENDIF ; IF NONE(PROD) THEN BEGIN

; ===> FIND MISSING DATA BEFORE CONVERTING DATA TO BYTES
  MISS = WHERE(FINITE(DATA) EQ 0,COUNT_MISS)
  
  ;===> TRIM LOWEST AND HIGHEST VALUES
  IF KEY(PCT) THEN DATA = STATS_TRIM(DATA,PCT=PCT)

; ===> SCALE DATA TO BYTES BASED ON THE PROD 
  BYT = PRODS_2BYTE(DATA, PROD=PROD, LOG=LOG)

; ===> CHANGE "MISSING" PIXELS IN BYT TO MISS_COLOR 
  IF COUNT_MISS GE 1 THEN BYT(MISS) = MISS_COLOR

; ===> ADD THE LANDMASK TO THIS IMAGE  
  IF (KEY(MAP) OR KEY(COAST)) AND PROD NE 'TOPO' THEN BEGIN
    M = READ_LANDMASK(MAP,PX=PX,PY=PY,/STRUCT) 
    IF IDLTYPE(M) EQ 'STRUCT' THEN BEGIN
      LAND = M.LAND & OCEAN = M.OCEAN & COAST = M.COAST
      IF NOT KEY(COAST_ONLY) AND ANY(LAND) THEN BYT(LAND)= LAND_COLOR
      IF ANY(COAST) AND FIRST(COAST) NE -1 THEN BYT(COAST)= COAST_COLOR
    ENDIF ; IF IDLTYPE(M) EQ 'STRUCT' THEN BEGIN
  ENDIF ; IF (KEY(MAP) OR KEY(COAST)) AND PROD NE 'TOPO' THEN BEGIN

; ===> PASS BYT TO POSITIONS TO GET IM_POS AND CB_POS
  POS =POSITIONS(CB_POS,OBJ=BYT,ASPECT=ASPECT,_EXTRA=_EXTRA)

; ===> OPEN GRAPHICS WINDOW
  W  = WINDOW(DIMENSIONS=POS.DIMENSIONS,WINDOW_TITLE=TITLE,BUFFER=BUFFER)

; ===> CREATE IMAGE
  IMG = IMAGE(BYT, RGB_TABLE=RGB_TABLE, BACKGROUND_COLOR=BACKGROUND_COLOR, POSITION=POS.IM_POS, DIMENSIONS=POS.DIMENSIONS, IMAGE_LOCATION=POS.IMAGE_LOCATION, MARGIN=0, /CURRENT)

; ===> ADD A COLORBAR
  IF NOT KEY(NO_CB) THEN PRODS_COLORBAR, PROD, IMG=IMG, LOG=LOG, ORIENTATION=0, COMMA=COMMA, TITLE=TITLE, FONT_SIZE=CB_FONT_SIZE, POSITION=POS_COLORBAR, TEXTPOS=1, TICKDIR=POS.TICKDIR, VSTAG=VSTAG, PAL=PAL
  
; ===> STOP TO MANUALLY EDIT THE IMAGE
  IF KEY(EDIT) THEN STOP

; ===> WRITE A PNG 
  IF KEY(PNG) THEN BEGIN 
    IF IS_FILE(PNG) EQ 0 THEN PNG = !S.IDL_TEMP + ROUTINE + '-' + NAME  +'-' + PROD +'.PNG'
    IF (FILE_PARSE(PNG)).EXT EQ '' THEN PNG = PNG + '.PNG'    ; ===> MAKE SURE FILE HAS AN EXTENSION, IF NOT THEN MAKE IT PNG
    IF (FILE_PARSE(PNG)).DIR EQ '' THEN PNG = !S.IDL_TEMP +PNG    ; ===> MAKE SURE PNG HAS A DIRECTORY, IF NOT THEN MAKE IT !S.IDL_TEMP
    SZ = SIZEXYZ(BYT,PX=WIDTH,PY=HEIGHT)                                  ; ===> GET WIDTH & HEIGHT OF BYT FOR IMG.SAVE                  
    IMG.SAVE, PNG, APPEND=APPEND, CLOSE=CLOSE, RESOLUTION=RES, WIDTH=WIDTH, HEIGHT=HEIGHT, BORDER=BORDER, /BITMAP, BIT_DEPTH=BIT_DEPTH, OUTFILE = PNGFILE
    IF KEY(VERBOSE) THEN PFILE,PNG
  ENDIF;IF KEY(PNG) THEN BEGIN

; ===> COPY IMG OBJECT INTO OBJ TO PASSOUT AS A KEYWORD
  OBJ = IMG

; ===> WAIT A FEW SECONDS TO VIEW, THEN CLOSE THE OBJECT
  WAIT, DELAY
  IF KEY(NO_CLOSE) EQ 0 THEN IMG.CLOSE
 
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
END; #####################  END OF ROUTINE ################################
