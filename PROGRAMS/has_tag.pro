; $ID:	HAS_TAG.PRO,	2020-04-14-13,	USER-KJWH	$
;+
;;#############################################################################################################
	FUNCTION HAS_TAG,STRUCT,TAG,LOOK = LOOK
;
;
; PURPOSE: THIS LOGICAL FUNCTION FINDS RETURNS A 1 OR 0 IF THE TAG IS PRESENT IN THE STRUCT
;  
; CATEGORY:	LOGICAL		 
;
; CALLING SEQUENCE: RESULT = HAS_TAG(STRUCT,TAG)
;
;INPUTS: STRUCT A STRUCTURE
;         TAG: TARGET TAGNAME [STRING] TO FIND 
;         [NOTE TAG MAY BE A COMPOUND NAME LIKE 'CHLOR_A.IMAGE']

; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;         LOOK..... LIST ALL THE TAGS IN THE STRUCTURE
;        

; OUTPUTS: THE DATA/INFO IN THE TAG
;		
; EXAMPLES:
;  DB = GET_LME_DB() & P, HAS_TAG(DB,/LOOK)
;  DB = GET_LME_DB() & P, HAS_TAG(DB,'MAP'); = 1
;  DB = MAPS_READ() & P, HAS_TAG(DB,'MAP'); = 1
;  DB = MAPS_READ() & P, HAS_TAG(DB,'PERIOD'); = 1
;  DB = MAPS_READ() & P, HAS_TAG(DB,'PER'); = 0 
;  DB = PRODS_READ() & P, HAS_TAG(DB,'PROD'); = 1
;  P,HAS_TAG(CREATE_STRUCT('DATA',INDGEN(9),'JUNK','JUNK'),'DATA'); = 1
;  FILE = FLS(!S.FILES + 'S_2009*MODISA-1KM*L2.nc') & SD = READ_NC(FILE) &  P,HAS_TAG(SD,'CHLOR_A.IMAGE')
;	NOTES: 
;
; MODIFICATION HISTORY:
;			WRITTEN MAR 5,2015 J.O'REILLY ADAPTED FROM GET_TAG
;			AUG 06,2015,JOR:OK = WHERE(TAGNAMES EQ STRUPCASE(TAG),COUNT_TAG)
;     NOV 15,2015,JOR OVERHAULED: NOW USING FANNING'S GET_TAGS
;     NOV 16,2015,JOR:IF COUNT EQ 0 THEN OK = WHERE_STRING(T,TAG,COUNT)
;     NOV 17,2015, JOR ADDED LOOK, TEST FOR COMPOUND TAG

;#################################################################################
;-
;*************************
ROUTINE_NAME  = 'HAS_TAG'
;*************************
;===> DEFAULTS
SPECIAL_TAGS =['IMAGE','DATA','MEAN','ARRAY']
IF IDLTYPE(STRUCT) NE 'STRUCT' THEN RETURN,0
;===> GET ALL THE TAGS
T = GET_TAGS(STRUCT)

;**********************
IF KEY(LOOK) THEN BEGIN
;**********************
  PLIST,T
  GOTO,DONE
ENDIF;IF KEY(LOOK) THEN BEGIN
;||||||||||||||||||||||||||||


IF IDLTYPE(TAG)    NE 'STRING' THEN MESSAGE,'ERROR: NAME MUST BE A STRING'

;===> IS TAG COMPOUND?
P = REPLACE(TAG,'.','.',COUNT=COMPOUND)
OK = WHERE_IN(SPECIAL_TAGS,TAG,SPECIAL)
;===> GET_TAGS RETURNS THE TAG NAMES WITH DOTS SO PREFIX OUR TAG WITH A DOT
TAG_ = '.'+ STRUPCASE(TAG)

OK = WHERE_IN(T,TAG_,COUNT)
;===> IF TAG IS COMPOUND OR SPECIAL AND COUNT IS ZERO  
;     THEN TRY AGAIN USING WHERE_STRING
IF (COMPOUND OR SPECIAL) AND COUNT EQ 0 THEN BEGIN
  OK = WHERE_STRING(T,TAG_,COUNT)
ENDIF;IF (COMPOUND OR SPECIAL) AND COUNT EQ 0 THEN BEGIN

IF COUNT GE 1 THEN RETURN,1 ELSE RETURN,0

 
DONE:          
	END; #####################  END OF ROUTINE ################################
