; $ID:	IDLTYPE.PRO,	MAY 03,2013 	$
;#####################################################################################################             
  FUNCTION IDLTYPE, VARIABLE, CODE=CODE, NBYTES=NBYTES, NAME=NAME, NUMERIC=NUMERIC, INTEGER=INTEGER
;+
; NAME:
; IDLTYPE
;
; PURPOSE:
;
; RETURN THE DATA TYPE OF AN IDL VARIABLE AS A STRING
;   OR THE IDL CODE FOR THE DATA TYPE AS AN A LONG INTEGER
;
;   SEE PAGE 121, TABLE 9.1, BUILDING IDL APPLICATIONS,
;   IDL VERSION 5.0, MARCH, 1997 EDITION
;
;
; EXAMPLES::
; 	PRINT,IDLTYPE(0B)
;		PRINT,IDLTYPE(0L,/CODE)
;		PRINT,IDLTYPE(0L,/NAME)
;		PRINT,IDLTYPE(0L,/NBYTES)
;		PRINT,IDLTYPE(0L,/NUMERIC)
; OR:
; 	RESULT = IDLTYPE(VARIABLE, /CODE )

; INPUTS:
; 	VARIABLE = ANYTHING.
;
; KEYWORDS:
; /CODE : 	RETURNS THE IDL TYPE CODE
; /NAME :		RETURNS THE IDL TYPE NAME
; /NBYTES : RETURNS THE NUMBER OF BYTES FOR THE DATA TYPE
; /NUMERIC: RETURNS 1 IF THE IDL TYPE IS NUMERIC, 0 IF NOT
;	/INTEGER: RETURNS 1 IF THE IDL TYPE IS INTEGER, 0 IF NOT
;
; HISTORY:
;   WRITTEN, FRANK VAROSI NASA/GSFC 1989.
;   MODIFIED JUNE 30,1997 J.O'REILLY, NMFS,NOAA:
;            CHANGED NAME OF PROGRAM FROM VARTYPE TO IDLTYPE;
;            CHANGED NAMES OF IDL TYPES TO AGREE WITH IDL FUNCTIONS (E.G. LONG, DOUBLE, INTEGER,BYTE);
;            ADDED IDL CODE 0 FOR UNDEFINED AND 9 FOR DOUBLE-COMPLEX.
;            JULY 3,1997 ADDED OBJECT TYPE
;            DEC 29,1998 ADDED TYPES 12,13,14
;						 APRIL 9,2002  CHANGED THE TYPE NAME TO AGREE WITH IDL SIZE OUTPUT STRUCTURE 'TYPE_NAME'
;						 JULY 9, 2003 STRLEN(VARIABLE) IF TYPE = 7
;					 	 JULY 21,2004 JOR, ADDED NUMERIC KEYWORD
;					 	 MAY 3,2013,JOR FORMATTING
;#####################################################################################################					 	 
;-
;***************************
	ROUTINE_NAME = 'IDLTYPE'
;***************************	

;TYPE   TYPE   	DATA
;CODE 	NAME		TYPE
;0  UNDEFINED  	UNDEFINED
;1  BYTE  			BYTE
;2  INT  				INTEGER
;3  LONG  			LONGWORD INTEGER
;4  FLOAT  			FLOATING POINT
;5  DOUBLE  		DOUBLE-PRECISION FLOATING
;6  COMPLEX  		COMPLEX FLOATING
;7  STRING  		STRING
;8  STRUCT  		STRUCTURE
;9  DCOMPLEX  	DOUBLE-PRECISION COMPLEX
;10 POINTER  		POINTER
;11 OBJREF  		OBJECT REFERENCE
;12	UINT  			UNSIGNED INTEGER
;13 ULONG  			UNSIGNED LONGWORD INTEGER
;14 LONG64  		64-BIT INTEGER
;15 ULONG64  		UNSIGNED 64-BIT INTEGER


  SZ = SIZE( VARIABLE,/STRUCT )
	IF  KEYWORD_SET(CODE) THEN RETURN, SZ.TYPE
	IF  KEYWORD_SET(NAME) THEN RETURN, SZ.TYPE_NAME

	IF KEYWORD_SET(NBYTES) THEN BEGIN
 	CASE SZ.TYPE OF
  	0:  NBYTES = 0
  	1:  NBYTES = 1
  	2:  NBYTES = 2
  	3:  NBYTES = 4
  	4:  NBYTES = 4
  	5:  NBYTES = 8
  	6:  NBYTES = 8
  	7:  NBYTES = STRLEN(VARIABLE)
  	8:  NBYTES = 0
  	9:  NBYTES = 16
  	10: NBYTES = 0
  	11: NBYTES = 0
  	12: NBYTES = 2
  	13: NBYTES = 4
  	14: NBYTES = 8
  	15: NBYTES = 8
  ELSE: NBYTES = ""
  ENDCASE
  RETURN, NBYTES
 ENDIF

	IF KEYWORD_SET(NUMERIC) THEN BEGIN
	 	TYPE_NUMERIC = [1,2,3,4,5,6,9, 12,13,14,15]
  	OK = WHERE(TYPE_NUMERIC EQ SZ.TYPE,COUNT)
  	RETURN,COUNT
	ENDIF

	IF KEYWORD_SET(INTEGER) THEN BEGIN
	 	TYPE_NUMERIC = [1,2,3, 				12,13,14,15]
  	OK = WHERE(TYPE_NUMERIC EQ SZ.TYPE,COUNT)
  	RETURN,COUNT
	ENDIF

 RETURN,SZ.TYPE_NAME

END; #####################  END OF ROUTINE ################################
