; $ID:	CONTOUR_GRID.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;	This Function CONTOURS A DATA GRID

;	KEYWORDS:
;		CONFILE: A file is written with same First Name as File (input) containing a structure name
;						  STRUCT = {TYPE:0B, HIGH:0B, LEVEL:0, NUM:0L, VALUE:0.0}  , followed by an array of lon,lat (2,num)
;		DIR_OUT:	The directory for the CONFILE (default is same directory as input file).
;		COLORS:		Colors for the levels
;		MIN_PTS:	Minimum number of points to retain in a contour (may be an array of same size as LEVELS)
;		MED:			Median Width (smooths the data using MEDIAN(Data,med) before contouring
;		THICK:		Contour Line Thickness


; HISTORY:
;	Nov 26,2005	Written by:	J.E. O'Reilly, NOAA, 28 Tarzwell Drive, Narragansett, RI 02882
;-
; *************************************************************************

FUNCTION CONTOUR_GRID, DATA, PROD=PROD,LEVELS=levels,C_COLORS=c_colors,C_ANNOTATION=c_annotation, MED=med,MIN_PTS=MIN_PTS,$
														ADD_COLORBAR= ADD_COLORBAR,COLOR_BAR_TITLE=COLOR_BAR_TITLE, MIN_VALUE=min_value,MAX_VALUE=max_value,LINES=lines,PAGE=page,$
														CONFILE=confile,DIR_OUT=dir_out,PAL=pal,MASK_IMAGE=MASK_IMAGE,MASK_COLOR=mask_color,BACKGROUND=BACKGROUND,_EXTRA=_extra
  ROUTINE_NAME='CONTOUR_GRID'

;	===> Find the good data
	SUBS=WHERE(DATA NE MISSINGS(DATA),COUNT,COMPLEMENT=COMPLEMENT)

 	IF N_ELEMENTS(LEVELS) EQ 0 THEN LEVELS = INTERVAL(MINMAX(DATA,/FIN),10)


  IF N_ELEMENTS(MIN_PTS) EQ 0 THEN _MIN_PTS = 1 ELSE _MIN_PTS = MIN_PTS
	IF N_ELEMENTS(_MIN_PTS) NE N_ELEMENTS(LEVELS) THEN _MIN_PTS=REPLICATE(_MIN_PTS,N_ELEMENTS(LEVELS))

	IF N_ELEMENTS(THICK) EQ 0 THEN _THICK = 1 ELSE _THICK = THICK
	IF N_ELEMENTS(_THICK) NE N_ELEMENTS(LEVELS) THEN _THICK=REPLICATE(_THICK,N_ELEMENTS(LEVELS))

	IF N_ELEMENTS(BACKGROUND) NE 1 THEN _BACKGROUND = 254 ELSE _BACKGROUND = BACKGROUND


;	===> Median the data if required
	IF N_ELEMENTS(MED) EQ 1 THEN BEGIN
	;	===> Make AMASK
		AMASK = BYTE(DATA) & AMASK(*,*) = 1 & IF N_ELEMENTS(SUBS) GT 1 THEN AMASK(SUBS) = 0
		OK_MASKED=WHERE(AMASK EQ 1,COUNT_MASKED)
		IF COUNT_MASKED GE 1 THEN DATA(OK_MASKED) = !VALUES.F_NAN
		IF MED GT 1 THEN DATA = MEDIAN(DATA,MED)
		IF COUNT_MASKED GE 1 THEN DATA(OK_MASKED) = MISSINGS(DATA)
		_MED = STRTRIM(MED,2)
	ENDIF ELSE _MED = ''

	IF N_ELEMENTS(PROD) NE 1 THEN STOP


;	===> Read the data and convert into a byte image
	IMAGE=SD_SCALES(DATA,PROD=PROD,/DATA2BIN,_EXTRA=_extra)


	SZ_DATA=SIZE(DATA,/STRUCT) 		& PX_DATA	=SZ_DATA.DIMENSIONS[0] 	& PY_DATA 	= SZ_DATA.DIMENSIONS[1]
	SZ_IMAGE=SIZE(IMAGE,/STRUCT) 	& PX_IMAGE=SZ_IMAGE.DIMENSIONS[0] & PY_IMAGE 	= SZ_IMAGE.DIMENSIONS[1]


;	IF PX_DATA NE PX_IMAGE OR PY_DATA NE PY_IMAGE THEN BEGIN
;		M=MAPS_SIZE(MAP)
;		IF PX_IMAGE EQ M.PX_OUT AND PY_IMAGE NE M.PY_OUT THEN BEGIN
;;			===> Assume legend was pasted above
;      LEG =  IMAGE(*,PY_IMAGE - (PY_IMAGE - M.PY_OUT):*)
;      IMAGE =  IMAGE(*, 0:( PY_IMAGE- (PY_IMAGE - M.PY_OUT+1)))
;      DATA=CONGRID(DATA,M.PX_OUT,M.PY_OUT,/CENTER)
;      ADD_COLORBAR = 1
;		ENDIF ELSE BEGIN
;			DATA=CONGRID(DATA,M.PX_OUT,M.PY_OUT,/CENTER)
;		ENDELSE
;	ENDIF


	SZ_DATA=SIZE(DATA,/STRUCT) 		& PX_DATA	=SZ_DATA.DIMENSIONS[0] 	& PY_DATA 	= SZ_DATA.DIMENSIONS[1]

;	===> Zwin and size the window with the data
 	ZWIN, DATA
 		DATA_RANGE=MINMAX(DATA,/FIN)
  		IF N_ELEMENTS(MIN_VALUE) NE 1 THEN _MIN_VALUE = DATA_RANGE[0] ELSE _MIN_VALUE = MIN_VALUE
  		IF N_ELEMENTS(MAX_VALUE) NE 1 THEN _MAX_VALUE = DATA_RANGE[1] ELSE _MAX_VALUE = MAX_VALUE
  	SZ_PAGE=SIZE(PAGE,/STRUCT)
  	IF SZ_PAGE.DIMENSIONS[0] EQ SZ_DATA.DIMENSIONS[0] AND SZ_PAGE.DIMENSIONS[1] EQ SZ_DATA.DIMENSIONS[1] THEN BEGIN
  		TV,PAGE
  	ENDIF ELSE BEGIN
  		TV,IMAGE
  	ENDELSE

  	OLD_FONT = !P.FONT
  	!P.FONT =  -1

		MASK_IMAGE = BYTE(IMAGE) & MASK_IMAGE(*,*) = 1 & MASK_IMAGE(SUBS) = 0


		OK=WHERE(MASK_IMAGE EQ 1,COUNT)
		IF COUNT GE 1 THEN DATA[OK] = MISSINGS(DATA)


 		CONTOUR,DATA,LEVELS=LEVELS,MIN_VALUE=_MIN_VALUE,MAX_VALUE=_MAX_VALUE,C_COLORS=C_COLORS,C_ANNOTATION=c_annotation,$
 									XSTYLE=5,YSTYLE=5,XMARGIN=[0,0],YMARGIN=[0,0], POSITION = [0,0,1,1],CLOSED=0,/NOERASE,/FOLLOW,_EXTRA=_extra
	  !P.FONT = OLD_FONT

		IMAGE=TVRD()
	ZWIN


;	IF ADD_COLORBAR EQ 1 THEN BEGIN
;		LEG = COLOR_BAR_SCALE(PROD=PROD,/NAME,/UNIT,PX=PX_DATA )
;	  IMAGE= TRANSPOSE([TRANSPOSE(IMAGE),TRANSPOSE(LEG)])
;	ENDIF




;	**********************************
	IF KEYWORD_SET(LINES) THEN BEGIN
;	**********************************

;		===> Note that the idl structure written using keyword PATH_FILENAME does not have the OFFSET Tag
;				 (i.e. STRUCT below), so must remove OFFSET from INFO before writing the INFO out (as STRUCT)

;		===> Zwin and size the window with the data
 		ZWIN, DATA
 			CONTOUR,DATA,LEVELS=LEVELS,MIN_VALUE=_MIN_VALUE,MAX_VALUE=_MAX_VALUE,C_COLORS= 1, C_THICK=THICK,C_LINESTYLE=0,XSTYLE=5,YSTYLE=5,XMARGIN=[0,0],YMARGIN=[0,0],$
	       PATH_INFO=info, path_xy=xy,CLOSED=0,/PATH_DATA_COORDS,_EXTRA=_extra

 			CALL_PROCEDURE,'MAP_'+MAP

			STRUCT=REPLICATE(	{TYPE:0B, HIGH:0B, LEVEL:0, NUM:0L, VALUE:0.0,LONLAT:''},N_ELEMENTS(INFO))

	;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
			FOR nth = 0, (N_ELEMENTS(info) - 1 ) DO BEGIN
				IF  INFO[NTH].N LT (_MIN_PTS(INFO[NTH].LEVEL)) THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	  		S = INDGEN(info(nth).N)
		 		XX = REFORM(xy(0,INFO(nth).OFFSET + S ))
		 		YY = REFORM(xy(1,INFO(nth).OFFSET + S ))
		 		XYZ = CONVERT_COORD(XX,YY,/DEVICE,/TO_DATA)
		 		STRUCT(nth).TYPE=INFO(nth).TYPE
		 		STRUCT(nth).HIGH=INFO(nth).HIGH_LOW
		 		STRUCT(nth).LEVEL=INFO(nth).LEVEL
		 		STRUCT(nth).NUM=INFO(nth).N
		 		STRUCT(nth).VALUE=INFO(nth).VALUE
		 	  STRUCT[NTH].LONLAT= STRJOIN(STRTRIM([REFORM(XYZ(0,*))],2)+'_'+ STRTRIM([REFORM(XYZ(1,*))],2)+';')
			ENDFOR
		ZWIN
		OK=WHERE(STRUCT.NUM GE 1,COUNT)
		IF COUNT GE 1 THEN RETURN, STRUCT[OK] ELSE RETURN, -1

	ENDIF


;	**********************************
	IF KEYWORD_SET(CONFILE) THEN BEGIN
;	**********************************
		FN=FILE_PARSE(FILE)
		IF N_ELEMENTS(DIR_OUT) NE 1 THEN _DIR_OUT = FN.DIR ELSE _DIR_OUT = DIR_OUT
		IF N_ELEMENTS(MED) EQ 1 THEN MED_TXT = '-MED_'+STRTRIM(_MED,2) ELSE MED_TXT = ''

		OUTFILE = _DIR_OUT+FN.FIRST_NAME+MED_TXT+'-CON.CSV'
		OPENW,LUNOUT,OUTFILE,/GET_LUN

;		===> Note that the idl structure written using keyword PATH_FILENAME does not have the OFFSET Tag
;				 (i.e. STRUCT below), so must remove OFFSET from INFO before writing the INFO out (as STRUCT)
 		STRUCT = {TYPE:0B, HIGH:0B, LEVEL:0, NUM:0L, VALUE:0.0}
;		===> Zwin and size the window with the data
 		ZWIN, DATA
 			CONTOUR,DATA,LEVELS=LEVELS,MIN_VALUE=_MIN_VALUE,MAX_VALUE=_MAX_VALUE,C_COLORS= 1, C_THICK=THICK,C_LINESTYLE=0,XSTYLE=5,YSTYLE=5,XMARGIN=[0,0],YMARGIN=[0,0],$
	       PATH_INFO=info, path_xy=xy,CLOSED=0,/PATH_DATA_COORDS,_EXTRA=_extra

 			CALL_PROCEDURE,'MAP_'+MAP

	;		LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
			FOR I = 0, (N_ELEMENTS(info) - 1 ) DO BEGIN
		 	  IF  INFO(I).N LT (_MIN_PTS(INFO(I).LEVEL)) THEN CONTINUE ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	  		S = INDGEN(info(I).N)
		 		XX = REFORM(xy(0,INFO(I).OFFSET + S ))
		 		YY = REFORM(xy(1,INFO(I).OFFSET + S ))
		 		XYZ = CONVERT_COORD(XX,YY,/DEVICE,/TO_DATA)
		 		STRUCT.TYPE=INFO(I).TYPE
		 		STRUCT.HIGH=INFO(I).HIGH_LOW
		 		STRUCT.LEVEL=INFO(I).LEVEL
		 		STRUCT.NUM=INFO(I).N
		 		STRUCT.VALUE=INFO(I).VALUE
		 		WRITEU,LUNOUT,STRUCT
		 		LONLAT=FLOAT([TRANSPOSE(REFORM(XYZ(0,*))),TRANSPOSE(REFORM(XYZ(1,*)))])
		 		WRITEU,LUNOUT,LONLAT
			ENDFOR
			CLOSE,LUNOUT
			FREE_LUN,LUNOUT
		ZWIN
	ENDIF


	RETURN,IMAGE

END; #####################  End of Routine ################################







