; $ID:	SUBAREAS_MAIN.PRO,	2020-07-08-15,	USER-KJWH	$
;#####################################################################
  PRO SUBAREAS_MAIN
;+
; THIS PROGRAM IS A MAIN ROUTINE FOR SUBAREAS
; HISTORY:
;     JUN 9 2014  WRITTEN BY: J.E. O'REILLY
;     JUN 11,2014,JOR ADDED STEPS
;     JUN 19,2014,JOR D.SOURCE = FN.NAME_EXT [NO DIR IT WILL BE SUPPLIED AS NEEDED] 
;     APR 16,2015,JOR SWITCHES ARE ALPHA KEYS NOW
;                 NOW THE STARTING POINT IS KIM'S SAV FILES INSTEAD OF PNG MASK FILES
;                 DELETED STEPS NO LONGER NEEDED
;     NOV 22, 2017 - KJWH: Changed PLT_SHP to READ_SHPFILE
;
;-
;*****************************
  ROUTINE_NAME='SUBAREAS_MAIN'
;*****************************
; ===> CONSTANTS
  DIR_SUB = !S.SUBAREAS
  DIR_SHP = !S.IDL_SHAPEFILES 
  SL = PATH_SEP()

; ===> SWITCHES SSSSSSSSSSSSSSSSSSSS
; SET CMD:
  CMD = ''
  DO_SUBAREA_ADD_REGION   = '' 
  DO_CHECK_TAGS           =''
  DO_SUBAREA_SAV_2SHP     = ''
  DO_LONLAT_2SHP          = '' 
  DO_BATS                 = '' 
  DO_LMES_2SHP            = '' 
  DO_MAKE_MASTER          = 'Y' 
  CHECK_MASTER_FOR_DUPS   = '' 
  DO_SUBAREAS_MAP         = '' 
  DO_SUBAREAS_EXTRACT     = ''
  DO_SUBAREAS_PLOT        = ''
;||||||||||||||||||||||||||||||||
;
;***************************************
IF KEY(DO_SUBAREA_ADD_REGION) THEN BEGIN
  ;*************************************
  SWITCHES,DO_SUBAREA_ADD_REGION,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP

  SUBS = FILE_SEARCH(DIR_SUB + 'MASK_SUBAREA*.SAV')
  FOR N=0, N_ELEMENTS(SUBS)-1 DO BEGIN
    FILE = REPLACE(SUBS(N),'SAVE','SAV')
    IF FILE_MAKE(SUBS(N),FILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
    D = STRUCT_SD_READ(SUBS(N),STRUCT=S)
    REGION = SUBAREAS_REGION(SUBS(N))
    IF REGION EQ [] THEN STOP
    FP = FILE_PARSE(FILE)
    PARSE = STRSPLIT(FP.NAME,'-',/EXTRACT)
    MASK = LAST(PARSE)
    STRUCT_WRITE,S,REGION=REGION,MASK=MASK,FILE=FILE
  ENDFOR
ENDIF ;IF KEY(DO_SUBAREA_ADD_REGION) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||||||||||


;*************************
IF KEY(DO_CHECK_TAGS) THEN BEGIN
  ;***********************
  , 'DO_CHECK_TAGS'
  SWITCHES,DO_CHECK_TAGS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  FILES = FILE_SEARCH(!S.SUBAREAS + '*.SAV')
  PL,FILES  
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0L, NOF(FILES)-1 DO BEGIN
    FILE = FILES[NTH]
    IF VERBOSE THEN PFILE,FILE,/R
    MASK = STRUCT_READ(FILE,STRUCT=D)
    IF HAS(D,'SUBAREA_CODE') EQ 0 OR HAS(D,'SUBAREA_NAME') EQ 0 THEN BEGIN
      TXT = 'MISSING SUBAREA_CODE OR SUBAREA_NAME  IN ' + FILE
      STOP ;REPORT,TXT
      ;===> REPLACE OLD TAG NAMES WITH NEW
      D = STRUCT_RENAME(D,['CODE_NAME_MASK','CODE_MASK'],['SUBAREA_NAME','SUBAREA_CODE'])
      STRUCT=D
      SAVE,FILENAME = FILE,STRUCT
    ENDIF;IF HAS(D,'SUBAREA_CODE')EQ [] OR HAS(D,'SUBAREA_NAME')EQ [] THEN BEGIN

  ENDFOR;FOR NTH = 0L, NOF(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

  IF VERBOSE THEN , 'DO_D3'
ENDIF ; IF DO_CHECK_TAGS GE 1 THEN BEGIN
; |||||||||||||||||||||||||||||
;
;
;**************************************
IF KEY(DO_SUBAREA_SAV_2SHP) THEN BEGIN
;**************************************
  SWITCHES,DO_SUBAREA_SAV_2SHP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  FILES = FILE_SEARCH(!S.SUBAREAS + '*.SAV')
  PL,FILES
  ;===> TEST USING JUST THE ECOS.SAV TO ENSURE THAT GSSOUTH WORKS WELL
  ;     THEN COMMENT OUT THE NEXT TWO LINES TO RUN ALL THE MASK SAV FILES 
  OK = WHERE_STRING(FILES,'EC-PXY_1024_1024-ECOS.SAV')& FILES = FILES[OK]
  PL,FILES

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR N = 0,N_ELEMENTS(FILES) -1 DO BEGIN
    FILE = FILES(N)
    IF VERBOSE THEN PFILE,FILE,/U
    SUBAREAS_MASK_2SHP,FILE=FILE, OVERWRITE=OVERWRITE,VERBOSE=VERBOSE
  
  ENDFOR;FOR _SET = 0,N_ELEMENTS(SETS) -1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  IF STOPP THEN STOP
ENDIF;IF KEY(DO_SUBAREA_SAV_2SHP) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||
;

;*********************************
IF KEY(DO_LONLAT_2SHP) THEN BEGIN
  ;*******************************
  SWITCHES,DO_LONLAT_2SHP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  ;===> FIND LONLAT CSVS
  FILES = FILE_SEARCH(!S.SUBAREAS + 'LONLAT\*.CSV') 
  PL,FILES 
  FN = FILE_PARSE(FILES)
  NAMES = FN.NAME

  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR _FILE = 0,N_ELEMENTS(FILES) -1 DO BEGIN
    FILE = FILES(_FILE)
    FN = FILE_PARSE(FILE) & SOURCE = FN.NAME
    DB = CSV_READ(FILE)
    ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0,N_ELEMENTS(DB) -1 DO BEGIN
     D = DB[NTH]
     REGION = D.REGION
          
     ;===> WORKAROUND TO AVOID DUPLICATE SUBAREAS
     IF WHERE_STRING(FILE,'CLIVEC_CHES_BAY') NE [] THEN BEGIN
       SUBAREA  = 'CLIVEC_'+ D.SUBAREA_NAME
     ENDIF ELSE BEGIN
       SUBAREA = D.SUBAREA_NAME
     ENDELSE;IF WHERE_STRING(FILE,'CLIVEC_CHES_BAY') NE [] THEN BEGIN

     SUBAREAS_LONLAT_2SHP,FILE=FILE,LON=D.LON,LAT = D.LAT,$
      SOURCE=SOURCE, REGION = REGION,SUBAREA = SUBAREA,CODE=D.SUBAREA_CODE,$
      AROUND=D.AROUND,OVERWRITE=OVERWRITE
    ENDFOR;FOR NTH = 0,N_ELEMENTS(DB) -1 DO BEGIN
  ENDFOR;FOR _SET = 0,N_ELEMENTS(SETS) -1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDIF;IF KEY(DO_LONLAT_2SHP) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||

;*************************
IF KEY(DO_BATS) THEN BEGIN
;******************************
SWITCHES,DO_BATS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
IF STOPP THEN STOP
  PRINT, 'REMINDER:SOURCE MUST HAVE A MAP IN THE NAME ' & WAIT,1
  ;===> NOTE BATS COORDS ARE FROM LOCATE.CSV IN MASTER
  LL = LOCATE('BATS') & LON=LL.LON & LAT = LL.LAT
  SUBAREAS_LONLAT_2SHP,LON=LON,LAT =LAT, $
  SOURCE=  ROUTINE_NAME + '-EC',REGION='N_ATLANTIC',SUBAREA='BATS',CODE=1,AROUND=3,OVERWRITE=OVERWRITE
   
ENDIF;IF KEY(DO_BATS) THEN BEGIN
;|||||||||||||||||||||||||||||||

 ;*****************************
IF KEY(DO_LMES_2SHP) THEN BEGIN
  ;****************************  
  SWITCHES,DO_LMES_2SHP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  SUBAREAS_LMES_2SHP, OVERWRITE=OVERWRITE,VERBOSE=VERBOSE  
ENDIF;IF KEY(DO_LMES_2SHP) THEN BEGIN
;||||||||||||||||||||||||||||||||||||

;********************************
IF KEY(DO_MAKE_MASTER) THEN BEGIN
;********************************
  SWITCHES,DO_MAKE_MASTER,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  AROUND = 1
  MASTER = !S.MASTER + 'SUBAREAS_MASTER.SAV'
  ;===> MACE A BACKUP COPY OF THE MASTER
  MSTR = FLS(MASTER)
  IF FILE_TEST(MSTR) EQ 0 THEN MESSAGE,'ERROR: CAN NOT FIND '+'SUBAREAS_MASTER.SAV'
  COPY = REPLACE(MSTR,'.SAV','-'+ STRMID(DATE_NOW(),0,8)+ '.SAV')
  FILE_COPY,MSTR,COPY,/VERBOSE,/OVERWRITE
  TEMPLATE = !S.MASTER + 'SUBAREAS_TEMPLATE.CSV'
  M = CSV_READ(TEMPLATE) & M= STRUCT_2MISSINGS(M)
 
  DIR_IN = DIR_SHP
  FILES = FILE_SEARCH(DIR_IN, '*.SHP')  & PN,FILES
   ;===> GET SPECIFIC SUB DIRECTORIES:
   PRINT,'KIM: THE DIRS NEED TO BE DEFINED HERE'
  TARGETS = ['GLOBAL','NE_SHELF','LME','N_ATLANTIC','NAFO']
  FN = FILE_PARSE(FILES)
  DIRS = FN.SUB
  SETS = WHERE_SETS(DIRS)
  OK = WHERE_IN(SETS.VALUE,TARGETS,COUNT)
  IF COUNT LT NOF(TARGETS) THEN MESSAGE,'ERROR:NOT ALL TARGET DIRS WERE FOUND'
  DIRS = SETS[OK].VALUE
  IF VERBOSE THEN PLIST,DIRS  
  ;===> GET FILES WITH THE TARGET DIRS
  OK = WHERE_IN(FN.SUB ,DIRS,COUNT)
  IF VERBOSE THEN PRINT,ROUNDS(COUNT) + '  SHAPE FILES FOUND'  
  FILES = FILES[OK]
  
  ;===> PROBLEMS WITH THESE SHP_FILES [BECAUSE HESE SPAN -180 TO 180 ?], IF PRESENT, REMOVE:
  OK = WHERE_STRING(FILES,'CENTRAL_ARCTIC',COUNT) & IF COUNT EQ 1 THEN FILES =REMOVE(FILES,OK)
  OK = WHERE_STRING(FILES,'ANTARCTICA',COUNT) & IF COUNT EQ 1 THEN FILES =REMOVE(FILES,OK)
  OK = WHERE_STRING(FILES,'EAST_BERING_SEA',COUNT) & IF COUNT EQ 1 THEN FILES =REMOVE(FILES,OK)
  OK = WHERE_STRING(FILES,'ALEUTIAN_ISLANDS',COUNT) & IF COUNT EQ 1 THEN FILES =REMOVE(FILES,OK)
  ;===> REMOVE SPECIFIC SOURCE SHP FILES IN THE LME FOLDER
  OK = WHERE_STRING(STRUPCASE(FILES),['LME64','LMES_64','LME66','BORDERS'],COUNT) & IF COUNT GE 1 THEN FILES =REMOVE(FILES,OK)
  ;PROBLEMS:
  ;MASK_SUBAREA-BI_SOUND-PXY_300_600-BI
  IF VERBOSE THEN PRINT,ROUNDS(NOF(FILES)) + '  SHAPE FILES FOUND'
  IF STOPP THEN STOP 
 
    
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
    FILE = FILES[NTH]
    ;===> CATCH ERRORS
    CATCH, ERRORSTATUS

    ;===>  ERROR HANDLER
    IF (ERRORSTATUS NE 0) THEN BEGIN
      CATCH, /CANCEL
      ;  ERROR HANDLER
      REPORT,'ERROR WITH   ' + FILE
      CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    ENDIF;IF (ERRORSTATUS NE 0) THEN BEGIN
    FN = FILE_PARSE(FILE)
    ;===> READ MATCHING DBF FILE
    DBF_FILE = REPLACE(STRUPCASE(FILE),'.SHP','.DBF')
    DBF = READ_DB(DBF_FILE,/QUIET)
    D=M
    D.SOURCE = FN.NAME_EXT
    ;TXT = STR_SEP(FN.NAME,'-')
    SUBAREA = DBF.SUBAREA
    PFILE,SUBAREA,/A
    D.SUBAREA =STRTRIM(STRUPCASE(SUBAREA),2)
    D.REGION = STRTRIM(STRUPCASE(DBF.REGION),2)
    D.CODE = STRTRIM(STRUPCASE(DBF.CODE),2)
    D.METHOD = STRTRIM(STRUPCASE(DBF.METHOD),2)
    D.AUTHOR = GET_AUTHOR()
    D.PERIOD = STRTRIM(DATE_2PERIOD(DBF.DATE),2)
    D.MAP = STRTRIM(DBF.MAP,2)
    ;===>  ADD MAP INFORMATION TO MASTER USING THE MAP FROM THE SHP FILE
    I = MAP_INFO(DBF.MAP)
    LIMIT = I.LIMIT
    D.MAP_LATMIN = LIMIT[0]
    D.MAP_LONMIN = LIMIT[1]
    D.MAP_LATMAX = LIMIT(2)
    D.MAP_LONMAX = LIMIT(3)

    ;===> GET LONS,LATS FROM SHPFILE
    MAPS_SET,'GEQ' ; SO NO  CONSTRAINTS ON LATLON
    READ_SHPFILE, FILE,COLOR=26,FILL=1,THICK=THICK,VERBOSE=0,$
      GET_RANGE=GET_RANGE,TAGNAME='SUBAREA',VALUE=SUBAREA,$
      RANGE_LON = RANGE_LON, RANGE_LAT = RANGE_LAT,NORMAL=NORMAL,$
      DO_ALL = DO_ALL, AUTO=AUTO,LONS=LONS,LATS=LATS,AROUND=AROUND
    D.NPTS = ROUNDS(N_ELEMENTS(LONS))
    D.LATMIN = RANGE_LAT[0]
    D.LONMIN = RANGE_LON[0]
    D.LATMAX = RANGE_LAT[1]
    D.LONMAX = RANGE_LON[1]
 
    IF NONE(STRUCT) THEN STRUCT = D ELSE STRUCT = [STRUCT,D] 
    
  ENDFOR;FOR NTH = 0,N_ELEMENTS(FILES)-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  ZWIN
  SAVE,FILENAME = MASTER,STRUCT,/VERBOSE & PFILE,MASTER
  CSVFILE = REPLACE(MASTER,'.SAV','.CSV')
  CSV_WRITE,CSVFILE,STRUCT  
ENDIF;IF KEY(DO_MAKE_MASTER) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||

;********************************
IF KEY(DO_SUBAREAS_MAP) THEN BEGIN
  ;********************************
  SWITCHES,DO_SUBAREAS_MAP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP

  REGION = 'NE_SHELF' &  SUBAREAS='CLIVEC'
  REGION = 'GLOBAL' &  SUBAREAS='LME'
  ;MAP ='NEC' MAP MAY BE OBTAINED FROM THE MATCHING RECORDS IN THE MSTR
  DIR_OUT = !S.DEMO + ROUTINE_NAME + SL & DIR_TEST, DIR_OUT
  SUBAREAS_MAP,MAP=MAP,REGION=REGION,SUBAREAS=SUBAREAS,DIR_OUT=DIR_OUT

 
ENDIF;IF KEY(DO_SUBAREAS_MAP) THEN BEGIN
;||||||||||||||||||||||||||||||||||||||

;****************************************
IF KEY(CHECK_MASTER_FOR_DUPS) THEN BEGIN
;****************************************
  SWITCHES,CHECK_MASTER_FOR_DUPS,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP

  MASTER =!S.MASTER + "SUBAREAS_MASTER.SAV"
  DB = IDL_RESTORE(MASTER)
  PN,DB
  ST,DB
  SETS = WHERE_SETS(DB.SUBAREA)
  OK = WHERE(SETS.N NE 1,COUNT)
  IF COUNT GE 1 THEN BEGIN
    PLIST,SETS[OK].VALUE  
    DUP_FILE = !S.IDL_SHAPEFILES + ROUTINE_NAME + '-DUPLICATE SUBAREAS.TXT'
    PLIST,SETS[OK].VALUE, FILE=DUP_FILE
  ENDIF ELSE BEGIN    
    PRINT, ' NO DUPLICATE SUBAREAS IN THE MASTER'
  ENDELSE;IF COUNT GE 1 THEN BEGIN
  
ENDIF;IF KEY(CHECK_MASTER_FOR_DUPS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||


;****************************************
IF KEY(DO_SUBAREAS_EXTRACT) THEN BEGIN
  ;****************************************
  SWITCHES,DO_SUBAREAS_EXTRACT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP
  ;USE MONTHLY MEANS FOR TESTING [FASTER]
  DIR_IN = !S.DATASETS + 'NEC_STATS' + SL 
  FILES = FILE_SEARCH(DIR_IN, '*M_2004*CHLOR_A*MEAN.SAVE') 
  PLIST,FILES 
  
  MAPS = 'NEC'
 
  DIR_OUT = !S.DEMO + ROUTINE_NAME + SL

  SUBAREAS_EXTRACT,FILES,MAPS=MAPS,DIR_SHP=DIR_SHP,DIR_OUT=DIR_OUT,AROUND=AROUND

ENDIF;IF KEY(DO_SUBAREAS_EXTRACT) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||


;$$$;;  NEED A MERGE STEP THAT CAN MERGE MULTIPLE PRODUCTS INTO A SINGLE FILE

;****************************************
IF KEY(DO_SUBAREAS_PLOT) THEN BEGIN
  ;****************************************
  SWITCHES,DO_SUBAREAS_PLOT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
  IF STOPP THEN STOP

  SUBAREAS_PLOT, DIR_IN=!S.DEMO + ROUTINE_NAME + SL, DIR_OUT= !S.DEMO + ROUTINE_NAME + SL

ENDIF;IF KEY(DO_SUBAREAS_PLOT) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||



END; #####################  END OF ROUTINE ###############################
