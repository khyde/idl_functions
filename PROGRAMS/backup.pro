; $ID:	BACKUP.PRO,	2020-07-01-12,	USER-KJWH	$

;####################################################################################
	PRO BACKUP, FOLDER, DRIVE,PAT=PAT, TWOWAY=TWOWAY,TEST=TEST, QUIET = QUIET

;+
; NAME:
;		BACKUP
;
; PURPOSE:;
;		THIS PROCEDURE THIS BACKS UP (COPIES AND UPDATES) DISKS, A FILE OR A WHOLE FOLDER AND ITS SUBFOLDERS TO A DESTINATION DRIVE

; CATEGORY:
;		FILES
;
; CALLING SEQUENCE:
;		BACKUP, FOLDER, DRIVE  PRINT
;
; INPUTS:
;		FOLDER:	SOURCE DRIVE, PATH, OR AN INDIVIDUAL FILE (WITH ITS FULL PATH) TO BE COPIED TO THE DESTINATION DRIVE
;		DRIVE:  DESTINATION DRIVE  (MAY BE A DRIVE LETTER, E.G.'E' OR 'E:' OR 'E:\' )
;
; OPTIONAL INPUTS:
;
; KEYWORD PARAMETERS:
;  PAT: A STRING PATTERN TO USE FOR FINDING FILES IN THE SOURCE FOLDER
; OUTPUTS:
;		FILES ARE WRITTEN TO THE DRIVE (IF THE FOLDER DOES NOT EXIST ON THE DESTINATION DRIVE, IT IS CREATED)
;
; EXAMPLES:
;   BACKUP, 'D:\DOCS\', 'H'
;   BACKUP, 'D:\DOCS\', 'H:'
;   BACKUP, 'D:\DOCS\', 'H:\'
;   BACKUP, 'D:\IDL\PROGRAMS\', 'L:\',PAT='*.PRO'
;   BACKUP,DIR.I_ISERIES_SAVE,  'L:\',PAT='*SST*.SAVE'
;   BACKUP, 'L:\SMI\SST\', 'I:\'
;   BACKUP,GET_STICK(), PAT = 'IDL\PROGRAMS\*.PRO','D:\IDL\PROGRAMS\'
;   BACKUP, 'C:\IDL\PROGRAMS\', 'H:\',PAT='*.PRO'
;	NOTES:
;
;		THIS REPLACES FILES WITH THE NEWEST (LATEST) VERSION OF THE FILE
;
; MODIFICATION HISTORY:
;			WRITTEN JAN 4, 2005 BY J.O'REILLY, 28 TARZWELL DRIVE, NMFS, NOAA 02882 (JAY.O'REILLY@NOAA.GOV)
;			DEC 15,2011, JOR, ADDED KEYWORD PAT
;			DEC 22,2011,JOR, ADDED KEYWORD DIR_OUT;PFILE,AFILE,/C 
;     DEC 22,2012,JOR, PFILE,AFILE,/C
;     MAY 29,2013,JOR FORMATTING;;
;     JUL 27,2014,JOR:IF STRPOS(AFILE,'[') NE -1 THEN CONTINUE;>>>>>
;     SEP 7,2014,JOR FIXED TWOWAY

;####################################################################################
;-
;	*********************
ROUTINE_NAME = 'BACKUP'
;**********************
IF NOT KEY(QUIET) THEN 

AGAIN:
IF NONE(PAT) THEN _PAT = '*' ELSE _PAT = PAT
	
IF IDLTYPE(DRIVE,/CODE) EQ 0 THEN MESSAGE,'MUST PROVIDE DESTINATION DRIVE'
  
; ===> CHECK IF DRIVE IS JUST A SINGLE LETTER, IF SO ADD THE :\
 OK_ONE_LETTER = WHERE(STRLEN(DRIVE) EQ 1,COUNT_ONE_LETTER)
 IF COUNT_ONE_LETTER GE 1 THEN DRIVE(OK_ONE_LETTER) = DRIVE(OK_ONE_LETTER)+":"+PATH_SEP()
	
;===> GET THE FILES
FILES = FILE_SEARCH(FOLDER,_PAT) 
PN,FILES,'FILES TO BACK UP FROM  ' + FOLDER

TXT = 'COPY ' + FOLDER + 'TO >>> '+ DRIVE
PRINT, TXT 

OK_NOT_NULL = WHERE(FILES NE '',COUNT_NOT_NULL) 
IF COUNT_NOT_NULL GE 1 THEN FILES=FILES(OK_NOT_NULL)
BADFILES = ['.\','..\',']','[']          
OK_BAD = WHERE_IN(FILES,BADFILES,COUNT_BAD)
IF COUNT_BAD GE 1 THEN FILES = REMOVE(FILES,OK_BAD)


ALL_DIRS = FILE_TEST(FILES,/DIRECTORY)
OK_DIRS = WHERE (ALL_DIRS EQ 1,COUNT_DIRS)
IF COUNT_DIRS GE 1 THEN BEGIN
  ALL_DIRS=FILES(OK_DIRS)
  LAST_DIR = LAST(ALL_DIRS)
ENDIF ; IF COUNT_DIRS GE 1 THEN BEGIN

;===> WINDOWS 7 OS SEES ZIP FOLDERS AS DIRECTORIES BUT IDL DOES NOT , SO FIND ZIPS
FN = FILE_PARSE(FILES)
OK_ZIP=WHERE(STRUPCASE(FN.EXT) EQ 'ZIP',COUNT_ZIP)
IF COUNT_ZIP GE 1 THEN BEGIN
  SUBS = [OK_DIRS,OK_ZIP]
  S=SORT(SUBS)
  SUBS=SUBS(S)
ENDIF;IF COUNT_ZIP GE 1 THEN BEGIN

;===>  GET THE NAMES OF ALL DRIVES
DRIVES= GET_DRIVE_NAMES()
;>>> FIND THE DRIVE FOR THE SOURCE FOLDER
OK_SOURCE_DRIVE = WHERE (STRUPCASE(STRMID(DRIVES.NAME,0,1))  EQ STRUPCASE(STRMID(FOLDER,0,1)) )
SOURCE_DRIVE = DRIVES(OK_SOURCE_DRIVE).DRIVE
;>>> FIND THE DRIVE FOR THE DESTINATION FOLDER
OK_DEST_DRIVE = WHERE (STRUPCASE(STRMID(DRIVES.NAME,0,1))  EQ STRUPCASE(STRMID(DRIVE,0,1)) )
DEST_DRIVE = DRIVES(OK_DEST_DRIVE).DRIVE


;   FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FOR NTH = 0L,N_ELEMENTS(FILES)-1L DO BEGIN
     ;; POF,NTH,FILES
      AFILE = FILES[NTH]
      IF STRPOS(AFILE,'[') NE -1 THEN CONTINUE;>>>>>
;     PROBLEM IF AFILE IS BLANK  , SO SKIP IT AND CONTINUE
      IF AFILE EQ '' THEN CONTINUE  ;>>>>>>>>>>>>>>>>>>>>>
      FN=FILE_PARSE(AFILE)
      DIR_IN = FN.DIR
      IF N_ELEMENTS(DIR_OUT)EQ 1 THEN BEGIN
        _DIR_OUT=DIR_OUT
      ENDIF ELSE BEGIN
      
      _DIR_OUT= REPLACE(DIR_IN,SOURCE_DRIVE,DEST_DRIVE)
      ENDELSE; IF N_ELEMENTS(DIR_OUT)EQ 1 THEN BEGIN
      IF FILE_TEST(_DIR_OUT) EQ 0 THEN BEGIN
        PRINT,'MAKING DIRECTORY: '+_DIR_OUT
        FILE_MKDIR,_DIR_OUT
       ENDIF
      OUT_FILE = REPLACE(AFILE,DIR_IN,_DIR_OUT)
      OUT_DIR = REPLACE(AFILE,DIR_IN,_DIR_OUT)
      OUT_ISADIR=FILE_TEST(OUT_FILE,/DIRECTORY)
      ;===>DOES OUT_FILE EXIST?
      OUT_EXIST = FILE_TEST(OUT_FILE)
    ; ===>SEE IF AFILE IS A DIRECTORY?
      IN_ISADIR= FILE_TEST(AFILE,/DIRECTORY)
      
      IF (IN_ISADIR EQ 1 OR OUT_ISADIR EQ 1) THEN BEGIN
        FILE_MKDIR,OUT_FILE
        MADE_DIR = OUT_FILE
        ;===>   SEE IF THERE ARE FILES WITHIN AFILE 
        AFILES = FILE_SEARCH(AFILE +'*')     
        OK = WHERE(AFILES NE '',COUNT) 
        IF COUNT GE 1 THEN AFILES=AFILES[OK]
        BADFILES = ['.\','..\']          
        OK = WHERE_IN(AFILES,BADFILES,COUNT)
        IF COUNT GE 1 THEN AFILES = REMOVE(AFILES,OK)
        TOCOPY= AFILES
        IF IDLTYPE(OUT_FILE,/CODE) EQ 1 THEN STOP
        BACKUP,TOCOPY,OUT_FILE,/QUIET
      ENDIF ELSE BEGIN
        MADE_DIR = ''
        FI_SOURCE= FILE_INFO(AFILE)
        FI_DEST= FILE_INFO(OUT_FILE)
        ;REPLACE '['
        
;####################################################################################        
;       ===>COPY  ( WHEN OUTFILE DOES NOT YET EXIST IT'S MTIME IS ZERO)   
;####################################################################################        
        IF  FI_DEST.MTIME EQ 0 OR (FI_SOURCE.MTIME GT FI_DEST.MTIME) THEN BEGIN
          TXT = AFILE + '  TO ' +OUT_FILE
          PFILE,TXT,/C 
          FILE_CHMOD ,AFILE, /A_READ,/A_WRITE ,/A_EXECUTE          
          FILE_COPY, AFILE,OUT_FILE,/OVERWRITE,/FORCE
        ENDIF  ;  IF  FI_DEST.MTIME EQ 0 OR (FI_SOURCE.MTIME GT FI_DEST.MTIME) THEN BEGIN
        ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
        ;
        ;
;       ===> UPDATE (WHEN SOURCE MTIME EXCEEDS DESTINATION MTIME      
        ;IF FI_SOURCE.MTIME  NE 0 AND (FI_SOURCE.MTIME GT FI_DEST.MTIME) THEN BEGIN
          ;PRINT, '^^^^^^^^^^^^UPDATING:  '  +  OUT_FILE
 ;===> SEE IF MODE IS 438 (REQUIRES SYSTEM PERMISSION)?
; F=FILE_TEST(AFILE,GET_MODE= M)
; IF M EQ 438 THEN BEGIN
;  FILE_COPY, AFILE,OUT_FILE,/OVERWRITE,/FORCE
;  PRINT, 'MUST MANUALLY COPY :'+AFILE 
;  STOP
 
; ENDIF;  IF M EQ 438 THEN BEGIN
 
 ;         FILE_CHMOD ,OUT_FILE, /A_READ,/A_WRITE ,/A_EXECUTE          
 ;         FILE_COPY, AFILE,OUT_FILE,/OVERWRITE,/FORCE
 ;       ENDIF ; IF FI_SOURCE.MTIME  NE 0 AND (FI_SOURCE.MTIME GT FI_DEST.MTIME) THEN BEGIN        
      ENDELSE ;  IF (IN_ISADIR EQ 1 OR OUT_ISADIR EQ 1) THEN BEGIN
    ENDFOR

IF KEY(TWOWAY) THEN BEGIN
  FN = FILE_PARSE(FOLDER)
  _DRIVE = FN.DRIVE
  FOLDER = REPLACE(FOLDER,FN.DRIVE,DRIVE)
  DRIVE = FN.DRIVE
  TWOWAY = 0
  GOTO,AGAIN  
ENDIF;IF KEY(TWOWAY) THEN BEGIN

IF NOT KEY(QUIET) THEN 

DONE:
END; #####################  END OF ROUTINE ################################

