; $ID:	SAVE_2HDF.PRO,	2020-07-09-08,	USER-KJWH	$
;##################################################################################################
 PRO SAVE_2HDF, FILES, DIR_OUT=DIR_OUT,  LONLAT=LONLAT, NO_MASK=NO_MASK, OVERWRITE=OVERWRITE
;+
; NAME:
;       SAVE_2HDF
;
; PURPOSE:
;				READ STRUCTURE IN A  SAV FILES  AND WRITE A HDF FILES
;

; PROCEDURE:
;       STRAIGHTFORWARD.
;
;	NO_MASK.... DO NOT WRITE THE MASK [IF PRESENT] TO THE HDF
;
;	RESTRICTIONS:
;		BECAUSE : HDF_SD_ATTRSET: STRING ARRAYS ARE NOT ALLOWED AS HDF-SD ATTRIBUTES, THIS PROGRAM CONCATENATES
;							STRING ARRAYS AS ONE ITEM, SEPARATED BY SEMICOLONS (;)

;	EXAMPLE:
;SAVE_2HDF,'D:\PROJECTS\SRTM30\SAVE\SRTM30-NEC-PXY_1024_1024-BATHY-SMOOTH_5.SAVE',/LONLAT,/OVERWRITE,/NO_MASK
;
; MODIFICATION HISTORY:
;       WRITTEN BY:  J.E.O'REILLY, MARCH 4,1999
;       JUNE 2, 2003 TD REPLACE STRTRIM(STRING WITH STRTRIM IF FORMAT NOT SPECIFIC
;       JUN 20,2013,JOR, REPLACED PARSE_IT WITH FILE_PARSE, FORMATTING
;       JUL 25,2013,JOR CHANGED NAME FROM STRUCT_SD_2HDF TO SAVE_2HDF
;       MAY 26,2014,JOR: DATA=STRUCT_READ(AFILE,STRUCT=STRUCT)
;       NOV 13,2014,JOR RENAMED FROM SAV_2HDF

;##################################################################################################
;-
;
;*************************
ROUTINE_NAME='SAVE_2HDF'
;*************************

;	===> DFAULTS
SPACE = ' '
SEMICOLON = ';'
	

;	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FOR _FILES=0,N_ELEMENTS(FILES)-1L DO BEGIN
		AFILE=FILES(_FILES)
		FA=FILE_ALL(AFILE)
		IF N_ELEMENTS(DIR_OUT) NE 1 THEN _DIR_OUT = FA.DIR ELSE _DIR_OUT = DIR_OUT
		HDF_FILE = _DIR_OUT + FA.NAME+'.HDF'

		EXIST=FILE_TEST(HDF_FILE)
;		IF EXIST EQ 1 AND NOT KEYWORD_SET(OVERWRITE) THEN GOTO, DONE
;		DATA=STRUCT_SD_READ(AFILE,STRUCT=STRUCT,SUBS=SUBS)
		DATA=STRUCT_READ(AFILE,STRUCT=STRUCT)
		TAGNAMES = TAG_NAMES(STRUCT)    
    PROD =STRUCT.PROD 

; 	===> START THE SD INTERFACE
  	SD_ID = HDF_SD_START(HDF_FILE, /CREATE)

;		************************************
;		*** SEE IF THE HDF CAN BE OPENED ***
;		************************************
		IF SD_ID EQ -1 THEN BEGIN
	 		ERROR = 1
	 		ERR_MSG = 'HDF_OPEN FAILED'
	 		RETURN
	  ENDIF

;

;		**************************
; 	*** CREATE AN DATASET ***
;		**************************
;		===> GET THE IDL TYPE FOR THE IMAGE IN THE STRUCTURE
;;	  TYPE = HDF_IDL2HDFTYPE(SIZE(STRUCT.IMAGE, /TYPE))
    TYPE = HDF_IDL2HDFTYPE(SIZE(STRUCT.DATA, /TYPE))
		SDS_ID = HDF_SD_CREATE(SD_ID, PROD,[STRUCT.PX,STRUCT.PY], HDF_TYPE = TYPE)


;		*********************
; 	*** ADD THE DATA ***
;		*********************
		;;HDF_SD_ADDDATA, SDS_ID, STRUCT.IMAGE; WRITE THE IMAGE DATA INTO THE DATASET
    HDF_SD_ADDDATA, SDS_ID, STRUCT.DATA; WRITE THE DATA INTO THE DATASET

;		**********************************
;		*** WRITE STRUCTURE ATTRIBUTES ***
;		**********************************
;		FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
		FOR _TARGET = 0,N_ELEMENTS(TAGNAMES)-1 DO BEGIN
			NAME = TAGNAMES(_TARGET)
			IF NAME EQ 'DATA' THEN CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			OK_POS = WHERE(TAGNAMES EQ NAME,COUNT)
			IF COUNT EQ 1 THEN BEGIN
				VAL = STRUCT.(OK_POS)
				SZ = SIZE(VAL,/STRUCT)
				IF SZ.N_ELEMENTS EQ 1 THEN BEGIN
					IF SZ.TYPE EQ 7 AND VAL EQ '' THEN VAL = SEMICOLON
				ENDIF
				IF SZ.N_ELEMENTS GE 2 AND SZ.TYPE EQ 7 THEN VAL = STRJOIN(VAL+SEMICOLON)

				IF NAME EQ 'MASK' THEN BEGIN
					PROD = 'MASK'

;STOP
					SZ=SIZE(STRUCT.MASK,/STRUCT) & TYPE = SZ.TYPE_NAME
					PX = SZ.DIMENSIONS[0]
					PY = SZ.DIMENSIONS[1]

					TYPE = HDF_IDL2HDFTYPE(SIZE(STRUCT.MASK, /TYPE))
					SDS_ID = HDF_SD_CREATE(SD_ID, PROD,[PX,PY], HDF_TYPE = TYPE)

			; 	===> ADDDATA
					HDF_SD_ADDDATA, SDS_ID, STRUCT.MASK; WRITE THE MASK INTO THE DATASET.
				ENDIF ELSE BEGIN
					HDF_SD_ATTRSET, SDS_ID, NAME, VAL, /STRING
				ENDELSE
			ENDIF
		ENDFOR;FOR _TARGET = 0,N_ELEMENTS(TAGNAMES_DATA)-1 DO BEGIN
		;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;		|||||||||||||||||||||||||||||||||||||||||||||||||||||||

;		###########################
;		#####   WRITE   MASK  #####
;   ###########################
;		FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
		FOR _TARGET = 0,N_ELEMENTS(TAGNAMES_MASK)-1 DO BEGIN
			NAME = TAGNAMES_MASK(_TARGET)

			IF KEYWORD_SET(NO_MASK) THEN CONTINUE ; >>>>>>>>>>>>

			OK_POS = WHERE(TAGNAMES EQ NAME,COUNT)
			IF COUNT EQ 1 THEN BEGIN
				VAL = STRUCT.(OK_POS)
				SZ = SIZE(VAL,/STRUCT)
				IF SZ.N_ELEMENTS EQ 1 THEN BEGIN
					IF SZ.TYPE EQ 7 AND VAL EQ '' THEN VAL = SEMICOLON
				ENDIF
				IF SZ.N_ELEMENTS GE 2 AND SZ.TYPE EQ 7 THEN VAL = STRJOIN(VAL+SEMICOLON)

				IF NAME EQ 'MASK' THEN BEGIN
					PROD = 'MASK'
					SZ=SIZE(STRUCT.MASK,/STRUCT) & TYPE = SZ.TYPE_NAME
					PX = SZ.DIMENSIONS[0]
					PY = SZ.DIMENSIONS[1]
					TYPE = HDF_IDL2HDFTYPE(SIZE(STRUCT.MASK, /TYPE))
					SDS_ID = HDF_SD_CREATE(SD_ID, PROD,[PX,PY], HDF_TYPE = TYPE)

			; 	===> ADDDATA
					HDF_SD_ADDDATA, SDS_ID, STRUCT.MASK; WRITE THE MASK INTO THE DATASET.
				ENDIF ELSE BEGIN
					HDF_SD_ATTRSET, SDS_ID, NAME, VAL
				ENDELSE
			ENDIF
		ENDFOR;FOR _TARGET = 0,N_ELEMENTS(TAGNAMES_MASK)-1 DO BEGIN
		;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;		|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||





;	*************************************************
;	*** L O N G I T U D E    &  L A T I T U D E   ***
;	*************************************************


	IF KEYWORD_SET(LONLAT) THEN BEGIN

		IF FA.MAP EQ 'NENA' THEN BEGIN
	    M=READ_MATFILE('D:\IDL\DATA\ROMS-NENA-LON-SURFACE.MAT') & LONS=M.(1).DATA
			M=READ_MATFILE('D:\IDL\DATA\ROMS-NENA-LAT-SURFACE.MAT') & LATS=M.(1).DATA
			LL = CREATE_STRUCT('LON',LONS,'LAT',LATS)
		ENDIF ELSE BEGIN
			LL=MAPS_2LONLAT(STRUCT.MAP, PX=STRUCT.PX,PY=STRUCT.PY)
		ENDELSE

		PROD = 'LONGITUDE'

		SZ=SIZE(LL.LON,/STRUCT) & TYPE = SZ.TYPE_NAME
		PX = SZ.DIMENSIONS[0]
		PY = SZ.DIMENSIONS[1]

		TYPE = HDF_IDL2HDFTYPE(SIZE(LL.LON, /TYPE))
		SDS_ID = HDF_SD_CREATE(SD_ID, PROD,[PX,PY], HDF_TYPE = TYPE)

;		*** COMPRESS THE ARRAY USING GZIP
		HDF_SD_SETCOMPRESS,SDS_ID,4,EFFORT=9

; 	===> ADDDATA
		HDF_SD_ADDDATA, SDS_ID, LL.LON; WRITE THE LONGITUDE DATA INTO THE DATASET.

;		===> ADD DATASET ATTRIBUTES
 		HDF_SD_ATTRSET, SDS_ID, 'PX', 			PX
 		HDF_SD_ATTRSET, SDS_ID, 'PY', 			PY
 		HDF_SD_ATTRSET, SDS_ID, 'IMAGE_TYPE', SZ.TYPE
 		HDF_SD_ATTRSET, SDS_ID, 'MISSING_CODE', MISSINGS(LL.LON)
 		HDF_SD_ATTRSET, SDS_ID, 'MISSING_NAME', 'MISSING'
;;	  HDF_SD_ATTRSET, SDS_ID, 'SCALING', 		'LINEAR'
;;	  HDF_SD_ATTRSET, SDS_ID, 'INTERCEPT',	0.0
;;	  HDF_SD_ATTRSET, SDS_ID, 'SLOPE', 			1.0
	  HDF_SD_ATTRSET, SDS_ID, 'DATA_UNITS', 'DEGREES'
	  HDF_SD_ATTRSET, SDS_ID, 'TRANSFORMATION', ';'


		PROD = 'LATITUDE'

		SZ=SIZE(LL.LAT,/STRUCT) & TYPE = SZ.TYPE_NAME
		PX = SZ.DIMENSIONS[0]
		PY = SZ.DIMENSIONS[1]

		TYPE = HDF_IDL2HDFTYPE(SIZE(LL.LAT, /TYPE))
		SDS_ID = HDF_SD_CREATE(SD_ID, PROD,[PX,PY], HDF_TYPE = TYPE)

;		*** COMPRESS THE ARRAY USING GZIP
		HDF_SD_SETCOMPRESS,SDS_ID,4,EFFORT=9

; 	===> ADDDATA
		HDF_SD_ADDDATA, SDS_ID, LL.LAT; WRITE THE LATTITUDE DATA INTO THE DATASET.

;		===> ADD DATASET ATTRIBUTES
 		HDF_SD_ATTRSET, SDS_ID, 'PX', 			PX
 		HDF_SD_ATTRSET, SDS_ID, 'PY', 			PY
 		HDF_SD_ATTRSET, SDS_ID, 'IMAGE_TYPE', SZ.TYPE
 		HDF_SD_ATTRSET, SDS_ID, 'MISSING_CODE', MISSINGS(LL.LAT)
 		HDF_SD_ATTRSET, SDS_ID, 'MISSING_NAME', 'MISSING'
;	  HDF_SD_ATTRSET, SDS_ID, 'SCALING', 		'LINEAR'
;	  HDF_SD_ATTRSET, SDS_ID, 'INTERCEPT',	0.0
;	  HDF_SD_ATTRSET, SDS_ID, 'SLOPE', 			1.0
	  HDF_SD_ATTRSET, SDS_ID, 'DATA_UNITS', 'DEGREES'
;	  HDF_SD_ATTRSET, SDS_ID, 'TRANSFORMATION', ';'

	ENDIF


	HDF_SD_ENDACCESS,SDS_ID
 	HDF_SD_END,SD_ID


	DONE:

	ENDFOR ; FOR _FILES=0,N_ELEMENTS(FILES)-1L DO BEGIN
	;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF



END; #####################  END OF ROUTINE ################################
