; $ID:	D3_INTERP_3D.PRO,	2020-07-01-12,	USER-KJWH	$
;+
;;#############################################################################################################
	PRO D3_INTERP_3D, D3_FILE, D3_INTERP_FILE=D3_INTERP_FILE, SPAN=SPAN, N_GOOD=N_GOOD, STAT_TRANSFORM=STAT_TRANSFORM, $
	               DATE_RANGE=DATE_RANGE,VERBOSE=VERBOSE, OVERWRITE=OVERWRITE
;
; PURPOSE: INTERPOLATE DATA IN A D3 FILE BY TRILINEAR INTERPOLATION [PX,PY,JD]
; 
; CATEGORY:	D3 FAMILY		 
;
; CALLING SEQUENCE: D3_INTERP_3D,D3_FILE
;
; INPUTS: D3_FILE  [FROM D3_MAKE]

; OPTIONAL INPUTS:
;		NONE:	
;		
; KEYWORD PARAMETERS:
;     D3_INTERP_FILE.......... OUTPUT NAME OF THE D3_INTERP FILE [OUTPUT]
;     N_GOOD.................. MINIMUM NUMBER IN THE PSERIES TO INTERPOLATE [DEFAULT = 11] 
;     STAT_TRANSFORM.......... ALOG [OR NOT]
;     DATE_RANGE.............. RANGE OF DATES TO INTERPOLATE 
;     VERBOSE................. PRINT PROGRAM PROGRESS
;     OVERWRITE............... OVERWRITE OUTPUT D3_INTERP_FILE
;     SPAN.................... THE SAMPLING GAP IN THE PSERIES (NUMBER OF DAYS) TO BLANK (MAKE MISSING) [DEFAULT = 7]
;    
; OUTPUTS: UPDATES THE D3 DATA ARRAYS IN COMMON MEMORY & REWRITES THE D3_FILE
;		
;; EXAMPLES:
;           D3_INTERP_3D,D3_FILE,SPAN=15
;          
;	NOTES:
;
; MODIFICATION HISTORY:
;       REWRITTEN APR 25,2017 - JEOR COPIED FROM D3_INTERP

;#################################################################################
;-
;***************************
  ROUTINE  = 'D3_INTERP_3D'
;***************************
;===> DEFAULTS
  IF NONE(SPAN)   THEN SPAN = 7
  IF NONE(N_GOOD) THEN N_GOOD = 11 ; MINIMUM NUMBER IN THE PSERIES TO INTERPOLATE
  IF KEY(VERBOSE) THEN PRINT,'SPAN = ' + ROUNDS(SPAN) 
  CLOSE,/ALL


  IF NONE(D3_FILE) THEN MESSAGE,'ERROR: D3_FILE IS REQUIRED'
  
  D3_DB_FILE     = REPLACE(D3_FILE,'-DAT.FLT','-DB.SAV')
  D3_INTERP_FILE = REPLACE(D3_FILE,'-DAT.FLT','-INTERP.FLT')

; ===> THE D3_INTERP_FILE IS COPIED FROM THE D3_FILE [SO THE D3_FILE IS UNCHANGED]
  IF FILE_MAKE(D3_FILE,D3_INTERP_FILE,OVERWRITE=OVERWRITE) EQ 0 THEN GOTO, DONE;>>>>>>>>>>>>>>>>
  
  FILE_COPY, D3_FILE, D3_INTERP_FILE, /OVERWRITE,VERBOSE=VERBOSE

; ===> UNMAP IF MEMORY-MAPPED
  IF IS_SHM(D3_FILE) THEN SHMUNMAP,'D3'
  IF IS_SHM(D3_INTERP_FILE) THEN SHMUNMAP,'D3'

;===> GET DIMENSIONS,MAP AND PROD FROM THE D3_FILE
  FA=PARSE_IT(D3_FILE,/ALL) & PX=LONG(FA.PX) & PY=LONG(FA.PY) & PZ=LONG(FA.PZ) & MAPP=FA.MAP & PROD=FA.PROD
  S_PXY  = VALIDS('PXY',   FA.NAME)               

;===> GET N_FILES FROM THE DB
  DB=STRUCT_READ(D3_DB_FILE) & N_FILES=NOF(DB) & IF KEY(VERBOSE) THEN PRINT,'N_FILES:  ' ,N_FILES

  JDS = PERIOD_2JD(DB.PERIOD)
  I_JDS = ULONG(INTERVAL([ULONG(MIN(JDS)),ULONG(MAX(JDS))],1)) 
  ; ===> GET PRODUCT INFO

;===> OPEN THE D3_INTERP_FILE FOR READING AND WRITING
  OPENU, D3_LUN, D3_INTERP_FILE, /GET_LUN

;===> MAP THE D3 ARRAY TO THE D3_INTERP_FILE
  SHMMAP ,'D3',/FLOAT,DIMENSION= [PX,PY,N_FILES] , FILENAME=D3_INTERP_FILE
;===> GET THE D3 ARR
  D3 = SHMVAR('D3')
  X = FINDGEN(PX)
  Y = FINDGEN(PY)
  Z = I_JDS; 
  TIC
  ;===> GET THE PRODUCT INFO TO DETERMINE IF A LOG-TRANSFORM IS REQUIRED
  PROD_INFO = PRODS_READ(PROD) 
  IF KEY(FIX(PROD_INFO.LOG)) THEN _STAT_TRANSFORM = 'ALOG'  
  IF KEY(STAT_TRANSFORM)     THEN _STAT_TRANSFORM = STAT_TRANSFORM                            
  IF(_STAT_TRANSFORM) EQ 'ALOG' THEN BEGIN
   D3[0] =EXP(INTERPOLATE(ALOG(D3), X,Y,Z, /GRID))
  ENDIF ELSE BEGIN
    D3[0] =INTERPOLATE(D3, X,Y,Z, /GRID)
  ENDELSE;IF(_STAT_TRANSFORM) EQ 'ALOG' THEN BEGIN
  TOC
;===> CLEAN UP

CLOSE,D3_LUN
FREE_LUN,D3_LUN
CLOSE,/ALL
IF IS_SHM(D3_INTERP_FILE) THEN SHMUNMAP,'D3'
GONE,D3
CLOSE,/ALL
GOTO,DONE;>>>>>>>>>>>>>>>>>>>>>

;######################################################################################################
;===> LOOP OVER ALL PIXELS TO GET EACH PSERIES
  IF KEY(VERBOSE) THEN TIC
  FOR YP = 0L,PY-1 DO BEGIN
    IF KEY(VERBOSE) THEN BEGIN & TOC & POF,YP,PY & TIC & ENDIF
    FOR XP = 0L,PX-1 DO BEGIN
      PSERIES = REFORM(D3(XP,YP,*))
      OK = WHERE(FINITE(PSERIES),COUNT)
      IF COUNT EQ 0 THEN CONTINUE ; >>> All pixels are MISSINGS or LAND
      PSERIES = PSERIES[OK]
      DAYS    = I_JDS-FIRST(I_JDS)
      _DAYS   = DAYS[OK]
      _JDS    = JDS[OK]
      
      IF N_ELEMENTS(PSERIES) LT N_GOOD THEN BEGIN                                             ; MUST HAVE AT LEAST N_GOOD POINTS IF NOT THEN MAKE MISSINGS
        D3(XP,YP,*) = MISSINGS(D3)
        CONTINUE  ; >>> NOT ENOUGH VALID PIXELS TO RUN THE INTERPOLATION STEP
      ENDIF;IF N_ELEMENTS(_PSERIES) LT 11 THEN BEGIN  
      
      IF KEY(_STAT_TRANSFORM) THEN PSERIES = ALOG(PSERIES)   
      STOP                                 ; TRANSFORM THE PSERIES 
      INTP = INTERPX(_DAYS, PSERIES, DAYS, HELP=HLP, BAD=BAD, GAP=GAP, FIXBAD=XBAD)           ; LINEARLY INTERPOLATE _PSERIES TO ALL THE DAYS IN THIS PSERIES
      SMO =   FILTER(INTP, FILT='TRICUBE', WIDTH=7)                                           ; SMOOTH INTP USING TRICUBE  
      BLANKED = D3_INTERP_BLANK(JD=_JDS,  INTERP_DATA=SMO, INTERP_JD=I_JDS, SPAN=SPAN)        ; BLANK OUT GAPS > BLANK DAYS
      IF KEY(_STAT_TRANSFORM) THEN BLANKED = EXP(BLANKED)                                     ; UNTRANSFORM THE INTERPOLATED PSERIES
      D3(XP,YP,*) = BLANKED                                                                   ; REPLACE D3 WITH THE INTERPOLATED-SMOOTHED-BLANKED PSERIES    
    
    ENDFOR;FOR XP = 0L,PX-1 DO BEGIN
  ENDFOR;FOR YP = 0L,PY-1 DO BEGIN
  IF KEY(VERBOSE) THEN TOC

;===>REPORT THE NUMBER OF MISSING VALUES IN THE D3 DATA ARRAY AFTER INTERP AND SMOOTHING
  IF KEY(VERBOSE) THEN BEGIN
    OK = WHERE(D3 EQ MISSINGS(D3),COUNT)
    TXT = 'FINAL # MISSING DATA IN D3.DATA =  '+ STR_COMMA(COUNT)
    PRINT, TXT
    PFILE,D3_INTERP_FILE
  ENDIF
  
;===> CLEAN UP
  IF IS_SHM(D3_INTERP_FILE) THEN SHMUNMAP,'D3'
  GONE,D3
  CLOSE,/ALL
  REPORT,'D3 IS DONE'
  DONE: 
           
END; #####################  END OF ROUTINE ################################
