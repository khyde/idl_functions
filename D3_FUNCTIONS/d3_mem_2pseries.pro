; $ID:	D3_MEM_2PSERIES.PRO,	2020-07-08-15,	USER-KJWH	$
;+
;#############################################################################################################
	PRO D3_MEM_2PSERIES,SHM_FILE,DIR_OUT=DIR_OUT,DATE_RANGE=DATE_RANGE,LAND_CODE=LAND_CODE,$
	                    VERBOSE=VERBOSE,SPAN=SPAN,NO_SAV=NO_SAV
;
; PURPOSE:  1) MAKES A PSERIES FROM A D3 SHARED-MEMORY FILE [SHM_FILE]
;           
; CATEGORY:	D3
;
; CALLING SEQUENCE: D3_MEM_2PSERIES,SHM_FILE
;
; INPUTS: SHM_FILE-  NAME OF THE D3-SHARED-MEMORY FILE MADE WITH D2_2D3         
;		
; OPTIONAL INPUTS: SEE KEYWORDS
;			
;		
; KEYWORD PARAMETERS: DIR_OUT - OUTPUT DIRECTORY FOR THE PSERIES FILE
;                     DATE_RANGE - RANGE OF DATES TO EXTRACT DATA FROM THE SHM_FILE MEMORY FILE
;                     LAND_CODE  - USUALLY -999.0 [APPLIED BY D2_MAKE TO DISTINGUISH LAND FROM CLOUDS [MISSING]
;		                  NO_SAV - DO NOT MAKE INTERPOLATED SAV FILES
;                     VERBOSE - ALLOW PRINTING OF PROGRAM PROGRESS
;                     SPAN - USED BY TS_INTERP_BLANK [ITS DEFAULT IS TO BLANK OUT DATA GAPS EXCEEDING 45 DAYS]

; OUTPUTS: A PSERIES [PIXEL TIME SERIES FILE]
;		

;
; MODIFICATION HISTORY:
;			FEB 23,2015,  WRITTEN BY J.O'REILLY
;			FEB 24,2015, JOR ADDED CHECK FOR LAND_CODE	
;			FEB 25,2015,JOR ADDED MEDIAN_FILL TO : ARR = MEDIAN_FILL(ARR, BOX=[3,7],MASK=LANDMASK)
;     FEB 26,2015,JOR CHANGED NAME TO 'D3-PXYZ' FOR CORRECT PARSING BY VALID_PXYZ
	
;			
;			
;#################################################################################
;-
;********************************
ROUTINE_NAME  = 'D3_MEM_2PSERIES'
;********************************

IF NONE(LAND_CODE) THEN LAND_CODE = -999.0
CLOSE,/ALL
;===> HARD-WIRED FOR  TESTING >>>
VERBOSE = 1
IF NONE(DIR_OUT) THEN DIR_OUT = !S.IDL_TEMP

FA = FILE_ALL(SHM_FILE) & PX = FA.PX & PY = FA.PY & PZ = FA.PZ & N_FILES = PZ & MAPP = FA.MAP & PROD = FA.PROD
;===> CONSTRUCT NAME FOR THE D2_INFO-DATABASE FILE
D2_INFO = REPLACE(SHM_FILE,['D3-PXYZ','_'+ ROUNDS(N_FILES),'-MEM','.FLT'],['D2_PXY','','-INFO','.SAV'])
;===> CONSTRUCT NAME FOR PSERIES FILE
PSERIES_FILE = REPLACE(SHM_FILE,'-MEM','-PSERIES')

IF FILE_TEST(D2_INFO) EQ 0 THEN MESSAGE,'ERROR: FILE NOT FOUND: '+ D2_INFO

IF NONE(DB) THEN DB = STRUCT_READ(D2_INFO)

;===> FIND RECORDS WITHIN DATE_RANGE
JD_RANGE = DATE_2JD(DATE_RANGE)
OK_RANGE = WHERE(DB.JD GE JD_RANGE[0] AND DB.JD LE JD_RANGE[1],N_FILES)
JDS = DB(OK_RANGE).JD
P

;===> OPEN THE SHM_FILE FOR READING 
OPENR, D3_LUN, SHM_FILE, /GET_LUN 
;|||||||||||||||||||||||||||||||||||
;===> MAP THE D3 ARRAY TO THE SHM_FILE
IF IS_SHM(SHM_FILE) THEN SHMUNMAP,'D3'
SHMMAP ,'D3',/FLOAT,DIMENSION= [PX,PY,N_FILES] , FILENAME=SHM_FILE
;===> GET THE D3 ARR
D3 = SHMVAR('D3')

;===> OPEN PSERIES FILE FOR WRITING
OPENW,LUN_PSERIES,PSERIES_FILE,/GET_LUN
;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
;===> GET THE DATABASE FILE [D2_INFO] FROM THE NAME OF THE D2_FILE
;FA = FILE_ALL(D2_FILE) & PX = FA.PX & PY = FA.PY  & MAPP = FA.MAP & PROD = FA.PROD
;===> LOOP OVER EVERY PIXEL X,Y COORDINATE
;FFFFFFFFFFFFFFFFFFFFFFFFFF
FOR YP = 0L,PY-1L DO BEGIN  
  POF,YP,PY
; FFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR XP = 0L,PX-1L DO BEGIN
    PSERIES = REFORM(D3(XP,YP,*))
    ;IF VERBOSE THEN PRINT,MM(PSERIES)
    ;===> WRITE THE RAW PSERIES BEFORE ANY INTERPOLATION OR SMOOTHING 
    WRITEU,LUN_PSERIES,PSERIES
    OK = WHERE(PSERIES NE MISSINGS(PSERIES) AND PSERIES NE LAND_CODE,COUNT)
    ;===> TS_SMOOTH MUST HAVE AT LEAST 11 POINTS
    IF COUNT LT 11 THEN  CONTINUE;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    
    PSERIES= PSERIES[OK]    
    DAYS = JDS-FIRST(JDS)
    _DAYS = DAYS[OK]
    _JDS=JDS[OK]
    ;===> SMOOTH JUST THE GOOD DATA USING TS_SMOOTH[AUTOREGRESSIVE MODEL]
    TS=TS_SMOOTH(PSERIES,5)
    
    ;===> NOW LINEARLY INTERPOLATE _PSERIES TO ALL THE DAYS IN THIS PSERIES
    INTP = INTERPX(_DAYS,TS,DAYS, HELP=HLP, BAD=BAD, GAP=GAP, FIXBAD=XBAD)
    
    ;===> SMOOTH INTP USING DANIELL
    SMO = FILTER(INTP,FILT='DANIELL')
    
    ;===> BLANK OUT GAPS > SPAN DAYS
    TS_INTERP_BLANK, JD=_JDS,  INTERP_DATA=SMO, INTERP_JD=JDS, SPAN=SPAN
    ;===> REPLACE D3 WITH THE INTERPOLATED-SMOOTHED PSERIES
    D3(XP,YP,*) = SMO
  ENDFOR;FOR XP = 0L,PX-1L DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
ENDFOR;FOR YP = 0L,PY-1L DO BEGIN 
;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

;######################################################################
;#####      MAKE SAVES FROM THE INTERPOLATED-SMOOTHED D3 ARRAY     #####
;######################################################################
IF NOT KEY(NO_SAV) THEN BEGIN
  ;===> GET THE LANDMASK FOR THIS MAPP FOR THE MEDIAN_FILL STEP
  LANDMASK = READ_LANDMASK(MAP = MAPP,/LAND)
  
  DIR_SAV = DIR_OUT + 'INTERP_SAVE'  + PATH_SEP() & DIR_TEST,DIR_SAV
  
  ;===> GET NAMES FROM THE DB FOR THE DATE_RANGE & 
  ;     SET ANY MISSING NAMES TO 'MISSING-0,1,2,3 ETC.
  NAMES = DB(OK_RANGE).NAME
  OK = WHERE(NAMES EQ '',COUNT) & IF COUNT GE 1 THEN NAMES[OK] = 'MISSING -'+ STRTRIM(SINDGEN(NOF[OK]),2)
  FILES =  NAMES 
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  FOR NTH = 0,N_FILES-1 DO BEGIN
    FILE = FILES[NTH]
    NAME = DIR_SAV + (FILE_PARSE(FILE)).NAME + '-INTERP.SAV'
    ARR = D3(*,*,NTH)
    ARR = MEDIAN_FILL(ARR, BOX=[3,7],MASK=LANDMASK)
    STRUCT_WRITE,ARR,FILE=NAME  
  ENDFOR;FOR NTH = 0,N_FILES-1 DO BEGIN
  ;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 
  
ENDIF;IF NOT KEY(NO_SAV) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
CLOSE,/ALL

;===> DESTROY THE MEMORY-MAPPED D3 SEGMENT
IF IS_SHM(SHM_FILE) THEN SHMUNMAP,'D3'


END; #####################  END OF ROUTINE ################################
