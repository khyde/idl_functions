; $ID:	READ_SHPFILE_DEMO.PRO,	2021-04-15-10,	USER-KJWH	$
; 
PRO READ_SHPFILE_DEMO

; #########################################################################; 
;+
; THIS IS A DEMO ROUTINE FOR READING SHAPEFILES


; HISTORY:
;     MAY 28, 2014  WRITTEN BY: J.E. O'REILLY
;     JUL  4, 2014 - JOR: TESTED
;     DEC  1, 2015 - KJWH: UPDATED
;     DEC 09, 2016 - KJWH: UPDATED DO_PLT_SHP_EACH (ALONG WITH SIGNIFICANT CHANGES TO PLT_SHP)
;     DEC 17, 2016 - JEOR: IF KEY(DO_PLT_SHP_ALL) THEN BEGIN
;                           PLT_SHP, FILE, MAPP=MAPP,COLOR=COLOR,FILL=1,THICK=THICK,VERBOSE=1
;     DEC 20, 2016 - KJWH: Removed MAP_SET, MAPP from DO_PLT_SHP_ALL (MAP_SET is now called in PLT_SHP)
;     FEB 19, 2017 - JEOR: RENAMED ROUTINE TO AGREE WITH PROGRAM NAME [PLT_SHP_DEMO]
;                          ADDED STEP DO_ECOREGIONS
;     JUN 13, 2017 - KJWH: Renamed to READ_SHPFILE_DEMO to be consistent with the newly renamed READ_SHPFILE 
;     JUN 21, 2017 - KJWH: Added DO_PLT_OUTLINE step                    
;-
; #########################################################################  

;************************
ROUTINE  = 'READ_SHPFILE_DEMO'
;************************


; ================>
; SWITCHES CONTROLLING WHICH PROCESSING STEPS TO DO:
  DO_READ_SHP       = 'YV'
  DO_PLT_OUTLINE    = ''
  DO_OVERPLOT       = ''
  DO_PLT_EEZ        = '' ; Plots the EEZ line

 SL = PATH_SEP()
 DIR_DEMO = !S.DEMO + ROUTINE + SL & DIR_TEST, DIR_DEMO
 
 
; **********************************
  IF KEY(DO_READ_SHP) THEN BEGIN
; **********************************
    SWITCHES,DO_READ_SHP,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
    
    CLR = 10
    , 'DO_READ_SHP'
    
    PRINT,'THIS STEP MAKES A NEC PNG FOR EACH SUBREGION WITHIN A SHAPE FILE' 
    REGIONS = ['NEFSC','NES_ECOREGIONS','NES_HALFDEGREE','NES_STOCKAREAS','LME66','LME66']
    NAMES = LIST(['BTS_STRATA','ECOMON_STRATA','FINAL_MASS_INSHORE_STAT','SHELLFISH_STRATA','STATISTICAL_AREAS_2010','STATISTICAL_AREAS_2010_WITHNAMES'],['NOESTUARIES','FULL','CORE'],['NES_HALFDEGREE'],['NES_STOCKAREAS'],['LMEs66'],['LMEs66'])
    MAPS  = ['NEC','L3B2','NEC','NEC','GEQ','NEC']
    FOR R=0, N_ELEMENTS(REGIONS)-1 DO BEGIN
      DIR = !S.IDL_SHAPEFILES + REGIONS(R) + SL & DIRP = DIR + 'PNGS' + SL & DIR_TEST, DIRP
      RNAMES = NAMES(R)
      MAPP = MAPS(R)
      MS = MAPS_SIZE(MAPP,PX=PX,PY=PY)
      LAND = READ_LANDMASK(MAPP)
      FOR N=0, N_ELEMENTS(RNAMES)-1 DO BEGIN
        FILES = FILE_SEARCH(DIR+'*'+RNAMES(N)+'.shp',COUNT=COUNT_FILES) & PL,FILES
        IF COUNT_FILES EQ 0 THEN CONTINUE
        STRUCT = READ_SHPFILE(FILES, MAPP=MAPP, COLOR=COLORS, OUTFILE=OUTFILE, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE)
        STAGS = TAG_NAMES(STRUCT)  
              
        FOR I=0, N_TAGS(STRUCT)-1 DO BEGIN  
          PNG = DIRP + STAGS(I) + '-' + MAPP + '.PNG'
          FULL_IMG = LAND
          TAGS = TAG_NAMES(STRUCT.(I))
          POS = WHERE_STRING(TAGS,['OUTLINE','COLORS'],COMPLEMENT=COMPLEMENT)
          TAGS = TAGS(COMPLEMENT)
          OUTLINE_SUBS = STRUCT.(I).(POS[0])
          CLRS = BINDGEN(N_TAGS(STRUCT.(I))+1)
          IF N_TAGS(STRUCT.(I)) LT 10 THEN CLRS = (CLRS+1)*20 ELSE CLRS = CLRS+10
          OUTSUBS = []
          FOR S=0, N_ELEMENTS(TAGS)-1 DO BEGIN          
            PNGFILE = DIRP + STAGS(I) + '-' + TAGS(S) + '-' + MAPP + '.PNG'
            IMG_SUBS = STRUCT.(I).(S).SUBS
            OSUBS = STRUCT.(I).(S).OUTLINE
            IM = LAND 
            IM(IMG_SUBS) = 230 
            IF TAGS(S) NE 'NES' THEN FULL_IMG(IMG_SUBS) = CLRS(S) ; Don't add the NES polygon to the merged map because it hides the other polygons
            IF FILE_MAKE(OUTFILE,PNGFILE,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
            PAL_LANDMASK,RR,GG,BB   
            IM(OSUBS) = 170
            WRITE_PNG,PNGFILE,IM,RR,GG,BB  &  PFILE,PNGFILE     
          ENDFOR  
          IF FILE_MAKE(OUTFILE,PNG,OVERWRITE=OVERWRITE) EQ 0 THEN CONTINUE
          PAL_LANDMASK,RR,GG,BB
          FULL_IMG(OUTLINE_SUBS) = 200
          WRITE_PNG, PNG, FULL_IMG, RR,GG,BB
          PFILE, PNG
        ENDFOR  
      ENDFOR ; NAME 
    ENDFOR ; REGION   
      
  , 'DO_PLT_SHP_EACH'
    
  ENDIF ; IF DO_PLT_SHP_EACH GE 1 THEN BEGIN
; ||||||||||||||||||||||||||||||||||||

; **********************************
  IF KEY(DO_PLT_OUTLINE) THEN BEGIN
; **********************************
    SWITCHES,DO_PLT_OUTLINE,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
  
    MAPP = 'GOMN'
    LAND = READ_LANDMASK(MAPP)
    CLR = 10
    , 'DO_ANIMATION'
  
    PRINT,'THIS STEP MAKES AN ANIMATION OF THE DRAWING OF THE SHAPEFILE VERTICES'
    REGIONS = ['NES_ECOREGIONS'];,'LME_64']
    NAMES = 'EPUS_CORE'
    EPUS   = [['GOM','GB','SS']+'_CORE','GB_SHELF']
    CLRS = ['RED','BLUE','CYAN','ORANGE']
    SZS  = [1.5, 1.2, 0.9,0.6]
    DIR  = FIX_PATH(!S.DEMO + ROUTINE + '/' + MAPP + '_MOVIE/')
    FDIR = FIX_PATH(DIR + 'FRAMS/') & DIR_TEST, FDIR
    FOR R=0, N_ELEMENTS(REGIONS)-1 DO BEGIN
      DIR = !S.IDL_SHAPEFILES + REGIONS(R) + SL
      
      FILES = FILE_SEARCH(DIR+'*'+NAMES+'.shp',COUNT=COUNT_FILES) & PL,FILES
      IF COUNT_FILES EQ 0 THEN STOP
      STRUCT = READ_SHPFILE(FILES, MAPP=MAPP, COLOR=COLORS, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE)
      STR    = STRUCT.(0)
      
      FOR F=0, N_ELEMENTS(EPUS)-1 DO BEGIN
        POS = WHERE(TAG_NAMES(STR) EQ STRUPCASE(EPUS(F)),/NULL,COUNT)
        LONS = STR.(POS).OUTLINE_LONS
        LATS = STR.(POS).OUTLINE_LATS
        P = PLOT(LONS,LATS,LINESTYLE=0,COLOR='GREY',THICK=2,XRANGE=[-72,-62],YRANGE=[39,46],XTITLE='Longitude',YTITLE='Latitude',TITLE='LAT/LON PLOT',CURRENT=F)
        FOR N=0, N_ELEMENTS(LONS)-1 DO BEGIN
          S = SYMBOL(LONS(N),LATS(N),SYM_COLOR=CLRS(F),/SYM_FILLED,SYMBOL='CIRCLE',SYM_SIZE=SZS(F),/DATA)
        ENDFOR
        WAIT, 2
      ENDFOR
      WAIT, 5
      P.CLOSE
    ENDFOR
  ENDIF    ; DO_PLT_OUTLINE
  
; **********************************
  IF KEY(DO_OVERPLOT) THEN BEGIN
; **********************************
    SWITCHES,DO_OVERPLOT,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF STOPP THEN STOP
    , 'DO_OVERPLOT'
    
    PRINT,'THIS STEP OVERPLOTS THE SUBAREA OUTLINE ON A DATA IMAGE'
    REGIONS = ['NES_ECOREGIONS']
    NAMES  = 'EPUS_CORE'
    EPUS   = [['GOM','GB','SS']+'_CORE','GB_SHELF']
    CSTAT  = !S.FILES + 'YY_2012_2016-MODISA-R2015-L3B2-CHLOR_A-OCI-STATS.SAV'
    CD = STRUCT_READ(CSTAT,STRUCT=CS)
    
    MAPP = ['GOMN','NEC']
    FOR M=0, N_ELEMENTS(MAPP)-1 DO BEGIN
      AMAP = MAPP(M)
      LAND = READ_LANDMASK(AMAP)
      CLR = 10
      
      PROD = 'CHLOR_A_0.03_30'
      CTITLE = 'Chlorophyll ' + UNITS('CHLOR_A',/NO_NAME)
      CBYT = PRODS_2BYTE(MAPS_REMAP(CS.MEAN,MAP_IN='L3B2',MAP_OUT=AMAP,BINS=CS.BINS),PROD=PROD,MP=AMAP,/ADD_COAST,/ADD_LAND)
  
      FOR R=0, N_ELEMENTS(REGIONS)-1 DO BEGIN
        DIR = !S.IDL_SHAPEFILES + REGIONS(R) + SL
  
        FILES = FILE_SEARCH(DIR+'*'+NAMES+'.shp',COUNT=COUNT_FILES) & PL,FILES
        IF COUNT_FILES EQ 0 THEN STOP
        STRUCT = READ_SHPFILE(FILES, MAPP=AMAP, COLOR=COLORS, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE)
        STR    = STRUCT.(0)
  
        OSUBS = []
        FOR F=0, N_ELEMENTS(EPUS)-1 DO BEGIN
          POS = WHERE(TAG_NAMES(STR) EQ STRUPCASE(EPUS(F)),/NULL,COUNT)
          LONS = STR.(POS).OUTLINE_LONS
          LATS = STR.(POS).OUTLINE_LATS
          OSUBS = [OSUBS,STR.(POS).OUTLINE]
          
        ENDFOR ; EPUS   
        BLANK = BYTE(MAPS_BLANK(AMAP,FILL=0))
        BLANK(OSUBS) = 1
        CDIL = IMG_DILATE(BLANK,COLOR=1,BOX=5,SUBS=CSUBS)
        CBYT(CSUBS) = 255
                    
        CP = IMAGE(CBYT,RGB_TABLE=CPAL_READ('PAL_BR'),POSITION=[0,0,480,480],DIMENSIONS=[480,480],/DEVICE)
        
      ENDFOR ; REGIONS
      WAIT, 5
      CP.CLOSE
    ENDFOR ; MAPP
  ENDIF    ; DO_OVERPLOT  
  
;*******************************
  IF KEY(DO_PLT_EEZ) THEN BEGIN
;******************************
    SWITCHES,DO_PLT_EEZ,STOPP=STOPP,OVERWRITE=OVERWRITE,VERBOSE=VERBOSE,INIT=INIT,R_FILES=R_FILES,R_DATASETS=R_DATASETS
    IF KEY(VERBOSE) THEN PRINT, 'THIS STEP PLOTS THE EEZ ON A NEC MAP'
    IF STOPP THEN STOP
  
    MAPP = 'NEC'
    LAND = READ_LANDMASK(MAPP)
    DIR = !S.IDL_SHAPEFILES + 'EEZ' + SL
    FILES = DIR + 'EEZ.shp'
    
    STRUCT = READ_SHPFILE(FILES, MAPP=MAPP, COLOR=COLORS, OVERWRITE=OVERWRITE, VERBOSE=VERBOSE)
    STAGS = TAG_NAMES(STRUCT)  
    ST,STRUCT
  
    FOR I=0, N_TAGS(STRUCT)-1 DO BEGIN  
      PNG = DIR + STAGS(I) + '.PNG'
      FULL_IMG = LAND
      TAGS = TAG_NAMES(STRUCT.(I))
      POS = WHERE_STRING(TAGS,['_OUTLINE','COLORS'],COMPLEMENT=COMPLEMENT)
      TAGS = TAGS(COMPLEMENT)
      OUTLINE_SUBS = STRUCT.(I).(POS[0])
      CLRS = BINDGEN(N_TAGS(STRUCT.(I))+1)
      IF N_TAGS(STRUCT.(I)) LT 10 THEN CLRS = (CLRS+1)*20 ELSE CLRS = CLRS+10
      FOR S=0, N_ELEMENTS(TAGS)-1 DO BEGIN
        PNGFILE = DIR + STAGS(I) + '-' + TAGS(S) + '.PNG'
        IMG_SUBS = STRUCT.(I).(S).SUBS
        OSUBS = STRUCT.(I).(S).OUTLINE
        IM = LAND 
        IM(IMG_SUBS) = 230 
        PAL_LANDMASK,RR,GG,BB
        IM(OUTLINE_SUBS) = 60
        IM(OSUBS) = 170
        WRITE_PNG,PNGFILE,IM,RR,GG,BB  &  PFILE,PNGFILE     
      ENDFOR  
   
      PAL_LANDMASK,RR,GG,BB
      FULL_IMG(OUTLINE_SUBS) = 50
      WRITE_PNG, PNG, FULL_IMG, R, G, B
      PFILE, PNG
    ENDFOR  
    IF STOPP THEN STOP

  ENDIF;IF KEY(DO_ECOREGIONS) THEN BEGIN
;|||||||||||||||||||||||||||||||||||||





END; #####################  END OF ROUTINE ################################
