; $ID:	IMAGE_PXPY.PRO,	2020-07-08-15,	USER-KJWH	$

FUNCTION IMAGE_PXPY,IMAGE, CENTER=CENTER, DOUBLE=DOUBLE
;+
; NAME:
;       IMAGE_PXPY
;
; PURPOSE: GENERATE A 2-D ARRAY OF PIXEL POSITIONS FOR AN IMAGE
;
;	KEYWORDS:
;			CENTER: GENERATES VALUES FOR THE CENTER OF EACH PIXEL (0.5)
;
; PROBLEMS: NOT YET WORKING FOR 3D ARRAY
; CALLING SEQUENCE:
;				IMAGE = BYTARR(1024,1024)
;       RESULT = IMAGE_PXPY(IMAGE)       ; PROVIDE AN IMAGE ARRAY
;				OR
;				RESULT = IMAGE_PXPY([1024,1024]) ; YOU MAY JUST PROVIDE DIMENSIONS OF IMAGE [SIZEXYZ DETERMINS PX,PY FROM THE DIMENSIONS]
;
;       WRITTEN BY:  J.E.O'REILLY, NOVEMBER 8,2000
;       JUL 29,2011, JOR REPLACED       PX = IMAGE[0] & PY = IMAGE[1] WITH       PX = IMAGE[0] & PY = IMAGE[1]
;       NOV 11,2011,JOR NOW USING SIZEXYZ
;       FEB 4,2012,JOR  PROBLEM:GEQ 2 NEC WORKS WHEN ONLY ONE # BUT GET NSANS WHEN MAP_IN = LATLON 


;-

	ROUTINE_NAME = 'IMAGE_PXPY'

; ===> DETERMINE SIZE OF IMAGE
  SZ=SIZEXYZ(IMAGE)
  PX = SZ.PX
  PY = SZ.PY


	IF KEYWORD_SET(DOUBLE) THEN VALUE = 1.0D ELSE VALUE = 1
; !ERROR= -153 IF NOT ENOUGH MEMORY
; 
; 
;	===> MAKE THE 2D ARRAYS
	IF NOT KEYWORD_SET(CENTER) THEN BEGIN
		RETURN, CREATE_STRUCT('X', LINDGEN(PX) # REPLICATE(VALUE,PY),  				'Y',  REPLICATE(VALUE,PX)  # LINDGEN(PY))
  ENDIF ELSE BEGIN
  	RETURN, CREATE_STRUCT('X',(LINDGEN(PX) # REPLICATE(VALUE,PY))  + 0.5, 'Y', (REPLICATE(VALUE,PX)  # LINDGEN(PY))  + 0.5)
  ENDELSE

END; #####################  END OF ROUTINE ################################
