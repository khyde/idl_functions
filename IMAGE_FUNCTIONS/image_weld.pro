; $ID:	IMAGE_WELD.PRO,	2020-06-30-17,	USER-KJWH	$
;#######################################################################################
FUNCTION IMAGE_WELD,FIRST_IMAGE,SECOND_IMAGE, LANDSCAPE=LANDSCAPE, PORTRAIT=PORTRAIT, $
  REVERSE=REVERSE,BACKGROUND=BACKGROUND,SPACE=SPACE,_EXTRA=_EXTRA

;+
;	THIS FUNCTION WELDS TWO IMAGES
;       THE SECOND IMAGE DOES NOT HAVE TO BE THE SAME SIZE AS THE FIRST
;       SINCE THE SECOND WILL BE SCALED TO BE AS WIDE AS THE FIRST IMAGE
;
; SYNTAX:
;	 	RESULT = IMAGE_WELD(FIRST_IMAGE, SECOND_IMAGE, PORTRAIT=PORTRAIT,LANDSCAPE=LANDSCAPE )
; OUTPUT:
;		A COMBINED IMAGE
; ARGUMENTS:
; 	FIRST_IMAGE:	FIRST IMAGE
; 	SECOND_IMAGE:	SECOND_IMAGE IMAGE
; KEYWORDS:
;		LANDSCAPE:	ADD SECOND TO RIGHT OF THE FIRST IMAGE (DEFAULT IS PORTRAIT)
;		SPACE:			SPACE (IN PIXELS) BETWEEN THE FIRST AND SECOND IMAGES
;		BACKGROUND:	VALUE (COLOR) FOR BACKGROUND (IF SPACE IS PROVIDED)
;		REVERSE:		REVERSES ORDER OF FIRST AND SECOND

; EXAMPLE:
;		I= DIST(200,256)    & J = DIST(200,200)
;   BOTH = IMAGE_WELD(I,J,BACKGROUND=0,SPACE=10)
;
;   BOTH = IMAGE_WELD(I,J,BACKGROUND=0,SPACE=10,/LANDSCAPE)
;
; VERSION:
;		MAR 21, 2001
; HISTORY:
;		AUGUST 19, 1999	WRITTEN BY:	J.E. O'REILLY, NOAA, 28 TARZWELL DRIVE, NARRAGANSETT, RI 02882
;		OCT 13, 2002 JOR. FIRST AND SECOND COPIED TO _FIRST, _SECOND SO NOT CORRUPTED
;		JUNE 4, 2003 JOR, SIMPLIFIED PROGRAM (8 AND 24BIT IMAGES)
;		SEPT 3, 2003 TD ADD PORTRAIT KEYWORD
;   SEPT 2 ,2014,JOR UPDATED WITH NEW FUNCTIONS, FORMATTED
;-
;**************************
ROUTINE_NAME='IMAGE_WELD'
;**************************

; ===> MUST PROVIDE FIRST AND SECOND AS IMAGE FILE NAMES OR ARRAYS
  IF NONE(FIRST_IMAGE)  THEN FIRST_IMAGE = DIALOG_PICKFILE()
  IF NONE(SECOND_IMAGE) THEN SECOND_IMAGE = DIALOG_PICKFILE()
  IF NONE(SPACE) 			  THEN _SPACE = 0 ELSE _SPACE = SPACE
  IF NONE(BACKGROUND) 	THEN _BACKGROUND = 255 ELSE _BACKGROUND = BACKGROUND ;

	IMAGE1=FIRST_IMAGE
	IMAGE2=SECOND_IMAGE

; ===> GET TYPE TO SEE IF FILENAMES OR ARRAYS
  SZ=SIZE(IMAGE1,/STRUCT) & TYPE = SZ.TYPE
  IF TYPE EQ 7 THEN IMAGE1 = READALL(IMAGE1)
  SZ_1=SIZE(IMAGE1,/STRUCT) & TYPE = SZ_1.TYPE
  IF TYPE LT 1 OR TYPE GT 5 THEN STOP

; ===> MAKE SURE IMAGES ARE BINARY,INTEGER,LONG,FLOAT,DOUBLE
  SZ=SIZE(IMAGE2,/STRUCT) & TYPE = SZ.TYPE
  IF TYPE EQ 7 THEN IMAGE2 = READALL(IMAGE2)
  SZ_2=SIZE(IMAGE2,/STRUCT) & TYPE = SZ_2.TYPE
  IF TYPE LT 1 OR TYPE GT 5 THEN STOP

; ===> DETERMINE IF NORMAL 2D OR TRUE COLOR (3,*,*)
  TRUE_COLOR_1 = SZ_1.N_DIMENSIONS EQ 3
  TRUE_COLOR_2 = SZ_2.N_DIMENSIONS EQ 3
  IF TRUE_COLOR_1 NE TRUE_COLOR_2 THEN STOP

; ===> GET SIZE OF IMAGE1
  PX_IMAGE1 = 1.0*SZ_1.DIMENSIONS(0+TRUE_COLOR_1)
  PY_IMAGE1 = 1.0*SZ_1.DIMENSIONS(1+TRUE_COLOR_1)

; ===> GET SIZE OF IMAGE2
  PX_IMAGE2 = SZ_2.DIMENSIONS(0+TRUE_COLOR_2)
  PY_IMAGE2 = SZ_2.DIMENSIONS(1+TRUE_COLOR_2)

; ===> PORTRAIT OR LANDSCAPE ?
  IF NOT KEY(LANDSCAPE) OR KEY(PORTRAIT) THEN BEGIN
    PX = LONG(PX_IMAGE1)
    PY = LONG(ROUND((PX_IMAGE1/PX_IMAGE2)*PY_IMAGE2))
  ENDIF ELSE BEGIN
  	PY = LONG(PY_IMAGE1)
    PX = LONG(ROUND((PY_IMAGE1/PY_IMAGE2)*PX_IMAGE2))
  ENDELSE

  IF TRUE_COLOR_1 THEN BEGIN
  	N_PLANES = 3
  ENDIF ELSE BEGIN
  	N_PLANES = 1
  	IMAGE1 	= REFORM(IMAGE1,1,PX_IMAGE1,PY_IMAGE1)
  	IMAGE2 	= REFORM(IMAGE2,1,PX_IMAGE2,PY_IMAGE2)
  ENDELSE

;	===> CONSERVE DATA TYPE OF IMAGE1 IMAGE
  SAMPLE = IMAGE1[0]
  IF SZ_1.TYPE EQ 1 THEN SAMPLE = 0B
  IF _SPACE GE 1 THEN  SAMPLE[*] = _BACKGROUND

; ===> MAKE A NEW IMAGE ARRAY TO HOLD BOTH IMAGES
  IF NOT KEYWORD_SET(LANDSCAPE) THEN  NEW = REPLICATE(SAMPLE,N_PLANES, (PX),(PY_IMAGE1+PY+ _SPACE)) ELSE $
	     																NEW = REPLICATE(SAMPLE,N_PLANES, (PX_IMAGE1+PX+ _SPACE),(PY))
	IMAGE2_ = REPLICATE(IMAGE2(0,0,0),N_PLANES,PX,PY)


;	LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL LOOP ON N_PLANES
	FOR PLANE = 0,N_PLANES-1 DO BEGIN
   	IMAGE2_(PLANE,*,*) = CONGRID(REFORM(IMAGE2(PLANE,*,*)), PX,PY,/MINUS_ONE)
  	IF NOT KEYWORD_SET(LANDSCAPE) THEN BEGIN
;  		====================>
   		IF NOT KEYWORD_SET(REVERSE) THEN BEGIN
     		NEW(PLANE,0,0) =  (IMAGE1(PLANE,*,*))
     		NEW(PLANE,0,PY_IMAGE1 + _SPACE) =  (IMAGE2_(PLANE,*,*))
   		ENDIF ELSE BEGIN
     		NEW(PLANE,0,0) =  (IMAGE2_(PLANE,*,*))
     		NEW(PLANE,0 ,PY + _SPACE ) =  (IMAGE1(PLANE,*,*))
   		ENDELSE
  	ENDIF ELSE BEGIN
;  		====================>
   		IF NOT KEYWORD_SET(REVERSE) THEN BEGIN
     		NEW(PLANE,0,0) =  (IMAGE1(PLANE,*,*))
     		NEW(PLANE,PX_IMAGE1 + _SPACE,0) =  (IMAGE2_(PLANE,*,*))
   		ENDIF ELSE BEGIN
     		NEW(PLANE,0,0) =  (IMAGE2_(PLANE,*,*))
     		NEW(PLANE,PX + _SPACE,0) =  (IMAGE1(PLANE,*,*))
   		ENDELSE
  	ENDELSE ; IF NOT KEYWORD_SET(LANDSCAPE) THEN BEGIN
  ENDFOR
 	RETURN, REFORM(NEW) ; REFORM REMOVES DEGENERATE LEADING DIMENSION IN AN 8-BIT (N_PLANES = 1) IMAGE

END; #####################  END OF ROUTINE ################################
