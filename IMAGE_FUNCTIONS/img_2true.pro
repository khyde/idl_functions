; $ID:	IMG_2TRUE.PRO,	2020-07-08-15,	USER-KJWH	$
;###############################################################################
FUNCTION IMG_2TRUE,IMAGE,R,G,B, PAL=PAL
;+
; NAME:
;       IMG_2TRUE
;
; PURPOSE:
;       CONVERT AN 8BIT 256 COLOR IMAGE INTO A 24BIT TRUE COLOR IMAGE
;       USING THE R,G,B X256 PALETTE PROVIDED.
;
; CATEGORY:
;       IMG FAMILY
;
; CALLING SEQUENCE:
;       RESULT = IMG_2TRUE(IMAGE) ; NO R,G,B SO WILL GET A TRUE COLOR GREY
;       RESULT = IMG_2TRUE(IMAGE,R,G,B)
;
; INPUTS:
;       IMAGE: A 2-DIMENSIONAL BYTE ARRAY
;       R:     AN ARRAY OF 256 BINARY VALUES REPRESENTING RED
;       G:     AN ARRAY OF 256 BINARY VALUES REPRESENTING GREEN
;       B:     AN ARRAY OF 256 BINARY VALUES REPRESENTING BLUE
;
; KEYWORD PARAMETERS:
;
; OUTPUTS:
;      A TRUE-COLOR 3 DIMINSIONAL IMAGE ARRAY (3 BY XSIZE BY YSIZE)
; SIDE EFFECTS:
;       NONE.

;
; MODIFICATION HISTORY:
;       WRITTEN BY:  J.E.O'REILLY, AUGUST 20,2000
;       JUL 3,2014,JOR MODIFIED FROM IMAGE_2TRUE
;       JUL 5,2014,JOR UPDATED WITH NEW FUNCTIONS, RETURN ERROR STRING
;-
;************************
ROUTINE_NAME ='IMG_2TRUE'
;************************

; ===> GET THE SIZE OF THE 2 DIMENSIONAL INPUT IMAGE ARRAY
  S=SIZE(IMAGE,/STRUCT)

; ===> ENSURE THAT INPUT IMAGE ARRAY IS 2 DIMENSIONS
  IF S.N_DIMENSIONS NE 2 THEN BEGIN
    ERROR =  'ERROR: INPUT IMAGE ARRAY IS NOT 2 DIMENSIONS'
    PRINT,ERROR
    RETURN, ERROR
  ENDIF;IF S.N_DIMENSIONS NE 2 THEN BEGIN

; ===> MAKE A 3,PX,PY BYTE ARRAY
  IMAGE_TRUE=BYTARR(3,S.DIMENSIONS[0],S.DIMENSIONS[1])

; ===> IF THE NAME OF A PALETTE IDL PROGRAM IS PROVIDED THEN
; EXECUTE PROGRAM TO GET THE R,G,B VALUES
  IF N_ELEMENTS(PAL) EQ 1 THEN  CALL_PROCEDURE,PAL,R,G,B

; ===> IF R,G,B NOT KNOW YET THEN USE IDL GREYSCALE PALETTE
  IF N_ELEMENTS(R) NE 256 OR N_ELEMENTS(G) NE 256 OR N_ELEMENTS(B) NE 256 THEN BEGIN
    LOADCT,0
    TVLCT,R,G,B,/GET
  ENDIF;IF N_ELEMENTS(R) NE 256 OR N_ELEMENTS(G) NE 256 OR N_ELEMENTS(B) NE 256 THEN BEGIN


; ===> FILL IMAGE_TRUE RED,GREEN,BLUE PLANES WITH APPROPRIATE VALUES
; BASED ON DATA IN INPUT IMAGE
  IMAGE_TRUE(0,*,*) = R(IMAGE)
  IMAGE_TRUE(1,*,*) = G(IMAGE)
  IMAGE_TRUE(2,*,*) = B(IMAGE)

; ===> RETURN THE TRUE COLOR IMAGE
  RETURN, IMAGE_TRUE

  END; #####################  END OF ROUTINE ################################
